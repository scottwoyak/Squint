/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Button.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Button.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".ButtonClass {\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 0.4em;\r\n  background-color: lightgray;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  padding-left: 0.5em;\r\n  padding-right: 0.5em;\r\n  padding-top: 0.2em;\r\n  padding-bottom: 0.2em;\r\n}\r\n\r\n.ButtonClass:hover:enabled {\r\n  background-color: rgb(231, 231, 231);\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Customize the label (the CheckboxLabel) */\r\n.CheckboxLabel {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 1.5em;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n/* Hide the browser's default checkbox */\r\n.CheckboxLabel input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n/* Create a custom checkbox */\r\n.Checkmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 1.1em;\r\n  width: 1.1em;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n/* When the checkbox is checked, add a blue background */\r\n.CheckboxLabel input:checked ~ .Checkmark {\r\n  background-color: #2196f3;\r\n}\r\n\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.Checkmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n\r\n/* Show the checkmark when checked */\r\n.CheckboxLabel input:checked ~ .Checkmark:after {\r\n  display: block;\r\n}\r\n\r\n/* Style the checkmark/indicator */\r\n.CheckboxLabel .Checkmark:after {\r\n  left: 0.3em;\r\n  top: 0.05em;\r\n  width: 0.3em;\r\n  height: 0.6em;\r\n  border: solid white;\r\n  border-width: 0 0.25em 0.25em 0;\r\n  -webkit-transform: rotate(45deg);\r\n  -ms-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css":
/*!**********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".ListBoxClass {\r\n  background-color: white;\r\n  overflow-y: scroll;\r\n  cursor: pointer;\r\n}\r\n\r\n.ListBoxItemClass {\r\n  padding: 0.25em;\r\n  user-select: none;\r\n}\r\n\r\n.ListBoxItemClass:hover {\r\n  background-color: powderblue;\r\n}\r\n\r\n.ListBoxItemSelectedClass,\r\n.ListBoxItemSelectedClass:hover {\r\n  background-color: steelblue;\r\n  color: white;\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".Menubar {\r\n  left: 0em;\r\n  top: 0em;\r\n  right: 0em;\r\n  color: black;\r\n  background-color: rgba(var(--main-color), 0.25);\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.Menubar > .MenuItem {\r\n  display: inline-block;\r\n  padding-right: 0.5em;\r\n  padding-left: 0.5em;\r\n  vertical-align: middle;\r\n}\r\n\r\n.Menu {\r\n  display: none;\r\n  position: fixed;\r\n  background-color: rgba(230, 230, 230, 0.9);\r\n  width: 15em;\r\n  box-shadow: 0px 0.5em 1em 0px rgba(0, 0, 0, 0.2);\r\n  z-index: 1;\r\n}\r\n\r\n.MenuItem {\r\n  color: black;\r\n  padding: 0.5em;\r\n  text-decoration: none;\r\n  display: block;\r\n  cursor: pointer;\r\n}\r\n\r\n.Menubar > .MenuItemDisabledClass {\r\n  color: gray;\r\n}\r\n\r\n.MenuItemDisabledClass {\r\n  color: gray;\r\n}\r\n\r\n.Menubar > .MenuItemHiddenClass {\r\n  display: none;\r\n}\r\n\r\n.MenuItemDisabledClass {\r\n  display: none;\r\n}\r\n\r\n.MenuItem .SliderRange {\r\n  width: 12em;\r\n}\r\n\r\n.MenuItem:hover {\r\n  background-color: rgba(200, 200, 255, 0.75);\r\n}\r\n\r\n/* Style we add or remove as menus are displayed or hidden */\r\n.MenuShow {\r\n  display: block;\r\n}\r\n\r\n.MenuItem .SliderLabel,\r\n.MenuItem .SliderColorSpan,\r\n.MenuItem .SliderValueSpan {\r\n  display: none;\r\n}\r\n\r\n.MenuItem .Checkbox {\r\n  float: left;\r\n}\r\n\r\n.Menubar .ImageMenuItem {\r\n  padding-top: 0.2em;\r\n  padding-bottom: 0em;\r\n  padding-left: 0.1em;\r\n  padding-right: 0.1em;\r\n}\r\n\r\n.Menubar .MenuItemImage {\r\n  width: 1em;\r\n  height: 1em;\r\n  padding: 0.3em;\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css":
/*!****************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#PathTracerApp #description {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  left: 2px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  border-radius: 5px;\r\n  font-size: 10pt;\r\n  font-family: arial;\r\n  color: white;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n}\r\n\r\n#PathTracerApp #drawTime {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 2px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  font-size: 8pt;\r\n  font-family: arial;\r\n  color: white;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n}\r\n\r\n#PathTracerApp #progressBar {\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  right: 0px;\r\n  height: 5px;\r\n  background-color: rgba(50, 205, 50, 0.75);\r\n}\r\n\r\n#PathTracerApp #modeButton {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 5px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  border-radius: 5px;\r\n  font-size: 10pt;\r\n  font-family: arial;\r\n  color: yellow;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n}\r\n\r\n#PathTracerApp .SliderLabel {\r\n  flex: 0 0 150px;\r\n}\r\n\r\n#PathTracerApp .SliderValueSpan {\r\n  flex: 0 0 80px;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #PathTracerApp #drawTime {\r\n    left: 4px;\r\n    top: 10px;\r\n    font-size: 16pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp #modeButton {\r\n    font-size: 20pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp #description {\r\n    font-size: 20pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp .SliderLabel {\r\n    flex: 0 0 300px;\r\n  }\r\n\r\n  #PathTracerApp .SliderValueSpan {\r\n    flex: 0 0 160px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css":
/*!**************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Customize the label (the RadiobuttonLabel) */\r\n.RadiobuttonLabel {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 1.4em;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n/* Hide the browser's default Radiobutton */\r\n.RadiobuttonLabel input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n/* Create a custom Radiobutton */\r\n.RadioCheckmark {\r\n  position: absolute;\r\n  top: 0.15em;\r\n  left: 0;\r\n  height: 1em;\r\n  width: 1em;\r\n  background-color: #f5f5f5;\r\n  border-radius: 50%;\r\n}\r\n\r\n/* When the Radiobutton is checked, add a blue background */\r\n.RadiobuttonLabel input:checked ~ .RadioCheckmark {\r\n  background-color: #2196f3;\r\n}\r\n\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.RadioCheckmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n\r\n/* Show the checkmark when checked */\r\n.RadiobuttonLabel input:checked ~ .RadioCheckmark:after {\r\n  display: block;\r\n}\r\n\r\n/* Style the checkmark/indicator */\r\n.RadiobuttonLabel .RadioCheckmark:after {\r\n  background: white;\r\n  top: 0.25em;\r\n  left: 0.25em;\r\n  width: 0.5em;\r\n  height: 0.5em;\r\n  border-radius: 50%;\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".SliderDiv {\r\n  display: flex;\r\n  align-items: stretch;\r\n  margin-top: 0.5em;\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.SliderLabel {\r\n  flex: 0 0 8em;\r\n  text-align: right;\r\n}\r\n\r\n.SliderRange {\r\n  flex: 1 1 13em;\r\n  -webkit-appearance: none;\r\n  outline: none;\r\n  border-radius: 1em;\r\n  height: 0.8em;\r\n  margin-top: 0.2em;\r\n  margin-left: 0.3em;\r\n  margin-right: 0.3em;\r\n  box-shadow: 0 0.1em 0.1em rgba(0, 0, 0, 0.3) inset;\r\n  border: gray;\r\n  border-style: solid;\r\n  border-width: 0.5px;\r\n  vertical-align: bottom;\r\n}\r\n\r\n.SliderRange::-webkit-slider-thumb {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n  width: 1.3em;\r\n  height: 1.3em;\r\n  border-radius: 50%;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  border-color: black;\r\n  background: linear-gradient(135deg, lightgreen, darkgreen);\r\n}\r\n\r\n.SliderRange::-moz-range-thumb {\r\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n  width: 1.3em;\r\n  height: 1.3em;\r\n  border-radius: 50%;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  border-color: black;\r\n  background: linear-gradient(135deg, lightgreen, darkgreen);\r\n  cursor: pointer;\r\n}\r\n\r\n.SliderColorSpan {\r\n  vertical-align: text-bottom;\r\n  flex: 0 0 1em;\r\n  width: 1em;\r\n  height: 1em;\r\n  margin-right: 0.3em;\r\n  margin-top: 0.1em;\r\n  border-radius: 50%;\r\n  border: gray;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n}\r\n\r\n.SliderValueSpan {\r\n  flex: 0 0 3em;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n#Slider .disabled {\r\n  color: gray;\r\n}\r\n\r\n#Slider .disabled::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n  border-color: gray;\r\n}\r\n\r\n#Slider .disabled::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n  border-color: gray;\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#SquintApp {\r\n  /* generated at https://www.w3schools.com/w3css/w3css_color_generator.asp */\r\n  --blue1: #fafdfd;\r\n  --blue2: #eff7fa;\r\n  --blue3: #deeff5;\r\n  --blue4: #cee7f0;\r\n  --blue5: #bde0eb;\r\n  --blue6: #add8e6;\r\n  --blue7: #8ec9dc;\r\n  --blue8: #6fbad3;\r\n  --blue9: #51abc9;\r\n  --blue10: #3999b9;\r\n  --blue11: #2f7f9a;\r\n\r\n  --pink1: #fffbfb;\r\n  --pink2: #fff1f3;\r\n  --pink3: #ffe2e7;\r\n  --pink4: #ffd4db;\r\n  --pink5: #ffc6ce;\r\n  --pink6: #ffb6c1;\r\n  --pink7: #ff8c9d;\r\n  --pink8: #ff6078;\r\n  --pink9: #ff3452;\r\n  --pink10: #ff082d;\r\n  --pink11: #db0021;\r\n\r\n  --view-bg-color: var(--blue6);\r\n  --view-button-color: var(--blue4);\r\n  --view-button-color-hover: var(--blue3);\r\n  --view-button-color-disabled: var(--blue4);\r\n  --view-button-textcolor-disabled: rgb(180, 180, 180);\r\n  --host-bg-color: var(--pink6);\r\n  --host-button-color: var(--pink4);\r\n  --host-button-color-hover: var(--pink3);\r\n\r\n  --corner-radius-large: 0.8em;\r\n  --corner-radius-medium: 0.6em;\r\n  --corner-radius-small: 0.4em;\r\n\r\n  --margin: 0.5em;\r\n\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n}\r\n\r\n#SquintApp #Panel {\r\n  flex: 0 0 300px;\r\n  display: block;\r\n  background-color: white;\r\n}\r\n\r\n#SquintApp .SliderLabel .disabled {\r\n  color: gray;\r\n}\r\n\r\n#SquintApp #Slider .disabled::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, lightgray);\r\n}\r\n\r\n/* menu item */\r\n#SquintApp #UserNameItemDiv {\r\n  position: absolute;\r\n  right: 0px;\r\n}\r\n\r\n#SquintApp #Video {\r\n  display: \"none\";\r\n  position: absolute;\r\n  left: 0em;\r\n  top: 2em;\r\n  width: 20%;\r\n  border: solid 0.1em;\r\n  border-color: white;\r\n  margin: 0.9em;\r\n}\r\n\r\n#SquintApp #VideoOverlay {\r\n  display: \"none\";\r\n  position: absolute;\r\n  left: 0em;\r\n  top: 2em;\r\n}\r\n\r\n#SquintApp #Canvas {\r\n  font-size: 1em;\r\n  flex-grow: 1;\r\n}\r\n\r\n#SquintApp #ModelTimerCanvas {\r\n  opacity: 0.5;\r\n  position: absolute;\r\n  right: 2em;\r\n  top: 3em;\r\n  border-radius: var(--corner-radius-small);\r\n  /* width set in the code based on height\r\n  width: 15em;\r\n  */\r\n  height: 3em;\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * Levels Panel\r\n *\r\n ********************************************************************/\r\n#SquintApp #LevelsPanelDiv {\r\n  position: absolute;\r\n  left: 1em;\r\n  bottom: 1em;\r\n  width: 20em;\r\n  height: 20em;\r\n  border: solid;\r\n  border-color: lightgray;\r\n  border-width: var(--margin);\r\n  background-color: lightgray;\r\n  margin: 0px;\r\n  display: none;\r\n  flex-direction: column;\r\n  font-size: smaller;\r\n  border-radius: var(--corner-radius-small);\r\n  cursor: move;\r\n}\r\n\r\n#SquintApp #LevelsPanelDiv .TitleClass {\r\n  color: white;\r\n  background-color: lightskyblue;\r\n  border-top-left-radius: var(--corner-radius-small);\r\n  border-top-right-radius: var(--corner-radius-small);\r\n  padding: var(--margin);\r\n}\r\n\r\n#SquintApp #LevelsPanelDiv #LevelsPanelCloseButton {\r\n  position: absolute;\r\n  right: var(--margin);\r\n  background-color: transparent;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  padding: 0px;\r\n}\r\n\r\n#SquintApp #LevelsPanelDiv #LevelsPanelCloseButton:hover {\r\n  color: rgba(255, 255, 255, 1);\r\n}\r\n\r\n#SquintApp #LevelsPanelDiv #AfterCanvas {\r\n  height: 0;\r\n  flex: 1 1 auto;\r\n  padding-top: var(--margin);\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * Chat Panel\r\n *\r\n ********************************************************************/\r\n#SquintApp #ChatPanelDiv {\r\n  position: absolute;\r\n  right: 1em;\r\n  top: 3em;\r\n  width: 30em;\r\n  height: 40em;\r\n  border: solid;\r\n  border-color: lightgray;\r\n  border-width: var(--margin);\r\n  background-color: lightgray;\r\n  margin: 0px;\r\n  display: none;\r\n  flex-direction: column;\r\n  font-size: smaller;\r\n  border-radius: var(--corner-radius-small);\r\n  cursor: move;\r\n}\r\n\r\n#SquintApp #ChatPanelDiv .TitleClass {\r\n  color: white;\r\n  background-color: lightskyblue;\r\n  border-top-left-radius: var(--corner-radius-small);\r\n  border-top-right-radius: var(--corner-radius-small);\r\n  padding: var(--margin);\r\n}\r\n\r\n#SquintApp #ChatPanelDiv #ChatPanelCloseButton {\r\n  position: absolute;\r\n  right: var(--margin);\r\n  background-color: transparent;\r\n  color: rgba(255, 255, 255, 0.5);\r\n  padding: 0px;\r\n}\r\n\r\n#SquintApp #ChatPanelDiv #ChatPanelCloseButton:hover {\r\n  color: rgba(255, 255, 255, 1);\r\n}\r\n\r\n#SquintApp #ChatPanelDiv #ViewersListBox {\r\n  flex: 1 0 auto; /* grow */\r\n  cursor: move;\r\n}\r\n\r\n#SquintApp #ChatPanelDiv #ChatListBox {\r\n  flex: 1 0 auto; /* grow */\r\n  cursor: move;\r\n}\r\n\r\n#SquintApp #ChatPanelDiv .ListBoxClass {\r\n  margin-bottom: var(--margin);\r\n}\r\n\r\n#SquintApp #ChatPanelDiv .ListBoxItemClass,\r\n#SquintApp #ChatPanelDiv .ListBoxItemSelectedClass,\r\n#SquintApp #ChatPanelDiv .ListBoxItemSelectedClass:hover {\r\n  background-color: white;\r\n  color: black;\r\n}\r\n\r\n#SquintApp #NotificationDiv {\r\n  position: absolute;\r\n  right: 1em;\r\n  bottom: 0px;\r\n  left: 50%;\r\n  height: 2 em;\r\n  text-align: right;\r\n  animation: fadeOut 3s ease 1s forwards;\r\n  text-shadow: 0 0 3px #ffffff; /* white glow */\r\n}\r\n\r\n@keyframes fadeOut {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n#SquintApp .DialogBackgroundClass {\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1; /* Sit on top */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  background-color: rgb(0, 0, 0, 0.4);\r\n  display: none;\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * Welcome Dialog\r\n *\r\n ********************************************************************/\r\n#SquintApp #WelcomeDialogDiv {\r\n  width: 25em;\r\n  height: 25em;\r\n  background-color: white;\r\n  border-radius: var(--corner-radius-medium);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n#SquintApp #WelcomeDialogBackgroundDiv {\r\n  background-color: rgb(160, 160, 160);\r\n}\r\n\r\n/* non-phone displays */\r\n@media (max-resolution: 192dpi) {\r\n  #SquintApp #WelcomeDialogDiv {\r\n    width: 30em;\r\n    height: 30em;\r\n  }\r\n}\r\n\r\n#SquintApp #WelcomeDialogDiv #TitleDiv {\r\n  font-weight: bold;\r\n  font-size: 1.75em;\r\n  flex: 1 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #WelcomeDialogDiv #SquintImg {\r\n  width: 100%;\r\n}\r\n\r\n#SquintApp #WelcomeDialogDiv #UserNameGroupDiv {\r\n  height: 4em;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #WelcomeDialogDiv #UserNameTextInput {\r\n  margin-right: 1em;\r\n  margin-left: 1em;\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * Start Dialog\r\n *\r\n ********************************************************************/\r\n#SquintApp #StartDialogBackgroundDiv {\r\n  background-color: rgb(160, 160, 160);\r\n}\r\n\r\n#SquintApp #StartDialogDiv {\r\n  flex-direction: column;\r\n  display: flex;\r\n  width: 60%;\r\n  height: 60%;\r\n  background-color: white;\r\n  border-radius: var(--corner-radius-large);\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  #SquintApp #StartDialogDiv {\r\n    width: 70%;\r\n    height: 70%;\r\n  }\r\n\r\n  #SquintApp #StartDialogDiv #DialogBodyDiv {\r\n    flex-direction: row;\r\n  }\r\n}\r\n@media (orientation: portrait) {\r\n  #SquintApp #StartDialogDiv #DialogBodyDiv {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n#SquintApp #StartDialogDiv #DialogTitleDiv {\r\n  border-top-left-radius: var(--corner-radius-large);\r\n  border-top-right-radius: var(--corner-radius-large);\r\n  background-color: lightgray;\r\n  padding-left: 0.7em;\r\n  padding-right: 0.7em;\r\n  padding-top: var(--margin);\r\n  padding-bottom: var(--margin);\r\n  display: flex;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #TitleDiv {\r\n  font-weight: bold;\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: left;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ConnectingTextDiv {\r\n  color: white;\r\n  padding-right: 1em;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ConnectingAnimationDiv {\r\n  zoom: 0.2;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #DialogBodyDiv {\r\n  display: flex;\r\n  background-color: white;\r\n  border-bottom-right-radius: var(--corner-radius-medium);\r\n  border-bottom-left-radius: var(--corner-radius-medium);\r\n  flex: 1 1;\r\n  position: relative;\r\n}\r\n\r\n#SquintApp #StartDialogDiv .ButtonDivClass {\r\n  text-align: right;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ViewPanelDiv {\r\n  flex: auto;\r\n  padding: var(--margin);\r\n  margin: var(--margin);\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--view-bg-color);\r\n  border-radius: var(--corner-radius-medium);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ViewButton {\r\n  flex: 0 1 auto;\r\n  margin-top: 0.25em;\r\n  background-color: var(--view-button-color);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ViewButton:hover {\r\n  background-color: var(--view-button-color-hover);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ViewButton:disabled {\r\n  background-color: var(--view-button-color-disabled);\r\n  color: var(--view-button-textcolor-disabled);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #ViewListBox {\r\n  margin-top: 0.25em;\r\n  margin-bottom: 0.25em;\r\n  flex: 1 1 auto;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #OrPanelDiv {\r\n  align-items: center;\r\n  justify-content: center;\r\n  display: flex;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #OrDiv {\r\n  padding: 1em;\r\n}\r\n\r\n#SquintApp #StartDialogDiv #HostPanelDiv {\r\n  flex: auto;\r\n  padding: var(--margin);\r\n  margin: var(--margin);\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--host-bg-color);\r\n  border-radius: var(--corner-radius-medium);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #HostImageDiv {\r\n  flex: 1 0 auto; /* stretch */\r\n}\r\n\r\n#SquintApp #StartDialogDiv #HostButton {\r\n  background-color: var(--host-button-color);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #HostButton:hover {\r\n  background-color: var(--host-button-color-hover);\r\n}\r\n\r\n#SquintApp #StartDialogDiv #NameInputText {\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n}\r\n\r\n#SquintApp #StartDialogDiv .icon {\r\n  flex: 1 0 auto; /* stretch */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  zoom: 1.5;\r\n}\r\n\r\n#SquintApp #StartDialogDiv .icon .camera-icon {\r\n  background: #626262;\r\n  height: 4em;\r\n  width: 6em;\r\n  border-radius: var(--corner-radius-medium);\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n#SquintApp #StartDialogDiv .icon .camera-icon .camera-circle {\r\n  width: 2em;\r\n  height: 2em;\r\n  border: 0.5em solid #fff;\r\n  border-radius: 50%;\r\n}\r\n#SquintApp #StartDialogDiv .icon .camera-icon .camera-btn {\r\n  width: 0.5em;\r\n  height: 0.5em;\r\n  background: #fff;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  right: 0.5em;\r\n  top: 0.5em;\r\n}\r\n#SquintApp #StartDialogDiv .icon .camera-icon:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: -0.4em;\r\n  background: #626262;\r\n  width: 3em;\r\n  height: 0.7em;\r\n  border-top-right-radius: 1.5em;\r\n  border-top-left-radius: 1.5em;\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * User Name Dialog\r\n *\r\n ********************************************************************/\r\n#SquintApp #UserNameDialogDiv {\r\n  width: 25em;\r\n  height: 7em;\r\n  background-color: white;\r\n  border-radius: var(--corner-radius-medium);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#SquintApp #UserNameDialogDiv #UserNameGroupDiv {\r\n  flex: 1 0 auto; /* stretch */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #UserNameDialogDiv #UserNameTextInput {\r\n  margin-right: var(--margin);\r\n  margin-left: var(--margin);\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * Session Setup Dialog\r\n *\r\n ********************************************************************/\r\n#SquintApp #SessionSetupDialogDiv {\r\n  width: 25em;\r\n  height: 7em;\r\n  background-color: white;\r\n  border-radius: var(--corner-radius-medium);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#SquintApp #SessionSetupDialogDiv #PasswordGroupDiv {\r\n  flex: 1 0 auto; /* stretch */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #SessionSetupDialogDiv #PasswordTextInput {\r\n  margin-right: var(--margin);\r\n  margin-left: var(--margin);\r\n}\r\n\r\n/********************************************************************\r\n *\r\n * Password Dialog\r\n *\r\n ********************************************************************/\r\n#SquintApp #PasswordDialogDiv {\r\n  width: 25em;\r\n  height: 7em;\r\n  background-color: white;\r\n  border-radius: var(--corner-radius-medium);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#SquintApp #PasswordDialogDiv #PasswordGroupDiv {\r\n  flex: 1 0 auto; /* stretch */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #PasswordDialogDiv #PasswordTextInput {\r\n  margin-right: var(--margin);\r\n  margin-left: var(--margin);\r\n}\r\n\r\n#SquintApp #PasswordDialogDiv #ButtonGroupDiv {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin: var(--margin);\r\n}\r\n\r\n#SquintApp #PasswordDialogDiv #ButtonGroupDiv .ButtonClass {\r\n  margin-right: var(--margin);\r\n}\r\n\r\n/* cool animation from https://loading.io/css/ */\r\n.lds-ring {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 80px;\r\n}\r\n.lds-ring div {\r\n  box-sizing: border-box;\r\n  display: block;\r\n  position: absolute;\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 8px;\r\n  border: 8px solid #fff;\r\n  border-radius: 50%;\r\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n  border-color: #fff transparent transparent transparent;\r\n}\r\n.lds-ring div:nth-child(1) {\r\n  animation-delay: -0.45s;\r\n}\r\n.lds-ring div:nth-child(2) {\r\n  animation-delay: -0.3s;\r\n}\r\n.lds-ring div:nth-child(3) {\r\n  animation-delay: -0.15s;\r\n}\r\n@keyframes lds-ring {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n#SquintApp .MenuItem .SliderValueSpan {\r\n  display: flex;\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Style the tab */\r\n.Tabs {\r\n  overflow: hidden;\r\n}\r\n\r\n/* Style the buttons that are used to open the tab content */\r\n.Tabs button {\r\n  background-color: #fff;\r\n  float: left;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  padding: 10px 20px;\r\n  color: #333;\r\n}\r\n\r\n/* Change background color of buttons on hover */\r\n.Tabs button:hover {\r\n  background-color: #ddd;\r\n  color: #000;\r\n}\r\n\r\n/* Create an active/current tablink class */\r\n.Tabs button.active {\r\n  background-color: #eee;\r\n  color: #000;\r\n}\r\n\r\n/* Style the tab content */\r\n.TabContent {\r\n  display: none;\r\n  padding: 20px 12px;\r\n  background-color: #eee;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .Tabs button {\r\n    padding: 20px 40px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#ViewerApp #PerspectiveCanvas {\r\n  background-color: rgb(114, 117, 134);\r\n  height: 100px;\r\n  width: 100%;\r\n}\r\n\r\n#ViewerApp #ValuePlanesPanel {\r\n  height: 154px;\r\n  width: 100%;\r\n}\r\n\r\n#ValuePlanesPanel .SlidersDiv {\r\n  position: absolute;\r\n  left: 0px;\r\n  right: 154px;\r\n}\r\n\r\n#ValuePlanesPanel #LightLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #LightLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #MidLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #MidLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #DarkLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #DarkLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #ValuePlanesCanvas {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: rgb(128, 128, 150);\r\n}\r\n\r\n#ValuePlanesPanel #ValuePlanesOverlayCanvas {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: transparent;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #ViewerApp #PerspectiveCanvas {\r\n    height: 200px;\r\n  }\r\n\r\n  #ViewerApp #ValuePlanesPanel {\r\n    height: 308px;\r\n  }\r\n\r\n  #ValuePlanesPanel .SlidersDiv {\r\n    right: 308px;\r\n  }\r\n\r\n  #ValuePlanesPanel #ValuePlanesCanvas {\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n\r\n  #ValuePlanesPanel #ValuePlanesOverlayCanvas {\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
var ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Menu.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css");
var ___CSS_LOADER_AT_RULE_IMPORT_1___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Slider.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css");
var ___CSS_LOADER_AT_RULE_IMPORT_2___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Tabs.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css");
var ___CSS_LOADER_AT_RULE_IMPORT_3___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Checkbox.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css");
var ___CSS_LOADER_AT_RULE_IMPORT_4___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Radiobutton.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css");
var ___CSS_LOADER_AT_RULE_IMPORT_5___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./ListBox.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css");
var ___CSS_LOADER_AT_RULE_IMPORT_6___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Button.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Button.css");
var ___CSS_LOADER_AT_RULE_IMPORT_7___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./PathTracerApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css");
var ___CSS_LOADER_AT_RULE_IMPORT_8___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./ViewerApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css");
var ___CSS_LOADER_AT_RULE_IMPORT_9___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./SquintApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css");
exports = ___CSS_LOADER_API_IMPORT___(false);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_1___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_2___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_3___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_4___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_5___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_6___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_7___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_8___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_9___);
// Module
exports.push([module.i, "* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\n/*\r\n * Our strategy for handling multiple devices is to set the font size and \r\n * then scale everything else based on em's. The variables below are set\r\n * within the Javascript code based on the platform, browser, and orientation\r\n */\r\n* {\r\n  font-size: var(--fontSize);\r\n}\r\n\r\n/* for some reason inputs don't respond to our global font size, so manually set them */\r\ninput {\r\n  font-size: 1em;\r\n}\r\nbutton {\r\n  font-size: 1em;\r\n}\r\n\r\n:root {\r\n  --main-color: 114, 117, 134;\r\n}\r\n\r\nbody {\r\n  margin: 0px;\r\n  scrollbar-width: none;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.Container {\r\n  position: relative;\r\n}\r\n\r\n.FlexContainer {\r\n  display: flex;\r\n}\r\n\r\n#MainCanvas {\r\n  background-color: rgb(114, 117, 134);\r\n}\r\n\r\n.Overlay {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  font-size: 40px;\r\n  text-align: center;\r\n  color: white;\r\n  background-color: transparent;\r\n  user-select: none;\r\n  pointer-events: none;\r\n}\r\n\r\n/* hide panels by default - users show them via menus */\r\n.Panel {\r\n  display: none;\r\n}\r\n\r\n.Panel #ExitButton {\r\n  position: absolute;\r\n  display: inline-block;\r\n  width: 20px;\r\n  right: 0;\r\n  top: 0;\r\n  cursor: pointer;\r\n  color: lightgray;\r\n  z-index: 1;\r\n}\r\n\r\n.ViewerApp #ExitButton:hover {\r\n  color: red;\r\n}\r\n\r\n#Console {\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  bottom: 0px;\r\n  right: 0px;\r\n  background-color: darkblue;\r\n  color: white;\r\n  font-size: smaller;\r\n  display: none;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .Panel #ExitButton {\r\n    width: 40px;\r\n  }\r\n\r\n  .OverlayAnnotation {\r\n    font-size: 20pt;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/nosleep.js/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/nosleep.js/src/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const { webm, mp4 } = __webpack_require__(/*! ./media.js */ "./node_modules/nosleep.js/src/media.js");

// Detect iOS browsers < version 10
const oldIOS =
  typeof navigator !== "undefined" &&
  parseFloat(
    (
      "" +
      (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(
        navigator.userAgent
      ) || [0, ""])[1]
    )
      .replace("undefined", "3_2")
      .replace("_", ".")
      .replace("_", "")
  ) < 10 &&
  !window.MSStream;

// Detect native Wake Lock API support
const nativeWakeLock = "wakeLock" in navigator;

class NoSleep {
  constructor() {
    if (nativeWakeLock) {
      this._wakeLock = null;
      const handleVisibilityChange = () => {
        if (this._wakeLock !== null && document.visibilityState === "visible") {
          this.enable();
        }
      };
      document.addEventListener("visibilitychange", handleVisibilityChange);
      document.addEventListener("fullscreenchange", handleVisibilityChange);
    } else if (oldIOS) {
      this.noSleepTimer = null;
    } else {
      // Set up no sleep video element
      this.noSleepVideo = document.createElement("video");

      this.noSleepVideo.setAttribute("title", "No Sleep");
      this.noSleepVideo.setAttribute("playsinline", "");

      this._addSourceToVideo(this.noSleepVideo, "webm", webm);
      this._addSourceToVideo(this.noSleepVideo, "mp4", mp4);

      this.noSleepVideo.addEventListener("loadedmetadata", () => {
        if (this.noSleepVideo.duration <= 1) {
          // webm source
          this.noSleepVideo.setAttribute("loop", "");
        } else {
          // mp4 source
          this.noSleepVideo.addEventListener("timeupdate", () => {
            if (this.noSleepVideo.currentTime > 0.5) {
              this.noSleepVideo.currentTime = Math.random();
            }
          });
        }
      });
    }
  }

  _addSourceToVideo(element, type, dataURI) {
    var source = document.createElement("source");
    source.src = dataURI;
    source.type = `video/${type}`;
    element.appendChild(source);
  }

  enable() {
    if (nativeWakeLock) {
      navigator.wakeLock
        .request("screen")
        .then((wakeLock) => {
          this._wakeLock = wakeLock;
          console.log("Wake Lock active.");
          this._wakeLock.addEventListener("release", () => {
            // ToDo: Potentially emit an event for the page to observe since
            // Wake Lock releases happen when page visibility changes.
            // (https://web.dev/wakelock/#wake-lock-lifecycle)
            console.log("Wake Lock released.");
          });
        })
        .catch((err) => {
          console.error(`${err.name}, ${err.message}`);
        });
    } else if (oldIOS) {
      this.disable();
      console.warn(`
        NoSleep enabled for older iOS devices. This can interrupt
        active or long-running network requests from completing successfully.
        See https://github.com/richtr/NoSleep.js/issues/15 for more details.
      `);
      this.noSleepTimer = window.setInterval(() => {
        if (!document.hidden) {
          window.location.href = window.location.href.split("#")[0];
          window.setTimeout(window.stop, 0);
        }
      }, 15000);
    } else {
      this.noSleepVideo.play();
    }
  }

  disable() {
    if (nativeWakeLock) {
      this._wakeLock.release();
      this._wakeLock = null;
    } else if (oldIOS) {
      if (this.noSleepTimer) {
        console.warn(`
          NoSleep now disabled for older iOS devices.
        `);
        window.clearInterval(this.noSleepTimer);
        this.noSleepTimer = null;
      }
    } else {
      this.noSleepVideo.pause();
    }
  }
}

module.exports = NoSleep;


/***/ }),

/***/ "./node_modules/nosleep.js/src/media.js":
/*!**********************************************!*\
  !*** ./node_modules/nosleep.js/src/media.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  webm:
    "data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=",
  mp4:
    "data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACKBtZGF0AAAC8wYF///v3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE0MiByMjQ3OSBkZDc5YTYxIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTEgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9MiBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0wIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MCA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0wIHRocmVhZHM9NiBsb29rYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFjZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJhbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdlaWdodHA9MSBrZXlpbnQ9MzAwIGtleWludF9taW49MzAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD0xMCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIwLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IHZidl9tYXhyYXRlPTIwMDAwIHZidl9idWZzaXplPTI1MDAwIGNyZl9tYXg9MC4wIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAOWWIhAA3//p+C7v8tDDSTjf97w55i3SbRPO4ZY+hkjD5hbkAkL3zpJ6h/LR1CAABzgB1kqqzUorlhQAAAAxBmiQYhn/+qZYADLgAAAAJQZ5CQhX/AAj5IQADQGgcIQADQGgcAAAACQGeYUQn/wALKCEAA0BoHAAAAAkBnmNEJ/8ACykhAANAaBwhAANAaBwAAAANQZpoNExDP/6plgAMuSEAA0BoHAAAAAtBnoZFESwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBnqVEJ/8ACykhAANAaBwAAAAJAZ6nRCf/AAsoIQADQGgcIQADQGgcAAAADUGarDRMQz/+qZYADLghAANAaBwAAAALQZ7KRRUsK/8ACPkhAANAaBwAAAAJAZ7pRCf/AAsoIQADQGgcIQADQGgcAAAACQGe60Qn/wALKCEAA0BoHAAAAA1BmvA0TEM//qmWAAy5IQADQGgcIQADQGgcAAAAC0GfDkUVLCv/AAj5IQADQGgcAAAACQGfLUQn/wALKSEAA0BoHCEAA0BoHAAAAAkBny9EJ/8ACyghAANAaBwAAAANQZs0NExDP/6plgAMuCEAA0BoHAAAAAtBn1JFFSwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBn3FEJ/8ACyghAANAaBwAAAAJAZ9zRCf/AAsoIQADQGgcIQADQGgcAAAADUGbeDRMQz/+qZYADLkhAANAaBwAAAALQZ+WRRUsK/8ACPghAANAaBwhAANAaBwAAAAJAZ+1RCf/AAspIQADQGgcAAAACQGft0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bm7w0TEM//qmWAAy4IQADQGgcAAAAC0Gf2kUVLCv/AAj5IQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHAAAAAkBn/tEJ/8ACykhAANAaBwAAAANQZvgNExDP/6plgAMuSEAA0BoHCEAA0BoHAAAAAtBnh5FFSwr/wAI+CEAA0BoHAAAAAkBnj1EJ/8ACyghAANAaBwhAANAaBwAAAAJAZ4/RCf/AAspIQADQGgcAAAADUGaJDRMQz/+qZYADLghAANAaBwAAAALQZ5CRRUsK/8ACPkhAANAaBwhAANAaBwAAAAJAZ5hRCf/AAsoIQADQGgcAAAACQGeY0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bmmg0TEM//qmWAAy5IQADQGgcAAAAC0GehkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGepUQn/wALKSEAA0BoHAAAAAkBnqdEJ/8ACyghAANAaBwAAAANQZqsNExDP/6plgAMuCEAA0BoHCEAA0BoHAAAAAtBnspFFSwr/wAI+SEAA0BoHAAAAAkBnulEJ/8ACyghAANAaBwhAANAaBwAAAAJAZ7rRCf/AAsoIQADQGgcAAAADUGa8DRMQz/+qZYADLkhAANAaBwhAANAaBwAAAALQZ8ORRUsK/8ACPkhAANAaBwAAAAJAZ8tRCf/AAspIQADQGgcIQADQGgcAAAACQGfL0Qn/wALKCEAA0BoHAAAAA1BmzQ0TEM//qmWAAy4IQADQGgcAAAAC0GfUkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGfcUQn/wALKCEAA0BoHAAAAAkBn3NEJ/8ACyghAANAaBwhAANAaBwAAAANQZt4NExC//6plgAMuSEAA0BoHAAAAAtBn5ZFFSwr/wAI+CEAA0BoHCEAA0BoHAAAAAkBn7VEJ/8ACykhAANAaBwAAAAJAZ+3RCf/AAspIQADQGgcAAAADUGbuzRMQn/+nhAAYsAhAANAaBwhAANAaBwAAAAJQZ/aQhP/AAspIQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHAAACiFtb292AAAAbG12aGQAAAAA1YCCX9WAgl8AAAPoAAAH/AABAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAGGlvZHMAAAAAEICAgAcAT////v7/AAAF+XRyYWsAAABcdGtoZAAAAAPVgIJf1YCCXwAAAAEAAAAAAAAH0AAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAygAAAMoAAAAAACRlZHRzAAAAHGVsc3QAAAAAAAAAAQAAB9AAABdwAAEAAAAABXFtZGlhAAAAIG1kaGQAAAAA1YCCX9WAgl8AAV+QAAK/IFXEAAAAAAAtaGRscgAAAAAAAAAAdmlkZQAAAAAAAAAAAAAAAFZpZGVvSGFuZGxlcgAAAAUcbWluZgAAABR2bWhkAAAAAQAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAAE3HN0YmwAAACYc3RzZAAAAAAAAAABAAAAiGF2YzEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAygDKAEgAAABIAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY//8AAAAyYXZjQwFNQCj/4QAbZ01AKOyho3ySTUBAQFAAAAMAEAAr8gDxgxlgAQAEaO+G8gAAABhzdHRzAAAAAAAAAAEAAAA8AAALuAAAABRzdHNzAAAAAAAAAAEAAAABAAAB8GN0dHMAAAAAAAAAPAAAAAEAABdwAAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAAC7gAAAAAQAAF3AAAAABAAAAAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAEEc3RzegAAAAAAAAAAAAAAPAAAAzQAAAAQAAAADQAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAANAAAADQAAAQBzdGNvAAAAAAAAADwAAAAwAAADZAAAA3QAAAONAAADoAAAA7kAAAPQAAAD6wAAA/4AAAQXAAAELgAABEMAAARcAAAEbwAABIwAAAShAAAEugAABM0AAATkAAAE/wAABRIAAAUrAAAFQgAABV0AAAVwAAAFiQAABaAAAAW1AAAFzgAABeEAAAX+AAAGEwAABiwAAAY/AAAGVgAABnEAAAaEAAAGnQAABrQAAAbPAAAG4gAABvUAAAcSAAAHJwAAB0AAAAdTAAAHcAAAB4UAAAeeAAAHsQAAB8gAAAfjAAAH9gAACA8AAAgmAAAIQQAACFQAAAhnAAAIhAAACJcAAAMsdHJhawAAAFx0a2hkAAAAA9WAgl/VgIJfAAAAAgAAAAAAAAf8AAAAAAAAAAAAAAABAQAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACsm1kaWEAAAAgbWRoZAAAAADVgIJf1YCCXwAArEQAAWAAVcQAAAAAACdoZGxyAAAAAAAAAABzb3VuAAAAAAAAAAAAAAAAU3RlcmVvAAAAAmNtaW5mAAAAEHNtaGQAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAidzdGJsAAAAZ3N0c2QAAAAAAAAAAQAAAFdtcDRhAAAAAAAAAAEAAAAAAAAAAAACABAAAAAArEQAAAAAADNlc2RzAAAAAAOAgIAiAAIABICAgBRAFQAAAAADDUAAAAAABYCAgAISEAaAgIABAgAAABhzdHRzAAAAAAAAAAEAAABYAAAEAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAUc3RzegAAAAAAAAAGAAAAWAAAAXBzdGNvAAAAAAAAAFgAAAOBAAADhwAAA5oAAAOtAAADswAAA8oAAAPfAAAD5QAAA/gAAAQLAAAEEQAABCgAAAQ9AAAEUAAABFYAAARpAAAEgAAABIYAAASbAAAErgAABLQAAATHAAAE3gAABPMAAAT5AAAFDAAABR8AAAUlAAAFPAAABVEAAAVXAAAFagAABX0AAAWDAAAFmgAABa8AAAXCAAAFyAAABdsAAAXyAAAF+AAABg0AAAYgAAAGJgAABjkAAAZQAAAGZQAABmsAAAZ+AAAGkQAABpcAAAauAAAGwwAABskAAAbcAAAG7wAABwYAAAcMAAAHIQAABzQAAAc6AAAHTQAAB2QAAAdqAAAHfwAAB5IAAAeYAAAHqwAAB8IAAAfXAAAH3QAAB/AAAAgDAAAICQAACCAAAAg1AAAIOwAACE4AAAhhAAAIeAAACH4AAAiRAAAIpAAACKoAAAiwAAAItgAACLwAAAjCAAAAFnVkdGEAAAAObmFtZVN0ZXJlbwAAAHB1ZHRhAAAAaG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAO2lsc3QAAAAzqXRvbwAAACtkYXRhAAAAAQAAAABIYW5kQnJha2UgMC4xMC4yIDIwMTUwNjExMDA=",
};


/***/ }),

/***/ "./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js":
/*!******************************************************************!*\
  !*** ./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var SDPUtils = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        // If the offer contained RTX but the answer did not,
        // remove RTX from sendEncodingParameters.
        var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

        var hasRtx = commonCapabilities.codecs.filter(function(c) {
          return c.name.toLowerCase() === 'rtx';
        }).length;
        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
          delete transceiver.sendEncodingParameters[0].rtx;
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
      }
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && transceiver.dtlsTransport &&
          !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      }
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};


/***/ }),

/***/ "./node_modules/sdp/sdp.js":
/*!*********************************!*\
  !*** ./node_modules/sdp/sdp.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env node */


// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  var parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES paramters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(parts) {
      return parts.attribute === 'cname';
    });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(function(line) {
      var parts = line.substr(17).split(' ');
      return parts.map(function(part) {
        return parseInt(part, 10);
      });
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(obj) {
      return obj.attribute === 'cname';
    })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(msidParts) {
      return msidParts.attribute === 'msid';
    });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n'
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
    transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
    transceiver.dtlsTransport.getLocalParameters(),
    type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/*! exports provided: v1, v3, v4, v5, NIL, version, validate, stringify, parse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/esm-browser/v1.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v1", function() { return _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/esm-browser/v3.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v3", function() { return _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v4", function() { return _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/esm-browser/v5.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v5", function() { return _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/esm-browser/nil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NIL", function() { return _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version", function() { return _version_js__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]; });











/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ __webpack_exports__["default"] = (md5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ __webpack_exports__["default"] = (parse);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rng; });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
// find the complete implementation of crypto (msCrypto) on IE11.
var getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ __webpack_exports__["default"] = (sha1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ __webpack_exports__["default"] = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ __webpack_exports__["default"] = (v1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/esm-browser/md5.js");


var v3 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v3);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/*! exports provided: DNS, URL, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DNS", function() { return DNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URL", function() { return URL; });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ __webpack_exports__["default"] = (function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = Object(_parse_js__WEBPACK_IMPORTED_MODULE_1__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_0__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ __webpack_exports__["default"] = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ __webpack_exports__["default"] = (validate);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ __webpack_exports__["default"] = (version);

/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_core.js":
/*!************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_core.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter_factory.js */ "./node_modules/webrtc-adapter/src/js/adapter_factory.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





const adapter =
  Object(_adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__["adapterFactory"])({window: typeof window === 'undefined' ? undefined : window});
/* harmony default export */ __webpack_exports__["default"] = (adapter);


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_factory.js ***!
  \***************************************************************/
/*! exports provided: adapterFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adapterFactory", function() { return adapterFactory; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chrome/chrome_shim */ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js");
/* harmony import */ var _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./edge/edge_shim */ "./node_modules/webrtc-adapter/src/js/edge/edge_shim.js");
/* harmony import */ var _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./firefox/firefox_shim */ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js");
/* harmony import */ var _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./safari/safari_shim */ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js");
/* harmony import */ var _common_shim__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common_shim */ "./node_modules/webrtc-adapter/src/js/common_shim.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */


  // Browser shims.






// Shimming starts here.
function adapterFactory({window} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimEdge: true,
  shimSafari: true,
}) {
  // Utils.
  const logging = _utils__WEBPACK_IMPORTED_MODULE_0__["log"];
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  const adapter = {
    browserDetails,
    commonShim: _common_shim__WEBPACK_IMPORTED_MODULE_5__,
    extractVersion: _utils__WEBPACK_IMPORTED_MODULE_0__["extractVersion"],
    disableLog: _utils__WEBPACK_IMPORTED_MODULE_0__["disableLog"],
    disableWarnings: _utils__WEBPACK_IMPORTED_MODULE_0__["disableWarnings"]
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ || !_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimPeerConnection"] ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__;

      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimGetUserMedia"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimMediaStream"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimPeerConnection"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimOnTrack"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimAddTrackRemoveTrack"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimGetSendersWithDtmf"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimGetStats"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimSenderReceiverGetStats"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["fixNegotiationNeeded"](window);

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimRTCIceCandidate"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimConnectionState"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["removeAllowExtmapMixed"](window);
      break;
    case 'firefox':
      if (!_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__ || !_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimPeerConnection"] ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__;

      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimGetUserMedia"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimPeerConnection"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimOnTrack"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimRemoveStream"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimSenderGetStats"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimReceiverGetStats"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimRTCDataChannel"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimAddTransceiver"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimGetParameters"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimCreateOffer"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimCreateAnswer"](window);

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimRTCIceCandidate"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimConnectionState"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      break;
    case 'edge':
      if (!_edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__ || !_edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimPeerConnection"] || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__;

      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimGetUserMedia"](window);
      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimGetDisplayMedia"](window);
      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimPeerConnection"](window);
      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimReplaceTrack"](window);

      // the edge shim implements the full RTCIceCandidate object.

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      break;
    case 'safari':
      if (!_safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__ || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__;

      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimRTCIceServerUrls"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimCreateOfferLegacy"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimCallbacksAPI"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimLocalStreamsAPI"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimRemoteStreamsAPI"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimTrackEventTransceiver"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimGetUserMedia"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimAudioContext"](window);

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimRTCIceCandidate"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["removeAllowExtmapMixed"](window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js ***!
  \******************************************************************/
/*! exports provided: shimGetUserMedia, shimGetDisplayMedia, shimMediaStream, shimOnTrack, shimGetSendersWithDtmf, shimGetStats, shimSenderReceiverGetStats, shimAddTrackRemoveTrackWithNative, shimAddTrackRemoveTrack, shimPeerConnection, fixNegotiationNeeded */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimMediaStream", function() { return shimMediaStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimOnTrack", function() { return shimOnTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetSendersWithDtmf", function() { return shimGetSendersWithDtmf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetStats", function() { return shimGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimSenderReceiverGetStats", function() { return shimSenderReceiverGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAddTrackRemoveTrackWithNative", function() { return shimAddTrackRemoveTrackWithNative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAddTrackRemoveTrack", function() { return shimAddTrackRemoveTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimPeerConnection", function() { return shimPeerConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixNegotiationNeeded", function() { return fixNegotiationNeeded; });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return _getusermedia__WEBPACK_IMPORTED_MODULE_1__["shimGetUserMedia"]; });

/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__["shimGetDisplayMedia"]; });

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */






function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
      window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = (e) => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {track: te.track};
              }

              const event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {track};
              }
              const event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver',
          {value: {receiver: e.receiver}});
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection &&
      !('getSenders' in window.RTCPeerConnection.prototype) &&
      'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack =
        function addTrack(track, stream) {
          let sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack =
        function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          const idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
    }
    const origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);

        stream.getTracks().forEach(track => {
          const sender = this._senders.find(s => s.track === track);
          if (sender) { // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
  } else if (typeof window === 'object' && window.RTCPeerConnection &&
             'getSenders' in window.RTCPeerConnection.prototype &&
             'createDTMFSender' in window.RTCPeerConnection.prototype &&
             window.RTCRtpSender &&
             !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 ||
        typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_,
        selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["filterStats"](result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers =
        function getReceivers() {
          const receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
    }
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result =>
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["filterStats"](result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype &&
      'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 &&
        arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || (sender && receiver)) {
        return Promise.reject(new DOMException(
          'There are more than one sender or receiver for the track.',
          'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        'There is no sender or receiver for the track.',
        'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams)
        .map(streamId => this._shimmedLocalStreams[streamId][0]);
    };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      const sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders()
      .filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
}

function shimAddTrackRemoveTrack(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack &&
      browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  const origGetLocalStreams = window.RTCPeerConnection.prototype
      .getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      const nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};

      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);
      delete this._reverseStreams[(this._streams[stream.id] ?
          this._streams[stream.id].id : stream.id)];
      delete this._streams[stream.id];
    };

  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      const streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      const oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        const newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
          externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
          internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function(method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {[method]() {
      const args = arguments;
      const isLegacyCall = arguments.length &&
          typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments)
      .then(description => replaceInternalStreamId(this, description));
    }};
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  const origSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  const origLocalDescription = Object.getOwnPropertyDescriptor(
      window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype,
      'localDescription', {
        get() {
          const description = origLocalDescription.get.apply(this);
          if (description.type === '') {
            return description;
          }
          return replaceInternalStreamId(this, description);
        }
      });

  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      const isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      let stream;
      Object.keys(this._streams).forEach(streamid => {
        const hasTrack = this._streams[streamid].getTracks()
          .find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
}

function shimPeerConnection(window) {
  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  const addIceCandidateNullSupported =
    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  // support for addIceCandidate(null or undefined)
  const nativeAddIceCandidate =
      window.RTCPeerConnection.prototype.addIceCandidate;
  window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!addIceCandidateNullSupported && !arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions. Native support planned for Chrome M77.
      if (browserDetails.version < 78 &&
        arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window) {
  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'negotiationneeded', e => {
    const pc = e.target;
    if (browserDetails.version < 72 || (pc.getConfiguration &&
        pc.getConfiguration().sdpSemantics === 'plan-b')) {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js":
/*!**********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js ***!
  \**********************************************************************/
/*! exports provided: shimGetDisplayMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return shimGetDisplayMedia; });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' +
        'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      return getSourceId(constraints)
        .then(sourceId => {
          const widthSpecified = constraints.video && constraints.video.width;
          const heightSpecified = constraints.video &&
            constraints.video.height;
          const frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js ***!
  \*******************************************************************/
/*! exports provided: shimGetUserMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


const logging = _utils_js__WEBPACK_IMPORTED_MODULE_0__["log"];

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  const constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      const remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            let dev = devices.find(d => matches.some(match =>
              d.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/common_shim.js":
/*!***********************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/common_shim.js ***!
  \***********************************************************/
/*! exports provided: shimRTCIceCandidate, shimMaxMessageSize, shimSendThrowTypeError, shimConnectionState, removeAllowExtmapMixed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRTCIceCandidate", function() { return shimRTCIceCandidate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimMaxMessageSize", function() { return shimMaxMessageSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimSendThrowTypeError", function() { return shimSendThrowTypeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimConnectionState", function() { return shimConnectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAllowExtmapMixed", function() { return removeAllowExtmapMixed; });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate &&
        args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.parseCandidate(args.candidate);
      const augmentedCandidate = Object.assign(nativeCandidate,
          parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment,
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  _utils__WEBPACK_IMPORTED_MODULE_1__["wrapPeerConnectionEvent"](window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimMaxMessageSize(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_1__["detectBrowser"](window);

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application'
          && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function(description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize =
          browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox'
         && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.matchPrefix(description.sdp,
      'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' &&
                remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
    function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        const {sdpSemantics} = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true,
          });
        }
      }

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        const isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        const canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        let maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        const sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection &&
      'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' &&
          pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' +
          pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel =
    window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel =
    function createDataChannel() {
      const dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
  _utils__WEBPACK_IMPORTED_MODULE_1__["wrapPeerConnectionEvent"](window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}


/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection ||
      'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange',
            this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange',
            this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange',
          this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeAllowExtmapMixed(window) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_1__["detectBrowser"](window);
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
  function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      desc.sdp = desc.sdp.split('\n').filter((line) => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
    }
    return nativeSRD.apply(this, arguments);
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/edge_shim.js":
/*!**************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/edge_shim.js ***!
  \**************************************************************/
/*! exports provided: shimGetUserMedia, shimGetDisplayMedia, shimPeerConnection, shimReplaceTrack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimPeerConnection", function() { return shimPeerConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimReplaceTrack", function() { return shimReplaceTrack; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _filtericeservers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filtericeservers */ "./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js");
/* harmony import */ var rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rtcpeerconnection-shim */ "./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js");
/* harmony import */ var rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/edge/getusermedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return _getusermedia__WEBPACK_IMPORTED_MODULE_3__["shimGetUserMedia"]; });

/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return _getdisplaymedia__WEBPACK_IMPORTED_MODULE_4__["shimGetDisplayMedia"]; });

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */









function shimPeerConnection(window) {
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  if (window.RTCIceGatherer) {
    if (!window.RTCIceCandidate) {
      window.RTCIceCandidate = function RTCIceCandidate(args) {
        return args;
      };
    }
    if (!window.RTCSessionDescription) {
      window.RTCSessionDescription = function RTCSessionDescription(args) {
        return args;
      };
    }
    // this adds an additional event listener to MediaStrackTrack that signals
    // when a tracks enabled property was changed. Workaround for a bug in
    // addStream, see below. No longer required in 15025+
    if (browserDetails.version < 15025) {
      const origMSTEnabled = Object.getOwnPropertyDescriptor(
          window.MediaStreamTrack.prototype, 'enabled');
      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
        set(value) {
          origMSTEnabled.set.call(this, value);
          const ev = new Event('enabled');
          ev.enabled = value;
          this.dispatchEvent(ev);
        }
      });
    }
  }

  // ORTC defines the DTMF sender a bit different.
  // https://github.com/w3c/ortc/issues/714
  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = new window.RTCDtmfSender(this);
          } else if (this.track.kind === 'video') {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
  // Edge currently only implements the RTCDtmfSender, not the
  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
  if (window.RTCDtmfSender && !window.RTCDTMFSender) {
    window.RTCDTMFSender = window.RTCDtmfSender;
  }

  const RTCPeerConnectionShim = rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2___default()(window,
      browserDetails.version);
  window.RTCPeerConnection = function RTCPeerConnection(config) {
    if (config && config.iceServers) {
      config.iceServers = Object(_filtericeservers__WEBPACK_IMPORTED_MODULE_1__["filterIceServers"])(config.iceServers,
        browserDetails.version);
      _utils__WEBPACK_IMPORTED_MODULE_0__["log"]('ICE servers after filtering:', config.iceServers);
    }
    return new RTCPeerConnectionShim(config);
  };
  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
}

function shimReplaceTrack(window) {
  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
  if (window.RTCRtpSender &&
      !('replaceTrack' in window.RTCRtpSender.prototype)) {
    window.RTCRtpSender.prototype.replaceTrack =
        window.RTCRtpSender.prototype.setTrack;
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js ***!
  \*********************************************************************/
/*! exports provided: filterIceServers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterIceServers", function() { return filterIceServers; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */



// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  let hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(server => {
    if (server && (server.urls || server.url)) {
      let urls = server.urls || server.url;
      if (server.url && !server.urls) {
        _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('RTCIceServer.url', 'RTCIceServer.urls');
      }
      const isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(url => {
        // filter STUN unconditionally.
        if (url.indexOf('stun:') === 0) {
          return false;
        }

        const validTurn = url.startsWith('turn') &&
            !url.startsWith('turn:[') &&
            url.includes('transport=udp');
        if (validTurn && !hasTurn) {
          hasTurn = true;
          return true;
        }
        return validTurn && !hasTurn;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js ***!
  \********************************************************************/
/*! exports provided: shimGetDisplayMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return shimGetDisplayMedia; });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


function shimGetDisplayMedia(window) {
  if (!('getDisplayMedia' in window.navigator)) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    window.navigator.getDisplayMedia.bind(window.navigator);
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/getusermedia.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/getusermedia.js ***!
  \*****************************************************************/
/*! exports provided: shimGetUserMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  const shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  const origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js ***!
  \********************************************************************/
/*! exports provided: shimGetUserMedia, shimGetDisplayMedia, shimOnTrack, shimPeerConnection, shimSenderGetStats, shimReceiverGetStats, shimRemoveStream, shimRTCDataChannel, shimAddTransceiver, shimGetParameters, shimCreateOffer, shimCreateAnswer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimOnTrack", function() { return shimOnTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimPeerConnection", function() { return shimPeerConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimSenderGetStats", function() { return shimSenderGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimReceiverGetStats", function() { return shimReceiverGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRemoveStream", function() { return shimRemoveStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRTCDataChannel", function() { return shimRTCDataChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAddTransceiver", function() { return shimAddTransceiver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetParameters", function() { return shimGetParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCreateOffer", function() { return shimCreateOffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCreateAnswer", function() { return shimCreateAnswer; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return _getusermedia__WEBPACK_IMPORTED_MODULE_1__["shimGetUserMedia"]; });

/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__["shimGetDisplayMedia"]; });

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */






function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent &&
      ('receiver' in window.RTCTrackEvent.prototype) &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimPeerConnection(window) {
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  if (typeof window !== 'object' ||
      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  // support for addIceCandidate(null or undefined)
  // as well as ignoring {sdpMid, candidate: ""}
  if (browserDetails.version < 68) {
    const nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      if (arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null])
      .then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      })
      .then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) :
        Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  _utils__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection ||
      'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver =
      function addTransceiver() {
        this.setParametersPromises = [];
        const initParameters = arguments[1];
        const shouldPerformCheck = initParameters &&
                                  'sendEncodings' in initParameters;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          initParameters.sendEncodings.forEach((encodingParam) => {
            if ('rid' in encodingParam) {
              const ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        const transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          const {sender} = transceiver;
          const params = sender.getParameters();
          if (!('encodings' in params) ||
              // Avoid being fooled by patched getParameters() below.
              (params.encodings.length === 1 &&
               Object.keys(params.encodings[0]).length === 0)) {
            params.encodings = initParameters.sendEncodings;
            sender.sendEncodings = initParameters.sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params)
              .then(() => {
                delete sender.sendEncodings;
              }).catch(() => {
                delete sender.sendEncodings;
              })
            );
          }
        }
        return transceiver;
      };
  }
}

function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters =
      function getParameters() {
        const params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateOffer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateAnswer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js":
/*!***********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js ***!
  \***********************************************************************/
/*! exports provided: shimGetDisplayMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return shimGetDisplayMedia; });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        const err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js ***!
  \********************************************************************/
/*! exports provided: shimGetUserMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */




function shimGetUserMedia(window) {
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints =
        MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/safari/safari_shim.js ***!
  \******************************************************************/
/*! exports provided: shimLocalStreamsAPI, shimRemoteStreamsAPI, shimCallbacksAPI, shimGetUserMedia, shimConstraints, shimRTCIceServerUrls, shimTrackEventTransceiver, shimCreateOfferLegacy, shimAudioContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimLocalStreamsAPI", function() { return shimLocalStreamsAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRemoteStreamsAPI", function() { return shimRemoteStreamsAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCallbacksAPI", function() { return shimCallbacksAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimConstraints", function() { return shimConstraints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRTCIceServerUrls", function() { return shimRTCIceServerUrls; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimTrackEventTransceiver", function() { return shimTrackEventTransceiver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCreateOfferLegacy", function() { return shimCreateOfferLegacy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAudioContext", function() { return shimAudioContext; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */



function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams =
      function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,
        stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,
        stream));
    };

    window.RTCPeerConnection.prototype.addTrack =
      function addTrack(track, ...streams) {
        if (streams) {
          streams.forEach((stream) => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        const index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        const tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
  }
}

function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams =
      function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = (e) => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        const pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              const event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
  }
}

function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer =
    function createOffer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  prototype.createAnswer =
    function createAnswer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices &&
    navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints)
      .then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({},
      constraints,
      {video: _utils__WEBPACK_IMPORTED_MODULE_0__["compactObject"](constraints.video)}
    );
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  const OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection =
    function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        const newIceServers = [];
        for (let i = 0; i < pcConfig.iceServers.length; i++) {
          let server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent &&
      'receiver' in window.RTCTrackEvent.prototype &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer =
    function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio =
            !!offerOptions.offerToReceiveAudio;
        }
        const audioTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          this.addTransceiver('audio');
        }

        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo =
            !!offerOptions.offerToReceiveVideo;
        }
        const videoTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          this.addTransceiver('video');
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
}

function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/utils.js ***!
  \*****************************************************/
/*! exports provided: extractVersion, wrapPeerConnectionEvent, disableLog, disableWarnings, log, deprecated, detectBrowser, compactObject, walkStats, filterStats */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractVersion", function() { return extractVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapPeerConnectionEvent", function() { return wrapPeerConnectionEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableLog", function() { return disableLog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableWarnings", function() { return disableWarnings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deprecated", function() { return deprecated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detectBrowser", function() { return detectBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compactObject", function() { return compactObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walkStats", function() { return walkStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterStats", function() { return filterStats; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


let logDisabled_ = true;
let deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e) => {
      const modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return (bool) ? 'adapter.js logging disabled' :
      'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
      ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  const result = {browser: null, version: null};

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {navigator} = window;

  if (navigator.mozGetUserMedia) { // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent,
        /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia ||
      (window.isSecureContext === false && window.webkitRTCPeerConnection &&
       !window.RTCIceGatherer)) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent,
        /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (navigator.mediaDevices &&
      navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
    result.browser = 'edge';
    result.version = extractVersion(navigator.userAgent,
        /Edge\/(\d+).(\d+)$/, 2);
  } else if (window.RTCPeerConnection &&
      navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent,
        /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&
        'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else { // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {[key]: value});
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}



/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/Apps/Viewer/LoaderWorker.ts":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/Apps/Viewer/LoaderWorker.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "LoaderWorker.worker.js");
};

/***/ }),

/***/ "./src/Apps/PathTracer/ColorAnalyzer.ts":
/*!**********************************************!*\
  !*** ./src/Apps/PathTracer/ColorAnalyzer.ts ***!
  \**********************************************/
/*! exports provided: ColorAnalyzer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorAnalyzer", function() { return ColorAnalyzer; });
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");

/**
 * This class grabs a copy of the rendered texture and examines it for
 * color values.
 */
var ColorAnalyzer = /** @class */ (function () {
    /**
     * @param size The width and height of the buffer
     */
    function ColorAnalyzer(size) {
        this.size = size;
        // allocate the buffer used for grabs
        this.pixels = new Float32Array(this.size * this.size * 4);
    }
    /**
     * Runs the analysis - grabs a copy of the frame buffer and scans it.
     *
     * @param alphaLight The alpha value for things in light. Values above this are due to specular lighting.
     * @param alphaShadow The alpha value for things in shadow.
     */
    ColorAnalyzer.prototype.run = function (gl, alphaLight, alphaShadow) {
        var data = {
            maxChroma: 0,
            avgLightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            lightestLightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            darkestLightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([1, 1, 1]),
            avgShadowColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            lightestShadowColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            darkestShadowColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([1, 1, 1]),
            terminatorColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            highlightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
        };
        // TODO handle case when the text type is UNSIGNED_BYTE
        // TODO gl.FLOAT not supported on Safari.
        gl.readPixels(0, 0, this.size, this.size, gl.RGBA, gl.FLOAT, this.pixels);
        var numLightPixels = 0;
        var numShadowPixels = 0;
        var numTerminatorPixels = 0;
        for (var row = 0; row < this.size; row++) {
            for (var col = 0; col < this.size; col++) {
                var index = (row * this.size + col) * 4;
                var r = this.pixels[index + 0];
                var g = this.pixels[index + 1];
                var b = this.pixels[index + 2];
                var a = this.pixels[index + 3];
                // ignore values that are not part of the ball
                if (a === 1) {
                    continue;
                }
                var avg = (r + g + b) / 3;
                var chroma = (Math.abs(r - avg) + Math.abs(g - avg) + Math.abs(b - avg)) / (4 / 3);
                if (chroma > data.maxChroma) {
                    data.maxChroma = chroma;
                }
                var color = new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([r, g, b]);
                if (a == alphaLight) {
                    numLightPixels++;
                    if (data.lightestLightColor == null) {
                        data.lightestLightColor = color;
                    }
                    if (data.darkestLightColor == null) {
                        data.darkestLightColor = color;
                    }
                    data.lightestLightColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.lightestLightColor, color);
                    data.darkestLightColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].darkest(data.darkestLightColor, color);
                    data.avgLightColor.r += color.r;
                    data.avgLightColor.b += color.b;
                    data.avgLightColor.g += color.g;
                }
                else if (a == alphaShadow) {
                    numShadowPixels++;
                    if (data.lightestShadowColor == null) {
                        data.lightestShadowColor = color;
                    }
                    if (data.darkestShadowColor == null) {
                        data.darkestShadowColor = color;
                    }
                    data.lightestShadowColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.lightestShadowColor, color);
                    data.darkestShadowColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].darkest(data.darkestShadowColor, color);
                    data.avgShadowColor.r += color.r;
                    data.avgShadowColor.b += color.b;
                    data.avgShadowColor.g += color.g;
                }
                else if (a > alphaLight) {
                    data.highlightColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.highlightColor, color);
                }
                var terminator = (alphaLight + alphaShadow) / 2.0;
                if (Math.abs(a - terminator) < 0.1) {
                    numTerminatorPixels++;
                    data.terminatorColor.r += color.r;
                    data.terminatorColor.b += color.b;
                    data.terminatorColor.g += color.g;
                }
            }
        }
        if (numLightPixels > 0) {
            data.avgLightColor.r /= numLightPixels;
            data.avgLightColor.g /= numLightPixels;
            data.avgLightColor.b /= numLightPixels;
        }
        if (numShadowPixels > 0) {
            data.avgShadowColor.r /= numShadowPixels;
            data.avgShadowColor.g /= numShadowPixels;
            data.avgShadowColor.b /= numShadowPixels;
        }
        if (numTerminatorPixels > 0) {
            data.terminatorColor.r /= numTerminatorPixels;
            data.terminatorColor.g /= numTerminatorPixels;
            data.terminatorColor.b /= numTerminatorPixels;
        }
        return data;
    };
    return ColorAnalyzer;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/PathTracerApp.ts":
/*!**********************************************!*\
  !*** ./src/Apps/PathTracer/PathTracerApp.ts ***!
  \**********************************************/
/*! exports provided: PathTracerApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerApp", function() { return PathTracerApp; });
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PathTracerRenderer */ "./src/Apps/PathTracer/PathTracerRenderer.ts");
/* harmony import */ var _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/SphericalCoord */ "./src/Util3D/SphericalCoord.ts");
/* harmony import */ var _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../GUI/Slider */ "./src/GUI/Slider.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _gl_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../gl/glColorWithTemperature */ "./src/gl/glColorWithTemperature.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
/* harmony import */ var _Util3D_TriangleObjFile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util3D/TriangleObjFile */ "./src/Util3D/TriangleObjFile.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");











var skinTones = [
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([240, 223, 214]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([255, 218, 200]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([232, 179, 117]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([190, 136, 87]),
    //   new htmlColor([115, 91, 59]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([139, 73, 65])
    //   new htmlColor([132, 55, 34]),
    //new htmlColor([61, 12, 2]),
    //   new htmlColor([38, 7, 1])
];
var PointerMode;
(function (PointerMode) {
    PointerMode[PointerMode["View"] = 0] = "View";
    PointerMode[PointerMode["Light"] = 1] = "Light";
})(PointerMode || (PointerMode = {}));
var PathTracerApp = /** @class */ (function () {
    function PathTracerApp(file) {
        this.gl = null;
        this.pointerMode = PointerMode.View;
        this.pointerModeSpecial = false;
        this.angleX = 0.5;
        this.angleY = 0.75;
        this.zoomZ = 3.5;
        this.lastTimes = [];
        this.MAX_SAMPLES = 500;
        this.initialFile = file;
    }
    PathTracerApp.prototype.create = function (div) {
        var _this = this;
        div.id = 'PathTracerApp';
        var container = document.createElement('div');
        container.className = 'Container';
        div.appendChild(container);
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'canvasx';
        container.appendChild(this.canvas);
        var context = this.canvas.getContext('webgl2');
        if (!context) {
            context = this.canvas.getContext('webgl');
        }
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log('Unable to get WebGL context');
        }
        this.gl = context;
        var size = 512;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["isMobile"]) {
            size = document.body.clientWidth;
        }
        this.gl.canvas.width = size;
        this.gl.canvas.height = size;
        div.style.width = size + 'px';
        container.style.height = size + 'px';
        this.renderer = new _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["PathTracerRenderer"](this.gl);
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_5__["PointerEventHandler"](this.canvas);
        handler.onDrag = function (pos, delta) { return _this.onMove(pos, delta); };
        handler.onClick = function (pos) { return _this.click(pos.x, pos.y); };
        handler.onDown = function (pos) { return _this.onDown(pos.x, pos.y); };
        this.loadModel(this.initialFile).then(function (tObj) {
            _this.renderer.setObj(tObj);
            requestAnimationFrame(function () { return _this.tick(); });
        });
        var drawTime = document.createElement('div');
        drawTime.id = 'drawTime';
        container.appendChild(drawTime);
        var description = document.createElement('div');
        description.id = 'description';
        container.appendChild(description);
        var button = document.createElement('div');
        button.id = 'modeButton';
        button.innerHTML = 'View';
        this.pointerMode = PointerMode.View;
        button.onclick = function () {
            switch (_this.pointerMode) {
                case PointerMode.View:
                    button.innerHTML = 'Light';
                    _this.pointerMode = PointerMode.Light;
                    break;
                case PointerMode.Light:
                    button.innerHTML = 'View';
                    _this.pointerMode = PointerMode.View;
                    break;
            }
        };
        container.appendChild(button);
        var progressBar = document.createElement('div');
        progressBar.id = 'progressBar';
        container.appendChild(progressBar);
        this.intensitySlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'LightIntensity',
            label: 'Light Intensity',
            min: 0,
            max: 1,
            value: this.renderer.uniforms.uLightIntensity,
            colors: [_Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].black, _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].white],
            oninput: function () {
                _this.renderer.uniforms.uLightIntensity = _this.intensitySlider.value;
                _this.restart();
            }
        });
        // build a range of colors
        var min = 2000;
        var max = 10000;
        var colors = [];
        for (var i = 0; i < 10; i++) {
            var temp = min + (i / 9) * (max - min);
            colors.push(_gl_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_7__["glColorWithTemperature"].create(temp).toHtmlColor());
        }
        this.lightColorSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'LightColor',
            label: 'Light Color',
            min: 2000,
            max: 10000,
            value: _gl_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_7__["glColorWithTemperature"].daylight.temperature,
            colors: colors,
            oninput: function () {
                _this.setLightColor();
            },
            onGetText: function (slider) { return slider.value.toFixed() + 'K'; }
        });
        // apply the initial colors
        this.setLightColor();
        this.ballColorSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'BallColor',
            label: 'Ball Color',
            min: 0,
            max: 100,
            value: 50,
            colors: skinTones,
            oninput: function () {
                _this.renderer.uniforms.uObjColor = _this.ballColorSlider.glColor;
                _this.restart();
            }
        });
        // make sure gl matches the initial UI setting
        this.renderer.uniforms.uObjColor = this.ballColorSlider.glColor;
        this.ambientIntensitySlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'AmbientIntensity',
            label: 'Ambient Light',
            min: 0,
            max: 1,
            value: this.renderer.uniforms.uAmbientLightIntensity,
            colors: [_Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].black, _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].white],
            oninput: function () {
                _this.renderer.uniforms.uAmbientLightIntensity = _this.ambientIntensitySlider.value;
                _this.restart();
            }
        });
    };
    PathTracerApp.prototype.buildMenu = function (menubar) {
        // no menus
    };
    PathTracerApp.prototype.loadModel = function (file) {
        if (file && file.toLowerCase() === 'sphere') {
            this.renderer.uniforms.uBallRadius = 0;
            var radius = 0.5;
            var center = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, radius, 0]);
            var tObj = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_8__["TriangleObjBuilder"]();
            tObj.addSphere(8, radius, center);
            return Promise.resolve(tObj);
        }
        else if (file && file.toLowerCase() === 'cube') {
            this.renderer.uniforms.uBallRadius = 0;
            var size = 0.8;
            var center = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, size / 2.0, 0]);
            var tObj = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_8__["TriangleObjBuilder"]();
            tObj.addCube(size, center);
            return Promise.resolve(tObj);
        }
        else if (file && file.toLowerCase().endsWith('.obj')) {
            this.renderer.uniforms.uBallRadius = 0;
            return fetch(file)
                .then(function (res) { return res.text(); })
                .then(function (res) {
                return new _Util3D_TriangleObjFile__WEBPACK_IMPORTED_MODULE_9__["TriangleObjFile"](file, res);
            });
        }
        else {
            return Promise.resolve(null);
        }
    };
    PathTracerApp.prototype.setLightColor = function () {
        // update the colors for the intensity slider
        this.intensitySlider.colors = [_Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].black, this.lightColorSlider.htmlColor];
        // use the value in rendering
        this.renderer.uniforms.uLightColor = this.lightColorSlider.glColor;
        this.restart();
    };
    PathTracerApp.prototype.onDown = function (x, y) {
        this.pointerModeSpecial = (x < 0.1 * this.canvas.width) ? true : false;
        this.pos = _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_2__["SphericalCoord"].fromXYZ(this.renderer.uniforms.uLightPos.values);
    };
    PathTracerApp.prototype.onMove = function (pos, delta) {
        if (this.pointerMode === PointerMode.View) {
            if (this.pointerModeSpecial) {
                this.zoomZ -= (delta.y) * 0.01;
                this.zoomZ = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["clamp"])(this.zoomZ, 1, 8);
            }
            else {
                // update the angles based on how far we moved since last time
                this.angleY -= (delta.x) * 0.01;
                this.angleX += (delta.y) * 0.01;
                // don't go upside down
                this.angleX = Math.max(this.angleX, -Math.PI / 2 + 0.01);
                this.angleX = Math.min(this.angleX, Math.PI / 2 - 0.01);
            }
        }
        else if (this.pointerMode === PointerMode.Light) {
            if (this.pointerModeSpecial) {
                this.pos.radius -= (delta.y) * 0.005;
                this.pos.radius = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["clamp"])(this.pos.radius, this.renderer.uniforms.uBallRadius + 0.5, 5);
                this.renderer.uniforms.uLightPos.values = this.pos.toXYZ();
            }
            else {
                this.pos.rotationAngle += (-delta.x);
                this.pos.elevationAngle += (-delta.y);
                this.pos.elevationAngle = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["clamp"])(this.pos.elevationAngle, 0, 180);
                this.renderer.uniforms.uLightPos.values = this.pos.toXYZ();
            }
        }
        // clear the sample buffer
        this.restart();
    };
    /**
     * Processes a click/touch event at the designated coordinates. If a hit
     * occurs, the clicked on view is swapped for the primary view and true
     * is returned. If no hit occurs, false is returned.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @returns true if a hit on one of the views occurs.
     */
    PathTracerApp.prototype.click = function (x, y) {
        // TODO handle this within the PathTracer class so that we don't have to hard code view stuff
        var size = 0.2 * this.canvas.width;
        if (y < size) {
            if (x > this.canvas.width - 1 * size) {
                this.swap(2);
                this.setDescription();
                return true;
            }
            else if (x > this.canvas.width - 2 * size) {
                this.swap(1);
                this.setDescription();
                return true;
            }
            else if (x > this.canvas.width - 3 * size) {
                this.swap(0);
                this.setDescription();
                return true;
            }
        }
        return false;
    };
    PathTracerApp.prototype.setDescription = function () {
        var description = document.getElementById('description');
        switch (this.renderer.renderMode) {
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Artist:
                description.innerText = '';
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Chroma:
                description.innerText = 'Chroma View: red=highest chroma';
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Value:
                description.innerText = 'Value View';
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Bands:
                description.innerText = '5 Color + Highlight View';
                break;
        }
    };
    PathTracerApp.prototype.updateTexture = function () {
        var modelview = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_10__["Mat4"].makeLookAt(this.renderer.uniforms.uEye, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, 1, 0]), // center point
        new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, 1, 0]) // up vector
        );
        var projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_10__["Mat4"].makePerspective(55, 1, 0.1, 100);
        var modelviewProjection = projection.multM(modelview);
        this.renderer.updateTexture(modelviewProjection);
    };
    PathTracerApp.prototype.displayTexture = function () {
        this.renderer.displayTexture();
    };
    PathTracerApp.prototype.restart = function () {
        if (this.renderer) {
            this.renderer.restart();
        }
    };
    PathTracerApp.prototype.swap = function (pos) {
        this.renderer.swap(pos);
    };
    PathTracerApp.prototype.tick = function () {
        var _this = this;
        this.updateTimerLabel();
        this.updateProgress();
        if (this.renderer.uniforms.uSample < this.MAX_SAMPLES) {
            this.renderer.uniforms.uEye.values[0] = this.zoomZ * Math.sin(this.angleY) * Math.cos(this.angleX);
            this.renderer.uniforms.uEye.values[1] = this.zoomZ * Math.sin(this.angleX);
            this.renderer.uniforms.uEye.values[2] = this.zoomZ * Math.cos(this.angleY) * Math.cos(this.angleX);
            this.updateTexture();
            this.displayTexture();
        }
        this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
    };
    PathTracerApp.prototype.updateTimerLabel = function () {
        var t = window.performance.now();
        var drawTimeLabel = document.getElementById('drawTime');
        if (this.lastTimes.length > 0) {
            var elapsedMs = (t - this.lastTimes[0]) / this.lastTimes.length;
            drawTimeLabel.innerText = elapsedMs.toFixed(0) + 'ms';
        }
        this.lastTimes.push(t);
        if (this.lastTimes.length > 30) {
            this.lastTimes.shift();
        }
        drawTimeLabel.style.visibility = this.renderer.uniforms.uSample < this.MAX_SAMPLES ? 'visible' : 'hidden';
    };
    PathTracerApp.prototype.updateProgress = function () {
        var progress = this.renderer.uniforms.uSample / this.MAX_SAMPLES;
        var bar = document.getElementById('progressBar');
        if (progress >= 0 && progress < 1) {
            bar.style.visibility = 'visible';
            var w = this.canvas.width;
            bar.style.right = w * (1 - progress) + 'px';
        }
        else {
            bar.style.visibility = 'hidden';
        }
    };
    return PathTracerApp;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/PathTracerObj.ts":
/*!**********************************************!*\
  !*** ./src/Apps/PathTracer/PathTracerObj.ts ***!
  \**********************************************/
/*! exports provided: PathTracerObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerObj", function() { return PathTracerObj; });
/* harmony import */ var _Volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Volume */ "./src/Apps/PathTracer/Volume.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util3D_IndexedVec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/IndexedVec3 */ "./src/Util3D/IndexedVec3.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");




/**
 * Wrapper for TriangleObj used by the PathTracer app. Adds the ability to
 * move vertices (as opposed to using a tranformation matrix) and to break
 * things down into volumes.
 */
var PathTracerObj = /** @class */ (function () {
    function PathTracerObj(tObj) {
        this.volumes = [];
        this.tObj = tObj;
        this.autoCenter();
        this.breakIntoVolumes();
    }
    /**
     * Scales the object, centers it, and puts it on the floor at y=0
     */
    PathTracerObj.prototype.autoCenter = function () {
        var center = this.tObj.box.center;
        var trans = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-center.x, -center.y + this.tObj.height / 2, -center.z]);
        var scale = 2 / this.tObj.diagonal;
        for (var i = 0; i < this.tObj.numVertices; i++) {
            var v = new _Util3D_IndexedVec3__WEBPACK_IMPORTED_MODULE_2__["IndexedVec3"](this.tObj.vertices, i);
            v.x = (v.x + trans.x) * scale;
            v.y = (v.y + trans.y) * scale;
            v.z = (v.z + trans.z) * scale;
        }
        this.tObj.box.min.x = (this.tObj.box.min.x + trans.x) * scale;
        this.tObj.box.min.y = (this.tObj.box.min.y + trans.y) * scale;
        this.tObj.box.min.z = (this.tObj.box.min.z + trans.z) * scale;
        this.tObj.box.max.x = (this.tObj.box.max.x + trans.x) * scale;
        this.tObj.box.max.y = (this.tObj.box.max.y + trans.y) * scale;
        this.tObj.box.max.z = (this.tObj.box.max.z + trans.z) * scale;
        for (var i = 0; i < this.volumes.length; i++) {
            var v = this.volumes[i];
            v.boxMin.x = (v.boxMin.x + trans.x) * scale;
            v.boxMin.y = (v.boxMin.y + trans.y) * scale;
            v.boxMin.z = (v.boxMin.z + trans.z) * scale;
            v.boxMax.x = (v.boxMax.x + trans.x) * scale;
            v.boxMax.y = (v.boxMax.y + trans.y) * scale;
            v.boxMax.z = (v.boxMax.z + trans.z) * scale;
        }
    };
    /**
     * Breaks the object into evenly spaced volumes. The number of volumes is automatically
     * determined based on the number of triangles.
     */
    PathTracerObj.prototype.breakIntoVolumes = function () {
        var numSteps;
        if (this.tObj.numTriangles < 40) {
            numSteps = 1;
        }
        else if (this.tObj.numTriangles < 1500) {
            numSteps = 2;
        }
        else {
            numSteps = 3;
        }
        this.volumes = [];
        for (var i = 0; i < Math.pow(numSteps, 3); i++) {
            this.volumes.push(new _Volume__WEBPACK_IMPORTED_MODULE_0__["Volume"]());
        }
        for (var i = 0; i < this.tObj.numTriangles; i++) {
            var t = this.tObj.getTriangle(i);
            var x = Math.floor(numSteps * (t.minX - this.tObj.box.min.x) / (this.tObj.box.width));
            var y = Math.floor(numSteps * (t.minY - this.tObj.box.min.y) / (this.tObj.box.height));
            var z = Math.floor(numSteps * (t.minZ - this.tObj.box.min.z) / (this.tObj.box.depth));
            x = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["clamp"])(x, 0, numSteps - 1);
            y = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["clamp"])(y, 0, numSteps - 1);
            z = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["clamp"])(z, 0, numSteps - 1);
            var index = x + y * numSteps + z * numSteps * numSteps;
            this.volumes[index].push(t);
        }
    };
    return PathTracerObj;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/PathTracerRenderer.ts":
/*!***************************************************!*\
  !*** ./src/Apps/PathTracer/PathTracerRenderer.ts ***!
  \***************************************************/
/*! exports provided: RenderMode, PathTracerRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderMode", function() { return RenderMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerRenderer", function() { return PathTracerRenderer; });
/* harmony import */ var _shaders_PathTracerToScreenVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/PathTracerToScreenVertex.glsl */ "./src/shaders/PathTracerToScreenVertex.glsl");
/* harmony import */ var _shaders_PathTracerToScreenFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/PathTracerToScreenFragment.glsl */ "./src/shaders/PathTracerToScreenFragment.glsl");
/* harmony import */ var _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shaders/PathTracerToTextureVertex.glsl */ "./src/shaders/PathTracerToTextureVertex.glsl");
/* harmony import */ var _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shaders/PathTracerToTextureFragment.glsl */ "./src/shaders/PathTracerToTextureFragment.glsl");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util3D/SphericalCoord */ "./src/Util3D/SphericalCoord.ts");
/* harmony import */ var _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../gl/glFrameBuffer */ "./src/gl/glFrameBuffer.ts");
/* harmony import */ var _gl_glTexture__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../gl/glTexture */ "./src/gl/glTexture.ts");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gl/glAttributeBuffer */ "./src/gl/glAttributeBuffer.ts");
/* harmony import */ var _ColorAnalyzer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ColorAnalyzer */ "./src/Apps/PathTracer/ColorAnalyzer.ts");
/* harmony import */ var _gl_glUniformBlock__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../gl/glUniformBlock */ "./src/gl/glUniformBlock.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_Profiler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Util/Profiler */ "./src/Util/Profiler.ts");
/* harmony import */ var _PathTracerObj__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PathTracerObj */ "./src/Apps/PathTracer/PathTracerObj.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _GUI_ColorRange__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../GUI/ColorRange */ "./src/GUI/ColorRange.ts");



















/**
 * Rendering mode for displaying the texture
 */
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["Artist"] = 0] = "Artist";
    RenderMode[RenderMode["Value"] = 1] = "Value";
    RenderMode[RenderMode["Chroma"] = 2] = "Chroma";
    RenderMode[RenderMode["Bands"] = 3] = "Bands";
})(RenderMode || (RenderMode = {}));
var Uniforms = /** @class */ (function () {
    function Uniforms() {
        this.uScale = 1.0;
        this.uXOffset = 0.0;
        this.uYOffset = 0.0;
        this.uMode = 0;
        this.uMaxChroma = 1.0;
        this.uLightAlpha = 1001;
        this.uShadowAlpha = 1000;
        this.uLightIntensity = 0.7;
        this.uLightColor = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([1.0, 1.0, 1.0]);
        this.uLightPos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"](new _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_6__["SphericalCoord"](2, 60, 110).toXYZ());
        this.uAmbientLightIntensity = 0.3;
        this.uObjColor = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([0.5, 0.5, 0.8]);
        this.uBallRadius = 0.5;
        this.uEye = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uTextureSize = 256;
        this.uRandom = Math.random();
        this.uRay00 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uRay01 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uRay10 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uRay11 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uSample = 0.0;
    }
    return Uniforms;
}());
/**
 * Class that does the work of building the Path Traced texture
 */
var PathTracerRenderer = /** @class */ (function () {
    function PathTracerRenderer(glCtx) {
        this.gl = null;
        this.uniforms = new Uniforms();
        this.mainView = RenderMode.Artist;
        this.smallViews = [
            RenderMode.Chroma,
            RenderMode.Value,
            RenderMode.Bands,
        ];
        this.vertices = [
            -1, -1,
            -1, +1,
            +1, -1,
            +1, +1
        ];
        this.gl = glCtx;
        var gl = this.gl;
        // larger texture is higher resolution, but takes longer to compute
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_13__["isMobile"]) {
            this.uniforms.uTextureSize = 256;
        }
        else {
            // this.uniforms.uTextureSize = 512;
            this.uniforms.uTextureSize = 256;
        }
        this.analyzer = new _ColorAnalyzer__WEBPACK_IMPORTED_MODULE_11__["ColorAnalyzer"](this.uniforms.uTextureSize);
        // create framebuffer
        this.frameBuffer = new _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_7__["glFrameBuffer"](gl, this.uniforms.uTextureSize, this.uniforms.uTextureSize);
        // create two textures. One we display and one we draw to
        this.textures = [];
        for (var i = 0; i < 2; i++) {
            this.textures.push(this.frameBuffer.createTexture(_gl_glTexture__WEBPACK_IMPORTED_MODULE_8__["glTextureStyle"].Float));
        }
        // create toScreen shader
        this.toScreenProgram = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__["glProgram"](gl, _shaders_PathTracerToScreenVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_PathTracerToScreenFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        this.toScreenVertexAttribute = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_10__["glAttributeBuffer"](gl, this.toScreenProgram, 'vertex');
        this.toScreenVertexAttribute.upload(this.vertices);
    }
    PathTracerRenderer.prototype.setObj = function (tObj) {
        this.compileShader(tObj);
    };
    PathTracerRenderer.prototype.dispose = function () {
        this.frameBuffer.dispose();
        this.textures[0].dispose();
        this.textures[1].dispose();
        if (this.vBlock) {
            this.vBlock.dispose();
        }
        if (this.tBlock) {
            this.tBlock.dispose();
        }
    };
    PathTracerRenderer.prototype.compileShader = function (tObj) {
        var gl = this.gl;
        if (this.toTextureProgram) {
            this.toTextureProgram.dispose();
            this.toTextureProgram = null;
        }
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_14__["Profiler"]();
        // create the toTexture shader
        if (tObj && tObj.numTriangles > 0) {
            var pObj = new _PathTracerObj__WEBPACK_IMPORTED_MODULE_15__["PathTracerObj"](tObj);
            this.toTextureProgram = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__["glProgram"](gl, _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_2__["default"]
                .replace('<VERSION>', '#version 300 es')
                .replace('NOTHING', 'USE_TRIANGLES'), _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_3__["default"]
                .replace('<VERSION>', '#version 300 es')
                .replace('NOTHING', 'USE_TRIANGLES')
                .replace('<NUM_VERTICES>', tObj.numVertices.toString())
                .replace('<NUM_VOLUMES>', pObj.volumes.length.toString())
                .replace('<NUM_TRIANGLES>', tObj.numTriangles.toString()));
            // upload triangles to the GPU
            this.uploadUniforms(pObj);
        }
        else {
            this.toTextureProgram = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__["glProgram"](gl, _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_2__["default"]
                .replace('<VERSION>', ''), _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_3__["default"]
                .replace('<VERSION>', ''));
        }
        this.toTextureVertexAttribute = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_10__["glAttributeBuffer"](gl, this.toTextureProgram, 'vertex');
        this.toTextureVertexAttribute.upload(this.vertices);
        p.log('compile');
    };
    /**
     * Uploads all the triangle data to WebGL
     *
     * @param program The program to upload to
     */
    PathTracerRenderer.prototype.uploadUniforms = function (pObj) {
        var gl = this.gl;
        var tObj = pObj.tObj;
        // upload the big chunks as Uniform Blocks
        var blockBinding = 2;
        this.vBlock = new _gl_glUniformBlock__WEBPACK_IMPORTED_MODULE_12__["glUniformBlock"](gl, this.toTextureProgram, 'MyVerticesBlock', blockBinding);
        // put the data into a Float32Array for uploading
        var vData = new Float32Array(pObj.tObj.numVertices * 4);
        for (var i = 0; i < tObj.numVertices; i++) {
            vData[4 * i + 0] = tObj.vertices[3 * i + 0];
            vData[4 * i + 1] = tObj.vertices[3 * i + 1];
            vData[4 * i + 2] = tObj.vertices[3 * i + 2];
            vData[4 * i + 3] = 0;
        }
        this.vBlock.upload(vData);
        blockBinding = 3;
        this.tBlock = new _gl_glUniformBlock__WEBPACK_IMPORTED_MODULE_12__["glUniformBlock"](gl, this.toTextureProgram, 'MyTrianglesBlock', blockBinding);
        // put the data into a Float32Array for uploading
        var tData = new Int32Array(tObj.numTriangles * 4);
        var index = 0;
        for (var v = 0; v < pObj.volumes.length; v++) {
            var vol = pObj.volumes[v];
            for (var i = 0; i < vol.triangles.length; i++) {
                var t = vol.triangles[i];
                tData[index++] = t.i1;
                tData[index++] = t.i2;
                tData[index++] = t.i3;
                tData[index++] = 0;
            }
        }
        this.tBlock.upload(tData);
        // Upload the volume info as a standard uniform
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__["glUniform"](gl, this.toTextureProgram);
        var startIndex = 0;
        for (var i = 0; i < pObj.volumes.length; i++) {
            var vol = pObj.volumes[i];
            uni.set('object.volumes[' + i + '].startIndex', startIndex, true);
            uni.set('object.volumes[' + i + '].numTriangles', vol.triangles.length, true);
            uni.set('object.volumes[' + i + '].boxMin', vol.boxMin);
            uni.set('object.volumes[' + i + '].boxMax', vol.boxMax);
            startIndex += vol.triangles.length;
        }
        uni.set('object.boxMin', tObj.box.min);
        uni.set('object.boxMax', tObj.box.max);
    };
    Object.defineProperty(PathTracerRenderer.prototype, "renderMode", {
        get: function () {
            return this.mainView;
        },
        enumerable: false,
        configurable: true
    });
    PathTracerRenderer.prototype.restart = function () {
        this.uniforms.uSample = 0;
    };
    PathTracerRenderer.prototype.getEyeRay = function (matrix, x, y) {
        var vec = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec4"]([x, y, 0, 1]);
        return matrix.multV(vec).divideByW().subtract(this.uniforms.uEye);
    };
    PathTracerRenderer.prototype.updateTexture = function (modelviewProjection) {
        var gl = this.gl;
        // implement aliasing by random sampling within a pixel
        var x = (Math.random() * 2 - 1) / this.uniforms.uTextureSize;
        var y = (Math.random() * 2 - 1) / this.uniforms.uTextureSize;
        var z = 0;
        var v = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([x, y, z]);
        var jitter = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_17__["Mat4"].fromTranslation(v);
        var matrix = jitter.multM(modelviewProjection).inverse();
        this.uniforms.uRay00 = this.getEyeRay(matrix, -1, -1);
        this.uniforms.uRay01 = this.getEyeRay(matrix, -1, +1);
        this.uniforms.uRay10 = this.getEyeRay(matrix, +1, -1);
        this.uniforms.uRay11 = this.getEyeRay(matrix, +1, +1);
        // set uniforms
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__["glUniform"](gl, this.toTextureProgram);
        uni.setAll(this.uniforms);
        // render to texture
        gl.viewport(0, 0, this.uniforms.uTextureSize, this.uniforms.uTextureSize);
        this.textures[0].bind();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
        this.frameBuffer.bind();
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.textures[1].get(), 0);
        this.toTextureVertexAttribute.bind(2);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        var data = this.analyzer.run(gl, this.uniforms.uLightAlpha, this.uniforms.uShadowAlpha);
        this.uniforms.uMaxChroma = data.maxChroma;
        var cr = new _GUI_ColorRange__WEBPACK_IMPORTED_MODULE_18__["ColorRange"]([data.darkestLightColor.toHtmlColor(), data.avgLightColor.toHtmlColor(), data.lightestLightColor.toHtmlColor()]);
        this.uniforms.uHighlightColor = data.highlightColor;
        this.uniforms.uLightLightColor = cr.get(0.85).toGlColor();
        this.uniforms.uMidLightColor = cr.get(0.5).toGlColor();
        this.uniforms.uDarkLightColor = cr.get(0.15).toGlColor();
        cr = new _GUI_ColorRange__WEBPACK_IMPORTED_MODULE_18__["ColorRange"]([data.darkestShadowColor.toHtmlColor(), data.avgShadowColor.toHtmlColor(), data.lightestShadowColor.toHtmlColor()]);
        //this.uniforms.uShadowColor = data.terminatorColor;
        this.uniforms.uShadowColor = data.avgShadowColor;
        this.uniforms.uReflectedLightColor = cr.get(1).toGlColor();
        this.uniforms.uDarkAccentColor = cr.get(0.0).toGlColor();
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        // ping pong textures
        this.textures.reverse();
        this.uniforms.uSample++;
        this.uniforms.uRandom = Math.random();
    };
    ;
    PathTracerRenderer.prototype.displayTexture = function () {
        var gl = this.gl;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        this.toScreenProgram.use();
        this.textures[0].bind();
        this.toScreenVertexAttribute.bind(2);
        // display the main screen
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__["glUniform"](gl, this.toScreenProgram);
        this.uniforms.uScale = 1.0;
        this.uniforms.uXOffset = 0.0;
        this.uniforms.uYOffset = 0.0;
        this.uniforms.uMode = this.mainView;
        uni.setAll(this.uniforms);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        // display the smaller views
        this.uniforms.uScale = 0.2;
        for (var i = 0; i < this.smallViews.length; i++) {
            this.uniforms.uXOffset = 1.0 - (this.smallViews.length - i - 0.5) * (2 * this.uniforms.uScale);
            this.uniforms.uYOffset = 1.0 - this.uniforms.uScale;
            this.uniforms.uMode = this.smallViews[i];
            uni.setAll(this.uniforms);
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        }
    };
    PathTracerRenderer.prototype.swap = function (pos) {
        this.smallViews = [
            RenderMode.Chroma,
            RenderMode.Value,
            RenderMode.Bands,
        ];
        if (this.mainView == this.smallViews[pos]) {
            this.mainView = RenderMode.Artist;
        }
        else {
            this.mainView = this.smallViews[pos];
            this.smallViews[pos] = RenderMode.Artist;
        }
        this.displayTexture();
    };
    return PathTracerRenderer;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/Volume.ts":
/*!***************************************!*\
  !*** ./src/Apps/PathTracer/Volume.ts ***!
  \***************************************/
/*! exports provided: Volume */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Volume", function() { return Volume; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");

var MAX = 1000; // INFINITY in our rendering world
/**
 * Class that manages a set of triangles within a given space
 */
var Volume = /** @class */ (function () {
    function Volume() {
        /**
         * The triangles enclosed within the bounding box
         */
        this.triangles = [];
        /**
         * Bounding box minimum
         */
        this.boxMin = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MAX, MAX, MAX]);
        /**
         * Bounding box maximum
         */
        this.boxMax = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-MAX, -MAX, -MAX]);
    }
    /**
     * Stores a triangle and updates the bounding box
     *
     * @param triangle The triangle to store
     */
    Volume.prototype.push = function (triangle) {
        this.triangles.push(triangle);
        this.boxMin.x = Math.min(this.boxMin.x, triangle.minX);
        this.boxMin.y = Math.min(this.boxMin.y, triangle.minY);
        this.boxMin.z = Math.min(this.boxMin.z, triangle.minZ);
        this.boxMax.x = Math.max(this.boxMax.x, triangle.maxX);
        this.boxMax.y = Math.max(this.boxMax.y, triangle.maxY);
        this.boxMax.z = Math.max(this.boxMax.z, triangle.maxZ);
    };
    return Volume;
}());



/***/ }),

/***/ "./src/Apps/Squint/BandwidthTracker.ts":
/*!*********************************************!*\
  !*** ./src/Apps/Squint/BandwidthTracker.ts ***!
  \*********************************************/
/*! exports provided: BandwidthTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BandwidthTracker", function() { return BandwidthTracker; });
/* harmony import */ var _Util_FPS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/FPS */ "./src/Util/FPS.ts");
/* harmony import */ var _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util/Stopwatch */ "./src/Util/Stopwatch.ts");


var Transfer = /** @class */ (function () {
    function Transfer(bytes) {
        this.elapsedS = NaN;
        this.bytes = bytes;
    }
    Transfer.prototype.end = function (elapsedS) {
        this.elapsedS = elapsedS;
    };
    return Transfer;
}());
/**
 * This class monitors the upload rate and recommends a frame rate to match. We
 * can then use this to pace our uploads to match available bandwidth.
 */
var BandwidthTracker = /** @class */ (function () {
    function BandwidthTracker() {
        this.transfers = [];
        this._fps = new _Util_FPS__WEBPACK_IMPORTED_MODULE_0__["FPS"]();
        this.stopwatch = new _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_1__["Stopwatch"]();
        this.activeTransfer = null;
    }
    Object.defineProperty(BandwidthTracker.prototype, "numSamples", {
        get: function () {
            return this.transfers.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BandwidthTracker.prototype, "lastTransferBytes", {
        get: function () {
            if (this.activeTransfer !== null) {
                return this.activeTransfer.bytes;
            }
            else {
                return NaN;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BandwidthTracker.prototype, "elapsedS", {
        get: function () {
            var elapsedS = 0;
            for (var _i = 0, _a = this.transfers; _i < _a.length; _i++) {
                var transfer = _a[_i];
                elapsedS += transfer.elapsedS;
            }
            return elapsedS;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BandwidthTracker.prototype, "bytes", {
        get: function () {
            var bytes = 0;
            for (var _i = 0, _a = this.transfers; _i < _a.length; _i++) {
                var transfer = _a[_i];
                bytes += transfer.bytes;
            }
            return bytes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BandwidthTracker.prototype, "megaBitsPerSec", {
        /**
         * bandwidth, Mbps
         */
        get: function () {
            if (this.transfers.length < 2) {
                return Number.NaN;
            }
            else {
                return (8 * this.bytes / (1000 * 1000)) / this.elapsedS;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BandwidthTracker.prototype, "fps", {
        get: function () {
            return this._fps.rate;
        },
        enumerable: false,
        configurable: true
    });
    BandwidthTracker.prototype.pause = function () {
        this.stopwatch.pause();
    };
    BandwidthTracker.prototype.resume = function () {
        this.stopwatch.resume();
    };
    /**
     * Call this data is transfered
     */
    BandwidthTracker.prototype.tick = function (bytes) {
        // create an object for tracking the transfer
        var transfer = new Transfer(bytes);
        // capture the transfer
        if (this.activeTransfer !== null) {
            this.activeTransfer.end(this.stopwatch.elapsedS);
            this.transfers.push(this.activeTransfer);
        }
        this.activeTransfer = transfer;
        // start a new transfer
        this.activeTransfer = new Transfer(bytes);
        this.stopwatch.restart();
        this._fps.tick();
        // trim existing transfers
        while (this.transfers.length > 20 ||
            (this.transfers.length > 2 && (this.elapsedS > 3))) {
            this.transfers.shift();
        }
    };
    return BandwidthTracker;
}());



/***/ }),

/***/ "./src/Apps/Squint/Camera.ts":
/*!***********************************!*\
  !*** ./src/Apps/Squint/Camera.ts ***!
  \***********************************/
/*! exports provided: Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _SquintStrings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SquintStrings */ "./src/Apps/Squint/SquintStrings.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Rect */ "./src/Apps/Squint/Rect.ts");
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */





var Camera = /** @class */ (function () {
    function Camera(parent) {
        var _this = this;
        // the area of the camera that we capture in a photo
        this.capture = new _Rect__WEBPACK_IMPORTED_MODULE_4__["Rect"]();
        this.onPaused = null;
        this.onResume = null;
        this.hiddenCanvas = document.createElement('canvas');
        this.video = document.createElement('video');
        this.video.id = 'Video';
        this.video.autoplay = true;
        this.video.setAttribute('playsinline', 'true'); // needed for iPhones
        this.video.onerror = function (err) {
            alert('video.onerror(): ' + err);
        };
        parent.appendChild(this.video);
        this.overlayCanvas = document.createElement('canvas');
        this.overlayCanvas.id = 'VideoOverlay';
        parent.appendChild(this.overlayCanvas);
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_3__["PointerEventHandler"](this.overlayCanvas);
        var hit = _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].None;
        handler.onDown = function (pos) {
            hit = _this.getHit(pos);
        };
        handler.onMove = function (pos) {
            var hit = _this.getHit(pos);
            switch (hit) {
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UL:
                    _this.overlayCanvas.style.cursor = 'nwse-resize';
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UR:
                    _this.overlayCanvas.style.cursor = 'nesw-resize';
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LL:
                    _this.overlayCanvas.style.cursor = 'nesw-resize';
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LR:
                    _this.overlayCanvas.style.cursor = 'nwse-resize';
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].Inside:
                    if (_this.capture.width < _this.videoWidth || _this.capture.height < _this.videoHeight) {
                        _this.overlayCanvas.style.cursor = 'move';
                    }
                    else {
                        _this.overlayCanvas.style.cursor = 'default';
                    }
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].None:
                    _this.overlayCanvas.style.cursor = 'default';
                    break;
            }
        };
        handler.onDrag = function (pos, delta) {
            var ratio = _this.videoWidth / _this.clientWidth;
            delta.x *= ratio;
            delta.y *= ratio;
            var min = 200;
            // check for limits
            if (hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UL || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LL || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].Inside) {
                if (_this.capture.width - delta.x < min) {
                    delta.x = _this.capture.width - min;
                }
                if (_this.capture.x + delta.x < 0) {
                    delta.x = -_this.capture.x;
                }
            }
            if (hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UR || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LR || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].Inside) {
                if (_this.capture.right + delta.x > _this.videoWidth) {
                    delta.x = _this.videoWidth - _this.capture.right;
                }
                if (_this.capture.width + delta.x < min) {
                    delta.x = min - _this.capture.width;
                }
            }
            if (hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UL || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UR || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].Inside) {
                if (_this.capture.y + delta.y + min > _this.capture.bottom) {
                    delta.y = _this.capture.bottom - _this.capture.y - min;
                }
                if (_this.capture.y + delta.y < 0) {
                    delta.y = -_this.capture.y;
                }
            }
            if (hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LL || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LR || hit === _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].Inside) {
                if (_this.capture.height + delta.y < min) {
                    delta.y = min - _this.capture.height;
                }
                if (_this.capture.bottom + delta.y > _this.videoHeight) {
                    delta.y = _this.videoHeight - _this.capture.bottom;
                }
            }
            // do the move
            switch (hit) {
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UL:
                    _this.capture.x += delta.x;
                    _this.capture.y += delta.y;
                    _this.capture.width -= delta.x;
                    _this.capture.height -= delta.y;
                    _this.draw();
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].UR:
                    _this.capture.y += delta.y;
                    _this.capture.width += delta.x;
                    _this.capture.height -= delta.y;
                    _this.draw();
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LL:
                    _this.capture.x += delta.x;
                    _this.capture.width -= delta.x;
                    _this.capture.height += delta.y;
                    _this.draw();
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].LR:
                    _this.capture.width += delta.x;
                    _this.capture.height += delta.y;
                    _this.draw();
                    break;
                case _Rect__WEBPACK_IMPORTED_MODULE_4__["RectHit"].Inside:
                    _this.capture.x += delta.x;
                    _this.capture.y += delta.y;
                    break;
            }
        };
        document.addEventListener('visibilitychange', function () {
            if (_this.visible) {
                if (document.visibilityState === 'visible') {
                    if (_this.onResume) {
                        _this.onResume();
                    }
                }
                else {
                    if (_this.onPaused) {
                        _this.onPaused();
                    }
                }
            }
        });
        /*
        window.addEventListener('orientationchange', () => {
           this.capture.x = 0;
           this.capture.y = 0;
           this.capture.width = this.videoWidth;
           this.capture.height = this.videoHeight;
           let rect = this.video.getBoundingClientRect();
           this.overlayCanvas.style.left = rect.left + 'px';
           this.overlayCanvas.style.right = rect.right + 'px';
           this.overlayCanvas.style.top = rect.top + 'px';
           this.overlayCanvas.style.bottom = rect.bottom + 'px';
        });
        */
    }
    Object.defineProperty(Camera.prototype, "paused", {
        get: function () {
            return (document.visibilityState !== 'visible');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "videoWidth", {
        get: function () {
            return this.video.videoWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "videoHeight", {
        get: function () {
            return this.video.videoHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "clientWidth", {
        get: function () {
            return this.video.clientWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "clientHeight", {
        get: function () {
            return this.video.clientHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "offset", {
        get: function () {
            var style = getComputedStyle(this.video);
            return Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["pxToNumber"])(style.borderWidth) + Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["pxToNumber"])(style.margin);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "width", {
        set: function (value) {
            this.video.style.width = value + 'px';
            this.overlayCanvas.style.width = (value + 2 * this.offset) + 'px';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "height", {
        set: function (value) {
            this.video.style.height = value + 'px';
            this.overlayCanvas.style.height = (value + 2 * this.offset) + 'px';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "visible", {
        get: function () {
            return (getComputedStyle(this.video).display !== 'none');
        },
        set: function (flag) {
            if (flag === this.visible) {
                return;
            }
            if (flag) {
                this.video.style.display = 'block';
                this.overlayCanvas.style.display = 'block';
            }
            else {
                this.video.style.display = 'none';
                this.overlayCanvas.style.display = 'none';
            }
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype.getHit = function (pos) {
        var scale = this.clientWidth / this.videoWidth;
        var rect = this.capture.getScaled(scale);
        var offset = this.offset;
        rect.x += offset;
        rect.y += offset;
        var epsilon = 0.5 * Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["getEmPixels"])();
        return rect.hit(pos, epsilon);
    };
    Camera.prototype.draw = function () {
        var ctx = this.overlayCanvas.getContext('2d');
        var w = this.overlayCanvas.width;
        var h = this.overlayCanvas.height;
        var m = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["getEmPixels"])();
        ctx.clearRect(0, 0, w, h);
        ctx.fillStyle = 'rgba(0,0,0,0.6)';
        ctx.fillRect(m, m, w - 2 * m, h - 2 * m);
        var scale = this.video.clientWidth / this.video.videoWidth;
        var rect = this.capture.getScaled(scale);
        ctx.clearRect(m + rect.x, m + rect.y, rect.width, rect.height);
        // handles
        ctx.fillStyle = 'lightgreen';
        ctx.strokeStyle = 'darkgreen';
        var radius = 0.5 * Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["getEmPixels"])();
        ctx.beginPath();
        ctx.arc(m + rect.left, m + rect.top, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(m + rect.right, m + rect.top, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(m + rect.left, m + rect.bottom, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(m + rect.right, m + rect.bottom, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
    };
    Camera.prototype.takePicture = function (megaPixels, jpegQuality) {
        var _this = this;
        if (this.video.readyState != 4) {
            return Promise.reject(_SquintStrings__WEBPACK_IMPORTED_MODULE_2__["SquintStrings"].CAMERA_NOT_READY);
        }
        if (this.paused) {
            return Promise.reject(_SquintStrings__WEBPACK_IMPORTED_MODULE_2__["SquintStrings"].CAMERA_NOT_READY);
        }
        if (this.video.videoHeight === 0 || this.video.videoWidth === 0) {
            return Promise.reject('XX Video Size = 0');
        }
        this.overlayCanvas.width = this.overlayCanvas.clientWidth;
        this.overlayCanvas.height = this.overlayCanvas.clientHeight;
        this.draw();
        var scale = Math.min(Math.sqrt(1000000 * megaPixels / (this.capture.width * this.capture.height)), 1);
        this.hiddenCanvas.width = this.capture.width * scale;
        this.hiddenCanvas.height = this.capture.height * scale;
        var context = this.hiddenCanvas.getContext('2d');
        if (context === null) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Cannot get context 2D');
            return Promise.reject(_SquintStrings__WEBPACK_IMPORTED_MODULE_2__["SquintStrings"].CAMERA_NOT_READY);
        }
        // @ts-ignore: context isn't null
        context.drawImage(this.video, this.capture.x, this.capture.y, this.capture.width, this.capture.height, 0, 0, this.hiddenCanvas.width, this.hiddenCanvas.height);
        return new Promise(function (resolve, reject) {
            _this.hiddenCanvas.toBlob(function (blob) {
                // the camera could have stopped since we started this
                // process. If so, abandon the result as we don't know
                // when the camera went off
                if (_this.video.readyState != 4) {
                    return reject(_SquintStrings__WEBPACK_IMPORTED_MODULE_2__["SquintStrings"].CAMERA_NOT_READY);
                }
                else if (_this.paused) {
                    return reject(_SquintStrings__WEBPACK_IMPORTED_MODULE_2__["SquintStrings"].CAMERA_NOT_READY);
                }
                else {
                    resolve(blob);
                }
            }, 'image/jpeg', jpegQuality);
        });
    };
    Camera.prototype.start = function (desired) {
        var _this = this;
        var constraints;
        if (desired.deviceId && desired.deviceId.toString().trim().length > 0) {
            constraints = {
                video: {
                    width: { ideal: 10 * 1000 },
                    height: { ideal: 10 * 1000 },
                    facingMode: desired.facingMode,
                    deviceId: desired.deviceId,
                },
                audio: false,
            };
        }
        else {
            //debug('no device id, falling back to any camera');
            constraints = {
                video: {
                    width: { ideal: 10 * 1000 },
                    height: { ideal: 10 * 1000 },
                    facingMode: desired.facingMode,
                },
                audio: false,
            };
        }
        return new Promise(function (resolve, reject) {
            navigator.mediaDevices.getUserMedia(constraints)
                .then(function (stream) {
                if (stream === null) {
                    reject('Could not create video stream');
                }
                else {
                    // let the Video object know that the user has know granted user permission
                    // to use the camera
                    Camera.videoEnabled = true;
                    _this.video.srcObject = stream;
                    var track_1 = stream.getVideoTracks()[0];
                    _this.video.play()
                        .then(function () {
                        _this.capture.x = 0;
                        _this.capture.y = 0;
                        _this.capture.width = _this.video.videoWidth;
                        _this.capture.height = _this.video.videoHeight;
                        resolve(track_1);
                    })
                        .catch(function (err) {
                        reject(err);
                    });
                }
            })
                .catch(function (reason) {
                reject('Video error: ' + reason);
            });
        });
    };
    Camera.prototype.stop = function () {
        if (this.video.srcObject) {
            // Using the camera is not robust. Applying constraints to change things
            // like which camera is in use only works sometimes. The most robust I can
            // make it is to close the video element and create a new one.
            var stream = this.video.srcObject;
            stream.getTracks().forEach(function (track) {
                track.stop();
            });
        }
    };
    Camera.prototype.applyAdvancedConstraints = function (advancedConstraints) {
        var stream = this.video.srcObject;
        var track = stream.getVideoTracks()[0];
        var constraint = {};
        for (var _i = 0, advancedConstraints_1 = advancedConstraints; _i < advancedConstraints_1.length; _i++) {
            var item = advancedConstraints_1[_i];
            constraint[item.constraint] = item.value();
        }
        console.log('setting advanced constraints: ' + JSON.stringify(constraint, null, ' '));
        var constraints = { advanced: [constraint] };
        track.applyConstraints((constraints))
            .catch(function (err) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Cannot apply constraints: ' + err);
        });
    };
    Camera.prototype.getCapabilities = function () {
        if (this.video.srcObject) {
            var stream = this.video.srcObject;
            var track = stream.getVideoTracks()[0];
            if (track.getCapabilities) {
                return track.getCapabilities();
            }
        }
        return {};
    };
    Camera.numToString = function (num) {
        if (Number.isInteger(num)) {
            return num.toString();
        }
        else {
            return num.toFixed(3);
        }
    };
    Camera.capabilityToString = function (capabilities, name) {
        var obj = capabilities[name];
        var str = name + ': ';
        if (typeof obj === 'object') {
            if (obj['min'] !== undefined) {
                str += Camera.numToString(obj['min']) + ' to ' + Camera.numToString(obj['max']);
            }
            else if (obj instanceof Array) {
                for (var i = 0; i < obj.length; i++) {
                    if (i > 0) {
                        str += ', ';
                    }
                    str += JSON.stringify(obj[i]);
                }
            }
            else {
                str += JSON.stringify(obj);
            }
        }
        else {
            str += JSON.stringify(obj);
        }
        return str;
    };
    Camera.getCameras = function (onFound) {
        navigator.mediaDevices.enumerateDevices()
            .then(function (devices) {
            if (Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["iOS"])() && Camera.videoEnabled === false) {
                // iPhones and iPads don't allow you to enumerate cameras until the user
                // has given permission and that doesn't happen until the first time
                // we try to use one. 
                // TODO make this work on iPhones without the if statement
                onFound({
                    label: 'Front Camera',
                    facingMode: 'user',
                });
                onFound({
                    label: 'Back Camera',
                    facingMode: 'environment',
                });
            }
            else {
                var str = '';
                var count = 0;
                for (var i = 0; i < devices.length; i++) {
                    var device = devices[i];
                    if (device.kind === 'videoinput') {
                        count++;
                        str += '"' + device.deviceId + '": ' + device.label + '\n';
                    }
                }
                str = count + ' cameras found.\n' + str;
                console.log('enumerateDevices()\n' + str);
                var cameraCount = 1;
                for (var i = 0; i < devices.length; i++) {
                    var device = devices[i];
                    if (device.kind === 'videoinput') {
                        var actual = {
                            label: 'camera ' + cameraCount++,
                            deviceId: device.deviceId,
                        };
                        onFound(actual);
                    }
                }
            }
        })
            .catch(function (err) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Cannot enumerate video devices: ' + err);
        });
    };
    Camera.videoEnabled = false;
    return Camera;
}());



/***/ }),

/***/ "./src/Apps/Squint/ChatPanel.ts":
/*!**************************************!*\
  !*** ./src/Apps/Squint/ChatPanel.ts ***!
  \**************************************/
/*! exports provided: ChatPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChatPanel", function() { return ChatPanel; });
/* harmony import */ var _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/ListBox */ "./src/GUI/ListBox.ts");
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _ResizeablePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeablePanel */ "./src/Apps/Squint/ResizeablePanel.ts");
/* harmony import */ var _SquintEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SquintEvents */ "./src/Apps/Squint/SquintEvents.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var ChatPanel = /** @class */ (function (_super) {
    __extends(ChatPanel, _super);
    function ChatPanel(squint, parent) {
        var _this = _super.call(this, parent, 'ChatPanelDiv', 'Flex', 'ChatPanel') || this;
        _this.squint = squint;
        var viewersTitleDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_1__["GUI"].create('div', 'ViewersTitleDiv', _this.div);
        viewersTitleDiv.className = 'TitleClass';
        viewersTitleDiv.innerText = 'Viewers';
        var closeButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_1__["GUI"].create('button', 'ChatPanelCloseButton', viewersTitleDiv);
        closeButton.className = 'ButtonClass';
        closeButton.innerText = 'X';
        closeButton.onclick = function () {
            _this.visible = false;
        };
        _this.viewersListBox = new _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__["ListBox"](_this.div, 'ViewersListBox');
        var chatTitleDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_1__["GUI"].create('div', 'ChatTitleDiv', _this.div);
        chatTitleDiv.className = 'TitleClass';
        chatTitleDiv.innerText = 'Chat';
        _this.chatListBox = new _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__["ListBox"](_this.div, 'ChatListBox');
        var chatTextInput = _GUI_GUI__WEBPACK_IMPORTED_MODULE_1__["GUI"].create('input', 'ChatTextInput', _this.div);
        chatTextInput.type = 'text';
        chatTextInput.placeholder = 'Type chat message here';
        chatTextInput.onkeydown = function (event) {
            if (event.keyCode === 13) {
                _this.squint.sendChatMessage(chatTextInput.value);
                chatTextInput.value = '';
            }
            event.stopPropagation();
        };
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_3__["SquintEvent"].SessionInfo,
            handler: function (info) {
                _this.onSessionInfo(info);
            }
        });
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_3__["SquintEvent"].ConnectionInfoUpdate,
            handler: function (info) {
                _this.onUpdateConnectionInfo(info);
            }
        });
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_3__["SquintEvent"].ChatMessage,
            handler: function (src, msg) {
                _this.onChatMessage(src, msg);
            }
        });
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_3__["SquintEvent"].Close,
            handler: function () {
                _this.chatListBox.clear();
                _this.viewersListBox.clear();
            }
        });
        return _this;
    }
    ChatPanel.prototype.onSessionInfo = function (info) {
        this.viewersListBox.clear();
        if (info.host) {
            this.viewersListBox.addItem(info.host.userName + ' (host)', info.host.connectionId);
            this.hostConnectionId = info.host.connectionId;
        }
        for (var _i = 0, _a = info.viewers; _i < _a.length; _i++) {
            var viewer = _a[_i];
            this.viewersListBox.addItem(viewer.userName, viewer.connectionId);
        }
    };
    ChatPanel.prototype.onUpdateConnectionInfo = function (info) {
        for (var _i = 0, _a = this.viewersListBox.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.userData === info.connectionId) {
                if (info.connectionId === this.hostConnectionId) {
                    item.div.innerText = info.userName + ' (host)';
                }
                else {
                    item.div.innerText = info.userName;
                }
            }
        }
    };
    ChatPanel.prototype.onChatMessage = function (src, msg) {
        var item = this.chatListBox.addItem();
        item.innerHTML = '<b>' + src.userName + '</b>: ' + msg;
    };
    return ChatPanel;
}(_ResizeablePanel__WEBPACK_IMPORTED_MODULE_2__["ResizeablePanel"]));



/***/ }),

/***/ "./src/Apps/Squint/CountdownTimer.ts":
/*!*******************************************!*\
  !*** ./src/Apps/Squint/CountdownTimer.ts ***!
  \*******************************************/
/*! exports provided: CountdownTimer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CountdownTimer", function() { return CountdownTimer; });
/* harmony import */ var _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/Stopwatch */ "./src/Util/Stopwatch.ts");

var SEC = 1000;
var MIN = 60 * SEC;
var CountdownTimer = /** @class */ (function () {
    function CountdownTimer() {
        this.sw = new _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"](false);
    }
    Object.defineProperty(CountdownTimer.prototype, "running", {
        get: function () {
            return this.sw.paused === false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CountdownTimer.prototype, "durationMin", {
        get: function () {
            return this.durationMs / MIN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CountdownTimer.prototype, "elapsedMs", {
        get: function () {
            return this.sw.elapsedMs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CountdownTimer.prototype, "remainingMs", {
        get: function () {
            return Math.max(0, this.durationMs - this.sw.elapsedMs);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CountdownTimer.prototype, "timeRemainingStr", {
        /*
        public get timeRemainingMin(): number {
           return Math.max(0, this.durationMs - this.sw.elapsedMs) / MIN;
        }
     */
        get: function () {
            var remaining = this.remainingMs;
            var min = Math.floor(remaining / MIN);
            var sec = Math.floor((remaining - min * MIN) / SEC);
            var minStr = min < 10 ? '0' + min : min;
            var secStr = sec < 10 ? '0' + sec : sec;
            return minStr + ':' + secStr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CountdownTimer.prototype, "expired", {
        get: function () {
            return (this.sw.elapsedMs > this.durationMs);
        },
        enumerable: false,
        configurable: true
    });
    CountdownTimer.prototype.start = function () {
        if (this.sw.paused) {
            this.sw.resume();
        }
    };
    CountdownTimer.prototype.pause = function () {
        if (this.running) {
            this.sw.pause();
        }
    };
    CountdownTimer.prototype.reset = function () {
        this.sw.reset(false);
    };
    CountdownTimer.prototype.addOne = function () {
        this.pause();
        this.durationMs = this.remainingMs;
        this.sw.elapsedMs = 0;
        // the next highest minute value
        this.durationMs = MIN * Math.floor(this.durationMin) + MIN;
    };
    CountdownTimer.prototype.subtractOne = function () {
        this.pause();
        this.durationMs = this.remainingMs;
        this.sw.elapsedMs = 0;
        // the next lowest minute value
        this.durationMs = MIN * Math.floor(0.9999 + this.durationMin) - MIN;
        this.durationMs = Math.max(this.durationMs, 0);
    };
    CountdownTimer.prototype.synchronize = function (info) {
        if (this.running !== info.running) {
            this.sw.reset(info.running);
        }
        this.sw.elapsedMs = info.elapsedMs;
        this.durationMs = info.durationMs;
    };
    return CountdownTimer;
}());



/***/ }),

/***/ "./src/Apps/Squint/EventManager.ts":
/*!*****************************************!*\
  !*** ./src/Apps/Squint/EventManager.ts ***!
  \*****************************************/
/*! exports provided: EventManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return EventManager; });
var EventManager = /** @class */ (function () {
    function EventManager() {
        this.handlers = new Map();
    }
    EventManager.prototype.on = function (name, handler) {
        var arr = this.handlers.get(name);
        if (arr) {
            arr.push(handler);
        }
        else {
            var arr_1 = [];
            arr_1.push(handler);
            this.handlers.set(name, arr_1);
        }
    };
    EventManager.prototype.remove = function (name, handler) {
        var arr = this.handlers.get(name);
        if (arr) {
            arr = arr.filter(function (elem) { return elem != handler; });
            this.handlers.set(name, arr);
        }
    };
    EventManager.prototype.emit = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var arr = this.handlers.get(name);
        if (arr) {
            for (var _a = 0, arr_2 = arr; _a < arr_2.length; _a++) {
                var handler = arr_2[_a];
                try {
                    handler(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
                }
                catch (err) {
                    console.error('Unhandled exception: ' + err + '\n' + JSON.stringify(err, null, ' '));
                }
            }
        }
    };
    return EventManager;
}());



/***/ }),

/***/ "./src/Apps/Squint/ImageCanvas.ts":
/*!****************************************!*\
  !*** ./src/Apps/Squint/ImageCanvas.ts ***!
  \****************************************/
/*! exports provided: ImageCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageCanvas", function() { return ImageCanvas; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");

var ImageCanvas = /** @class */ (function () {
    function ImageCanvas(parent, id) {
        this.zoom = 1;
        this.xOffset = 0;
        this.yOffset = 0;
        this.contrast = 100;
        this.brightness = 100;
        this.saturate = 100;
        this.blur = 0;
        this.black = 0;
        this.white = 1;
        this.midPt = 0.5;
        this.midValue = 0.5;
        this.grayScale = false;
        this.canvas = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('canvas', id, parent);
    }
    Object.defineProperty(ImageCanvas.prototype, "element", {
        get: function () {
            return this.canvas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageCanvas.prototype, "width", {
        get: function () {
            return this.canvas.width;
        },
        set: function (px) {
            this.canvas.width = px;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageCanvas.prototype, "height", {
        get: function () {
            return this.canvas.height;
        },
        set: function (px) {
            this.canvas.height = px;
        },
        enumerable: false,
        configurable: true
    });
    return ImageCanvas;
}());



/***/ }),

/***/ "./src/Apps/Squint/ImageCanvas2D.ts":
/*!******************************************!*\
  !*** ./src/Apps/Squint/ImageCanvas2D.ts ***!
  \******************************************/
/*! exports provided: ImageCanvas2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageCanvas2D", function() { return ImageCanvas2D; });
/* harmony import */ var _Util_hsvColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/hsvColor */ "./src/Util/hsvColor.ts");
/* harmony import */ var _ImageCanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageCanvas */ "./src/Apps/Squint/ImageCanvas.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ImageCanvas2D = /** @class */ (function (_super) {
    __extends(ImageCanvas2D, _super);
    function ImageCanvas2D(parent, id) {
        return _super.call(this, parent, id) || this;
    }
    ImageCanvas2D.prototype.clear = function () {
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };
    ImageCanvas2D.prototype.draw = function (img) {
        var canvasWidth = this.canvas.width;
        var canvasHeight = this.canvas.height;
        var canvasAR = canvasWidth / canvasHeight;
        var imgWidth = img.width;
        var imgHeight = img.height;
        var imgAR = imgWidth / imgHeight;
        var width;
        var height;
        if (canvasAR > imgAR) {
            height = this.zoom * canvasHeight;
            width = height * imgAR;
        }
        else {
            width = this.zoom * canvasWidth;
            height = width / imgAR;
        }
        var x = (canvasWidth - width) / 2.0 + this.xOffset;
        var y = (canvasHeight - height) / 2.0 - this.yOffset;
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        if (ctx.filter) {
            ctx.filter =
                'contrast(' + this.contrast + '%) ' +
                    'brightness(' + this.brightness + '%) ' +
                    'saturate(' + this.saturate + '%) ' +
                    'blur(' + blur + 'px) ';
        }
        ctx.drawImage(img, x, y, width, height);
        // if filters are not supported on contexts, ummm Safari, do our own
        if (ctx.filter === undefined) {
            var imageData = ctx.getImageData(x, y, width, height);
            var data = imageData.data;
            if (this.contrast !== 100) {
                var amount = this.contrast / 100;
                for (var i = 0; i < data.length; i += 4) {
                    data[i + 0] = ((((data[i + 0] / 255) - .5) * amount) + .5) * 255;
                    data[i + 1] = ((((data[i + 1] / 255) - .5) * amount) + .5) * 255;
                    data[i + 2] = ((((data[i + 2] / 255) - .5) * amount) + .5) * 255;
                }
            }
            if (this.brightness !== 100) {
                var amount = this.brightness / 100;
                for (var i = 0; i < data.length; i += 4) {
                    data[i + 0] *= amount;
                    data[i + 1] *= amount;
                    data[i + 2] *= amount;
                }
            }
            if (this.saturate !== 100) {
                var amount = this.saturate / 100;
                var lumR = (1 - amount) * .3086;
                var lumG = (1 - amount) * .6094;
                var lumB = (1 - amount) * .0820;
                var shiftW = width << 2;
                for (var j = 0; j < height; j++) {
                    var offset = j * shiftW;
                    for (var i = 0; i < width; i++) {
                        var pos = offset + (i << 2);
                        var r = data[pos + 0];
                        var g = data[pos + 1];
                        var b = data[pos + 2];
                        data[pos + 0] = ((lumR + amount) * r) + (lumG * g) + (lumB * b);
                        data[pos + 1] = (lumR * r) + ((lumG + amount) * g) + (lumB * b);
                        data[pos + 2] = (lumR * r) + (lumG * g) + ((lumB + amount) * b);
                    }
                }
            }
            ctx.putImageData(imageData, x, y);
        }
        this.applyCustomFilters(ctx, x, y, width, height);
    };
    ImageCanvas2D.prototype.applyCustomFilters = function (ctx, x, y, width, height) {
        var imageData = ctx.getImageData(x, y, width, height);
        var data = imageData.data;
        var hsv = new _Util_hsvColor__WEBPACK_IMPORTED_MODULE_0__["hsvColor"]([0, 0, 0]);
        var grayScale = this.grayScale;
        for (var i = 0; i < data.length; i += 4) {
            hsv.fromHtmlValues(data[i + 0], data[i + 1], data[i + 2]);
            if (hsv.v <= this.black) {
                hsv.v = 0;
            }
            else if (hsv.v >= this.white) {
                hsv.v = 1;
            }
            else {
                if (hsv.v > this.midPt) {
                    hsv.v = this.midValue + (1 - this.midValue) * (hsv.v - this.midPt) / (this.white - this.midPt);
                }
                else {
                    hsv.v = 0 + this.midValue * ((hsv.v - this.black) / (this.midPt - this.black));
                }
            }
            var rgb = hsv.toRGBValues();
            data[i + 0] = rgb[0];
            data[i + 1] = rgb[1];
            data[i + 2] = rgb[2];
            if (grayScale) {
                var r = data[i + 0];
                var g = data[i + 1];
                var b = data[i + 2];
                //let val = 0.299 * r + 0.587 * g + 0.114 * b;
                // adobe Y'204 luminosity
                var val = 0.3086 * r + 0.6094 * g + 0.0820 * b;
                data[i + 0] = val;
                data[i + 1] = val;
                data[i + 2] = val;
            }
        }
        ctx.putImageData(imageData, x, y);
    };
    return ImageCanvas2D;
}(_ImageCanvas__WEBPACK_IMPORTED_MODULE_1__["ImageCanvas"]));



/***/ }),

/***/ "./src/Apps/Squint/LevelsPanel.ts":
/*!****************************************!*\
  !*** ./src/Apps/Squint/LevelsPanel.ts ***!
  \****************************************/
/*! exports provided: LevelsPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LevelsPanel", function() { return LevelsPanel; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _ResizeablePanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ResizeablePanel */ "./src/Apps/Squint/ResizeablePanel.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var HitItem;
(function (HitItem) {
    HitItem[HitItem["Black"] = 0] = "Black";
    HitItem[HitItem["White"] = 1] = "White";
    HitItem[HitItem["Both"] = 2] = "Both";
    HitItem[HitItem["Mid"] = 3] = "Mid";
    HitItem[HitItem["None"] = 4] = "None";
})(HitItem || (HitItem = {}));
var Hit = /** @class */ (function () {
    function Hit() {
        this.offsetX = 0;
        this.offsetY = 0;
        this.item = HitItem.None;
    }
    return Hit;
}());
var LevelsPanel = /** @class */ (function (_super) {
    __extends(LevelsPanel, _super);
    function LevelsPanel(parent) {
        var _this = _super.call(this, parent, 'LevelsPanelDiv', 'Flex', 'LevelsPanel') || this;
        _this.white = 1;
        _this.black = 0;
        _this.midPoint = 0.5;
        _this.midValue = 0.5;
        _this.onChange = null;
        var viewersTitleDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'TitleDiv', _this.div);
        viewersTitleDiv.className = 'TitleClass';
        viewersTitleDiv.innerText = 'Levels';
        var closeButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('button', 'LevelsPanelCloseButton', viewersTitleDiv);
        closeButton.className = 'ButtonClass';
        closeButton.innerText = 'X';
        closeButton.onclick = function () {
            _this.visible = false;
        };
        _this.canvas = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('canvas', 'AfterCanvas', _this.div);
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__["PointerEventHandler"](_this.canvas);
        var hit;
        handler.onDown = function (pos) {
            hit = _this.getHit(pos);
        };
        handler.onMove = function (pos) {
            var hit = _this.getHit(pos);
            switch (hit.item) {
                case HitItem.Black:
                case HitItem.White:
                    _this.canvas.style.cursor = 'ew-resize';
                    break;
                case HitItem.Mid:
                    _this.canvas.style.cursor = 'move';
                    break;
                case HitItem.Both:
                    _this.canvas.style.cursor = 'default';
                    break;
            }
        };
        var minDelta = 0.01;
        handler.onDrag = function (pos, delta) {
            switch (hit.item) {
                case HitItem.Black:
                    _this.black = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])((pos.x + hit.offsetX) / _this.canvas.width, 0, 1 - minDelta);
                    _this.white = Math.max(_this.white, _this.black + minDelta);
                    _this.draw();
                    if (_this.onChange) {
                        _this.onChange();
                    }
                    break;
                case HitItem.White:
                    _this.white = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])((pos.x + hit.offsetX) / _this.canvas.width, minDelta, 1);
                    _this.black = Math.min(_this.black, _this.white - minDelta);
                    _this.draw();
                    if (_this.onChange) {
                        _this.onChange();
                    }
                    break;
                case HitItem.Mid:
                    var pts = _this.computePoints();
                    _this.midPoint = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])((pos.x + hit.offsetX - pts.black.x) / (pts.white.x - pts.black.x), 0, 1);
                    _this.midValue = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])(1 - (pos.y + hit.offsetY) / _this.canvas.height, 0, 1);
                    _this.draw();
                    if (_this.onChange) {
                        _this.onChange();
                    }
                    break;
                case HitItem.Both:
                    var delta_1 = _this.white - _this.black;
                    _this.black = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])((pos.x + hit.offsetX) / _this.canvas.width, 0, 1 - delta_1);
                    _this.white = _this.black + delta_1;
                    _this.draw();
                    if (_this.onChange) {
                        _this.onChange();
                    }
                    break;
            }
        };
        var em = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["getEmPixels"])();
        _this.radius = 0.8 * em;
        _this.margin = 0.9 * em;
        _this.lineWidth = 0.1 * em;
        _this.draw();
        return _this;
    }
    LevelsPanel.prototype.getHit = function (pos) {
        var hit = new Hit();
        var epsilon = 1.5 * this.radius;
        var pts = this.computePoints();
        if (pos.distance(pts.mid) < epsilon) {
            hit.item = HitItem.Mid;
            hit.offsetX = pts.mid.x - pos.x;
            hit.offsetY = pts.mid.y - pos.y;
        }
        else if (pos.distance(pts.black) < epsilon) {
            hit.item = HitItem.Black;
            hit.offsetX = pts.black.x - pos.x;
        }
        else if (pos.distance(pts.white) < epsilon) {
            hit.item = HitItem.White;
            hit.offsetX = pts.white.x - pos.x;
        }
        else {
            hit.item = HitItem.Both;
            hit.offsetX = pts.black.x - pos.x;
        }
        return hit;
    };
    LevelsPanel.prototype.draw = function () {
        var _this = this;
        // work around for the canvas not being initialized yet when calling
        // this function from the constructor. Isn't there an event for this?
        if (this.canvas.clientWidth === 0) {
            setTimeout(function () {
                _this.draw();
            }, 10);
            return;
        }
        // sync sizes
        this.canvas.width = this.canvas.clientWidth;
        this.canvas.height = this.canvas.clientHeight;
        // short-hand var names
        var width = this.canvas.width - 2 * this.margin;
        var height = this.canvas.height - 2 * this.margin;
        var pts = this.computePoints();
        var ctx = this.canvas.getContext('2d');
        // draw the background
        var grd = ctx.createLinearGradient(this.margin, 0, this.margin + width, 0);
        grd.addColorStop(0, 'black');
        grd.addColorStop(this.black, 'black');
        var pos = this.black + this.midPoint * (this.white - this.black);
        var rgb = Math.round(255 * this.midValue);
        grd.addColorStop(pos, 'rgb(' + rgb + ',' + rgb + ',' + rgb + ')');
        grd.addColorStop(this.white, 'white');
        grd.addColorStop(1, 'white');
        ctx.fillStyle = grd;
        ctx.fillRect(this.margin, this.margin, width, height);
        // draw lines
        ctx.strokeStyle = 'lightgreen';
        ctx.lineWidth = 2 * this.lineWidth;
        ctx.beginPath();
        ctx.moveTo(this.margin + this.black * width, this.margin + height);
        ctx.lineTo(pts.mid.x, pts.mid.y);
        ctx.lineTo(this.margin + this.white * width, this.margin);
        ctx.stroke();
        // handles
        ctx.fillStyle = 'lightgreen';
        ctx.strokeStyle = 'darkgreen';
        ctx.lineWidth = this.lineWidth;
        ctx.beginPath();
        ctx.arc(pts.black.x, pts.black.y, this.radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(pts.white.x, pts.white.y, this.radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(pts.mid.x, pts.mid.y, this.radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
    };
    LevelsPanel.prototype.computePoints = function () {
        // short-hand var names
        var m = this.margin;
        var width = this.canvas.width - 2 * m;
        var height = this.canvas.height - 2 * m;
        return {
            black: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec2"]([m + this.black * width, m + height]),
            white: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec2"]([m + this.white * width, m]),
            mid: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec2"]([m + (this.black + this.midPoint * (this.white - this.black)) * width, m + (1 - this.midValue) * height]),
        };
    };
    return LevelsPanel;
}(_ResizeablePanel__WEBPACK_IMPORTED_MODULE_4__["ResizeablePanel"]));



/***/ }),

/***/ "./src/Apps/Squint/ModelTimer.ts":
/*!***************************************!*\
  !*** ./src/Apps/Squint/ModelTimer.ts ***!
  \***************************************/
/*! exports provided: ModelTimer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelTimer", function() { return ModelTimer; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _CountdownTimer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CountdownTimer */ "./src/Apps/Squint/CountdownTimer.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");
/* harmony import */ var _SquintEvents__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SquintEvents */ "./src/Apps/Squint/SquintEvents.ts");






var TimeMs;
(function (TimeMs) {
    TimeMs[TimeMs["Sec"] = 1000] = "Sec";
    TimeMs[TimeMs["Min"] = 60000] = "Min";
    TimeMs[TimeMs["StdPose"] = 1200000] = "StdPose";
    TimeMs[TimeMs["StdBreak"] = 420000] = "StdBreak";
})(TimeMs || (TimeMs = {}));
var ModelTimer = /** @class */ (function () {
    function ModelTimer(squint, parent) {
        var _this = this;
        this.countdownTimer = new _CountdownTimer__WEBPACK_IMPORTED_MODULE_3__["CountdownTimer"];
        this.alarm = new Audio(_SquintApp__WEBPACK_IMPORTED_MODULE_4__["SquintApp"].baseUrl + 'sounds/timer.mp3');
        this.notification = new Audio(_SquintApp__WEBPACK_IMPORTED_MODULE_4__["SquintApp"].baseUrl + '/sounds/notification.mp3');
        this.squint = squint;
        this.canvas = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('canvas', 'ModelTimerCanvas', parent);
        this.countdownTimer.durationMs = TimeMs.StdPose;
        this.alarm.loop = true;
        squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].SynchronizeTimer,
            handler: function (info) {
                if (_this.countdownTimer.running && _this.countdownTimer.expired) {
                    _this.alarm.pause();
                    _this.alarm.currentTime = 0;
                }
                else if (_this.countdownTimer.running === false && info.running) {
                    _this.playNotification();
                }
                _this.countdownTimer.synchronize(info);
            }
        });
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__["PointerEventHandler"](this.canvas);
        handler.onMove = function (pos, delta) {
            _this.stopAlarm();
            var boxSize = _this.canvas.clientHeight;
            if (pos.x < 0.5 * boxSize) {
                _this.canvas.style.cursor = 'ns-resize';
            }
            else {
                _this.canvas.style.cursor = 'default';
            }
        };
        var wasDragging = false;
        handler.onUp = function (pos) {
            document.body.style.cursor = 'default';
            var height = _this.canvas.clientHeight;
            var width = _this.canvas.clientWidth;
            var boxSize = height;
            if (wasDragging === false && pos.x < 0.5 * boxSize) {
                if (pos.y < 0.5 * height) {
                    _this.countdownTimer.addOne();
                }
                else {
                    _this.countdownTimer.subtractOne();
                }
                _this.squint.synchronizeTimer(_this.info);
                _this.draw();
            }
            else if (wasDragging) {
                _this.squint.synchronizeTimer(_this.info);
            }
            else if (pos.x > width - boxSize) {
                if (_this.countdownTimer.running) {
                    _this.playNotification();
                    _this.countdownTimer.pause();
                }
                else {
                    _this.playNotification();
                    _this.countdownTimer.start();
                }
                _this.squint.synchronizeTimer(_this.info);
            }
            wasDragging = false;
        };
        var hit = false;
        var accumulatedDelta = 0;
        handler.onDown = function (pos) {
            _this.stopAlarm();
            var boxSize = _this.canvas.clientHeight;
            hit = false;
            if (pos.x < 0.5 * boxSize) {
                hit = true;
            }
        };
        var step = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["getEmPixels"])() / 2;
        handler.onDrag = function (pos, delta) {
            if (hit === true) {
                document.body.style.cursor = 'ns-resize';
                accumulatedDelta += delta.y;
                while (accumulatedDelta > step) {
                    wasDragging = true;
                    _this.countdownTimer.subtractOne();
                    accumulatedDelta -= step;
                }
                while (accumulatedDelta < -step) {
                    wasDragging = true;
                    _this.countdownTimer.addOne();
                    accumulatedDelta += step;
                }
                _this.draw();
            }
        };
        document.body.addEventListener('mousedown', function () { _this.stopAlarm(); });
        document.body.addEventListener('touchstart', function () { _this.stopAlarm(); });
        this.requestTimeout();
    }
    Object.defineProperty(ModelTimer.prototype, "info", {
        get: function () {
            return {
                running: this.countdownTimer.running,
                durationMs: this.countdownTimer.durationMs,
                elapsedMs: this.countdownTimer.elapsedMs,
            };
        },
        enumerable: false,
        configurable: true
    });
    ModelTimer.prototype.setCanvasSize = function () {
        var em = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["getEmPixels"])();
        var height = this.canvas.clientHeight;
        var largeFont = (height - 0.5 * em);
        var ctx = this.canvas.getContext('2d');
        ctx.font = largeFont + 'px Arial';
        var size = ctx.measureText(' 00:00 ');
        var width = 0.5 * height + size.width + 1.0 * height;
        this.canvas.style.width = width + 'px';
    };
    ModelTimer.prototype.playNotification = function () {
        //this.notification.play().catch((err) => { alert('Cannot play notification: ' + err) });
    };
    ModelTimer.prototype.soundAlarm = function () {
        this.alarm.play().catch(function (err) { alert('Cannot play alarm: ' + err); });
    };
    ModelTimer.prototype.stopAlarm = function () {
        if (this.countdownTimer.running && this.countdownTimer.expired) {
            this.alarm.pause();
            this.alarm.currentTime = 0;
            this.countdownTimer.reset();
            if (this.countdownTimer.durationMin === TimeMs.StdBreak) {
                // prepare for next pose;
                this.countdownTimer.durationMs = TimeMs.StdPose;
            }
            else if (this.countdownTimer.durationMs === TimeMs.StdPose) {
                // prepare for the break
                this.countdownTimer.durationMs = TimeMs.StdBreak;
            }
            this.squint.synchronizeTimer(this.info);
        }
    };
    ModelTimer.prototype.draw = function () {
        // sync sizes
        this.canvas.width = this.canvas.clientWidth;
        this.canvas.height = this.canvas.clientHeight;
        var width = this.canvas.width;
        var height = this.canvas.height;
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        ctx.fillStyle = 'lightgray';
        ctx.fillRect(0, 0, width, height);
        // draw the up-down symbol
        var boxWidth = height / 2;
        var boxHeight = height;
        ctx.beginPath();
        ctx.moveTo(0.6 * boxWidth, 0.2 * boxHeight);
        ctx.lineTo(0.9 * boxWidth, 0.3 * boxHeight);
        ctx.lineTo(0.9 * boxWidth, 0.7 * boxHeight);
        ctx.lineTo(0.6 * boxWidth, 0.8 * boxHeight);
        ctx.lineTo(0.3 * boxWidth, 0.7 * boxHeight);
        ctx.lineTo(0.3 * boxWidth, 0.3 * boxHeight);
        ctx.lineTo(0.6 * boxWidth, 0.2 * boxHeight);
        ctx.fillStyle = 'rgb(230,230,230)';
        ctx.strokeStyle = 'gray';
        ctx.fill();
        ctx.stroke();
        // draw the time text
        var em = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_2__["getEmPixels"])();
        var largeFont = (this.canvas.height - 0.5 * em);
        ctx.font = largeFont + 'px Arial';
        ctx.fillStyle = 'black';
        var size = ctx.measureText('00:00 ');
        var x = boxWidth;
        this.drawText(ctx, this.countdownTimer.timeRemainingStr, x, 0, size.width, height);
        x += size.width;
        // draw the start/stop symbols
        var boxSize = height;
        ctx.beginPath();
        if (this.countdownTimer.running) {
            // square
            var size_1 = 0.25;
            ctx.fillStyle = 'pink';
            ctx.moveTo(x + size_1 * boxSize, size_1 * boxSize);
            ctx.lineTo(x + (1 - size_1) * boxSize, size_1 * boxSize);
            ctx.lineTo(x + (1 - size_1) * boxSize, (1 - size_1) * boxSize);
            ctx.lineTo(x + size_1 * boxSize, (1 - size_1) * boxSize);
            ctx.lineTo(x + size_1 * boxSize, size_1 * boxSize);
        }
        else {
            // triangle
            ctx.fillStyle = 'lightgreen';
            ctx.moveTo(x + 0.2 * boxSize, 0.2 * boxSize);
            ctx.lineTo(x + 0.8 * boxSize, 0.5 * boxSize);
            ctx.lineTo(x + 0.2 * boxSize, 0.8 * boxSize);
            ctx.lineTo(x + 0.2 * boxSize, 0.2 * boxSize);
        }
        ctx.strokeStyle = 'black';
        ctx.fill();
        ctx.stroke();
    };
    ModelTimer.prototype.requestTimeout = function () {
        var _this = this;
        if (this.countdownTimer.running && this.countdownTimer.expired) {
            this.soundAlarm();
        }
        this.setCanvasSize();
        this.draw();
        // trigger the next draw event
        setTimeout(function () {
            _this.requestTimeout();
        }, 250);
    };
    ModelTimer.prototype.drawText = function (ctx, str, x, y, width, height) {
        var size = ctx.measureText('y'); // something with a descent
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(str, x + width / 2, y + height / 2 + size.actualBoundingBoxDescent / 2);
    };
    return ModelTimer;
}());



/***/ }),

/***/ "./src/Apps/Squint/ObjectWithSettings.ts":
/*!***********************************************!*\
  !*** ./src/Apps/Squint/ObjectWithSettings.ts ***!
  \***********************************************/
/*! exports provided: ObjectWithSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectWithSettings", function() { return ObjectWithSettings; });
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");

var ObjectWithSettings = /** @class */ (function () {
    function ObjectWithSettings(settingsKey) {
        this.settingsKey = settingsKey;
    }
    Object.defineProperty(ObjectWithSettings.prototype, "hasSavedSettings", {
        get: function () {
            return (this.settingsKey !== undefined && localStorage.getItem(this.settingsKey) !== null);
        },
        enumerable: false,
        configurable: true
    });
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    ObjectWithSettings.prototype.buildSettingsObj = function (_settings) {
    };
    ObjectWithSettings.prototype.saveSettings = function () {
        if (this.settingsKey) {
            var settings = {};
            this.buildSettingsObj(settings);
            localStorage.setItem(this.settingsKey, JSON.stringify(settings));
        }
    };
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    ObjectWithSettings.prototype.onRestore = function (settings) {
    };
    ObjectWithSettings.prototype.restoreSettings = function () {
        if (this.settingsKey) {
            var jsonStr = localStorage.getItem(this.settingsKey);
            if (jsonStr !== null) {
                try {
                    var settings = JSON.parse(jsonStr);
                    this.onRestore(settings);
                }
                catch (err) {
                    Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Cannot restore settings for \' + key + \'.\nValue is not JSON: ' + jsonStr);
                }
            }
        }
    };
    return ObjectWithSettings;
}());



/***/ }),

/***/ "./src/Apps/Squint/Panel.ts":
/*!**********************************!*\
  !*** ./src/Apps/Squint/Panel.ts ***!
  \**********************************/
/*! exports provided: Panel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Panel", function() { return Panel; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _ObjectWithSettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ObjectWithSettings */ "./src/Apps/Squint/ObjectWithSettings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Panel = /** @class */ (function (_super) {
    __extends(Panel, _super);
    function Panel(parent, id, displayStyleForShowing, settingsKey) {
        if (displayStyleForShowing === void 0) { displayStyleForShowing = 'block'; }
        var _this = _super.call(this, settingsKey) || this;
        _this.onVisible = null;
        _this.div = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', id, parent);
        _this.displayStyleForShowing = displayStyleForShowing;
        return _this;
    }
    Object.defineProperty(Panel.prototype, "visible", {
        get: function () {
            return (getComputedStyle(this.div).display !== 'none');
        },
        set: function (flag) {
            if (flag === this.visible) {
                return;
            }
            if (flag) {
                this.div.style.display = this.displayStyleForShowing;
            }
            else {
                this.div.style.display = 'none';
            }
            if (this.onVisible) {
                this.onVisible(flag);
            }
            this.saveSettings();
        },
        enumerable: false,
        configurable: true
    });
    Panel.prototype.buildSettingsObj = function (settings) {
        _super.prototype.buildSettingsObj.call(this, settings);
        settings.visible = this.visible;
    };
    Panel.prototype.onRestore = function (settings) {
        _super.prototype.onRestore.call(this, settings);
        if (settings.visible !== undefined) {
            this.visible = settings.visible;
        }
    };
    return Panel;
}(_ObjectWithSettings__WEBPACK_IMPORTED_MODULE_1__["ObjectWithSettings"]));



/***/ }),

/***/ "./src/Apps/Squint/PasswordDialog.ts":
/*!*******************************************!*\
  !*** ./src/Apps/Squint/PasswordDialog.ts ***!
  \*******************************************/
/*! exports provided: PasswordDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PasswordDialog", function() { return PasswordDialog; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/Dialog */ "./src/GUI/Dialog.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PasswordDialog = /** @class */ (function (_super) {
    __extends(PasswordDialog, _super);
    function PasswordDialog(parent, onOk, onCancel) {
        var _this = _super.call(this, parent, 'Password') || this;
        var passwordGroupDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'PasswordGroupDiv', _this.dialogDiv);
        var passwordLabel = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('label', 'PasswordLabel', passwordGroupDiv);
        passwordLabel.innerText = 'Password:';
        var passwordTextInput = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('input', 'PasswordTextInput', passwordGroupDiv);
        passwordLabel.htmlFor = passwordTextInput.id;
        passwordTextInput.type = 'text';
        passwordTextInput.placeholder = 'password';
        passwordTextInput.autocapitalize = 'none';
        passwordTextInput.onkeypress = function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                okButton.click();
            }
        };
        _this.onShow = function () {
            passwordTextInput.focus();
            passwordTextInput.select();
        };
        var buttonGroupDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'ButtonGroupDiv', _this.dialogDiv);
        var okButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('button', 'OkButton', buttonGroupDiv, 'ButtonClass');
        okButton.innerText = 'OK';
        okButton.onclick = function () {
            _this.visible = false;
            var password = passwordTextInput.value.trim();
            onOk(password);
        };
        var cancelButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('button', 'CancelButton', buttonGroupDiv, 'ButtonClass');
        cancelButton.innerText = 'Cancel';
        cancelButton.onclick = function () {
            _this.visible = false;
            onCancel();
        };
        _this.visible = true;
        return _this;
    }
    return PasswordDialog;
}(_GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__["Dialog"]));



/***/ }),

/***/ "./src/Apps/Squint/PromiseMap.ts":
/*!***************************************!*\
  !*** ./src/Apps/Squint/PromiseMap.ts ***!
  \***************************************/
/*! exports provided: PromiseMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromiseMap", function() { return PromiseMap; });
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");

var PromiseData = /** @class */ (function () {
    function PromiseData(timeoutHandle, resolve, reject) {
        this.timeoutHandle = timeoutHandle;
        this.resolve = resolve;
        this.reject = reject;
    }
    return PromiseData;
}());
var PromiseMap = /** @class */ (function () {
    function PromiseMap() {
        this.map = new Map();
    }
    PromiseMap.prototype.put = function (id, timeoutMs, resolve, reject, rejectMessage) {
        var _this = this;
        var handle = window.setTimeout(function () {
            var req = _this.map.get(id);
            req.timeoutHandle = null;
            _this.reject(id, rejectMessage);
        }, timeoutMs);
        var req = new PromiseData(handle, resolve, reject);
        this.map.set(id, req);
    };
    PromiseMap.prototype.extract = function (id) {
        var req = this.map.get(id);
        if (req === undefined) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Internal Error: request not found');
            throw new Error('request not found');
        }
        this.map.delete(id);
        if (req.timeoutHandle !== null) {
            window.clearTimeout(req.timeoutHandle);
            req.timeoutHandle = null;
        }
        return req;
    };
    PromiseMap.prototype.reject = function (id, err) {
        if (this.map.has(id)) {
            this.extract(id).reject(err);
        }
    };
    PromiseMap.prototype.resolve = function (id, data) {
        if (this.map.has(id)) {
            this.extract(id).resolve(data);
        }
    };
    return PromiseMap;
}());



/***/ }),

/***/ "./src/Apps/Squint/Rect.ts":
/*!*********************************!*\
  !*** ./src/Apps/Squint/Rect.ts ***!
  \*********************************/
/*! exports provided: RectHit, Rect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RectHit", function() { return RectHit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rect", function() { return Rect; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");

var RectHit;
(function (RectHit) {
    RectHit[RectHit["UL"] = 0] = "UL";
    RectHit[RectHit["UR"] = 1] = "UR";
    RectHit[RectHit["LL"] = 2] = "LL";
    RectHit[RectHit["LR"] = 3] = "LR";
    RectHit[RectHit["Inside"] = 4] = "Inside";
    RectHit[RectHit["None"] = 5] = "None";
})(RectHit || (RectHit = {}));
var Rect = /** @class */ (function () {
    function Rect(x, y, width, height) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    Object.defineProperty(Rect.prototype, "left", {
        get: function () {
            return this.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "top", {
        get: function () {
            return this.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "right", {
        get: function () {
            return this.x + this.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "bottom", {
        get: function () {
            return this.y + this.height;
        },
        enumerable: false,
        configurable: true
    });
    Rect.prototype.getScaled = function (factor) {
        return new Rect(factor * this.x, factor * this.y, factor * this.width, factor * this.height);
    };
    Rect.prototype.hit = function (pos, epsilon) {
        var ul = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([this.x, this.y]);
        var ur = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([this.right, this.y]);
        var ll = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([this.x, this.bottom]);
        var lr = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([this.right, this.bottom]);
        if (pos.distance(ul) < epsilon) {
            return RectHit.UL;
        }
        else if (pos.distance(ur) < epsilon) {
            return RectHit.UR;
        }
        else if (pos.distance(ll) < epsilon) {
            return RectHit.LL;
        }
        else if (pos.distance(lr) < epsilon) {
            return RectHit.LR;
        }
        else if (pos.x > this.x && pos.x < this.right && pos.y > this.y && pos.y < this.bottom) {
            return RectHit.Inside;
        }
        else {
            return RectHit.None;
        }
    };
    return Rect;
}());



/***/ }),

/***/ "./src/Apps/Squint/ResizeablePanel.ts":
/*!********************************************!*\
  !*** ./src/Apps/Squint/ResizeablePanel.ts ***!
  \********************************************/
/*! exports provided: ResizeablePanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeablePanel", function() { return ResizeablePanel; });
/* harmony import */ var _Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Panel */ "./src/Apps/Squint/Panel.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ResizeablePanel = /** @class */ (function (_super) {
    __extends(ResizeablePanel, _super);
    function ResizeablePanel(parent, id, displayStyleForShow, settingsKey) {
        if (displayStyleForShow === void 0) { displayStyleForShow = 'block'; }
        var _this = _super.call(this, parent, id, displayStyleForShow, settingsKey) || this;
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__["PointerEventHandler"](_this.div);
        handler.onDrag = function (pos, delta) {
            _this.onDrag(pos, delta);
        };
        return _this;
    }
    ResizeablePanel.prototype.buildSettingsObj = function (settings) {
        _super.prototype.buildSettingsObj.call(this, settings);
        var style = getComputedStyle(this.div);
        settings.left = style.left;
        settings.top = style.top;
    };
    ResizeablePanel.prototype.onRestore = function (settings) {
        _super.prototype.onRestore.call(this, settings);
        if (settings.left !== undefined && settings.top != undefined) {
            this.div.style.top = settings.top;
            this.div.style.left = settings.left;
        }
    };
    ResizeablePanel.prototype.onDrag = function (pos, delta) {
        var oldStyle = getComputedStyle(this.div);
        var oldX = this.pxToFloat(oldStyle.left);
        var oldY = this.pxToFloat(oldStyle.top);
        this.div.style.top = (oldY + delta.y) + 'px';
        this.div.style.left = (oldX + delta.x) + 'px';
        this.saveSettings();
    };
    ResizeablePanel.prototype.pxToFloat = function (value) {
        return Number.parseFloat(value.substr(0, value.length - 2));
    };
    return ResizeablePanel;
}(_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/Apps/Squint/Servers.ts":
/*!************************************!*\
  !*** ./src/Apps/Squint/Servers.ts ***!
  \************************************/
/*! exports provided: SquintWsUrl, SquintHttpUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintWsUrl", function() { return SquintWsUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintHttpUrl", function() { return SquintHttpUrl; });
var host;
var wsPre;
var httpPre;
if (location.hostname === 'localhost') {
    host = 'localhost:8080/V1/';
    wsPre = 'ws://';
    httpPre = 'http://';
}
else {
    host = 'squintserver-11278.nodechef.com/V1/';
    wsPre = 'wss://';
    httpPre = 'https://';
}
//export const SquintUrl = 'ws://192.168.86.23:8080/V1/'
var SquintWsUrl = wsPre + host;
var SquintHttpUrl = httpPre + host;
//static readonly url = 'ws://localhost:8080/V1/'
//static readonly url = 'wss://squintserver-11278.nodechef.com/V1/'
//private host = 'https://woyaktest.ue.r.appspot.com/';
//private host = 'http://192.168.86.23:8080/';
//private host = 'http://localhost:8080/';
//private host = 'http://' + location.hostname + ':8080/V1';
//private host = 'http://' + location.hostname + ':3000/';
//static readonly url = 'https://squintserver-11278.nodechef.com/V1';
//static readonly url = 'http://' + location.hostname + ':8080/V1'
//static readonly url = 'http://localhost:8080/V1'


/***/ }),

/***/ "./src/Apps/Squint/SessionSetupDialog.ts":
/*!***********************************************!*\
  !*** ./src/Apps/Squint/SessionSetupDialog.ts ***!
  \***********************************************/
/*! exports provided: SessionSetupDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionSetupDialog", function() { return SessionSetupDialog; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/Dialog */ "./src/GUI/Dialog.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var SessionSetupDialog = /** @class */ (function (_super) {
    __extends(SessionSetupDialog, _super);
    function SessionSetupDialog(parent, onOk) {
        var _this = _super.call(this, parent, 'SessionSetup') || this;
        var passwordGroupDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'PasswordGroupDiv', _this.dialogDiv);
        var passwordLabel = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('label', 'PasswordLabel', passwordGroupDiv);
        passwordLabel.innerText = 'Password:';
        var passwordTextInput = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('input', 'PasswordTextInput', passwordGroupDiv);
        passwordLabel.htmlFor = passwordTextInput.id;
        passwordTextInput.type = 'text';
        passwordTextInput.placeholder = 'leave blank for none';
        passwordTextInput.autocapitalize = 'none';
        passwordTextInput.onkeypress = function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                okButton.click();
            }
        };
        _this.onShow = function () {
            passwordTextInput.focus();
            passwordTextInput.select();
        };
        var okButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('button', 'OkButton', passwordGroupDiv, 'ButtonClass');
        okButton.innerText = 'OK';
        okButton.onclick = function () {
            _this.visible = false;
            var password = passwordTextInput.value.trim();
            onOk(password);
        };
        _this.visible = true;
        return _this;
    }
    return SessionSetupDialog;
}(_GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__["Dialog"]));



/***/ }),

/***/ "./src/Apps/Squint/Squint.ts":
/*!***********************************!*\
  !*** ./src/Apps/Squint/Squint.ts ***!
  \***********************************/
/*! exports provided: Squint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Squint", function() { return Squint; });
/* harmony import */ var _Servers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Servers */ "./src/Apps/Squint/Servers.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");
/* harmony import */ var _SquintSocket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SquintSocket */ "./src/Apps/Squint/SquintSocket.ts");
/* harmony import */ var _SquintMessage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SquintMessage */ "./src/Apps/Squint/SquintMessage.ts");
/* harmony import */ var _EventManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EventManager */ "./src/Apps/Squint/EventManager.ts");
/* harmony import */ var _SquintEvents__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SquintEvents */ "./src/Apps/Squint/SquintEvents.ts");
/* harmony import */ var _WebSocketFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WebSocketFactory */ "./src/Apps/Squint/WebSocketFactory.ts");
/* harmony import */ var _PromiseMap__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PromiseMap */ "./src/Apps/Squint/PromiseMap.ts");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
/* harmony import */ var _SquintStrings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SquintStrings */ "./src/Apps/Squint/SquintStrings.ts");
/* harmony import */ var _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util/Stopwatch */ "./src/Util/Stopwatch.ts");











var Squint = /** @class */ (function () {
    function Squint() {
        this.ReconnectTimeoutS = 60;
        this.ReconnectRetryDelayS = 1;
        this.ss = null;
        this._userName = null;
        this._remoteCameraPaused = false;
        this._remoteCameraConnected = true;
        this.requests = new _PromiseMap__WEBPACK_IMPORTED_MODULE_7__["PromiseMap"]();
        this.reconnectStopwatch = null;
        this.eventManager = new _EventManager__WEBPACK_IMPORTED_MODULE_4__["EventManager"]();
    }
    Object.defineProperty(Squint.prototype, "ws", {
        /**
         * For debugging only
         */
        get: function () {
            return this.ss.ws;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "userName", {
        get: function () {
            if (this._userName === null) {
                return 'Unknown';
            }
            else {
                return this._userName;
            }
        },
        set: function (userName) {
            if (this._userName !== userName) {
                this._userName = userName;
                if (this.connected) {
                    this.updateConnectionInfo(userName);
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "connected", {
        get: function () {
            if (this.ss && this.ss.connected) {
                return true;
            }
            else {
                return false;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "reconnecting", {
        get: function () {
            return this.reconnectStopwatch !== null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "bufferReady", {
        get: function () {
            if (!this.connected) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.bufferReady() called after websocket was disconnected');
                return false;
            }
            // @ts-ignore: cannot be null - we check above
            return this.ss.bufferedAmount === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "connectionInfo", {
        get: function () {
            return {
                connectionId: this.connectionId,
                userName: this.userName,
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "connectionId", {
        get: function () {
            return (this.ss !== null) ? this.ss.connectionId : 'WebSocket not connected';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "remoteCameraPaused", {
        get: function () {
            return this._remoteCameraPaused;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "remoteCameraConnected", {
        get: function () {
            return this._remoteCameraConnected;
        },
        enumerable: false,
        configurable: true
    });
    Squint.prototype.on = function (handler) {
        this.eventManager.on(handler.event, handler.handler);
    };
    Squint.prototype.remove = function (handler) {
        this.eventManager.remove(handler.event, handler.handler);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Squint.prototype.emit = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.eventManager.emit(name, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[8], args[9]);
    };
    Squint.prototype.processMessage = function (msg) {
        switch (msg.subject) {
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].CameraPaused:
                {
                    this._remoteCameraPaused = true;
                    this.eventManager.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].CameraPaused);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].CameraRequest:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].CameraRequest, msg.resolution, msg.jpegQuality);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].ChatMessage:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].ChatMessage, msg.connection, msg.message);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].ConnectionInfoUpdate:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].ConnectionInfoUpdate, {
                        userName: msg.userName,
                        connectionId: msg.connectionId,
                    });
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].HostChanged:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].HostChanged, msg.newHostConnectionId);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].HostDisconnected:
                {
                    this._remoteCameraConnected = false;
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].HostDisconnected);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].SessionCreated:
                {
                    switch (msg.status) {
                        case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["CreateSessionStatus"].Success:
                            this.requests.resolve(msg.requestId, msg.sessionId);
                            break;
                        case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["CreateSessionStatus"].AlreadyInASession:
                            this.requests.reject(msg.requestId, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_CREATE_SESSION__IN_SESSION);
                            break;
                        default:
                            // @ts-ignore TS2339: Property 'XXX' does not exist on type 'never'
                            this.requests.reject(msg.requestId, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_CREATE_SESSION(msg.status));
                            break;
                    }
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].SessionJoined:
                {
                    switch (msg.status) {
                        case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["JoinSessionStatus"].Success:
                            this.requests.resolve(msg.requestId);
                            break;
                        case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["JoinSessionStatus"].AlreadyInASession:
                            this.requests.reject(msg.requestId, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_JOIN_SESSION__IN_SESSION);
                            break;
                        case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["JoinSessionStatus"].SessionNotFound:
                            this.requests.reject(msg.requestId, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_JOIN_SESSION__SESSION_NOT_FOUND);
                            break;
                        case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["JoinSessionStatus"].InvalidPassword:
                            this.requests.reject(msg.requestId, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_JOIN_SESSION__INVALID_PASSWORD);
                            break;
                        default:
                            // @ts-ignore TS2339: Property 'XXX' does not exist on type 'never'
                            this.requests.reject(msg.requestId, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_JOIN_SESSION(msg.status));
                            break;
                    }
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].SessionList:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].SessionList, msg.sessions);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].SessionInfo:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].SessionInfo, msg.info);
                }
                break;
            case _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].SynchronizeTimer:
                {
                    this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].SynchronizeTimer, msg.info);
                }
                break;
            case undefined:
                console.error('Invalid Message: \'subject\' not found.\n' + JSON.stringify(msg, null, ' '));
                break;
            default:
                console.error('Invalid Message: unknown \'subject\'.\n' + JSON.stringify(msg, null, ' '));
                break;
        }
    };
    Squint.prototype.tryToReconnect = function (connectionId) {
        var _this = this;
        if (this.reconnectStopwatch === null) {
            this.reconnectStopwatch = new _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_10__["Stopwatch"]();
            this.retryCount = 1;
            this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Reconnecting);
        }
        else {
            this.retryCount++;
        }
        console.log(this + ' Reconnect try ' + this.retryCount);
        this.doConnect(connectionId)
            .then(function () {
            _this.reconnectStopwatch = null;
            _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Reconnected, true);
        })
            .catch(function (err) {
            console.log(_this + ' Reconnect try ' + _this.retryCount + ' failed: ' + err);
            if (typeof err === 'string' && err.endsWith('Server rejected the request.')) {
                console.log(_this + ' Unable to reconnect, server rejected the request.');
                _this.reconnectStopwatch = null;
                _this.ss = null;
                _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Reconnected, false);
                _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Close);
            }
            else if (_this.reconnectStopwatch.elapsedS < _this.ReconnectTimeoutS) {
                setTimeout(function () {
                    _this.tryToReconnect(connectionId);
                }, 1000 * _this.ReconnectRetryDelayS);
            }
            else {
                console.log(_this + ' Unable to reconnect.');
                _this.reconnectStopwatch = null;
                _this.ss = null;
                _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Reconnected, false);
                _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Close);
            }
        });
    };
    Squint.prototype.connect = function (url, userName) {
        this._userName = userName;
        this._url = url;
        this._remoteCameraConnected = true;
        this._remoteCameraPaused = false;
        return this.doConnect();
    };
    Squint.prototype.doConnect = function (reconnectId) {
        var _this = this;
        if (this.connected) {
            return Promise.reject('Cannot connect to server: previous connection is still open');
        }
        var onMessage = function (msg) {
            if (!_this.ss.connected) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('ws.onMessage() message received, but socket not open');
            }
            // process the image
            _this.processMessage(msg);
        };
        var onImage = function (blob) {
            if (!_this.ss.connected) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('ss.onImage() message received, but socket not open');
            }
            _this._remoteCameraPaused = false;
            _this._remoteCameraConnected = true;
            _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Image, blob);
        };
        var onClose = function (code) {
            var connectionId = _this.ss.connectionId;
            if (code === _SquintSocket__WEBPACK_IMPORTED_MODULE_2__["SquintSocket"].CLOSE_CODE_NORMAL) {
                _this.ss = null;
                _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Close);
            }
            else if (code === Squint.CLOSE_CODE_FAIL_NO_RECONNECT) {
                _this.ss = null;
                _this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Close);
            }
            else {
                console.log(_this + ' WebSocket closed with code: ' + code + ', trying to reconnect');
                _this.tryToReconnect(connectionId);
            }
        };
        return _SquintSocket__WEBPACK_IMPORTED_MODULE_2__["SquintSocket"].connect(this._url, this.userName, onMessage, onImage, onClose, function (ss) { _this.ss = ss; }, reconnectId);
    };
    Squint.prototype.close = function () {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.close() called but no connection exists');
            return;
        }
        // @ts-ignore: cannot be null - we check above
        this.ss.close();
        this.ss = null;
        this.emit(_SquintEvents__WEBPACK_IMPORTED_MODULE_5__["SquintEvent"].Close);
    };
    Squint.prototype.send = function (msg) {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.send() called, but not connected');
            return;
        }
        // @ts-ignore: cannot be null - we check above
        this.ss.send(msg);
    };
    Squint.prototype.sendImage = function (blob) {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.sendImage() called, but not connected');
            return;
        }
        if (this.bufferReady) {
            // @ts-ignore: cannot be null - we check above
            this.ss.sendImage(blob);
        }
        else {
            // @ts-ignore: cannot be null - we check above
            // TODO figure out what this happens
            // console.error('Skipping upload, buffer not empty: ' + this.ss.bufferedAmount);
        }
    };
    Squint.prototype.requestNextImage = function () {
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].ReadyForNextImage,
        });
    };
    Squint.prototype.createSession = function (sessionTitle, password, timeoutMs) {
        var _this = this;
        if (timeoutMs === void 0) { timeoutMs = 5000; }
        if (sessionTitle === undefined) {
            sessionTitle = this.userName;
        }
        if (password && password.trim().length === 0) {
            password = undefined;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        var id = Object(uuid__WEBPACK_IMPORTED_MODULE_8__["v4"])(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].CreateSession,
            requestId: id,
            sessionTitle: sessionTitle,
            password: password
        });
        return new Promise(function (resolve, reject) {
            _this.requests.put(id, timeoutMs, resolve, reject, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_CREATE_SESSION__TIMEOUT);
        });
    };
    Squint.prototype.joinSession = function (sessionId, password, timeoutMs) {
        var _this = this;
        if (timeoutMs === void 0) { timeoutMs = 5000; }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        var id = Object(uuid__WEBPACK_IMPORTED_MODULE_8__["v4"])(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].JoinSession,
            requestId: id,
            sessionId: sessionId,
            password: password,
        });
        return new Promise(function (resolve, reject) {
            _this.requests.put(id, timeoutMs, resolve, reject, _SquintStrings__WEBPACK_IMPORTED_MODULE_9__["SquintStrings"].CANNOT_JOIN_SESSION__TIMEOUT);
        });
    };
    Squint.prototype.updateConnectionInfo = function (userName) {
        this._userName = userName;
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].ConnectionInfoUpdate,
            userName: this.connectionInfo.userName,
            connectionId: this.connectionInfo.connectionId,
        });
    };
    Squint.prototype.sendChatMessage = function (msg) {
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].ChatMessage,
            message: msg,
            connection: this.connectionInfo,
        });
    };
    Squint.prototype.log = function (msg) {
        if (this.connected) {
            this.send({
                subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].Log,
                message: msg,
            });
        }
    };
    Squint.prototype.sendCameraRequest = function (resolution, jpegQuality) {
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].CameraRequest,
            resolution: resolution,
            jpegQuality: jpegQuality,
        });
    };
    Squint.prototype.cameraPaused = function () {
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].CameraPaused,
        });
    };
    Squint.prototype.requestToBeHost = function () {
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].HostChangeRequest
        });
        // reset flags
        this._remoteCameraConnected = true;
        this._remoteCameraPaused = false;
    };
    Squint.prototype.synchronizeTimer = function (info) {
        this.send({
            subject: _SquintMessage__WEBPACK_IMPORTED_MODULE_3__["SquintMessageSubject"].SynchronizeTimer,
            info: info,
        });
    };
    Squint.inspect = function (url) {
        return new Promise(function (resolve, reject) {
            var ws = _WebSocketFactory__WEBPACK_IMPORTED_MODULE_6__["WebSocketFactory"].create(url);
            ws.onopen = function () {
                ws.send('inspect');
            };
            ws.onmessage = function (msg) {
                ws.onopen = null;
                //ws.onclose = null;
                ws.onerror = null;
                ws.onmessage = null;
                try {
                    resolve(JSON.parse(msg.data));
                }
                catch (err) {
                    reject('Invalid inspect response: ' + err + '\n' +
                        'Message: ' + msg.data);
                }
            };
            ws.onclose = function (event) {
                reject('WebSocket closed with code ' + event.code);
            };
            ws.onerror = function () {
                reject('WebSocket error');
            };
        });
    };
    Squint.dump = function (url) {
        return new Promise(function (resolve, reject) {
            var ws = _WebSocketFactory__WEBPACK_IMPORTED_MODULE_6__["WebSocketFactory"].create(url);
            ws.onopen = function () {
                ws.send('dump');
            };
            ws.onmessage = function (msg) {
                ws.onopen = null;
                ws.onclose = null;
                ws.onerror = null;
                ws.onmessage = null;
                resolve(msg.data);
            };
            ws.onclose = function (event) {
                reject('WebSocket closed with code ' + event.code);
            };
            ws.onerror = function () {
                reject('WebSocket error');
            };
        });
    };
    Squint.log = function (url, msg) {
        var ws = _WebSocketFactory__WEBPACK_IMPORTED_MODULE_6__["WebSocketFactory"].create(url);
        ws.onopen = function () {
            ws.send('log ' + msg);
        };
    };
    Squint.prototype.toString = function () {
        if (this.ss) {
            return '[' + this.ss.readyStateStr + ']';
        }
        else {
            return '[websocket=null]';
        }
    };
    Squint.url = _Servers__WEBPACK_IMPORTED_MODULE_0__["SquintWsUrl"];
    // special code that close the socket with an error code thus causing the
    // server to go into zombie mode. One code also tells us, the client, to
    // not try to auto-reconnect. Use these for testing only
    Squint.CLOSE_CODE_FAIL_NO_RECONNECT = 3001;
    Squint.CLOSE_CODE_FAIL_RECONNECT = 3000;
    return Squint;
}());



/***/ }),

/***/ "./src/Apps/Squint/SquintApp.ts":
/*!**************************************!*\
  !*** ./src/Apps/Squint/SquintApp.ts ***!
  \**************************************/
/*! exports provided: debug, SquintApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debug", function() { return debug; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintApp", function() { return SquintApp; });
/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ "./node_modules/webrtc-adapter/src/js/adapter_core.js");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Camera */ "./src/Apps/Squint/Camera.ts");
/* harmony import */ var _Uploader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Uploader */ "./src/Apps/Squint/Uploader.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_ConsoleCapture__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util/ConsoleCapture */ "./src/Util/ConsoleCapture.ts");
/* harmony import */ var _StartDialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StartDialog */ "./src/Apps/Squint/StartDialog.ts");
/* harmony import */ var _Version__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Version */ "./src/Apps/Squint/Version.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Squint */ "./src/Apps/Squint/Squint.ts");
/* harmony import */ var _WelcomeDialog__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./WelcomeDialog */ "./src/Apps/Squint/WelcomeDialog.ts");
/* harmony import */ var _UserNameDialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./UserNameDialog */ "./src/Apps/Squint/UserNameDialog.ts");
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _ChatPanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ChatPanel */ "./src/Apps/Squint/ChatPanel.ts");
/* harmony import */ var _BandwidthTracker__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BandwidthTracker */ "./src/Apps/Squint/BandwidthTracker.ts");
/* harmony import */ var _SquintEvents__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./SquintEvents */ "./src/Apps/Squint/SquintEvents.ts");
/* harmony import */ var nosleep_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! nosleep.js */ "./node_modules/nosleep.js/src/index.js");
/* harmony import */ var nosleep_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(nosleep_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _WebSocketFactory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./WebSocketFactory */ "./src/Apps/Squint/WebSocketFactory.ts");
/* harmony import */ var _StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./StorageWithEvents */ "./src/Apps/Squint/StorageWithEvents.ts");
/* harmony import */ var _SquintStrings__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./SquintStrings */ "./src/Apps/Squint/SquintStrings.ts");
/* harmony import */ var _PasswordDialog__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./PasswordDialog */ "./src/Apps/Squint/PasswordDialog.ts");
/* harmony import */ var _ImageCanvas2D__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ImageCanvas2D */ "./src/Apps/Squint/ImageCanvas2D.ts");
/* harmony import */ var _LevelsPanel__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./LevelsPanel */ "./src/Apps/Squint/LevelsPanel.ts");
/* harmony import */ var _ModelTimer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ModelTimer */ "./src/Apps/Squint/ModelTimer.ts");























_WebSocketFactory__WEBPACK_IMPORTED_MODULE_16__["WebSocketFactory"].create = function (url) { return new WebSocket(url); };
function debug(msg) {
    console.error(msg);
    //alert('debug error: ' + msg);
}
var SquintApp = /** @class */ (function () {
    function SquintApp() {
        var _this = this;
        this.dirty = true;
        this.storage = new _StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__["StorageWithEvents"]();
        this.desired = {
            label: '',
            width: 0,
            height: 0,
            frameRate: 0,
            facingMode: '',
            deviceId: '',
        };
        this.uploader = null;
        this.downloadTracker = new _BandwidthTracker__WEBPACK_IMPORTED_MODULE_13__["BandwidthTracker"]();
        this.cameraCtrls = [];
        this.advancedConstraints = [];
        this.squint = new _Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"]();
        this.console = new _Util_ConsoleCapture__WEBPACK_IMPORTED_MODULE_5__["ConsoleCapture"]();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
        this.noSleep = new nosleep_js__WEBPACK_IMPORTED_MODULE_15___default.a();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
        this.noSleep.enable();
        document.title += (' ' + _Version__WEBPACK_IMPORTED_MODULE_7__["Version"].Build);
        //localStorage.removeItem(StorageItems.UserName); // simulates starting up the first time
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].Image,
            handler: (function (blob) { _this.onDownload(blob); })
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].Close,
            handler: (function () { _this.closeConnection(); })
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].ChatMessage,
            handler: (function (connection, msg) { _this.onChatMessage(connection, msg); })
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].Reconnecting,
            handler: function () {
                console.log('connection lost, reconnecting...');
                _this.showNotification('Connection lost, reconnecting');
                _this.dirty = true;
            }
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].Reconnected,
            handler: function (success) {
                console.log('reconnected: success=' + success);
                if (success === false) {
                    _this.showNotification('Could not reconnect');
                }
                else {
                    _this.showNotification('Reconnected');
                }
                _this.dirty = true;
            }
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].CameraRequest,
            handler: function (megaPixels, jpegQuality) {
                _this.megaPixels.value = megaPixels;
                _this.jpegQuality.value = jpegQuality;
            }
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].HostDisconnected,
            handler: function () {
                _this.dirty = true;
            }
        });
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].HostChanged,
            handler: function (newHostConnectionId) {
                // TODO make sure we're not calling things twice
                if (newHostConnectionId === _this.squint.connectionId) {
                    _this.enableVideo(true);
                    _this.startUploader();
                }
                else {
                    _this.stopUploader();
                    _this.enableVideo(false);
                }
            }
        });
        this.console.onMessage = function (msg) {
            _this.squint.log(msg);
        };
        this.storage.on(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__["StorageItem"].UserName, function (userName) {
            _this.userNameMenuItemDiv.innerText = 'Hi ' + userName;
            _this.squint.userName = userName;
        });
        document.addEventListener('visibilitychange', function () {
            if (document.visibilityState === 'visible') {
                if (_this.uploader) {
                    _this.uploader.resume();
                }
                _this.downloadTracker.resume();
            }
            else {
                if (_this.uploader) {
                    _this.uploader.pause();
                }
                _this.downloadTracker.pause();
            }
        });
        // How do you know when to close the socket? pageHide on some browsers and beforeunload/unload on
        // others. Safari seems most problematic as the actual SocketClose only randomly makes it back to
        // the server so the server doesn't know it has been a gracefull exit.
        window.addEventListener('pagehide', function () {
            if (_this.squint.connected) {
                _this.squint.close();
            }
        });
        window.addEventListener('beforeunload', function () {
            if (_this.squint.connected) {
                _this.squint.close();
            }
        });
        window.addEventListener('pageshow', function () {
            if (_this.squint.connected === false) {
                _this.stopUploader();
                _this.enableVideo(false);
                _this.startDialog.visible = true;
            }
            // TODO remove
            console.log('pageshow');
        });
        document.addEventListener('resume', function () {
            if (_this.squint.connected === false) {
                _this.stopUploader();
                _this.enableVideo(false);
                _this.startDialog.visible = true;
            }
            console.log('resume');
        });
        /*
        window.addEventListener('pageshow', () => {
           console.log('pageshow');
        });
  
        document.addEventListener('freeze', () => {
           console.log('freeze');
        });
  
        document.addEventListener('resume', () => {
           console.log('resume');
        });
  
        window.addEventListener('beforeunload', () => {
           console.log('beforeunload');
        });
     
        window.addEventListener('pagehide', () => {
           console.log('pagehide');
        });
     
        window.addEventListener('unload', () => {
           console.log('unload');
        });
        */
    }
    Object.defineProperty(SquintApp, "baseUrl", {
        get: function () {
            var url = location.origin + location.pathname;
            if (url.endsWith('index.html')) {
                url = url.substr(0, url.length - 10);
            }
            if (url.endsWith('/') === false) {
                url += '/';
            }
            return url;
        },
        enumerable: false,
        configurable: true
    });
    SquintApp.prototype.create = function (div) {
        var _this = this;
        div.id = 'SquintApp';
        var onJoinSession = function (sessionId) {
            _this.join(sessionId);
        };
        var onStartSession = function (password) {
            _this.squint.createSession(undefined, password)
                .then(function () {
                _this.enableVideo(true);
            })
                .catch(function (err) {
                alert(err);
                _this.startDialog.visible = true;
            });
        };
        this.startDialog = new _StartDialog__WEBPACK_IMPORTED_MODULE_6__["StartDialog"](div, this.squint, onJoinSession, onStartSession, this.storage);
        this.div = _GUI_GUI__WEBPACK_IMPORTED_MODULE_11__["GUI"].create('div', 'BodyDiv', div);
        this.canvas = new _ImageCanvas2D__WEBPACK_IMPORTED_MODULE_20__["ImageCanvas2D"](this.div, 'Canvas');
        this.overlayCanvas = _GUI_GUI__WEBPACK_IMPORTED_MODULE_11__["GUI"].create('canvas', 'OverlayCanvas', this.div, 'Overlay');
        this.camera = new _Camera__WEBPACK_IMPORTED_MODULE_2__["Camera"](this.div);
        this.camera.visible = false;
        this.camera.onPaused = function () {
            _this.squint.cameraPaused();
        };
        this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_14__["SquintEvent"].CameraPaused,
            handler: function () {
                _this.dirty = true;
            }
        });
        new _ModelTimer__WEBPACK_IMPORTED_MODULE_22__["ModelTimer"](this.squint, this.div);
        this.chatPanel = new _ChatPanel__WEBPACK_IMPORTED_MODULE_12__["ChatPanel"](this.squint, this.div);
        if (this.chatPanel.hasSavedSettings) {
            this.chatPanel.restoreSettings();
        }
        else {
            if (_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["isMobile"] === false) {
                this.chatPanel.visible = true;
            }
        }
        this.levelsPanel = new _LevelsPanel__WEBPACK_IMPORTED_MODULE_21__["LevelsPanel"](this.div);
        if (this.levelsPanel.hasSavedSettings) {
            this.levelsPanel.restoreSettings();
        }
        this.levelsPanel.onChange = function () {
            _this.canvas.white = _this.levelsPanel.white;
            _this.canvas.black = _this.levelsPanel.black;
            _this.canvas.midPt = _this.levelsPanel.midPoint;
            _this.canvas.midValue = _this.levelsPanel.midValue;
            _this.dirty = true;
        };
        this.notificationDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_11__["GUI"].create('div', 'NotificationDiv', this.div);
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__["PointerEventHandler"](this.canvas.element);
        handler.onScale = function (scale, change) { return _this.onScale(scale, change); };
        handler.onTranslate = function (delta) { return _this.onTranslate(delta); };
        handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        window.addEventListener('resize', function () { return _this.onResize(); });
        this.updateSizes();
        if (this.storage.has(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__["StorageItem"].UserName) === false) {
            this.showWelcomeDialog();
        }
        else {
            this.startDialog.visible = false;
        }
        document.onkeydown = function (event) {
            if (_this.squint.connected && event.target instanceof HTMLInputElement === false) {
                switch (event.key) {
                    case 'x':
                        // simulate killing the connection
                        _this.squint.ws.close(3000);
                        break;
                    case 'i':
                        {
                            _Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].inspect(_Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].url)
                                .then(function (info) {
                                var msg = '';
                                msg += 'Connections (' + info.connections.length + '):\n';
                                for (var _i = 0, _a = info.connections; _i < _a.length; _i++) {
                                    var connection = _a[_i];
                                    msg += '   ' + connection.userName + ' ' + connection.state + '\n';
                                }
                                msg += 'Sessions (' + info.sessions.length + '):\n';
                                for (var _b = 0, _c = info.sessions; _b < _c.length; _b++) {
                                    var session = _c[_b];
                                    msg += '   ' + session.title + ' host=' + session.host.userName + ' ' + session.host.state + '\n';
                                    msg += '   Viewers (' + session.viewers.length + '):\n';
                                    for (var _d = 0, _e = session.viewers; _d < _e.length; _d++) {
                                        var connection = _e[_d];
                                        msg += '      ' + connection.userName + ' ' + connection.state;
                                    }
                                }
                                alert(msg);
                            })
                                .catch(function (err) {
                                debug('Squint.inspect() failed: ' + err);
                            });
                        }
                        break;
                    case 'd':
                        {
                            _Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].dump(_Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].url)
                                .then(function (msg) {
                                alert(msg);
                                console.log(msg);
                            })
                                .catch(function (err) {
                                debug('Squint.dump() failed: ' + err);
                            });
                        }
                        break;
                    case '1':
                        if (event.altKey) {
                            _this.remoteCameraMenu.hidden = !_this.remoteCameraMenu.hidden;
                        }
                        break;
                }
            }
        };
        // kick off the rendering loop
        this.drawImg();
    };
    SquintApp.prototype.join = function (sessionId, password) {
        var _this = this;
        this.squint.joinSession(sessionId, password)
            .then(function () {
            _this.startDialog.visible = false;
        })
            .catch(function (err) {
            if (password !== undefined) {
                alert('Incorrect Password');
            }
            if (err === _SquintStrings__WEBPACK_IMPORTED_MODULE_18__["SquintStrings"].CANNOT_JOIN_SESSION__INVALID_PASSWORD) {
                var dlg_1;
                var okHandler = function (password) {
                    _this.join(sessionId, password);
                    // do this last as it stops execution of this handler when content 
                    // is removed from the DOM
                    dlg_1.dispose();
                };
                var cancelHandler = function () {
                    dlg_1.dispose();
                };
                dlg_1 = new _PasswordDialog__WEBPACK_IMPORTED_MODULE_19__["PasswordDialog"](_this.div, okHandler, cancelHandler);
            }
            else {
                alert(err);
            }
            _this.startDialog.visible = true;
        });
    };
    SquintApp.prototype.showWelcomeDialog = function () {
        var _this = this;
        var welcomeDialog = new _WelcomeDialog__WEBPACK_IMPORTED_MODULE_9__["WelcomeDialog"](this.div, function (userName) {
            _this.storage.set(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__["StorageItem"].UserName, userName);
            _this.startDialog.visible = true;
        });
        welcomeDialog.visible = true;
    };
    SquintApp.prototype.closeConnection = function () {
        if (this.squint.connected) {
            this.squint.close();
        }
        this.stopUploader();
        this.enableVideo(false);
        this.startDialog.visible = true;
        this.canvas.clear();
    };
    SquintApp.prototype.startSession = function () {
        this.startUploader();
    };
    SquintApp.prototype.startUploader = function () {
        var _this = this;
        if (this.uploader === null) {
            this.uploader = new _Uploader__WEBPACK_IMPORTED_MODULE_3__["Uploader"](this.squint, function () { return _this.takePicture(); });
        }
    };
    SquintApp.prototype.stopUploader = function () {
        if (this.uploader) {
            this.uploader.stop();
            this.uploader = null;
        }
    };
    SquintApp.prototype.enableCameraCtrls = function (flag) {
        this.cameraMenu.enabled = flag;
        for (var i = 0; i < this.cameraCtrls.length; i++) {
            this.cameraCtrls[i].enabled = flag;
        }
    };
    SquintApp.prototype.buildMenu = function (menubar) {
        var _this = this;
        var viewMenu = menubar.addSubMenu('View');
        viewMenu.addSlider({
            label: 'Brightness',
            min: 0,
            max: 200,
            value: this.canvas.brightness,
            oninput: function (slider) {
                _this.dirty = true;
                _this.canvas.brightness = slider.value;
            },
            onGetText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        viewMenu.addSlider({
            label: 'Contrast',
            min: 0,
            max: 200,
            value: this.canvas.contrast,
            oninput: function (slider) {
                _this.dirty = true;
                _this.canvas.contrast = slider.value;
            },
            onGetText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        viewMenu.addSlider({
            label: 'Chroma',
            min: 0,
            max: 200,
            value: this.canvas.saturate,
            oninput: function (slider) {
                _this.dirty = true;
                _this.canvas.saturate = slider.value;
            },
            onGetText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        var blurCheckbox = viewMenu.addSlider({
            label: 'Blur',
            min: 0,
            max: 10,
            value: this.canvas.blur,
            oninput: function (slider) {
                _this.dirty = true;
                _this.canvas.blur = slider.value;
            },
            onGetText: function (slider) { return slider.value.toFixed(0); },
        });
        // thank you Safari
        try {
            if (!CanvasRenderingContext2D.prototype.filter) {
                blurCheckbox.enabled = false;
            }
        }
        catch (err) {
        }
        viewMenu.addSlider({
            label: 'Zoom',
            min: 1,
            max: 5,
            value: this.canvas.zoom,
            oninput: function (slider) {
                _this.dirty = true;
                _this.canvas.zoom = slider.value;
            },
            onGetText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; },
        });
        this.cameraMenu = menubar.addSubMenu('Camera');
        // TODO just fully disable all the menu items instead of the menu itself.
        this.cameraMenu.enabled = false;
        var firstItem = true;
        _Camera__WEBPACK_IMPORTED_MODULE_2__["Camera"].getCameras(function (constraint) {
            var radioButton = _this.cameraMenu.addRadiobutton({
                label: constraint.label,
                oncheck: function () {
                    _this.desired = constraint;
                    _this.enableVideo(true);
                },
                checked: firstItem,
                group: 'CamerasGroup',
            });
            if (firstItem) {
                _this.desired = constraint;
                firstItem = false;
            }
            _this.cameraCtrls.push(radioButton);
        });
        this.cameraMenu.addItem('Capabilities...', function () {
            var capabilities = _this.camera.getCapabilities();
            var msg = 'Camera Capabilities:\n';
            for (var key in capabilities) {
                if (key === 'deviceId' || key === 'groupId') {
                    continue;
                }
                msg += _Camera__WEBPACK_IMPORTED_MODULE_2__["Camera"].capabilityToString(capabilities, key) + '\n';
            }
            alert(msg);
        });
        this.jpegQuality = this.cameraMenu.addSlider({
            label: 'JPeg Photo Quality',
            min: 0.1,
            max: 1,
            value: 0.5,
            onGetText: function (slider) { return (100 * slider.value).toFixed() + '%'; },
        });
        this.cameraCtrls.push(this.jpegQuality);
        this.megaPixels = this.cameraMenu.addSlider({
            label: 'Camera Mega-Pixels',
            min: 0.25,
            max: 5,
            value: 1.25,
            onGetText: function (slider) { return slider.value.toFixed(2); },
        });
        this.cameraCtrls.push(this.megaPixels);
        this.advancedSubMenu = this.cameraMenu.addSubMenu('Advanced');
        this.enableCameraCtrls(false);
        var sessionMenu = menubar.addSubMenu('Session');
        sessionMenu.addItem('End', function () {
            _this.closeConnection();
        });
        sessionMenu.addItem('Make me Host', function () {
            _this.squint.requestToBeHost();
        });
        sessionMenu.addCheckbox({
            label: 'Logs',
            oncheck: function (checkbox) { _this.console.visible = checkbox.checked; },
            checked: function () { return _this.console.visible; }
        });
        this.remoteCameraMenu = menubar.addSubMenu('Remote Camera');
        this.remoteCameraMenu.hidden = true;
        var remoteJpegQuality = this.remoteCameraMenu.addSlider({
            label: 'JPeg Photo Quality',
            min: 0.1,
            max: 1,
            value: 0.5,
            onGetText: function (slider) { return (100 * slider.value).toFixed() + '%'; },
            oninput: function () {
                _this.squint.sendCameraRequest(remoteMegaPixels.value, remoteJpegQuality.value);
            }
        });
        var remoteMegaPixels = this.remoteCameraMenu.addSlider({
            label: 'Camera Mega Pixels',
            min: 0.1,
            max: 1,
            value: 0.5,
            onGetText: function (slider) { return (100 * slider.value).toFixed() + '%'; },
            oninput: function () {
                _this.squint.sendCameraRequest(remoteMegaPixels.value, remoteJpegQuality.value);
            }
        });
        var transparentWhite = 'rgba(255,255,255,0.5)';
        console.log('xxx: ' + SquintApp.baseUrl + '/img/chat.svg');
        var chatImg = menubar.addImage(SquintApp.baseUrl + 'img/chat.svg', function () { _this.chatPanel.visible = !_this.chatPanel.visible; });
        chatImg.style.backgroundColor = this.chatPanel.visible ? transparentWhite : 'transparent';
        this.chatPanel.onVisible = function (visible) {
            chatImg.style.backgroundColor = visible ? transparentWhite : 'transparent';
        };
        var levelsImg = menubar.addImage(SquintApp.baseUrl + 'img/levels.svg', function () { _this.levelsPanel.visible = !_this.levelsPanel.visible; });
        levelsImg.style.backgroundColor = this.levelsPanel.visible ? transparentWhite : 'transparent';
        this.levelsPanel.onVisible = function (visible) {
            levelsImg.style.backgroundColor = visible ? transparentWhite : 'transparent';
        };
        var grayscaleImg = menubar.addImage(SquintApp.baseUrl + '/img/color.svg', function () {
            _this.canvas.grayScale = !_this.canvas.grayScale;
            grayscaleImg.src = SquintApp.baseUrl + (_this.canvas.grayScale ? '/img/grayscale.svg' : '/img/color.svg');
        });
        this.userNameMenuItemDiv = menubar.addItem('Hi ' + (this.storage.has(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__["StorageItem"].UserName) ? this.storage.get(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_17__["StorageItem"].UserName) : ''), function () {
            new _UserNameDialog__WEBPACK_IMPORTED_MODULE_10__["UserNameDialog"](_this.div, _this.storage);
        });
        this.userNameMenuItemDiv.id = 'UserNameItemDiv';
    };
    SquintApp.prototype.onDownload = function (blob) {
        if (!blob) {
            debug('onDownload() blob is null');
        }
        // let the server know we're ready for the next download
        this.squint.requestNextImage();
        this.drawBlob(blob);
    };
    SquintApp.prototype.drawBlob = function (blob) {
        var _this = this;
        var img = document.createElement('img');
        img.src = URL.createObjectURL(blob);
        img.onload = function () {
            // TODO how do we know that this connection is the same as the one that
            // initiated the request?
            if (_this.squint.connected) {
                _this.img = img;
                _this.downloadTracker.tick(blob.size);
                _this.dirty = true;
            }
            URL.revokeObjectURL(img.src);
        };
        img.onerror = function (reason) {
            alert('Cannot load image: ' + reason);
        };
    };
    SquintApp.prototype.buildAdvancedSubMenu = function (track) {
        this.advancedSubMenu.clear();
        this.advancedConstraints = [];
        // getCapabilities() not supported on Firefox
        if (track.getCapabilities) {
            var capabilities = track.getCapabilities();
            var settings = track.getSettings();
            var whiteBalanceMode = {
                constraint: 'whiteBalanceMode',
                label: 'Auto White Blance'
            };
            var colorTemperature = {
                constraint: 'colorTemperature',
                label: 'Temperature'
            };
            var exposureMode = {
                constraint: 'exposureMode',
                label: 'Auto Exposure'
            };
            var exposureCompensation = {
                constraint: 'exposureCompensation',
                label: 'F-Stop'
            };
            var exposureTime = {
                constraint: 'exposureTime',
                label: 'Exposure'
            };
            var iso = {
                constraint: 'iso',
                label: 'ISO'
            };
            var focusMode = {
                constraint: 'focusMode',
                label: 'Auto Focus'
            };
            var focusDistance = {
                constraint: 'focusDistance',
                label: 'Focus'
            };
            var zoom = {
                constraint: 'zoom',
                label: 'Zoom'
            };
            if (capabilities.whiteBalanceMode && capabilities.colorTemperature) {
                this.addAdvancedItems(settings, capabilities, whiteBalanceMode, [colorTemperature]);
            }
            if (capabilities.exposureMode &&
                (capabilities.exposureCompensation || capabilities.exposureTime || capabilities.iso)) {
                this.addAdvancedItems(settings, capabilities, exposureMode, [exposureCompensation, exposureTime, iso]);
            }
            if (capabilities.focusMode && capabilities.focusDistance) {
                this.addAdvancedItems(settings, capabilities, focusMode, [focusDistance]);
            }
            if (capabilities.zoom) {
                this.addAdvancedSlider(settings, capabilities, zoom);
            }
        }
    };
    SquintApp.prototype.addAdvancedItems = function (settings, capabilities, checkboxSetup, sliderSetups) {
        var _this = this;
        var sliders = [];
        var checkbox = this.advancedSubMenu.addCheckbox({
            label: checkboxSetup.label,
            oncheck: function (checkbox) {
                for (var _i = 0, sliders_1 = sliders; _i < sliders_1.length; _i++) {
                    var slider = sliders_1[_i];
                    slider.enabled = !checkbox.checked;
                }
                _this.camera.applyAdvancedConstraints(_this.advancedConstraints);
            },
            checked: settings[checkboxSetup.constraint] === 'continuous',
        });
        this.advancedConstraints.push({
            constraint: checkboxSetup.constraint,
            value: function () { return checkbox.checked ? 'continuous' : 'manual'; }
        });
        for (var _i = 0, sliderSetups_1 = sliderSetups; _i < sliderSetups_1.length; _i++) {
            var item = sliderSetups_1[_i];
            if (capabilities[item.constraint]) {
                var slider = this.addAdvancedSlider(settings, capabilities, item);
                slider.enabled = !checkbox.checked;
                sliders.push(slider);
            }
        }
    };
    SquintApp.prototype.addAdvancedSlider = function (settings, capabilities, item) {
        var _this = this;
        var range = capabilities[item.constraint];
        var slider = this.advancedSubMenu.addSlider({
            label: item.label,
            min: range.min,
            max: range.max,
            value: settings[item.constraint],
            onGetText: function (slider) { return slider.value.toFixed(); },
            oninput: function () { _this.camera.applyAdvancedConstraints(_this.advancedConstraints); }
        });
        this.advancedConstraints.push({
            constraint: item.constraint,
            value: function () { return slider.value; }
        });
        return slider;
    };
    SquintApp.prototype.enableVideo = function (enable) {
        var _this = this;
        // stop the last video
        this.camera.stop();
        this.enableCameraCtrls(enable);
        if (enable) {
            this.camera.visible = true;
            this.camera.start(this.desired)
                .then(function (track) {
                var settings = track.getSettings();
                var maxMP = settings.width * settings.height / 1000000;
                _this.megaPixels.max = maxMP;
                _this.updateVideoSize(settings.width, settings.height);
                _this.buildAdvancedSubMenu(track);
                _this.updateVideoSize(_this.camera.videoWidth, _this.camera.videoHeight);
                if (!_this.uploader) {
                    _this.startSession();
                }
            })
                .catch(function (reason) {
                alert(reason);
            });
        }
        else {
            this.stopUploader();
            this.camera.visible = false;
            this.advancedSubMenu.clear();
        }
    };
    SquintApp.prototype.takePicture = function () {
        var _this = this;
        if (!this.squint.connected) {
            console.error('takePicture() after close');
        }
        return this.camera.takePicture(this.megaPixels.value, this.jpegQuality.value)
            .then(function (blob) {
            // draw what was uploaded, i.e. simulate a download
            _this.drawBlob(blob);
            return blob;
        });
    };
    SquintApp.prototype.onResize = function () {
        this.updateSizes();
    };
    SquintApp.prototype.updateVideoSize = function (videoWidth, videoHeight) {
        if (this.camera.visible) {
            var videoSize = Math.max(this.camera.clientWidth, this.camera.clientHeight);
            if (videoWidth > videoHeight) {
                this.camera.width = videoSize;
                this.camera.height = (videoSize * videoHeight / videoWidth);
            }
            else {
                this.camera.height = videoSize;
                this.camera.width = (videoSize * videoWidth / videoHeight);
            }
        }
    };
    SquintApp.prototype.updateSizes = function () {
        var menuBar = document.getElementById('Menubar');
        var menubarHeight = menuBar.clientHeight;
        this.console.setEdges(0, 0, menubarHeight, 0);
        var viewWidth = document.documentElement.clientWidth;
        var viewHeight = document.documentElement.clientHeight;
        this.canvas.width = viewWidth;
        this.canvas.height = viewHeight - menubarHeight;
        this.overlayCanvas.width = this.canvas.width;
        this.overlayCanvas.height = this.canvas.height;
        this.overlayCanvas.style.top = menubarHeight + 'px';
        this.dirty = true;
    };
    SquintApp.prototype.drawImg = function () {
        var _this = this;
        requestAnimationFrame(function () { return _this.drawImg(); });
        if (this.dirty === false) {
            return;
        }
        if (!this.img) {
            return;
        }
        this.canvas.draw(this.img);
        var ctx = this.overlayCanvas.getContext('2d');
        var msg;
        var canvasWidth = this.canvas.width;
        var canvasHeight = this.canvas.height;
        var canvasAR = canvasWidth / canvasHeight;
        var imgWidth = this.img.width;
        var imgHeight = this.img.height;
        var imgAR = imgWidth / imgHeight;
        var width;
        var height;
        if (canvasAR > imgAR) {
            height = this.canvas.zoom * canvasHeight;
            width = height * imgAR;
        }
        else {
            width = this.canvas.zoom * canvasWidth;
            height = width / imgAR;
        }
        ctx.clearRect(0, 0, canvasWidth, canvasHeight);
        var fontSize = _Util_Globals__WEBPACK_IMPORTED_MODULE_4__["isMobile"] ? 20 : 10;
        ctx.fillStyle = 'black';
        ctx.font = fontSize + 'px sans-serif';
        // squint server url
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        ctx.fillText(_Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].url, 5, 5);
        ctx.textAlign = 'left';
        ctx.textBaseline = 'bottom';
        // image size
        msg = imgWidth + 'x' + imgHeight;
        ctx.fillText(msg, 5, canvasHeight - (4 * fontSize + 5));
        // image size
        var mp = (imgWidth * imgHeight / 1000000);
        if (mp < 1.5) {
            msg = mp.toFixed(2) + 'MP';
        }
        else {
            msg = mp.toFixed(1) + 'MP';
        }
        ctx.fillText(msg, 5, canvasHeight - (3 * fontSize + 5));
        var fps;
        var bandwidth;
        if (this.uploader) {
            bandwidth = this.uploader.megaBitsPerSec;
            fps = this.uploader.fps;
        }
        else {
            bandwidth = this.downloadTracker.megaBitsPerSec;
            fps = this.downloadTracker.fps;
        }
        // FPS
        msg = fps.toFixed(1) + ' fps';
        ctx.fillText(msg, 5, canvasHeight - (2 * fontSize + 5));
        // bandwidth
        if (bandwidth < 5) {
            msg = bandwidth.toFixed(2) + ' Mbsp';
        }
        else {
            msg = bandwidth.toFixed(1) + ' Mbsp';
        }
        ctx.fillText(msg, 5, canvasHeight - (fontSize + 5));
        // bytes
        msg = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["toSizeStr"])(this.downloadTracker.lastTransferBytes);
        ctx.fillText(msg, 5, canvasHeight - 5);
        // messages
        msg = '';
        if (this.squint.reconnecting) {
            msg = 'Reconnecting...';
        }
        if (this.squint.remoteCameraPaused || this.squint.remoteCameraConnected === false) {
            if (this.squint.remoteCameraConnected === false) {
                msg = 'Camera Disconnected';
            }
            else {
                msg = 'Camera Paused';
            }
        }
        if (msg.length > 0) {
            ctx.shadowBlur = 0;
            ctx.fillStyle = 'rgba(0,0,0,0.5)';
            ctx.fillRect(0, 0, canvasWidth, canvasHeight);
            var fontSize_1 = 10;
            ctx.font = fontSize_1 + 'px sans-serif';
            var textMetrics = ctx.measureText(msg);
            fontSize_1 *= (0.8 * Math.min(width, canvasWidth) / textMetrics.width);
            ctx.font = fontSize_1 + 'px sans-serif';
            ctx.fillStyle = 'rgba(255,255,255,0.5)';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(msg, canvasWidth / 2, canvasHeight / 2);
        }
        this.dirty = false;
    };
    SquintApp.prototype.onScale = function (scale, change) {
        // TODO: center scaling about your two fingers
        this.canvas.zoom *= change;
        this.canvas.xOffset *= change;
        this.canvas.yOffset *= change;
        this.dirty = true;
    };
    SquintApp.prototype.onTranslate = function (delta) {
        this.canvas.xOffset += delta.x;
        this.canvas.yOffset += delta.y;
        this.dirty = true;
    };
    SquintApp.prototype.onDrag = function (pos, delta) {
        // TODO delta is opposite of translate in Y direction
        this.canvas.xOffset += delta.x;
        this.canvas.yOffset -= delta.y;
        this.dirty = true;
    };
    SquintApp.prototype.onChatMessage = function (connection, msg) {
        this.showNotification('<b>' + connection.userName + '</b>: ' + msg);
    };
    SquintApp.prototype.showNotification = function (html) {
        this.notificationDiv.innerHTML = html;
        // force the animation to run by removing and adding the element
        this.div.removeChild(this.notificationDiv);
        this.div.appendChild(this.notificationDiv);
    };
    return SquintApp;
}());



/***/ }),

/***/ "./src/Apps/Squint/SquintEvents.ts":
/*!*****************************************!*\
  !*** ./src/Apps/Squint/SquintEvents.ts ***!
  \*****************************************/
/*! exports provided: SquintEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintEvent", function() { return SquintEvent; });
var SquintEvent;
(function (SquintEvent) {
    SquintEvent["CameraPaused"] = "cameraPaused";
    SquintEvent["CameraRequest"] = "cameraRequest";
    SquintEvent["ChatMessage"] = "chatMessage";
    SquintEvent["Close"] = "close";
    SquintEvent["ConnectionInfoUpdate"] = "connectionInfoUpdate";
    SquintEvent["HostChanged"] = "hostChanged";
    SquintEvent["HostDisconnected"] = "hostDisconnected";
    SquintEvent["Image"] = "image";
    SquintEvent["Reconnecting"] = "reconnecting";
    SquintEvent["Reconnected"] = "reconnected";
    SquintEvent["SessionInfo"] = "sessionInfo";
    SquintEvent["SessionList"] = "sessionList";
    SquintEvent["SynchronizeTimer"] = "synchronizeTimer";
})(SquintEvent || (SquintEvent = {}));


/***/ }),

/***/ "./src/Apps/Squint/SquintMessage.ts":
/*!******************************************!*\
  !*** ./src/Apps/Squint/SquintMessage.ts ***!
  \******************************************/
/*! exports provided: ConnectionState, CreateSessionStatus, JoinSessionStatus, ReconnectedStatus, SquintMessageSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionState", function() { return ConnectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateSessionStatus", function() { return CreateSessionStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JoinSessionStatus", function() { return JoinSessionStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReconnectedStatus", function() { return ReconnectedStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintMessageSubject", function() { return SquintMessageSubject; });
//
// This file should be the same in both the Squint and SquintServer projects
//
var ConnectionState;
(function (ConnectionState) {
    ConnectionState["Zombie"] = "ZOMBIE";
    ConnectionState["Open"] = "OPEN";
    ConnectionState["Closed"] = "CLOSED";
    ConnectionState["Connecting"] = "CONNECTING";
    ConnectionState["Closing"] = "CLOSING";
    ConnectionState["Unknown"] = "UNKNOWN";
})(ConnectionState || (ConnectionState = {}));
var CreateSessionStatus;
(function (CreateSessionStatus) {
    CreateSessionStatus[CreateSessionStatus["Success"] = 0] = "Success";
    CreateSessionStatus[CreateSessionStatus["AlreadyInASession"] = 1] = "AlreadyInASession";
})(CreateSessionStatus || (CreateSessionStatus = {}));
var JoinSessionStatus;
(function (JoinSessionStatus) {
    JoinSessionStatus[JoinSessionStatus["Success"] = 0] = "Success";
    JoinSessionStatus[JoinSessionStatus["AlreadyInASession"] = 1] = "AlreadyInASession";
    JoinSessionStatus[JoinSessionStatus["SessionNotFound"] = 2] = "SessionNotFound";
    JoinSessionStatus[JoinSessionStatus["InvalidPassword"] = 3] = "InvalidPassword";
})(JoinSessionStatus || (JoinSessionStatus = {}));
var ReconnectedStatus;
(function (ReconnectedStatus) {
    ReconnectedStatus["Success"] = "Success";
    ReconnectedStatus["Failed"] = "Failed";
})(ReconnectedStatus || (ReconnectedStatus = {}));
var SquintMessageSubject;
(function (SquintMessageSubject) {
    SquintMessageSubject["CameraPaused"] = "CameraPaused";
    SquintMessageSubject["CameraRequest"] = "CameraRequest";
    SquintMessageSubject["ChatMessage"] = "ChatMessage";
    SquintMessageSubject["ConnectionInfoUpdate"] = "ConnectionInfoUpdate";
    SquintMessageSubject["CreateSession"] = "CreateSession";
    SquintMessageSubject["Hello"] = "Hello";
    SquintMessageSubject["HostChanged"] = "HostChanged";
    SquintMessageSubject["HostChangeRequest"] = "HostChangeRequest";
    SquintMessageSubject["HostDisconnected"] = "HostDisconnected";
    SquintMessageSubject["JoinSession"] = "JoinSession";
    SquintMessageSubject["Log"] = "Log";
    SquintMessageSubject["ReadyForNextImage"] = "ReadyForNextImage";
    SquintMessageSubject["Reconnected"] = "Reconnected";
    SquintMessageSubject["SessionCreated"] = "SessionCreated";
    SquintMessageSubject["SessionInfo"] = "SessionInfo";
    SquintMessageSubject["SessionJoined"] = "SessionJoined";
    SquintMessageSubject["SessionList"] = "SessionList";
    SquintMessageSubject["SynchronizeTimer"] = "SynchronizeTimer";
})(SquintMessageSubject || (SquintMessageSubject = {}));


/***/ }),

/***/ "./src/Apps/Squint/SquintSocket.ts":
/*!*****************************************!*\
  !*** ./src/Apps/Squint/SquintSocket.ts ***!
  \*****************************************/
/*! exports provided: SquintSocket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintSocket", function() { return SquintSocket; });
/* harmony import */ var _SquintMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquintMessage */ "./src/Apps/Squint/SquintMessage.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");
/* harmony import */ var _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WebSocketFactory */ "./src/Apps/Squint/WebSocketFactory.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");




var SquintSocket = /** @class */ (function () {
    function SquintSocket(ws, connectionId, onMessage, onImage, onClose) {
        var _this = this;
        this._ws = null;
        this._ws = ws;
        this.connectionId = connectionId;
        this.onMessage = onMessage;
        this.onImage = onImage;
        this.onClose = onClose;
        ws.onopen = null;
        ws.onclose = function (event) {
            if (_this._ws) {
                _this._ws.onclose = null;
                _this._ws.onerror = null;
                _this._ws.onmessage = null;
                _this._ws.onopen = null;
            }
            _this._ws = null;
            _this.onClose(event.code);
        };
        ws.onerror = function (event) {
            if (_this._ws) {
                _this._ws.onclose = null;
                _this._ws.onerror = null;
                _this._ws.onmessage = null;
                _this._ws.onopen = null;
            }
            _this._ws = null;
            _this.onClose(SquintSocket.CLOSE_CODE_ERROR);
        };
        ws.onmessage = function (message) {
            if (ws.readyState !== _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].OPEN) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('ws.onmessage() message received, but socket not open');
            }
            // process the image
            if (message.data instanceof Blob) {
                _this.onImage(message.data);
            }
            else if (typeof message.data === 'string') {
                try {
                    var msg = JSON.parse(message.data);
                    try {
                        _this.onMessage(msg);
                    }
                    catch (err) {
                        console.log('SquintSocket.onMessage() exception: ' + err);
                    }
                }
                catch (err) {
                    console.log('Invalid message received: Invalid JSON.\n' + err + '\n' + message.data);
                }
            }
            else {
                // Hate to modify our code to make it work with tests, but I don't know how else to
                // address this situation. We're testing using NodeJS which uses different types
                // than a browser. In particular it doesn't support Blobs so when we test sending
                // an image, it is not recognized as a Blob type. Ugh.
                if (_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["env"].isTesting) {
                    _this.onImage(message.data);
                }
                else {
                    Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('SquintSocket: unknown message received: ' + JSON.stringify(message, null, ' ').substring(0, 10000));
                }
            }
        };
    }
    Object.defineProperty(SquintSocket.prototype, "ws", {
        /**
         * For debugging only
         */
        get: function () {
            return this._ws;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SquintSocket.prototype, "url", {
        get: function () {
            if (this._ws) {
                return this._ws.url;
            }
            else {
                return '';
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SquintSocket.prototype, "readyState", {
        get: function () {
            if (this._ws === null) {
                return _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].CLOSED;
            }
            else {
                return this._ws.readyState;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SquintSocket.prototype, "readyStateStr", {
        get: function () {
            if (this._ws === null) {
                return 'CLOSED';
            }
            switch (this._ws.readyState) {
                case _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].OPEN:
                    return 'OPEN';
                case _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].CLOSED:
                    return 'CLOSED';
                case _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].CONNECTING:
                    return 'CONNECTING';
                case _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].CLOSING:
                    return 'CLOSING';
                default:
                    return 'UNKNOWN';
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SquintSocket.prototype, "bufferedAmount", {
        get: function () {
            if (this._ws) {
                return this._ws.bufferedAmount;
            }
            else {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('SquintSocket.bufferedAmount called, but not connected');
                return 0;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SquintSocket.prototype, "connected", {
        get: function () {
            return (this._ws !== null && this._ws.readyState === _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketReadyState"].OPEN);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SquintSocket.prototype, "bufferReady", {
        get: function () {
            if (!this.connected) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('SquintSocket.bufferReady() called after websocket was disconnected');
                return false;
            }
            return this.bufferedAmount === 0;
        },
        enumerable: false,
        configurable: true
    });
    SquintSocket.prototype.close = function (code) {
        if (code === void 0) { code = SquintSocket.CLOSE_CODE_NORMAL; }
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('SquintSocket.close() called but no connection exists');
            return;
        }
        if (this._ws) {
            this._ws.onclose = null;
            this._ws.onerror = null;
            this._ws.onmessage = null;
            this._ws.onopen = null;
            this._ws.close(code);
        }
        this._ws = null;
    };
    SquintSocket.prototype.send = function (msg) {
        if (!(this.connected)) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('SquintSocket.send() called, but not connected');
            return;
        }
        // @ts-ignore: can't be null per above check
        this._ws.send(JSON.stringify(msg));
    };
    SquintSocket.prototype.sendImage = function (blob) {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('SquintSocket.sendImage() called, but not connected');
            return;
        }
        // @ts-ignore: can't be null per above check
        this._ws.send(blob);
    };
    SquintSocket.connect = function (url, userName, onMessage, onImage, onClose, onInit, reconnectId) {
        return new Promise(function (resolve, reject) {
            // create temporary handlers that process the server handshake
            var ws = _WebSocketFactory__WEBPACK_IMPORTED_MODULE_2__["WebSocketFactory"].create(url);
            ws.onopen = function () {
                // send handshake message
                ws.send(JSON.stringify({
                    subject: 'Hello',
                    userName: userName,
                    reconnectId: reconnectId,
                    userAgent: navigator.userAgent,
                    platform: navigator.platform
                }));
            };
            ws.onclose = function (event) {
                reject('Cannot connect to server: ' + event.code);
            };
            ws.onerror = function (event) {
                reject('Cannot connect to ' + url);
            };
            ws.onmessage = function (messageEvent) {
                if (reconnectId) {
                    try {
                        var msg = JSON.parse(messageEvent.data);
                        if (msg.subject && msg.subject === 'Reconnected') {
                            if (msg.status === _SquintMessage__WEBPACK_IMPORTED_MODULE_0__["ReconnectedStatus"].Success) {
                                var ss = new SquintSocket(ws, reconnectId, onMessage, onImage, onClose);
                                onInit(ss);
                                resolve(ss);
                            }
                            else {
                                reject('Cannot reconnect to ' + url + '\n\nServer rejected the request.');
                            }
                        }
                        else {
                            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Expected Reconnected response, got: ' + JSON.stringify(msg, null, ' '));
                            reject('Cannot reconnect to ' + url + '\n\nInvalid server handshake.');
                        }
                    }
                    catch (err) {
                        Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Expected Reconnect response, got: ' + messageEvent.data);
                        reject('Cannot reconnect to ' + url + '\n\nInvalid server handshake.');
                    }
                }
                else {
                    try {
                        var msg = JSON.parse(messageEvent.data);
                        if (msg.subject && msg.subject === 'Hello') {
                            msg = msg;
                            console.log('Squint connection established. ID=' + msg.connectionId);
                            var ss = new SquintSocket(ws, msg.connectionId, onMessage, onImage, onClose);
                            // there is a very tricky potential bug here. After resolve() is called,
                            // but before the associated then() method is called, a message may be
                            // received on the socket. That's why we need the onInit() handler
                            onInit(ss);
                            resolve(ss);
                        }
                        else {
                            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Expected Hello response, got: ' + JSON.stringify(msg, null, ' '));
                            reject('Cannot connect to ' + url + '\n\nInvalid server handshake.');
                        }
                    }
                    catch (err) {
                        Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Expected Hello response, got: ' + messageEvent.data);
                        reject('Cannot connect to ' + url + '\n\nInvalid server handshake.');
                    }
                }
            };
        });
    };
    SquintSocket.CLOSE_CODE_ERROR = -1;
    SquintSocket.CLOSE_CODE_NORMAL = 1000;
    return SquintSocket;
}());



/***/ }),

/***/ "./src/Apps/Squint/SquintStrings.ts":
/*!******************************************!*\
  !*** ./src/Apps/Squint/SquintStrings.ts ***!
  \******************************************/
/*! exports provided: SquintStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintStrings", function() { return SquintStrings; });
var SquintStrings = /** @class */ (function () {
    function SquintStrings() {
    }
    SquintStrings.CANNOT_JOIN_SESSION = function (code) {
        return ('Cannot join session: Error code: ' + code);
    };
    SquintStrings.CANNOT_CREATE_SESSION = function (code) {
        return ('Cannot create session: Error code: ' + code);
    };
    SquintStrings.CAMERA_NOT_READY = 'Camera not ready';
    SquintStrings.CANNOT_JOIN_SESSION__IN_SESSION = 'Cannot join session: currently in another session.';
    SquintStrings.CANNOT_JOIN_SESSION__SESSION_NOT_FOUND = 'Cannot join session: session not found.';
    SquintStrings.CANNOT_JOIN_SESSION__TIMEOUT = 'Cannot join session: request timed out.';
    SquintStrings.CANNOT_JOIN_SESSION__INVALID_PASSWORD = 'Cannot join session: invalid password.';
    SquintStrings.CANNOT_CREATE_SESSION__IN_SESSION = 'Cannot create session: currently in another session.';
    SquintStrings.CANNOT_CREATE_SESSION__TIMEOUT = 'Cannot create session: request timed out.';
    return SquintStrings;
}());



/***/ }),

/***/ "./src/Apps/Squint/StartDialog.ts":
/*!****************************************!*\
  !*** ./src/Apps/Squint/StartDialog.ts ***!
  \****************************************/
/*! exports provided: StartDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StartDialog", function() { return StartDialog; });
/* harmony import */ var _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/ListBox */ "./src/GUI/ListBox.ts");
/* harmony import */ var _Version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Version */ "./src/Apps/Squint/Version.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Squint */ "./src/Apps/Squint/Squint.ts");
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _UserNameDialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UserNameDialog */ "./src/Apps/Squint/UserNameDialog.ts");
/* harmony import */ var _GUI_Dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../GUI/Dialog */ "./src/GUI/Dialog.ts");
/* harmony import */ var _SquintEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SquintEvents */ "./src/Apps/Squint/SquintEvents.ts");
/* harmony import */ var _StorageWithEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StorageWithEvents */ "./src/Apps/Squint/StorageWithEvents.ts");
/* harmony import */ var _SessionSetupDialog__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SessionSetupDialog */ "./src/Apps/Squint/SessionSetupDialog.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var StartDialog = /** @class */ (function (_super) {
    __extends(StartDialog, _super);
    function StartDialog(parent, squint, onJoinSession, onStartSession, storage) {
        var _this = _super.call(this, parent, 'Start') || this;
        _this.squint = squint;
        _this.storage = storage;
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_6__["SquintEvent"].SessionList,
            handler: function (sessions) {
                _this.onSessionList(sessions);
            }
        });
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_6__["SquintEvent"].ConnectionInfoUpdate,
            handler: function (info) {
                _this.onConnectionInfoUpdate(info);
            }
        });
        var timeout;
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_6__["SquintEvent"].Reconnecting,
            handler: function () {
                timeout = window.setTimeout(function () {
                    timeout = -1;
                    // give the system a little time to reconnect before showing a message
                    _this.showConnectingMsg = true;
                }, 500);
            }
        });
        _this.squint.on({
            event: _SquintEvents__WEBPACK_IMPORTED_MODULE_6__["SquintEvent"].Reconnected,
            handler: function (success) {
                if (timeout !== -1) {
                    window.clearTimeout(timeout);
                }
                if (success) {
                    _this.showConnectingMsg = false;
                }
                else {
                    _this.connect();
                }
            }
        });
        _this.onStartView = onJoinSession;
        _this.onStartSession = onStartSession;
        var dialogTitleDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'DialogTitleDiv', _this.dialogDiv);
        var titleDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'TitleDiv', dialogTitleDiv);
        titleDiv.className = 'DialogTitleClass';
        titleDiv.innerText = 'Squint v0.1.' + _Version__WEBPACK_IMPORTED_MODULE_1__["Version"].Build;
        _this.connectingDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'ConnectingTextDiv', dialogTitleDiv);
        _this.connectingDiv.innerText = 'connecting...';
        _this.connectingAnimationDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].createAnimation('ConnectingAnimationDiv', dialogTitleDiv);
        _this.userNameButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('button', 'UserNameButton', dialogTitleDiv);
        _this.userNameButton.className = 'ButtonClass';
        _this.userNameButton.style.display = 'none';
        _this.userNameButton.onclick = function () {
            new _UserNameDialog__WEBPACK_IMPORTED_MODULE_4__["UserNameDialog"](parent, storage);
        };
        _this.bodyDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'DialogBodyDiv', _this.dialogDiv);
        //
        // View a session panel
        //
        var viewPanelDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'ViewPanelDiv', _this.bodyDiv);
        _this.viewListBox = new _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__["ListBox"](viewPanelDiv, 'ViewListBox');
        _this.viewListBox.onSelectedChanged = function () {
            goViewButton.disabled = (_this.viewListBox.selected === null);
        };
        var buttonDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'ButtonDiv', viewPanelDiv);
        buttonDiv.className = 'ButtonDivClass';
        var goViewButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('button', 'ViewButton', buttonDiv);
        goViewButton.className = 'ButtonClass';
        goViewButton.innerText = 'View a camera...';
        goViewButton.disabled = true;
        goViewButton.onclick = function () {
            var connectionId = _this.viewListBox.selected;
            _this.onStartView(connectionId);
        };
        //
        // Or panel
        //
        var orPanelDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'OrPanelDiv', _this.bodyDiv);
        var orDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'OrDiv', orPanelDiv);
        orDiv.innerText = 'OR';
        //
        // Host a session panel
        //
        var hostPanelDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'HostPanelDiv', _this.bodyDiv);
        // camera icon css
        var iconDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'IconDiv', hostPanelDiv);
        iconDiv.className = 'icon';
        var cameraIconDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'CameraDiv', iconDiv);
        cameraIconDiv.className = 'camera-icon';
        var circleSmallDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'CircleSmallDiv', cameraIconDiv);
        circleSmallDiv.className = 'camera-circle';
        var circleBigDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'CircleBigDiv', cameraIconDiv);
        circleBigDiv.className = 'camera-btn';
        var buttonDiv2 = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('div', 'ButtonDiv', hostPanelDiv);
        buttonDiv2.className = 'ButtonDivClass';
        _this.goHostButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_3__["GUI"].create('button', 'HostButton', buttonDiv2);
        _this.goHostButton.className = 'ButtonClass';
        _this.goHostButton.innerText = 'Share your camera...';
        _this.goHostButton.onclick = function () {
            var dlg;
            var onOk = function (password) {
                dlg.dispose();
                _this.visible = false;
                _this.onStartSession(password);
            };
            dlg = new _SessionSetupDialog__WEBPACK_IMPORTED_MODULE_8__["SessionSetupDialog"](_this.bodyDiv, onOk);
        };
        storage.on(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_7__["StorageItem"].UserName, function (userName) {
            _this.userNameButton.innerText = 'Hi ' + userName;
        });
        _this.onShow = function () {
            _this.userNameButton.innerText = 'Hi ' + _this.storage.get(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_7__["StorageItem"].UserName);
            if (_this.squint.connected === false) {
                _this.connect();
            }
        };
        return _this;
    }
    Object.defineProperty(StartDialog.prototype, "showConnectingMsg", {
        set: function (flag) {
            this.bodyDiv.style.pointerEvents = flag ? 'none' : 'auto';
            this.bodyDiv.style.filter = flag ? 'grayscale(1) contrast(0.4)' : '';
            this.connectingDiv.style.display = flag ? 'block' : 'none';
            this.connectingAnimationDiv.style.display = flag ? 'block' : 'none';
            this.userNameButton.style.display = flag ? 'none' : 'block';
        },
        enumerable: false,
        configurable: true
    });
    StartDialog.prototype.connect = function () {
        var _this = this;
        if (this.squint.connected) {
            console.error('StartDialog.connect() called, but already connected');
            return;
        }
        this.showConnectingMsg = true;
        this.viewListBox.clear();
        this.squint.connect(_Squint__WEBPACK_IMPORTED_MODULE_2__["Squint"].url, this.storage.get(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_7__["StorageItem"].UserName))
            .then(function () {
            _this.showConnectingMsg = false;
        })
            .catch(function (err) {
            console.log('Cannot connect to server, trying again in 1 sec: ' + err);
            setTimeout(function () {
                _this.connect();
            }, 1000);
        });
    };
    StartDialog.prototype.onSessionList = function (sessions) {
        this.viewListBox.clear();
        for (var i = 0; i < sessions.length; i++) {
            this.viewListBox.addItem(sessions[i].title, sessions[i].sessionId);
        }
    };
    StartDialog.prototype.onConnectionInfoUpdate = function (info) {
        for (var _i = 0, _a = this.viewListBox.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.userData === info.connectionId) {
                item.div.innerText = info.userName;
            }
        }
    };
    return StartDialog;
}(_GUI_Dialog__WEBPACK_IMPORTED_MODULE_5__["Dialog"]));



/***/ }),

/***/ "./src/Apps/Squint/StorageWithEvents.ts":
/*!**********************************************!*\
  !*** ./src/Apps/Squint/StorageWithEvents.ts ***!
  \**********************************************/
/*! exports provided: StorageItem, StorageWithEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageItem", function() { return StorageItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageWithEvents", function() { return StorageWithEvents; });
/* harmony import */ var _EventManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventManager */ "./src/Apps/Squint/EventManager.ts");

var StorageItem;
(function (StorageItem) {
    StorageItem["UserName"] = "UserName";
})(StorageItem || (StorageItem = {}));
var StorageWithEvents = /** @class */ (function () {
    function StorageWithEvents() {
        this.eventManager = new _EventManager__WEBPACK_IMPORTED_MODULE_0__["EventManager"]();
    }
    StorageWithEvents.prototype.on = function (item, handler) {
        this.eventManager.on(item, handler);
    };
    StorageWithEvents.prototype.set = function (item, value) {
        var oldValue = localStorage.getItem(item);
        localStorage.setItem(item, value);
        if (value !== oldValue) {
            this.eventManager.emit(item, value, oldValue);
        }
    };
    StorageWithEvents.prototype.get = function (item) {
        return localStorage.getItem(item);
    };
    StorageWithEvents.prototype.has = function (item) {
        return this.get(item) !== null;
    };
    return StorageWithEvents;
}());



/***/ }),

/***/ "./src/Apps/Squint/Uploader.ts":
/*!*************************************!*\
  !*** ./src/Apps/Squint/Uploader.ts ***!
  \*************************************/
/*! exports provided: Uploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return Uploader; });
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");
/* harmony import */ var _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util/Stopwatch */ "./src/Util/Stopwatch.ts");
/* harmony import */ var _BandwidthTracker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BandwidthTracker */ "./src/Apps/Squint/BandwidthTracker.ts");
/* harmony import */ var _SquintStrings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SquintStrings */ "./src/Apps/Squint/SquintStrings.ts");




var MAX_FPS = 10;
var Uploader = /** @class */ (function () {
    function Uploader(squint, takePicture) {
        this.running = true;
        this.paused = false;
        this.busy = false;
        this.timer = new _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_1__["Stopwatch"]();
        this.bandwidthTracker = new _BandwidthTracker__WEBPACK_IMPORTED_MODULE_2__["BandwidthTracker"]();
        this.boostFps = false;
        this.hadToWait = false;
        this.squint = squint;
        this.takePicture = takePicture;
        this.upload();
    }
    Object.defineProperty(Uploader.prototype, "fps", {
        get: function () {
            return this.bandwidthTracker.fps;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "megaBitsPerSec", {
        get: function () {
            return this.bandwidthTracker.megaBitsPerSec;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "recommendedMsPerFrame", {
        get: function () {
            // if we haven't computed a bandwidth yet, just go with 10 FPS
            if (this.bandwidthTracker.numSamples === 0) {
                return 1000 / MAX_FPS;
            }
            // convert bytes to bits to get Mbps
            var lastSizeBits = 8 * this.bandwidthTracker.lastTransferBytes;
            var bitsPerMs = (1000 * 1000) * this.bandwidthTracker.megaBitsPerSec / 1000;
            var calcMs = lastSizeBits / bitsPerMs;
            if (this.boostFps) {
                calcMs = 0.5 * calcMs;
            }
            calcMs = Math.min(calcMs, 300);
            // the actual rate, or a max FPS of 10
            return Math.max(1000 / MAX_FPS, calcMs);
        },
        enumerable: false,
        configurable: true
    });
    Uploader.prototype.stop = function () {
        if (this.running) {
            this.running = false;
        }
    };
    Uploader.prototype.pause = function () {
        this.paused = true;
        this.bandwidthTracker.pause();
    };
    Uploader.prototype.resume = function () {
        this.paused = false;
        this.bandwidthTracker.resume();
        this.upload();
    };
    Uploader.prototype.upload = function (delay) {
        var _this = this;
        if (delay === void 0) { delay = 0; }
        if (!this.running) {
            // this can happen for a number of reasons, e.g. while we were waiting for the
            // next animation frame the socket was closed.
            //debug('upload() this.running===false, returning');
            return;
        }
        if (this.paused) {
            return;
        }
        if (this.busy) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('upload() called before previous call returned');
            //requestAnimationFrame(() => { this.upload(1000) });
            return;
        }
        if (delay > 0) {
            setTimeout(function () {
                _this.upload(0);
            }, delay);
            return;
        }
        if (this.squint.connected === false) {
            this.upload(1000);
            return;
        }
        if (this.timer.elapsedMs < this.recommendedMsPerFrame) {
            this.upload(this.recommendedMsPerFrame - this.timer.elapsedMs);
            return;
        }
        else {
            this.timer.restart();
        }
        // if this is the first time we get here and buffer is ready, boost.
        if (this.hadToWait === false && this.squint.bufferReady) {
            this.boostFps = true;
        }
        if (!this.squint.bufferReady) {
            this.hadToWait = true;
            requestAnimationFrame(function () { _this.upload(); });
            return;
        }
        this.hadToWait = false;
        this.busy = true;
        try {
            var nextDelay_1 = 0;
            this.takePicture()
                .then(function (blob) {
                if (blob === null) {
                    nextDelay_1 = 1000;
                    Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('takePicture generated a null Blob');
                }
                else {
                    if (_this.squint.connected) {
                        _this.squint.sendImage(blob);
                        _this.bandwidthTracker.tick(blob.size);
                    }
                }
            }).catch(function (err) {
                if (err === _SquintStrings__WEBPACK_IMPORTED_MODULE_3__["SquintStrings"].CAMERA_NOT_READY) {
                    // this happens when the camera is being initialized. Just try
                    // again in a second
                }
                else {
                    Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Cannot generate image from video: ' + err);
                }
                nextDelay_1 = 1000;
            })
                .finally(function () {
                _this.busy = false;
                requestAnimationFrame(function () { _this.upload(nextDelay_1); });
            });
        }
        catch (err) {
            console.error('Unexpected exception in Uploader.upload(): ' + err + '\n' + JSON.stringify(err, null, ' '));
            this.busy = false;
            requestAnimationFrame(function () { _this.upload(1000); });
        }
    };
    return Uploader;
}());



/***/ }),

/***/ "./src/Apps/Squint/UserNameDialog.ts":
/*!*******************************************!*\
  !*** ./src/Apps/Squint/UserNameDialog.ts ***!
  \*******************************************/
/*! exports provided: UserNameDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserNameDialog", function() { return UserNameDialog; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/Dialog */ "./src/GUI/Dialog.ts");
/* harmony import */ var _StorageWithEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StorageWithEvents */ "./src/Apps/Squint/StorageWithEvents.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var UserNameDialog = /** @class */ (function (_super) {
    __extends(UserNameDialog, _super);
    function UserNameDialog(parent, storage) {
        var _this = 
        // UserNameBackgroundDiv and UserNameDialogDiv
        _super.call(this, parent, 'UserName') || this;
        var userNameGroupDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'UserNameGroupDiv', _this.dialogDiv);
        var userNameLabel = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('label', 'UserNameLabel', userNameGroupDiv);
        userNameLabel.htmlFor = 'UserNameTextInput';
        userNameLabel.innerText = 'Name:';
        var userNameTextInput = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('input', 'UserNameTextInput', userNameGroupDiv);
        userNameTextInput.type = 'text';
        userNameTextInput.placeholder = 'Your Name';
        userNameTextInput.value = storage.get(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_2__["StorageItem"].UserName);
        userNameTextInput.oninput = function () {
            okButton.disabled = (userNameTextInput.value.trim().length === 0);
        };
        userNameTextInput.onkeypress = function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                okButton.click();
            }
        };
        _this.onShow = function () {
            userNameTextInput.focus();
            userNameTextInput.select();
        };
        var okButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('button', 'OkButton', userNameGroupDiv);
        okButton.className = 'ButtonClass';
        okButton.innerText = 'OK';
        okButton.onclick = function () {
            _this.visible = false;
            storage.set(_StorageWithEvents__WEBPACK_IMPORTED_MODULE_2__["StorageItem"].UserName, userNameTextInput.value.trim());
        };
        _this.visible = true;
        return _this;
    }
    return UserNameDialog;
}(_GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__["Dialog"]));



/***/ }),

/***/ "./src/Apps/Squint/Version.ts":
/*!************************************!*\
  !*** ./src/Apps/Squint/Version.ts ***!
  \************************************/
/*! exports provided: Version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
var Version = /** @class */ (function () {
    function Version() {
    }
    Version.Major = 0;
    Version.Minor = 0;
    Version.Build = '85';
    return Version;
}());



/***/ }),

/***/ "./src/Apps/Squint/WebSocketFactory.ts":
/*!*********************************************!*\
  !*** ./src/Apps/Squint/WebSocketFactory.ts ***!
  \*********************************************/
/*! exports provided: WebSocketReadyState, WebSocketFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebSocketReadyState", function() { return WebSocketReadyState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebSocketFactory", function() { return WebSocketFactory; });
// WebSocket isn't defined for testing. Can we define a shim?
var WebSocketReadyState;
(function (WebSocketReadyState) {
    WebSocketReadyState[WebSocketReadyState["CONNECTING"] = 0] = "CONNECTING";
    WebSocketReadyState[WebSocketReadyState["OPEN"] = 1] = "OPEN";
    WebSocketReadyState[WebSocketReadyState["CLOSING"] = 2] = "CLOSING";
    WebSocketReadyState[WebSocketReadyState["CLOSED"] = 3] = "CLOSED";
})(WebSocketReadyState || (WebSocketReadyState = {}));
var WebSocketFactory = /** @class */ (function () {
    function WebSocketFactory() {
    }
    return WebSocketFactory;
}());



/***/ }),

/***/ "./src/Apps/Squint/WelcomeDialog.ts":
/*!******************************************!*\
  !*** ./src/Apps/Squint/WelcomeDialog.ts ***!
  \******************************************/
/*! exports provided: WelcomeDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WelcomeDialog", function() { return WelcomeDialog; });
/* harmony import */ var _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/GUI */ "./src/GUI/GUI.ts");
/* harmony import */ var _GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/Dialog */ "./src/GUI/Dialog.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var WelcomeDialog = /** @class */ (function (_super) {
    __extends(WelcomeDialog, _super);
    function WelcomeDialog(parent, onOk) {
        var _this = _super.call(this, parent, 'Welcome') || this;
        var titleDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'TitleDiv', _this.dialogDiv);
        titleDiv.className = 'DialogTitleClass';
        titleDiv.innerText = 'Welcome to Squint!';
        var bodyDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'BodyDiv', _this.dialogDiv);
        var img = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('img', 'SquintImg', bodyDiv);
        img.src = location.origin + '/img/squint.jpg';
        var userNameGroupDiv = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', 'UserNameGroupDiv', bodyDiv);
        var userNameTextInput = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('input', 'UserNameTextInput', userNameGroupDiv);
        userNameTextInput.type = 'text';
        userNameTextInput.placeholder = 'Your Name';
        userNameTextInput.oninput = function () {
            okButton.disabled = (userNameTextInput.value.trim().length === 0);
        };
        userNameTextInput.onkeypress = function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                okButton.click();
            }
        };
        _this.onShow = function () {
            userNameTextInput.select();
            userNameTextInput.focus();
        };
        var okButton = _GUI_GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('button', 'OkButton', userNameGroupDiv);
        okButton.innerText = 'Start Squinting...';
        okButton.onclick = function () {
            var userName = userNameTextInput.value.trim();
            if (userName.length > 0) {
                _this.visible = false;
                onOk(userNameTextInput.value.trim());
            }
        };
        okButton.disabled = true;
        okButton.className = 'ButtonClass';
        return _this;
    }
    return WelcomeDialog;
}(_GUI_Dialog__WEBPACK_IMPORTED_MODULE_1__["Dialog"]));



/***/ }),

/***/ "./src/Apps/Viewer/Camera.ts":
/*!***********************************!*\
  !*** ./src/Apps/Viewer/Camera.ts ***!
  \***********************************/
/*! exports provided: ObjSizeProvider, FixedSizeProvider, Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjSizeProvider", function() { return ObjSizeProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedSizeProvider", function() { return FixedSizeProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glSpace */ "./src/gl/glSpace.ts");





// When viewing an object, view this much more than the object
var BUFFER_FACTOR = 1.1;
var ObjSizeProvider = /** @class */ (function () {
    function ObjSizeProvider(obj) {
        this.obj = obj;
    }
    Object.defineProperty(ObjSizeProvider.prototype, "maxWidth", {
        get: function () {
            //let xBox = this.obj.getBoundingPts();
            var xBox = this.obj.getBoundingBox();
            return BUFFER_FACTOR * Math.sqrt(xBox.width * xBox.width + xBox.depth * xBox.depth);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjSizeProvider.prototype, "maxHeight", {
        get: function () {
            var xBox = this.obj.getBoundingBox();
            return BUFFER_FACTOR * Math.sqrt(xBox.height * xBox.height + xBox.depth * xBox.depth);
        },
        enumerable: false,
        configurable: true
    });
    return ObjSizeProvider;
}());

var FixedSizeProvider = /** @class */ (function () {
    function FixedSizeProvider(maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
    }
    return FixedSizeProvider;
}());

var Camera = /** @class */ (function () {
    function Camera(settings) {
        var _a, _b, _c, _d, _e, _f;
        this.eye = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](_Renderer__WEBPACK_IMPORTED_MODULE_1__["INITIAL_EYE"]);
        this.lookAt = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].origin;
        this.zoomFactor = 1;
        this.useOrthographic = false;
        if (settings) {
            this.sizeProvider = (_a = settings.sizeProvider) !== null && _a !== void 0 ? _a : this.sizeProvider;
            this.eye = (_b = settings.eye) !== null && _b !== void 0 ? _b : this.eye;
            this.lookAt = (_c = settings.lookAt) !== null && _c !== void 0 ? _c : this.lookAt;
            this.zoomFactor = (_d = settings.zoomFactor) !== null && _d !== void 0 ? _d : this.zoomFactor;
            this.useOrthographic = (_e = settings.useOrthographic) !== null && _e !== void 0 ? _e : this.useOrthographic;
            this.fov = (_f = settings.fov) !== null && _f !== void 0 ? _f : this.fov;
        }
    }
    Camera.prototype.getProjection = function (gl) {
        var projection;
        var space = this.getViewSpace(gl);
        if (this.useOrthographic) {
            projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makeOrtho(space.min.x, space.max.x, space.min.y, space.max.y, space.min.z, space.max.z);
        }
        else {
            var eye = this.eye;
            var up = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, 1, 0]);
            var mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makeLookAt(eye, this.lookAt, up);
            this.fov = 2 * Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["toDeg"])(Math.atan2(space.height / 2, eye.z));
            var near = 0.1;
            var far = 20;
            var ar = space.width / space.height;
            projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makePerspective(this.fov, ar, near, far).multM(mat);
        }
        return projection;
    };
    //
    // The functions below change our view of the model
    //
    Camera.prototype.zoom = function (zoom) {
        this.zoomFactor *= zoom;
    };
    Camera.prototype.translate = function (delta) {
        this.eye.x -= delta.x / this.zoomFactor;
        this.eye.y -= delta.y / this.zoomFactor;
        this.lookAt.x -= delta.x / this.zoomFactor;
        this.lookAt.y -= delta.y / this.zoomFactor;
    };
    /**
     * Clipspace is defined as a range of [-1,1] in the smaller of the width and height.
     * The other dimensions is scaled to match the aspect ratio of the canvas
     */
    Camera.prototype.getClipSpace = function (gl) {
        var ar = gl.canvas.width / gl.canvas.height;
        if (ar > 1) {
            return new _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-ar, -1, 100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([ar, 1, -100]));
        }
        else {
            return new _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-1, -(1 / ar), 100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([1, (1 / ar), -100]));
        }
    };
    /**
     * View space is the world coordinate space of what can be currently viewed.
     */
    Camera.prototype.getViewSpace = function (gl) {
        var winAR = gl.canvas.width / gl.canvas.height;
        var objMaxWidth = this.sizeProvider.maxWidth;
        var objMaxHeight = this.sizeProvider.maxHeight;
        var objAR = objMaxWidth / objMaxHeight;
        var desiredWidth;
        var desiredHeight;
        if (objAR < winAR) {
            // make the object height fit
            desiredHeight = objMaxHeight;
            desiredWidth = objMaxHeight * winAR;
        }
        else {
            // make the object width fit
            desiredHeight = objMaxWidth / winAR;
            desiredWidth = objMaxWidth;
        }
        desiredHeight /= this.zoomFactor;
        desiredWidth /= this.zoomFactor;
        var clipSpace = this.getClipSpace(gl);
        var min = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
            -desiredWidth / 2 - this.lookAt.x,
            -desiredHeight / 2 - this.lookAt.y,
            clipSpace.near + this.lookAt.z,
        ]);
        var max = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
            desiredWidth / 2 - this.lookAt.x,
            desiredHeight / 2 - this.lookAt.y,
            clipSpace.far + this.lookAt.z,
        ]);
        return new _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](min, max);
    };
    return Camera;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ModelLoader.ts":
/*!****************************************!*\
  !*** ./src/Apps/Viewer/ModelLoader.ts ***!
  \****************************************/
/*! exports provided: ModelLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelLoader", function() { return ModelLoader; });
/* harmony import */ var worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-loader?name=LoaderWorker.worker.js!./LoaderWorker */ "./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/Apps/Viewer/LoaderWorker.ts");
/* harmony import */ var worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
// specify loader and options here. This value must match the
// contents of worker.d.ts



/**
 * Class for doing the work of loading a file into a glObject
 */
var ModelLoader = /** @class */ (function () {
    function ModelLoader() {
        this._loading = false;
    }
    Object.defineProperty(ModelLoader.prototype, "loading", {
        /**
         * Returns true if a file is currently being loaded
         */
        get: function () {
            return this._loading;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Loads a file
     *
     * @param file The file url to load
     * @param updateStatus Callback that is notified of progress
     * @returns TriangleObj promise
     */
    ModelLoader.prototype.loadModelFile = function (file, updateStatus) {
        var _this = this;
        this._loading = true;
        return new Promise(function (resolve, reject) {
            // if a previous worker exists, close it
            if (_this.worker) {
                _this.worker.terminate();
                _this.worker = undefined;
            }
            _this.worker = new worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0___default.a();
            var tStart = Date.now();
            _this.worker.onmessage = function (_a) {
                var data = _a.data;
                if (typeof data === 'string') {
                    // avoid flashing messages for things that happen very quickly.
                    if (Date.now() - tStart > 500) {
                        updateStatus(data);
                    }
                }
                else {
                    _this._loading = false;
                    var tObj = _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_2__["TriangleObj"].fromData(data);
                    updateStatus('');
                    _this.worker.terminate();
                    _this.worker = undefined;
                    resolve(tObj);
                }
            };
            _this.worker.postMessage(file);
        });
    };
    ModelLoader.prototype.orient = function (model) {
        // orient each file so that it is facing forward
        var name = model.name.split('.')[0].toLowerCase();
        switch (name) {
            case 'wolf':
                model.normalize.rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(-140));
                model.normalize.rotX(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(5));
                model.normalize.rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(180));
                break;
            case 'sheephead':
                model.normalize.rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(20));
                break;
            default:
                break;
        }
    };
    return ModelLoader;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ModelsMenu.ts":
/*!***************************************!*\
  !*** ./src/Apps/Viewer/ModelsMenu.ts ***!
  \***************************************/
/*! exports provided: createModelsMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createModelsMenu", function() { return createModelsMenu; });
var menuItems = [
    {
        label: 'Objects', id: 'ObjectsSubMenu', menuItems: [
            { label: 'Sphere', file: 'Sphere' },
            { label: 'Football', file: 'Football.blob' },
            { label: 'Pill', file: 'Pill.blob' },
            { label: 'Pill Bottle', file: 'PillBottle.blob' },
            { label: 'Soda Can', file: 'SodaCan.blob' },
            { label: 'Soccer Ball', file: 'SoccerBall.blob' },
            { label: 'Spoon', file: 'Spoon.blob' },
            { label: 'Teapot', file: 'Teapot.blob' },
            { label: 'Torus (Donut)', file: 'Torus.blob' },
            { label: 'Torus Knot', file: 'TorusKnot.blob' },
            { label: 'Vase', file: 'Vase.blob' },
            { label: 'Vitamin', file: 'Vitamin.blob' },
            { label: 'Wine Bottle', file: 'WineBottle.blob' },
        ]
    },
    {
        label: 'Sculptures', id: 'SculpturesSubMenu', menuItems: [
            { label: 'Belvedere Torso', file: 'BelvedereTorso.blob' },
            { label: 'David', file: 'David.blob' },
            { label: 'Head of David', file: 'HeadOfDavid.blob' },
            { label: 'Lacoon and His Sons', file: 'LaocoonAndHisSons.blob' },
            { label: 'Nefertiti', file: 'Nefertiti.blob' },
            { label: 'Thinker', file: 'Thinker.blob' },
            { label: 'Venus de Milo', file: 'VenusDeMilo.blob' },
            { label: 'Venus of Willendorf', file: 'VenusOfWillendorf.blob' },
            { label: 'Winged Victory of Samothrace', file: 'WingedVictory.blob' },
            { label: 'Winged Victory of Samothrace w/Base', file: 'WingedVictoryWithBase.blob' },
        ]
    },
    {
        label: 'Anatomy', id: 'AnatomySubMenu', menuItems: [
            { label: 'Skull 1', file: 'Skull1.blob' },
            { label: 'Skull 2', file: 'Skull2.blob' },
            { label: 'Skull 3', file: 'Skull3.blob' },
            { label: 'Skull 4', file: 'Skull4.blob' },
            { label: 'Pelvis', file: 'Pelvis.blob' },
            { label: 'Clavicle', file: 'Clavicle.blob' },
            { label: 'Scapula', file: 'Scapula.blob' },
            { label: 'Humerus', file: 'Humerus.blob' },
            { label: 'Head Ecorche', file: 'HeadEcorche.blob' },
            { label: 'Head Ecorche 2', file: 'HeadEcorche2.blob' },
            { label: 'Head Ecorche 3', file: 'HeadEcorche3.blob' },
            { label: 'Head Ecorche 4', file: 'HeadEcorche4.blob' },
        ]
    },
    {
        label: 'Poses', id: 'PosesSubMenu', menuItems: [
            { label: 'Pose 1', file: 'Pose_01.blob' },
            { label: 'Pose 2', file: 'Pose_02.blob' },
            { label: 'Pose 3', file: 'Pose_03.blob' },
            { label: 'Pose 4', file: 'Pose_04.blob' },
            { label: 'Pose 5', file: 'Pose_05.blob' },
            { label: 'Pose 6', file: 'Pose_06.blob' },
            { label: 'Pose 7', file: 'Pose_07.blob' },
            { label: 'Pose 8', file: 'Pose_08.blob' },
            { label: 'Pose 9', file: 'Pose_09.blob' },
            { label: 'Pose 10', file: 'Pose_010.blob' },
            { label: 'Pose 11', file: 'Pose_011.blob' },
            { label: 'Pose 12', file: 'Pose_012.blob' },
            { label: 'Pose 13', file: 'Pose_013.blob' },
            { label: 'Pose 14', file: 'Pose_014.blob' },
            { label: 'Pose 15', file: 'Pose_015.blob' },
            { label: 'Pose 16', file: 'Pose_016.blob' },
            { label: 'Female Pose', file: 'Pose1.blob' },
        ]
    },
    {
        label: 'Heads', id: 'HeadsSubMenu', menuItems: [
            { label: 'Head 1', file: 'Head1.blob' },
            { label: 'Head 2', file: 'Head2.blob' },
            { label: 'Head 3', file: 'Head3.blob' },
            { label: 'Head 4', file: 'Head4.blob' },
            { label: 'Head 5', file: 'Head5.blob' },
            { label: 'Head 6', file: 'Head6.blob' },
            { label: 'Head 7', file: 'Head7.blob' },
            { label: 'Head 8', file: 'Head8.blob' },
            { label: 'Head 9', file: 'Head9.blob' },
            { label: 'Head 10', file: 'Head10.blob' },
            { label: 'Head 11', file: 'Head.blob' },
            { label: 'Female Head', file: 'FemaleHead.blob' },
            { label: 'Arnold', file: 'Arnold.blob' },
        ]
    },
    {
        label: 'Expressions', id: 'ExpressionsSubMenu', menuItems: [
            {
                label: 'Neutral', id: 'NeutralSubMenu', menuItems: [
                    { label: 'Neutral', file: 'Male_02_01_Neutral.blob' },
                    { label: 'Neutral, Eyes Closed', file: 'Male_02_02_Neutral_Eyes_Closed.blob' },
                    { label: 'Neutral, Lips Parted', file: 'Male_02_038_Neutral_Lips_Parted.blob' },
                ]
            },
            {
                label: 'Eyes', id: 'EyesSubMenu', menuItems: [
                    { label: 'Look Up', file: 'Male_02_05_Look_Up.blob' },
                    { label: 'Look Down', file: 'Male_02_06_Look_Down.blob' },
                    { label: 'Look Left', file: 'Male_02_07_Look_Left.blob' },
                    { label: 'Look Right', file: 'Male_02_08_Look_Right.blob' },
                    { label: 'Brows Up', file: 'Male_02_016_Brows_Up.blob' },
                    { label: 'Brows Down', file: 'Male_02_017_Brows_Down.blob' },
                ]
            },
            {
                label: 'Jaw', id: 'JawSubMenu', menuItems: [
                    { label: 'Wide Open', file: 'Male_02_09_Jaw_Wide_Open.blob' },
                    { label: 'Side Right', file: 'Male_02_018_Jaw_Side_Right.blob' },
                    { label: 'Side Left', file: 'Male_02_019_Jaw_Side_Left.blob' },
                    { label: 'Thrust', file: 'Male_02_020_Jaw_Thrust.blob' },
                    { label: 'Clench', file: 'Male_02_021_Jaw_Clench.blob' },
                ]
            },
            {
                label: 'Cheeks', id: 'CheeksSubMenu', menuItems: [
                    { label: 'Puff', file: 'Male_02_022_Cheek_Puff.blob' },
                    { label: 'Suck', file: 'Male_02_023_Cheek_Suck.blob' },
                    { label: 'Dimple', file: 'Male_02_027_Dimple_Cheeks.blob' },
                ]
            },
            {
                label: 'Lips', id: 'LipsSubMenu', menuItems: [
                    { label: 'Tighten', file: 'Male_02_010_Tighten Lips.blob' },
                    { label: 'Pucker', file: 'Male_02_012_Pucker.blob' },
                    { label: 'Flare', file: 'Male_02_026_Flare_Lips.blob' },
                    { label: 'Sounds: "CH"', file: 'Male_02_024_Phoneme_CH.blob' },
                    { label: 'Sounds: "FV"', file: 'Male_02_025_Phoneme_FV.blob' },
                ]
            },
            {
                label: 'Emotions', id: 'EmotionsSubMenu', menuItems: [
                    { label: 'Smile, Mouth Closed', file: 'Male_02_03_Smile_Mouth_Closed.blob' },
                    { label: 'Smile, Mouth Open', file: 'Male_02_04_Smile_Mouth_Open.blob' },
                    { label: 'Snarl', file: 'Male_02_013_Snarl.blob' },
                    { label: 'Frown', file: 'Male_02_014_Frown.blob' },
                    { label: 'Happy', file: 'Male_02_028_Happy.blob' },
                    { label: 'Surprise', file: 'Male_02_029_Surprise.blob' },
                    { label: 'Sad', file: 'Male_02_030_Sad.blob' },
                    { label: 'Angry', file: 'Male_02_031_Angry.blob' },
                    { label: 'Pain', file: 'Male_02_032_Pain.blob' },
                    { label: 'Fear', file: 'Male_02_033_Fear.blob' },
                    { label: 'Disgust', file: 'Male_02_034_Disgust.blob' },
                    { label: 'Shock', file: 'Male_02_035_Shock.blob' },
                    { label: 'Rage', file: 'Male_02_036_Rage.blob' },
                ]
            },
            {
                label: 'Other', id: 'OtherSubMenu', menuItems: [
                    { label: 'Face Compression', file: 'Male_02_011_Face_Compression.blob' },
                    { label: 'Neck Tighten', file: 'Male_02_015_Neck_Tighten.blob' },
                    { label: 'Tongue', file: 'Male_02_037_Tongue.blob' },
                ]
            },
        ]
    },
];
function addItems(menu, items, loadModel) {
    items.forEach(function (item) {
        if ('menuItems' in item) {
            var subMenu = menu.addSubMenu(item.label, item.id);
            addItems(subMenu, item.menuItems, loadModel);
        }
        else {
            menu.addItem(item.label, function () { loadModel(item.file); });
        }
    });
}
function createModelsMenu(menubar, loadModel) {
    var menu = menubar.addSubMenu('Models', 'Models');
    addItems(menu, menuItems, loadModel);
}


/***/ }),

/***/ "./src/Apps/Viewer/PerspectiveCtrl.ts":
/*!********************************************!*\
  !*** ./src/Apps/Viewer/PerspectiveCtrl.ts ***!
  \********************************************/
/*! exports provided: PerspectiveCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCtrl", function() { return PerspectiveCtrl; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/OverlayCanvas */ "./src/GUI/OverlayCanvas.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Camera */ "./src/Apps/Viewer/Camera.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _gl_glSpace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../gl/glSpace */ "./src/gl/glSpace.ts");







var PerspectiveCtrl = /** @class */ (function () {
    function PerspectiveCtrl(parent, provider) {
        var _this = this;
        this.provider = provider;
        var canvas = document.createElement('canvas');
        canvas.id = 'PerspectiveCanvas';
        parent.appendChild(canvas);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl', { alpha: false });
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_3__["Renderer"](context);
        this.renderer.showMiniView = false;
        this.renderer.showBall = false;
        this.renderer.options.camera = new _Camera__WEBPACK_IMPORTED_MODULE_4__["Camera"]({
            sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_4__["FixedSizeProvider"](2, 2)
        });
        this.renderer.options.camera.useOrthographic = true;
        this.renderer.showFloor = false;
        this.overlay = new _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_1__["OverlayCanvas"](parent, 'PerspectiveOverlayCanvas');
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__["PointerEventHandler"](canvas);
        this.handler.onDown = function (pos) { return _this.onDown(pos); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
    }
    PerspectiveCtrl.prototype.dispose = function () {
        this.renderer.dispose();
    };
    PerspectiveCtrl.prototype.setEyePos = function (pos) {
        // convert to model space
        this.provider.eye = this.fromScreen(pos);
        if (this.onChange) {
            this.onChange();
        }
    };
    PerspectiveCtrl.prototype.onDown = function (pos) {
        this.setEyePos(pos);
    };
    PerspectiveCtrl.prototype.onDrag = function (pos, delta) {
        this.setEyePos(pos);
    };
    PerspectiveCtrl.prototype.setSize = function (width, height) {
        var gl = this.gl;
        gl.canvas.width = width;
        gl.canvas.height = height;
    };
    PerspectiveCtrl.prototype.render = function (modelMat) {
        // set the model matrix of the object to that of the primary
        // obj with an additional 90 deg rotation
        this.renderer.obj.model = modelMat.clone().rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(90));
        // shift the view so that the object is on the far right. Far enough that there is
        // a square space on the end that contains the origin (center of object we're viewing)
        var viewSpace = this.renderer.options.camera.getViewSpace(this.gl);
        this.renderer.options.camera.lookAt = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-viewSpace.width / 2 + viewSpace.height / 2, 0, 0]);
        this.renderer.render();
        this.drawEye();
    };
    PerspectiveCtrl.prototype.fromScreen = function (pt) {
        var canvas = this.gl.canvas;
        var ar = canvas.width / canvas.height;
        // the space we're viewing is a 2x2 box on the right
        var width = 2 * ar; // space.width * (2.0 / space.height);
        var height = 2.0;
        var space = new _gl_glSpace__WEBPACK_IMPORTED_MODULE_6__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-width / 2, -height / 2, -100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([width / 2, height / 2, 100]));
        var boxSize = space.height;
        var z = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])((1 - pt.x / canvas.width) * space.width - boxSize / 2, boxSize / 2, 100);
        var y = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(space.bottom + (1 - pt.y / canvas.height) * space.height, -1, 1);
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.provider.eye.x, y, z]);
    };
    PerspectiveCtrl.prototype.toScreen = function (pt) {
        var canvas = this.gl.canvas;
        var ar = canvas.width / canvas.height;
        // the space we're viewing is a 2x2 box on the right
        var width = 2 * ar; // space.width * (2.0 / space.height);
        var height = 2.0;
        var space = new _gl_glSpace__WEBPACK_IMPORTED_MODULE_6__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-width / 2, -height / 2, -100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([width / 2, height / 2, 100]));
        var boxSize = space.height;
        var x = (1 - (pt.z + boxSize / 2) / space.width) * canvas.width;
        var y = (1 - (pt.y - space.bottom) / space.height) * canvas.height;
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([x, y]);
    };
    PerspectiveCtrl.prototype.drawLine = function (ctx, pt1, pt2) {
        var p1 = this.toScreen(pt1);
        var p2 = this.toScreen(pt2);
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
    };
    PerspectiveCtrl.prototype.drawEye = function () {
        var gl = this.gl;
        var ctx = this.overlay.context;
        ctx.canvas.width = gl.canvas.width;
        ctx.canvas.height = gl.canvas.height;
        ctx.lineWidth = 2;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["isMobile"]) {
            ctx.lineWidth = 2 * ctx.lineWidth;
        }
        ctx.clearRect(0, 0, this.gl.canvas.width, this.gl.canvas.height);
        var space = this.renderer.options.camera.getViewSpace(this.gl);
        // draw the front 'view' line
        ctx.strokeStyle = 'rgba(255,255,255,0.2)';
        this.drawLine(ctx, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, space.top, space.height / 2]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, space.bottom, space.height / 2]));
        // draw line from the eye to the look at center
        this.drawLine(ctx, this.provider.eye, this.provider.lookAt);
        var p1 = this.toScreen(this.provider.eye);
        var p2 = this.toScreen(this.provider.lookAt);
        var angle = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toDeg"])(Math.atan2(p2.y - p1.y, p2.x - p1.x));
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        p2.x = p1.x + ctx.canvas.width * Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle + this.provider.fov / 2));
        p2.y = p1.y + ctx.canvas.width * Math.sin(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle + this.provider.fov / 2));
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        p2.x = p1.x + ctx.canvas.width * Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle - this.provider.fov / 2));
        p2.y = p1.y + ctx.canvas.width * Math.sin(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle - this.provider.fov / 2));
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        var center = this.toScreen(this.provider.eye);
        ctx.strokeStyle = 'white';
        ctx.fillStyle = 'rgba(255,255,255,0.6)';
        // draw the actual eye
        var openAngle = 70;
        var radius = 0.12 * ctx.canvas.height;
        var startAngle = angle + openAngle / 2;
        var endAngle = startAngle + (360 - openAngle);
        ctx.beginPath();
        ctx.moveTo(center.x, center.y);
        ctx.arc(center.x, center.y, radius, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(startAngle), Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(endAngle));
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        ctx.strokeStyle = 'transparent';
        ctx.fillStyle = 'rgba(255,255,255,0.3)';
        ctx.beginPath();
        ctx.moveTo(center.x, center.y);
        ctx.arc(center.x, center.y, radius, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(startAngle), Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(endAngle), true);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        // draw the look at point (center of object)
        center = this.toScreen(this.provider.lookAt);
        radius = 2;
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(center.x, center.y, radius, 0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(360));
        ctx.fill();
    };
    PerspectiveCtrl.prototype.setModel = function (tObj) {
        this.renderer.setModel(tObj);
    };
    return PerspectiveCtrl;
}());



/***/ }),

/***/ "./src/Apps/Viewer/PerspectivePanel.ts":
/*!*********************************************!*\
  !*** ./src/Apps/Viewer/PerspectivePanel.ts ***!
  \*********************************************/
/*! exports provided: PerspectivePanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectivePanel", function() { return PerspectivePanel; });
/* harmony import */ var _GUI_Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/Panel */ "./src/GUI/Panel.ts");
/* harmony import */ var _PerspectiveCtrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PerspectiveCtrl */ "./src/Apps/Viewer/PerspectiveCtrl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PerspectivePanel = /** @class */ (function (_super) {
    __extends(PerspectivePanel, _super);
    function PerspectivePanel(parent, id, camera) {
        var _this = _super.call(this, parent, id) || this;
        _this.resizeListener = function () { return _this.onResize(); };
        _this.onChange = null;
        _this.perspectiveCtrl = new _PerspectiveCtrl__WEBPACK_IMPORTED_MODULE_1__["PerspectiveCtrl"](_this.div, camera);
        _this.perspectiveCtrl.onChange = function () {
            if (_this.onChange) {
                _this.onChange();
            }
        };
        window.addEventListener('resize', _this.resizeListener);
        return _this;
    }
    PerspectivePanel.prototype.dispose = function () {
        window.removeEventListener('resize', this.resizeListener);
        this.perspectiveCtrl.dispose();
    };
    PerspectivePanel.prototype.render = function (model) {
        this.perspectiveCtrl.render(model);
    };
    PerspectivePanel.prototype.setModel = function (tObj) {
        this.perspectiveCtrl.setModel(tObj);
    };
    PerspectivePanel.prototype.show = function (value) {
        if (value === true) {
            this.onResize();
        }
    };
    PerspectivePanel.prototype.onResize = function () {
        this.perspectiveCtrl.setSize(this.div.clientWidth, this.div.clientHeight);
    };
    return PerspectivePanel;
}(_GUI_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/Apps/Viewer/Plane.ts":
/*!**********************************!*\
  !*** ./src/Apps/Viewer/Plane.ts ***!
  \**********************************/
/*! exports provided: Plane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plane", function() { return Plane; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");

/**
 * Represents a plane defined by a*x + b*y + c*z = d
 */
var Plane = /** @class */ (function () {
    /**
     * @param pt A point on the plane perpendicular to the origin
     * @param origin If the perpendicular point is not the origin, specify it here
     */
    function Plane(pt, origin) {
        if (!origin) {
            origin = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].origin;
        }
        this.origin = origin;
        this.a = origin.x - pt.x;
        this.b = origin.y - pt.y;
        this.c = origin.z - pt.z;
        this.d = this.a * this.a + this.b * this.b + this.c * this.c;
        this.distanceTerm = Math.sqrt(this.d);
    }
    /**
     * Computes the distance to a point.
     *
     * @param pt The point.
     * @returns the Distance.
     */
    Plane.prototype.distToPt = function (pt) {
        var x = pt.x - this.origin.x;
        var y = pt.y - this.origin.y;
        var z = pt.z - this.origin.z;
        return Math.abs(this.a * x + this.b * y + this.c * z + this.d) / this.distanceTerm;
    };
    return Plane;
}());



/***/ }),

/***/ "./src/Apps/Viewer/Renderer.ts":
/*!*************************************!*\
  !*** ./src/Apps/Viewer/Renderer.ts ***!
  \*************************************/
/*! exports provided: INITIAL_EYE, Contour, RenderMode, Reset, LightType, Renderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INITIAL_EYE", function() { return INITIAL_EYE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contour", function() { return Contour; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderMode", function() { return RenderMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reset", function() { return Reset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightType", function() { return LightType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return Renderer; });
/* harmony import */ var _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/ViewerVertex.glsl */ "./src/shaders/ViewerVertex.glsl");
/* harmony import */ var _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/ViewerFragment.glsl */ "./src/shaders/ViewerFragment.glsl");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Camera */ "./src/Apps/Viewer/Camera.ts");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _glObject__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./glObject */ "./src/Apps/Viewer/glObject.ts");
/* harmony import */ var _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gl/glFrameBuffer */ "./src/gl/glFrameBuffer.ts");
/* harmony import */ var _gl_glTexture__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../gl/glTexture */ "./src/gl/glTexture.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");
/* harmony import */ var _Plane__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Plane */ "./src/Apps/Viewer/Plane.ts");
/* harmony import */ var _TextureRenderer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./TextureRenderer */ "./src/Apps/Viewer/TextureRenderer.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");


















var BALL_RADIUS = 0.5;
var INITIAL_LIGHT_POS = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1.0, 1.0, 1.5]);
var INITIAL_VIEW = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity;
var INITIAL_SHININESS = 15;
var INITIAL_LIGHT_INTENSITY = 1.0;
var INITIAL_FALLOFF = 0.5;
var INITIAL_EYE = [0, 0, 6]; // 3 times the max object dimension of 2. For a model, about 15 ft away
var Contour = /** @class */ (function () {
    function Contour(color, angle) {
        if (color instanceof _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]) {
            this.color = color;
        }
        else {
            this.color = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([color, color, color]);
        }
        this.angle = angle;
    }
    return Contour;
}());

// Rendering modes. Must match values in ViewerFragment.glsl
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["Normal"] = 0] = "Normal";
    RenderMode[RenderMode["ContourPlanes"] = 1] = "ContourPlanes";
    RenderMode[RenderMode["ContourValues"] = 2] = "ContourValues";
    RenderMode[RenderMode["LightAndShadow"] = 3] = "LightAndShadow";
    RenderMode[RenderMode["HighlightTerminator"] = 4] = "HighlightTerminator";
    RenderMode[RenderMode["HighlightShadow"] = 5] = "HighlightShadow";
    RenderMode[RenderMode["EmphasizeHighlights"] = 6] = "EmphasizeHighlights";
})(RenderMode || (RenderMode = {}));
var Reset;
(function (Reset) {
    Reset[Reset["All"] = 0] = "All";
    Reset[Reset["View"] = 1] = "View";
    Reset[Reset["Lights"] = 2] = "Lights";
    Reset[Reset["Rendering"] = 3] = "Rendering";
})(Reset || (Reset = {}));
var LightType;
(function (LightType) {
    LightType[LightType["Point"] = 0] = "Point";
    LightType[LightType["Directional"] = 1] = "Directional";
})(LightType || (LightType = {}));
/**
 * Class that renders triangles and a light source
 */
var Renderer = /** @class */ (function () {
    function Renderer(glCtx) {
        this.gl = null;
        this.yellow = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([1.0, 0.9, 0.7]);
        this.options = {
            view: _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity,
            valueRange: _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard,
            lightPos: INITIAL_LIGHT_POS.clone(),
            lightType: LightType.Point,
            falloff: INITIAL_FALLOFF,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: true,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_6__["Camera"](),
            whiteColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite,
            blackColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack,
            useShadows: true,
            renderMode: RenderMode.Normal,
        };
        this.arrowOptions = {
            view: _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity,
            valueRange: new _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"](1.0, 0.4, 0.1),
            lightPos: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1, 0.5, 0.5]),
            lightType: LightType.Directional,
            falloff: 0.0,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: false,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_6__["Camera"]({
                sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_6__["FixedSizeProvider"](2, 2),
                useOrthographic: true,
            }),
            whiteColor: this.yellow,
            blackColor: _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__["htmlColor"].black.toGlColor(),
            useShadows: false,
            renderMode: RenderMode.Normal,
        };
        this.ballOptions = {
            view: _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity,
            valueRange: _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard,
            lightPos: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1, 0.5, 0.5]),
            lightType: LightType.Directional,
            falloff: 0.0,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: false,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_6__["Camera"]({
                sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_6__["FixedSizeProvider"](2, 2),
                useOrthographic: true,
            }),
            whiteColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite,
            blackColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack,
            useShadows: false,
            renderMode: RenderMode.Normal,
        };
        // size of the smaller view
        this.miniSize = 0.2;
        this.showShadowMap = false;
        this.showMiniView = true;
        this.showBall = true;
        this.showFloor = true;
        this.showGrid = false;
        this.miniViewShowContours = false;
        this.lockFloor = false;
        this.gl = glCtx;
        var gl = this.gl;
        // enable z-buffer
        gl.enable(gl.DEPTH_TEST);
        // enable alpha values
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        this.program = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_7__["glProgram"](gl, _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        var tBall = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__["TriangleObjBuilder"]('Ball');
        tBall.addSphere(50, BALL_RADIUS, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]));
        tBall.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_13__["NormalType"].Smooth);
        this.ball = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](gl, tBall, this.program);
        var tArrow = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__["TriangleObjBuilder"]('Light Arrow');
        tArrow.addArrow();
        this.arrow = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](gl, tArrow, this.program);
        this.arrowOptions.camera.useOrthographic = true;
        var style = getComputedStyle(gl.canvas);
        var color = _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__["htmlColor"].fromCss(style.backgroundColor).toGlColor();
        gl.clearColor(color.r, color.g, color.b, 1);
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        // tests
        /*
        let light = new Vec3([0, 10, 0]);
        let pt = new Vec3([2, 0, 0]);
        let mat = new Mat4();
        mat.translate(new Vec3([0, -100, 0]));
        mat.scale(0.5);
        mat.rotZ(toRad(-90));
        mat.rotY(toRad(45));
        let xpt = mat.multVec3(pt);
        let xLight = mat.inverse().multVec3(light);
        let xOrigin = mat.inverse().multVec3(new Vec3([0, 0, 0]));
        let plane = new Plane(light);
        let plane2 = new Plane(xLight, xOrigin);
        console.log('\n\n----------------------');
        console.log('pt: ' + pt.toString(2) + '      xlight: ' + xLight.toString(2) + '   ' + (plane2.distToPt(pt) * mat.scaleFactors.x));
        console.log('xpt: ' + xpt.toString(2) + '    light: ' + light.toString(2) + '   ' + plane.distToPt(xpt));
        console.log('xOrigin: ' + xOrigin.toString(2));
        */
    }
    Object.defineProperty(Renderer.prototype, "ballColor", {
        set: function (color) {
            this.ballOptions.whiteColor = color;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.dispose = function () {
        this.obj.dispose();
        this.floor.dispose();
        this.ball.dispose();
        this.arrow.dispose();
        if (this.shadowFrameBuffer) {
            this.shadowFrameBuffer.dispose();
            this.shadowColorTexture.dispose();
            this.shadowDepthTexture.dispose();
        }
        this.obj = null;
        this.floor = null;
        this.ball = null;
        this.arrow = null;
        this.shadowFrameBuffer = null;
        this.shadowColorTexture = null;
        this.shadowDepthTexture = null;
    };
    Renderer.prototype.renderModeCanToggleHighlights = function () {
        if (this.options.renderMode === RenderMode.EmphasizeHighlights || this.options.renderMode === RenderMode.LightAndShadow) {
            return false;
        }
        else {
            return true;
        }
    };
    Renderer.prototype.rotX = function (angle) {
        this.obj.rotX(angle);
        if (this.lockFloor == false) {
            this.floor.rotX(angle);
        }
    };
    Renderer.prototype.rotY = function (angle) {
        this.obj.rotY(angle);
        if (this.lockFloor == false) {
            this.floor.rotY(angle);
        }
    };
    Renderer.prototype.rotZ = function (angle) {
        this.obj.rotZ(angle);
        if (this.lockFloor == false) {
            this.floor.rotZ(angle);
        }
    };
    Renderer.prototype.preRotX = function (angle) {
        this.obj.preRotX(angle);
        if (this.lockFloor == false) {
            this.floor.preRotX(angle);
        }
    };
    Renderer.prototype.preRotY = function (angle) {
        this.obj.preRotY(angle);
        if (this.lockFloor == false) {
            this.floor.preRotY(angle);
        }
    };
    Renderer.prototype.preRotZ = function (angle) {
        this.obj.preRotZ(angle);
        if (this.lockFloor == false) {
            this.floor.preRotZ(angle);
        }
    };
    Renderer.prototype.scale = function (scale) {
        this.obj.scale(scale);
        if (this.lockFloor == false) {
            this.floor.scale(scale);
        }
    };
    Renderer.prototype.translate = function (offset) {
        this.obj.translate(offset);
        if (this.lockFloor == false) {
            this.floor.translate(offset);
        }
    };
    Renderer.prototype.rotateLight = function (xRad, yRad) {
        var matX = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].fromRotX(yRad);
        var matY = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].fromRotY(xRad);
        var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec4"].fromVec3(this.options.lightPos, 1);
        vec = matX.multV(vec);
        vec = matY.multV(vec);
        this.options.lightPos = vec.xyz;
    };
    Object.defineProperty(Renderer.prototype, "tObj", {
        get: function () {
            return this.obj.tObj;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.setModel = function (tObj) {
        if (this.obj) {
            this.obj.dispose();
        }
        this.obj = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](this.gl, tObj, this.program);
        this.options.camera.sizeProvider = new _Camera__WEBPACK_IMPORTED_MODULE_6__["ObjSizeProvider"](this.obj);
        // move the object so that the center is at [0,0,0] and it is scaled
        // so that it's diagonal is 2 units across
        var objScale = 2.0 / tObj.diagonal;
        this.obj.autoSize(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]), 2);
        if (this.floor) {
            this.floor.dispose;
        }
        var tFloor = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__["TriangleObjBuilder"]('Floor');
        // make the floor size slightly larger than the object, centered at the bottom
        var radius = 4;
        var pos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, -objScale * tObj.height / 2, 0]);
        tFloor.addDisk(50, radius, pos);
        this.floor = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](this.gl, tFloor, this.program);
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__["glUniform"](this.gl, this.program);
        uni.set('uFloorCenter', tFloor.center);
        uni.set('uFloorRadius', radius);
        // reset the view and the light
        this.reset(Reset.All);
    };
    Renderer.prototype.reset = function (what) {
        switch (what) {
            case Reset.All:
                this.reset(Reset.Lights);
                this.reset(Reset.Rendering);
                this.reset(Reset.View);
                break;
            case Reset.Lights:
                this.options.lightPos = INITIAL_LIGHT_POS.clone();
                this.options.falloff = INITIAL_FALLOFF;
                this.options.lightIntensity = INITIAL_LIGHT_INTENSITY;
                this.options.valueRange.ambientIntensity = _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard.ambientIntensity;
                break;
            case Reset.View:
                this.options.view = INITIAL_VIEW.clone();
                this.obj.clearTransforms();
                this.floor.clearTransforms();
                this.options.camera.eye = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"](INITIAL_EYE);
                this.options.camera.lookAt = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"].origin;
                this.options.camera.zoomFactor = 1;
                break;
            case Reset.Rendering:
                this.options.renderMode = RenderMode.Normal;
                this.options.showHighlights = true;
                this.options.shininess = INITIAL_SHININESS;
                this.options.valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard;
                break;
        }
    };
    Renderer.prototype.render = function () {
        this.program.use();
        this.renderToShadowMap();
        this.renderToScreen();
    };
    Renderer.prototype.setValueRangeUniforms = function (valueRange) {
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__["glUniform"](this.gl, this.program);
        uni.set('uDiffuseIntensity', valueRange.diffuseIntensity);
        uni.set('uAmbientIntensity', valueRange.shadow);
        uni.set('uSpecularIntensity', valueRange.specularIntensity);
    };
    Renderer.prototype.setOptions = function (options) {
        var gl = this.gl;
        options.useCulling ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__["glUniform"](this.gl, this.program);
        uni.set('view', options.view);
        uni.set('lightView', this.lightView);
        uni.set('projection', options.camera.getProjection(this.gl));
        uni.set('uEye', options.camera.eye);
        uni.set('uOrthographic', options.camera.useOrthographic);
        uni.set('uUseShadows', options.useShadows);
        uni.seti('uRenderMode', options.renderMode);
        uni.set('uShowHighlights', options.showHighlights || options.renderMode === RenderMode.EmphasizeHighlights);
        uni.set('uShininess', options.shininess);
        var valueRange;
        if (options.renderMode === RenderMode.EmphasizeHighlights) {
            valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].EmphasizeHighlights;
        }
        else {
            valueRange = options.valueRange;
        }
        this.setValueRangeUniforms(valueRange);
        uni.set('uWhiteColor', options.whiteColor);
        uni.set('uBlackColor', options.blackColor);
        uni.seti('uNumContours', options.contours.length);
        for (var i = 0; i < options.contours.length; i++) {
            uni.set('uContourColors[' + i + ']', options.contours[i].color);
            uni.set('uContourAngles[' + i + ']', options.contours[i].angle);
        }
        uni.set('uPointLight', options.lightType === LightType.Point);
        uni.set('uFalloff', options.falloff);
        uni.set('uLightIntensity', options.lightIntensity);
        if (options.falloff === 0) {
            uni.set('uLightPos', options.lightPos);
        }
        else {
            // compute the minimum distance to the light. We'll use this value to auto-adjust
            // the light
            var dist = void 0;
            // We can get the distance in two ways. 1: transform all the points by the model
            // matrix and compute distances. This is expensive since we have to transform each
            // point so we instead, 2: do the inverse transform to the light and compute the
            // distance to the untransformed points.
            var boundingPts = this.obj.tObj.getBoundingPts();
            // get the inverse transform of the light position
            var obj = this.obj;
            var mat = obj.model.multM(obj.normalize);
            var inverse = mat.inverse();
            var xLightPos = inverse.multVec3(options.lightPos);
            if (options.lightType === LightType.Point) {
                dist = boundingPts.distToPoint(xLightPos);
            }
            else {
                // figure out the light plane for the inverse light
                var xOrigin = inverse.multVec3(_Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"].origin);
                var xPlane = new _Plane__WEBPACK_IMPORTED_MODULE_15__["Plane"](xLightPos, xOrigin);
                // distance to the raw object points
                dist = boundingPts.distToPlane(xPlane);
            }
            // to get the actual distance, we now need to reapply the scale factor to
            // get the true distance. The scale factor is the same in all directions
            // so just use the x value
            var s = obj.model.multM(obj.normalize).scaleFactors.x;
            dist = {
                min: dist.min * s,
                max: dist.max * s,
            };
            // we need to compute the distance to the light and the light intensity such that
            // the closest point gets lit with value 1 and the furthest point matches the
            // target falloff.
            //
            // - d is the distance the light needs to be from the closest point. Light falls off
            // with the square of distance.
            // - falloffDistance is the size of the object
            var falloffDistance = dist.max - dist.min;
            var d = (falloffDistance * Math.sqrt(1.0 - options.falloff)) / (1.0 - Math.sqrt(1.0 - options.falloff));
            // intensity = d^2 so that intensity at d (1/d^2) = 1.0
            var lightIntensityAtSource = d * d;
            uni.set('uLightIntensityAtSource', lightIntensityAtSource);
            // actual light position is measured from the object, not the origin. Shift 
            // it back
            var objToOrigin = options.lightPos.magnitude() - dist.min;
            options.lightPos = options.lightPos.normalize().mult(d + objToOrigin);
            uni.set('uLightPos', options.lightPos);
        }
        return uni;
    };
    Renderer.prototype.renderToShadowMap = function () {
        var gl = this.gl;
        var maxTextureSize = Math.min(gl.getParameter(gl.MAX_TEXTURE_SIZE));
        var desiredSize = this.options.camera.zoomFactor * Math.min(gl.canvas.width, gl.canvas.height);
        var size = 256;
        while (size < desiredSize && size * 2 <= maxTextureSize) {
            size *= 2;
        }
        if (!this.shadowFrameBuffer || size !== this.shadowFrameBuffer.size) {
            if (this.shadowFrameBuffer) {
                this.shadowFrameBuffer.dispose();
                this.shadowColorTexture.dispose();
                this.shadowDepthTexture.dispose();
            }
            this.shadowFrameBuffer = new _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_10__["glFrameBuffer"](gl, size, size);
            this.shadowColorTexture = this.shadowFrameBuffer.createTexture(_gl_glTexture__WEBPACK_IMPORTED_MODULE_11__["glTextureStyle"].Color);
            this.shadowDepthTexture = this.shadowFrameBuffer.createTexture(_gl_glTexture__WEBPACK_IMPORTED_MODULE_11__["glTextureStyle"].Depth);
            this.shadowFrameBuffer.attachTexture(gl.COLOR_ATTACHMENT0, this.shadowColorTexture);
            this.shadowFrameBuffer.attachTexture(gl.DEPTH_ATTACHMENT, this.shadowDepthTexture);
            this.shadowFrameBuffer.check();
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        gl.viewport(0, 0, this.shadowFrameBuffer.width, this.shadowFrameBuffer.height);
        this.shadowFrameBuffer.bind();
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        var center = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]);
        var up = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 1, 0]);
        var eye = this.options.lightPos;
        var mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeLookAt(eye, center, up);
        mat.set(0, 3, 0);
        mat.set(1, 3, 0);
        mat.set(2, 3, 0);
        if (this.options.lightType === LightType.Directional) {
            // to avoid clipping, expand the z range to allow full rotation of
            // anything in a 3-3-3 cube.
            var maxSize = Math.sqrt(27);
            mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeOrtho(-1, 1, -1, 1, maxSize, -maxSize).multM(mat);
            this.lightView = mat;
        }
        else {
            // TODO make point light sources work for shadow maps
            /*
            let fov = 2 * toDeg(Math.atan2(3 / 2, eye.z));
            console.log('fov=' + fov);
            mat = Mat4.makePerspective(fov, 1, 0.1, 20).multM(mat);
            this.lightView = mat;
            */
            var maxSize = Math.sqrt(27);
            mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeOrtho(-1, 1, -1, 1, maxSize, -maxSize).multM(mat);
            this.lightView = mat;
        }
        var uni = this.setOptions(this.options);
        // change the view matrix so that our view is from the light
        uni.set('view', this.lightView);
        uni.set('projection', _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity);
        // don't try to use the shadow texture while we're creating it
        uni.set('uUseShadows', false);
        uni.seti('uRenderMode', RenderMode.Normal);
        gl.disable(gl.CULL_FACE);
        this.obj.draw();
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    };
    Renderer.prototype.renderToScreen = function () {
        var gl = this.gl;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // display the depth buffer for testing purposes
        if (this.showShadowMap) {
            gl.disable(gl.CULL_FACE);
            var tr = new _TextureRenderer__WEBPACK_IMPORTED_MODULE_16__["TextureRenderer"](gl);
            tr.render(this.shadowDepthTexture, this.shadowFrameBuffer.width, this.shadowFrameBuffer.height);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        else {
            this.shadowDepthTexture.bind();
            var style = getComputedStyle(gl.canvas);
            var color = _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__["htmlColor"].fromCss(style.backgroundColor).toGlColor();
            gl.clearColor(color.r, color.g, color.b, 1);
            gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
            this.drawFloor();
            // draw the main object
            this.setOptions(this.options);
            this.obj.draw();
            gl.clear(gl.DEPTH_BUFFER_BIT);
            this.drawMiniView();
            this.drawBall();
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
    };
    Renderer.prototype.drawFloor = function () {
        if (this.showFloor) {
            var gl = this.gl;
            var uni = this.setOptions(this.options);
            // set the special mode for the floor
            uni.set('uRenderingFloor', true);
            uni.set('uShowGrid', this.showGrid);
            // cull polygons so we don't see the floor from below
            gl.enable(gl.CULL_FACE);
            gl.cullFace(gl.BACK);
            uni.seti('uRenderMode', RenderMode.Normal);
            //this.setValueRangeUniforms(ValueRange.Standard);
            this.floor.draw();
            uni.set('uRenderingFloor', false);
        }
    };
    Renderer.prototype.drawMiniView = function () {
        if (this.showMiniView) {
            var gl = this.gl;
            gl.enable(gl.CULL_FACE);
            var uni = this.setOptions(this.options);
            var clipSpace = this.options.camera.getClipSpace(gl);
            var projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeOrtho(clipSpace.left, clipSpace.right, clipSpace.bottom, clipSpace.top, clipSpace.near, clipSpace.far);
            uni.set('projection', projection);
            uni.set('uOthrographic', true);
            // draw the object in the upper right at a reduced size
            var view = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity;
            view.scale(this.miniSize);
            view.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([clipSpace.max.x - this.miniSize, clipSpace.max.y - this.miniSize, 0]));
            uni.set('view', view);
            uni.seti('uRenderMode', this.miniViewShowContours ? RenderMode.ContourPlanes : RenderMode.Normal);
            this.obj.draw();
        }
    };
    Renderer.prototype.drawBall = function () {
        if (this.showBall === false) {
            return;
        }
        var gl = this.gl;
        // create a view matrix that renders in the upper left
        var clipSpace = this.options.camera.getClipSpace(gl);
        var view = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity;
        view.scale(this.miniSize);
        view.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([clipSpace.min.x + this.miniSize, clipSpace.max.y - this.miniSize, 0]));
        this.ballOptions.view = view.clone();
        this.ballOptions.valueRange = this.options.valueRange.clone();
        this.ballOptions.lightPos = this.options.lightPos.clone();
        this.ballOptions.lightType = this.options.lightType;
        this.ballOptions.falloff = this.options.falloff;
        // TODO compute distance and intensity for light for the ball
        this.ballOptions.lightIntensity = this.options.lightIntensity;
        this.ballOptions.showHighlights = this.options.showHighlights;
        this.ballOptions.shininess = this.options.shininess;
        this.ballOptions.renderMode = this.options.renderMode;
        this.ballOptions.contours = this.options.contours;
        var uni = this.setOptions(this.ballOptions);
        if (this.ballOptions.falloff > 0) {
            // TODO this code is similar to the code in setOptions. Combine it.
            var falloffDistance = 1.0; // ball diameter
            var d = (falloffDistance * Math.sqrt(1.0 - this.ballOptions.falloff)) / (1.0 - Math.sqrt(1.0 - this.ballOptions.falloff));
            // intensity = d^2 so that intensity at d (1/d^2) = 1.0
            var lightIntensityAtSource = d * d;
            uni.set('uLightIntensityAtSource', lightIntensityAtSource);
            // actual light position is measured from the object, not the origin. Shift 
            // it back
            var objToOrigin = 0.5;
            this.ballOptions.lightPos = this.ballOptions.lightPos.normalize().mult(d + objToOrigin);
            uni.set('uLightPos', this.ballOptions.lightPos);
        }
        this.ball.draw();
        // back out angles as if looking down the z-axis
        var x = -this.options.lightPos.x;
        var y = -this.options.lightPos.y;
        var z = -this.options.lightPos.z;
        // start by looking down from the Z direction
        var radius = Math.sqrt(x * x + y * y + z * z);
        var elevationAngle = Math.acos(z / radius);
        var rotationAngle = Math.atan2(y, x);
        // first reset things so that we're looking down the z-axis
        this.arrow.clearTransforms();
        this.arrow.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0.0, 0.55, 0.0]));
        this.arrow.rotX(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_17__["toRad"])(90));
        // rotate to match the light source
        this.arrow.rotY(-elevationAngle);
        this.arrow.rotZ(-rotationAngle);
        this.arrowOptions.view = view.clone();
        this.setOptions(this.arrowOptions);
        this.arrow.draw();
    };
    return Renderer;
}());



/***/ }),

/***/ "./src/Apps/Viewer/TextureRenderer.ts":
/*!********************************************!*\
  !*** ./src/Apps/Viewer/TextureRenderer.ts ***!
  \********************************************/
/*! exports provided: TextureRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureRenderer", function() { return TextureRenderer; });
/* harmony import */ var _shaders_TextureRendererVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/TextureRendererVertex.glsl */ "./src/shaders/TextureRendererVertex.glsl");
/* harmony import */ var _shaders_TextureRendererFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/TextureRendererFragment.glsl */ "./src/shaders/TextureRendererFragment.glsl");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _gl_glBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../gl/glBuffer */ "./src/gl/glBuffer.ts");




/**
 * Class that does the work of building the Path Traced texture
 */
var TextureRenderer = /** @class */ (function () {
    function TextureRenderer(glCtx) {
        this.vertices = [
            -1, -1,
            -1, +1,
            +1, -1,
            +1, +1
        ];
        this.gl = glCtx;
        var gl = this.gl;
        // create shader
        this.program = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_2__["glProgram"](gl, _shaders_TextureRendererVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_TextureRendererFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        // create vertex buffer - the block we'll draw our rendered texture on
        this.vertexBuffer = new _gl_glBuffer__WEBPACK_IMPORTED_MODULE_3__["glBuffer"](gl, this.program, 'vertex');
        this.vertexBuffer.upload(this.vertices);
    }
    TextureRenderer.prototype.render = function (texture, width, height) {
        var gl = this.gl;
        gl.viewport((gl.canvas.width - width) / 2, (gl.canvas.height - height) / 2, width, height);
        this.program.use();
        texture.bind();
        this.vertexBuffer.bind(2);
        // display the main screen
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };
    return TextureRenderer;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ValuePlanes.ts":
/*!****************************************!*\
  !*** ./src/Apps/Viewer/ValuePlanes.ts ***!
  \****************************************/
/*! exports provided: DEFAULT_THRESHOLD1, DEFAULT_THRESHOLD2, ValuePlanes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_THRESHOLD1", function() { return DEFAULT_THRESHOLD1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_THRESHOLD2", function() { return DEFAULT_THRESHOLD2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanes", function() { return ValuePlanes; });
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");

var DEFAULT_THRESHOLD1 = 40;
var DEFAULT_THRESHOLD2 = 70;
/**
 * Keeps track of 3 values in the light based on threshold angles
 * for the planes (stored in degrees) and the light range (highlight
 * to shadow colors).
 */
var ValuePlanes = /** @class */ (function () {
    function ValuePlanes(valueRange) {
        this._threshold1 = DEFAULT_THRESHOLD1;
        this._threshold2 = DEFAULT_THRESHOLD2;
        this.valueRange = valueRange;
        this.computeColors();
    }
    Object.defineProperty(ValuePlanes.prototype, "threshold1", {
        get: function () {
            return this._threshold1;
        },
        set: function (angleInDeg) {
            this._threshold1 = angleInDeg;
            this._threshold2 = Math.max(this._threshold2, angleInDeg);
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "threshold2", {
        get: function () {
            return this._threshold2;
        },
        set: function (angleInDeg) {
            this._threshold2 = angleInDeg;
            this._threshold1 = Math.min(this._threshold1, angleInDeg);
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "highlight", {
        get: function () {
            return this.valueRange.maxIntensity;
        },
        set: function (val) {
            this.valueRange.maxIntensity = val;
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "shadow", {
        get: function () {
            return this.valueRange.ambientIntensity;
        },
        set: function (val) {
            this.valueRange.ambientIntensity = val;
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "lightLight", {
        get: function () {
            return this._lightLight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "midLight", {
        get: function () {
            return this._midLight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "darkLight", {
        get: function () {
            return this._darkLight;
        },
        enumerable: false,
        configurable: true
    });
    ValuePlanes.prototype.colorAt = function (deg) {
        deg = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["clamp"])(deg, 0, 90);
        return Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["mix"])(this.shadow, this.highlight - this.valueRange.specularIntensity, Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(deg)));
    };
    ValuePlanes.prototype.computeColors = function () {
        this._lightLight = this.colorAt(0.5 * this.threshold1);
        this._midLight = this.colorAt(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["mix"])(this.threshold1, this.threshold2, 0.5));
        this._darkLight = this.colorAt((this.threshold2 + 90) / 2);
    };
    return ValuePlanes;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ValuePlanesCtrl.ts":
/*!********************************************!*\
  !*** ./src/Apps/Viewer/ValuePlanesCtrl.ts ***!
  \********************************************/
/*! exports provided: ValuePlanesCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanesCtrl", function() { return ValuePlanesCtrl; });
/* harmony import */ var _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/ViewerVertex.glsl */ "./src/shaders/ViewerVertex.glsl");
/* harmony import */ var _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/ViewerFragment.glsl */ "./src/shaders/ViewerFragment.glsl");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _glObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glObject */ "./src/Apps/Viewer/glObject.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");















var BALL_RADIUS = 0.875;
var BALL_CENTER = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-0.6, -0.6, 0]);
var CTRL_SIZE = 150;
var NOMINAL_DISPLAY_SIZE = 150;
var NOMINAL_KNOB_LENGTH = 25;
var NOMINAL_KNOB_RADIUS = 10;
var ValuePlanesCtrl = /** @class */ (function () {
    function ValuePlanesCtrl(parent, provider, onThreshold1Change, onThreshold2Change) {
        var _this = this;
        this.mouseOffset = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]();
        this.hit = 0;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["isMobile"]) {
            CTRL_SIZE = 300;
        }
        this.provider = provider;
        this.onThreshold1Change = onThreshold1Change;
        this.onThreshold2Change = onThreshold2Change;
        var canvas = document.createElement('canvas');
        canvas.id = 'ValuePlanesCanvas';
        canvas.width = CTRL_SIZE;
        canvas.height = CTRL_SIZE;
        parent.appendChild(canvas);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl');
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.overlay = document.createElement('canvas');
        this.overlay.id = 'ValuePlanesOverlayCanvas';
        this.overlay.width = CTRL_SIZE;
        this.overlay.height = CTRL_SIZE;
        parent.appendChild(this.overlay);
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_4__["PointerEventHandler"](this.overlay);
        this.handler.onDown = function (pos) { return _this.onDown(pos); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        var gl = this.gl;
        gl.enable(gl.DEPTH_TEST);
        this.program = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_3__["glProgram"](gl, _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        var tBall = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_7__["TriangleObjBuilder"]('Ball');
        tBall.addSphere(50, BALL_RADIUS, BALL_CENTER);
        tBall.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_8__["NormalType"].Smooth);
        this.ball = new _glObject__WEBPACK_IMPORTED_MODULE_5__["glObject"](gl, tBall, this.program);
        var tArrow = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_7__["TriangleObjBuilder"]('Light Arrow');
        tArrow.addArrow();
        this.arrow = new _glObject__WEBPACK_IMPORTED_MODULE_5__["glObject"](gl, tArrow, this.program);
        this.draw();
    }
    ValuePlanesCtrl.prototype.onDown = function (pos) {
        this.hitTest(pos);
    };
    ValuePlanesCtrl.prototype.hitTest = function (pos) {
        var d1 = this.p1.distance(pos);
        var d2 = this.p2.distance(pos);
        var HIT_RADIUS = NOMINAL_KNOB_RADIUS * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        if (d1 < HIT_RADIUS && d1 <= d2) {
            this.hit = 1;
            this.mouseOffset = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([this.p1.x - pos.x, this.p1.y - pos.y]);
        }
        else if (d2 < HIT_RADIUS && d2 <= d1) {
            this.hit = 2;
            this.mouseOffset = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([this.p2.x - pos.x, this.p2.y - pos.y]);
        }
        else {
            this.hit = 0;
        }
    };
    ValuePlanesCtrl.prototype.onDrag = function (pos, delta) {
        if (this.hit > 0) {
            var hitPt = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([pos.x + this.mouseOffset.x, pos.y + this.mouseOffset.y]);
            hitPt.x = Math.max(hitPt.x, this.ballCenter.x);
            hitPt.y = Math.min(hitPt.y, this.ballCenter.y);
            var radius = this.ballCenter.distance(hitPt);
            var angle = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["clamp"])(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toDeg"])(Math.asin((hitPt.x - this.ballCenter.x) / radius)), 0, 90);
            if (this.hit == 1) {
                this.provider.threshold1 = angle;
                this.onThreshold1Change(angle);
            }
            else {
                this.provider.threshold2 = angle;
                this.onThreshold2Change(angle);
            }
            this.draw();
        }
    };
    ValuePlanesCtrl.prototype.toGLColor = function (val) {
        return new _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"]([val, val, val]);
    };
    ValuePlanesCtrl.prototype.setStdUniforms = function () {
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_10__["glUniform"](this.gl, this.program);
        uni.set('view', _Util3D_Mat__WEBPACK_IMPORTED_MODULE_11__["Mat4"].identity);
        uni.set('projection', _Util3D_Mat__WEBPACK_IMPORTED_MODULE_11__["Mat4"].ortho);
        uni.set('uEye', new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 1]));
        uni.set('uOrthographic', true);
        uni.set('uDiffuseIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard.diffuseIntensity);
        uni.set('uAmbientIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard.shadow);
        uni.set('uSpecularIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard.specularIntensity);
        uni.set('uLightIntensity', 1.0);
        uni.set('uFalloff', 0);
        uni.set('uWhiteColor', _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"].modelWhite);
        uni.set('uBlackColor', _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"].modelBlack);
        var contourColors = [
            this.toGLColor(this.provider.lightLight),
            this.toGLColor(this.provider.midLight),
            this.toGLColor(this.provider.darkLight),
        ];
        uni.seti('uNumContours', contourColors.length);
        for (var i = 0; i < contourColors.length; i++) {
            uni.set('uContourColors[' + i + ']', contourColors[i]);
        }
        uni.set('uContourAngles[0]', this.provider.threshold1);
        uni.set('uContourAngles[1]', this.provider.threshold2);
        uni.set('uContourAngles[2]', 90);
        return uni;
    };
    ValuePlanesCtrl.prototype.draw = function () {
        this.drawBall();
        this.drawOverlay();
    };
    ValuePlanesCtrl.prototype.drawBall = function () {
        var gl = this.gl;
        gl.clear(gl.COLOR_BUFFER_BIT);
        var uni = this.setStdUniforms();
        // always render with bands
        uni.seti('uRenderMode', _Renderer__WEBPACK_IMPORTED_MODULE_13__["RenderMode"].ContourPlanes);
        // shoot the light straight down
        uni.set('uLightPos', new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 1, 0]));
        // don't cast shadows
        uni.set('uUseShadows', false);
        // render the ball
        this.ball.draw();
        // draw the arrow
        uni.set('uLightPos', new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1, -0.5, 0.5]));
        uni.seti('uRenderMode', _Renderer__WEBPACK_IMPORTED_MODULE_13__["RenderMode"].Normal);
        // first reset things so that we're looking down the z-axis
        this.arrow.clearTransforms();
        this.arrow.scale(1.25);
        this.arrow.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([BALL_CENTER.x, BALL_CENTER.y + BALL_RADIUS + 0.1, 0.0]));
        uni.set('uWhiteColor', new _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"]([1.0, 1.0, 0.5]));
        uni.set('uBlackColor', _Util_htmlColor__WEBPACK_IMPORTED_MODULE_14__["htmlColor"].black.toGlColor());
        uni.set('uAmbientIntensity', 0.4);
        uni.set('uDiffuseIntensity', 0.6);
        this.arrow.draw();
    };
    ValuePlanesCtrl.prototype.drawOverlay = function () {
        var ctx = this.overlay.getContext('2d');
        this.ballCenter = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([
            CTRL_SIZE * (1 + BALL_CENTER.x) / 2,
            CTRL_SIZE * (1 - BALL_CENTER.y) / 2
        ]);
        ctx.clearRect(0, 0, CTRL_SIZE, CTRL_SIZE);
        ctx.fillStyle = 'limegreen';
        ctx.strokeStyle = 'black';
        var KNOB_LENGTH = NOMINAL_KNOB_LENGTH * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        var KNOB_RADIUS = NOMINAL_KNOB_RADIUS * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        var r = CTRL_SIZE * BALL_RADIUS / 2;
        var s1 = this.getPt(this.ballCenter, this.provider.threshold1, r);
        this.p1 = this.getPt(this.ballCenter, this.provider.threshold1, r + KNOB_LENGTH);
        var s2 = this.getPt(this.ballCenter, this.provider.threshold2, r);
        this.p2 = this.getPt(this.ballCenter, this.provider.threshold2, r + KNOB_LENGTH);
        ctx.lineWidth = (1 / 150) * CTRL_SIZE;
        ctx.beginPath();
        ctx.moveTo(s1.x, s1.y);
        ctx.lineTo(this.p1.x, this.p1.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.p1.x, this.p1.y, KNOB_RADIUS, 0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(360));
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(s2.x, s2.y);
        ctx.lineTo(this.p2.x, this.p2.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.p2.x, this.p2.y, KNOB_RADIUS, 0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(360));
        ctx.fill();
        ctx.stroke();
    };
    ValuePlanesCtrl.prototype.getPt = function (center, threshold, radius) {
        var oy = radius * Math.sin(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(90 - threshold));
        var ox = radius * Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(90 - threshold));
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([center.x + ox, center.y - oy]);
    };
    return ValuePlanesCtrl;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ValuePlanesPanel.ts":
/*!*********************************************!*\
  !*** ./src/Apps/Viewer/ValuePlanesPanel.ts ***!
  \*********************************************/
/*! exports provided: ValuePlanesPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanesPanel", function() { return ValuePlanesPanel; });
/* harmony import */ var _GUI_Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/Panel */ "./src/GUI/Panel.ts");
/* harmony import */ var _ValuePlanes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ValuePlanes */ "./src/Apps/Viewer/ValuePlanes.ts");
/* harmony import */ var _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../GUI/Slider */ "./src/GUI/Slider.ts");
/* harmony import */ var _ValuePlanesCtrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ValuePlanesCtrl */ "./src/Apps/Viewer/ValuePlanesCtrl.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ValuePlanesPanel = /** @class */ (function (_super) {
    __extends(ValuePlanesPanel, _super);
    function ValuePlanesPanel(parent, id, valueRange) {
        var _this = _super.call(this, parent, id) || this;
        _this.valuePlanes = new _ValuePlanes__WEBPACK_IMPORTED_MODULE_1__["ValuePlanes"](valueRange);
        var div = document.createElement('div');
        div.className = 'SlidersDiv';
        _this.div.appendChild(div);
        _this.createCtrlsElements(div);
        _this.valuePlanesCtrl = new _ValuePlanesCtrl__WEBPACK_IMPORTED_MODULE_3__["ValuePlanesCtrl"](_this.div, _this.valuePlanes, function (value) {
            _this.updateSliders();
            if (_this.onChange) {
                _this.onChange(_this);
            }
        }, function (value) {
            _this.updateSliders();
            if (_this.onChange) {
                _this.onChange(_this);
            }
        });
        return _this;
    }
    ValuePlanesPanel.prototype.createCtrlsElements = function (parent) {
        var _this = this;
        this.highlightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'Highlight',
            label: 'Highlight',
            min: 0,
            max: 1,
            value: this.valuePlanes.highlight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            oninput: function () {
                _this.valuePlanes.highlight = _this.highlightSlider.value;
                _this.updateSliders();
                _this.valuePlanesCtrl.draw();
                if (_this.onChange) {
                    _this.onChange(_this);
                }
            },
            onGetText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; }
        });
        this.lightLightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'LightLight',
            label: 'Light Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.lightLight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            onGetText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; }
        });
        this.lightLightSlider.range.disabled = true;
        this.midLightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'MidLight',
            label: 'Mid Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.midLight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            onGetText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; }
        });
        this.midLightSlider.range.disabled = true;
        this.darkLightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'DarkLight',
            label: 'Dark Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.darkLight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            onGetText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; }
        });
        this.darkLightSlider.range.disabled = true;
        this.shadowSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'Shadow',
            label: 'Shadow',
            min: 0,
            max: 1,
            value: this.valuePlanes.shadow,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            oninput: function () {
                _this.valuePlanes.shadow = _this.shadowSlider.value;
                _this.updateSliders();
                _this.valuePlanesCtrl.draw();
                if (_this.onChange) {
                    _this.onChange(_this);
                }
            },
            onGetText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; }
        });
    };
    ValuePlanesPanel.prototype.updateSliders = function () {
        this.highlightSlider.value = this.valuePlanes.highlight;
        this.lightLightSlider.value = this.valuePlanes.lightLight;
        this.midLightSlider.value = this.valuePlanes.midLight;
        this.darkLightSlider.value = this.valuePlanes.darkLight;
        this.shadowSlider.value = this.valuePlanes.shadow;
    };
    ValuePlanesPanel.prototype.toRenderer = function (renderer) {
        renderer.options.contours = [
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.lightLight, this.valuePlanes.threshold1),
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.midLight, this.valuePlanes.threshold2),
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.darkLight, 90)
        ];
        renderer.options.valueRange = new _ValueRange__WEBPACK_IMPORTED_MODULE_4__["ValueRange"](this.valuePlanes.highlight, this.valuePlanes.shadow, this.valuePlanes.highlight - this.valuePlanes.lightLight);
    };
    return ValuePlanesPanel;
}(_GUI_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/Apps/Viewer/ValueRange.ts":
/*!***************************************!*\
  !*** ./src/Apps/Viewer/ValueRange.ts ***!
  \***************************************/
/*! exports provided: ValueRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueRange", function() { return ValueRange; });
/**
 * Keeps track of a value range - highlight to shadow color. A minimum
 * differential is kept between the two when one is changed
 */
var ValueRange = /** @class */ (function () {
    function ValueRange(maxIntensity, ambientIntensity, specularIntensity) {
        this._maxIntensity = maxIntensity;
        this._ambientIntensity = ambientIntensity;
        this._specularIntensity = specularIntensity;
    }
    Object.defineProperty(ValueRange, "Standard", {
        get: function () {
            return new ValueRange(1.0, 0.2, 0.1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange, "EmphasizeHighlights", {
        get: function () {
            return new ValueRange(1.0, 0.2, 0.75);
        },
        enumerable: false,
        configurable: true
    });
    ValueRange.prototype.clone = function () {
        return new ValueRange(this.maxIntensity, this.ambientIntensity, this.specularIntensity);
    };
    Object.defineProperty(ValueRange.prototype, "specularIntensity", {
        get: function () {
            return this._specularIntensity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "maxIntensity", {
        get: function () {
            return this._maxIntensity;
        },
        set: function (val) {
            this._maxIntensity = Math.min(Math.max(val, this._specularIntensity), 1.0);
            this._ambientIntensity = Math.min(this._ambientIntensity, this._maxIntensity - this._specularIntensity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "ambientIntensity", {
        get: function () {
            return this._ambientIntensity;
        },
        set: function (val) {
            this.shadow = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "shadow", {
        get: function () {
            return this._ambientIntensity;
        },
        set: function (val) {
            this._ambientIntensity = Math.max(Math.min(val, 1 - this._specularIntensity), 0);
            this._maxIntensity = Math.max(this._maxIntensity, this._ambientIntensity + this._specularIntensity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "diffuseIntensity", {
        get: function () {
            return this.maxIntensity - this._ambientIntensity - this._specularIntensity;
        },
        enumerable: false,
        configurable: true
    });
    return ValueRange;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ViewerApp.ts":
/*!**************************************!*\
  !*** ./src/Apps/Viewer/ViewerApp.ts ***!
  \**************************************/
/*! exports provided: ViewerApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewerApp", function() { return ViewerApp; });
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../GUI/OverlayCanvas */ "./src/GUI/OverlayCanvas.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _PerspectivePanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PerspectivePanel */ "./src/Apps/Viewer/PerspectivePanel.ts");
/* harmony import */ var _ValuePlanesPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ValuePlanesPanel */ "./src/Apps/Viewer/ValuePlanesPanel.ts");
/* harmony import */ var _Util_hsvColor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util/hsvColor */ "./src/Util/hsvColor.ts");
/* harmony import */ var _Util_FPS__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util/FPS */ "./src/Util/FPS.ts");
/* harmony import */ var _ModelLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ModelLoader */ "./src/Apps/Viewer/ModelLoader.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _ModelsMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ModelsMenu */ "./src/Apps/Viewer/ModelsMenu.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
















var PointerMode;
(function (PointerMode) {
    PointerMode[PointerMode["View"] = 0] = "View";
    PointerMode[PointerMode["Light"] = 1] = "Light";
})(PointerMode || (PointerMode = {}));
var COLOR_CONTOURS = [
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 0.20, 0.20]), 10),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 0.55, 0.25]), 20),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 0.81, 0.25]), 30),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 1.00, 0.00]), 40),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.30, 1.00, 0.10]), 50),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.25, 0.90, 0.90]), 60),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.50, 0.50, 1.00]), 70),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.20, 0.20, 1.00]), 80),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.30, 0.11, 0.40]), 90),
];
var ViewerApp = /** @class */ (function () {
    function ViewerApp(file) {
        this.gl = null;
        this.pointerMode = PointerMode.View;
        this.rotateLightWithObject = false;
        this.dirty = true;
        this.animate = false;
        this.fps = new _Util_FPS__WEBPACK_IMPORTED_MODULE_7__["FPS"]();
        this.loader = new _ModelLoader__WEBPACK_IMPORTED_MODULE_8__["ModelLoader"]();
        if (!file) {
            var num = Math.round(0.5 + 16 * Math.random());
            file = 'Pose_0' + num + '.blob';
        }
        this.initialFile = file;
    }
    ViewerApp.prototype.create = function (div) {
        div.id = 'ViewerApp';
        var viewContainer = document.createElement('div');
        viewContainer.id = 'ViewContainer';
        viewContainer.className = 'Container';
        div.appendChild(viewContainer);
        this.createViewElements(viewContainer);
        this.createPerspectivePanel(div);
        this.createValuePlanesPanel(div);
        this.updateSize();
        this.loadModel(this.initialFile);
    };
    ViewerApp.prototype.createViewElements = function (parent) {
        var _this = this;
        var canvas = document.createElement('canvas');
        canvas.id = 'MainCanvas';
        parent.appendChild(canvas);
        var style = getComputedStyle(canvas);
        this.baseBackgroundColor = _Util_hsvColor__WEBPACK_IMPORTED_MODULE_6__["hsvColor"].fromHtmlColor(_Util_htmlColor__WEBPACK_IMPORTED_MODULE_9__["htmlColor"].fromCss(style.backgroundColor));
        this.overlay = new _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_2__["OverlayCanvas"](parent);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl', { alpha: false });
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log('Unable to get WebGL context');
        }
        this.gl = context;
        this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Renderer"](this.gl);
        this.renderer.showMiniView = false;
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_3__["PointerEventHandler"](canvas);
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        this.handler.onDown = function () {
            _this.animate = false;
            _this.overlay.clear();
        };
        this.handler.onClick = function (pos) { return _this.onClick(pos); };
        this.handler.onDblClick = function () {
            _this.animate = true;
            _this.fps = new _Util_FPS__WEBPACK_IMPORTED_MODULE_7__["FPS"]();
            return false;
        };
        this.handler.onScale = function (scale, change) { return _this.onScale(scale, change); };
        this.handler.onRotate = function (angle, delta) { return _this.onRotate(angle, delta); };
        this.handler.onTranslate = function (delta) { return _this.onTranslate(delta); };
        document.onkeydown = function (event) {
            var angle = 90;
            if (event.ctrlKey) {
                angle = 1;
            }
            switch (event.keyCode) {
                case 37: // left
                    _this.rotateObjects(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(angle), 0);
                    _this.dirty = true;
                    break;
                case 38: // up
                    _this.rotateObjects(0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(angle));
                    _this.dirty = true;
                    break;
                case 39: // right
                    _this.rotateObjects(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(-angle), 0);
                    _this.dirty = true;
                    break;
                case 40: // down
                    _this.rotateObjects(0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(-angle));
                    _this.dirty = true;
                    break;
            }
        };
        document.onkeypress = function (event) {
            switch (event.key) {
                case 'a':
                    _this.renderer.obj.applyXForm();
                    _this.dirty = true;
                    break;
                case 'd':
                    _this.renderer.showShadowMap = !_this.renderer.showShadowMap;
                    _this.dirty = true;
                    break;
                case 'g':
                    _this.renderer.showGrid = !_this.renderer.showGrid;
                    _this.dirty = true;
                    break;
                case 'h':
                    _this.renderer.options.showHighlights = !_this.renderer.options.showHighlights;
                    _this.dirty = true;
                    break;
                case 'i':
                    alert(_this.renderer.tObj.name + '\n' +
                        'Num Triangles: ' + _this.renderer.tObj.numTriangles.toLocaleString() + '\n' +
                        'Num Vertices: ' + _this.renderer.tObj.numVertices.toLocaleString() + '\n');
                    break;
                case 'l':
                    if (_this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point) {
                        _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Directional;
                    }
                    else {
                        _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point;
                    }
                    _this.dirty = true;
                    break;
                case 'o':
                    _this.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__["NormalType"].Smooth);
                    break;
                case 'p':
                    _this.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__["NormalType"].Flat);
                    break;
                case 'r':
                    _this.renderer.tObj.reverse();
                    _this.renderer.obj.uploadTriangles();
                    _this.dirty = true;
                    break;
                case 's':
                    _this.save();
                    break;
                case 't':
                    _this.dirty = true;
                    break;
                case 'v':
                    _this.renderer.options.camera.useOrthographic = !_this.renderer.options.camera.useOrthographic;
                    _this.dirty = true;
                    break;
            }
        };
        window.addEventListener('resize', function () {
            _this.updateSize();
            _this.dirty = true;
        });
    };
    ViewerApp.prototype.createPerspectivePanel = function (div) {
        var _this = this;
        this.perspectivePanel = new _PerspectivePanel__WEBPACK_IMPORTED_MODULE_4__["PerspectivePanel"](div, 'PerspectivePanel', this.renderer.options.camera);
        this.perspectivePanel.onShow = function (panel) {
            _this.valuePlanesPanel.visible = false;
            _this.updateSize();
            _this.dirty = true;
        };
        this.perspectivePanel.onHide = function () {
            _this.updateSize();
            _this.pointerMode = PointerMode.View;
            _this.dirty = true;
        };
        this.perspectivePanel.onChange = function () {
            _this.dirty = true;
        };
    };
    ViewerApp.prototype.createValuePlanesPanel = function (div) {
        var _this = this;
        this.valuePlanesPanel = new _ValuePlanesPanel__WEBPACK_IMPORTED_MODULE_5__["ValuePlanesPanel"](div, 'ValuePlanesPanel', this.renderer.options.valueRange);
        this.valuePlanesPanel.onShow = function (panel) {
            _this.perspectivePanel.visible = false;
            _this.updateSize();
            _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes;
            _this.valuePlanesPanel.toRenderer(_this.renderer);
            _this.dirty = true;
        };
        this.valuePlanesPanel.onHide = function () {
            _this.updateSize();
            _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
            _this.renderer.options.valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_13__["ValueRange"].Standard;
            _this.dirty = true;
        };
        this.valuePlanesPanel.onChange = function () {
            _this.valuePlanesPanel.toRenderer(_this.renderer);
            _this.dirty = true;
        };
    };
    ViewerApp.prototype.buildMenu = function (menubar) {
        var _this = this;
        Object(_ModelsMenu__WEBPACK_IMPORTED_MODULE_14__["createModelsMenu"])(menubar, function (file) { return _this.loadModel(file); });
        var subMenu;
        subMenu = menubar.addSubMenu('Tools', 'Tools');
        var contoursSubMenu = subMenu.addSubMenu('Color Contours');
        contoursSubMenu.addRadiobutton({
            label: 'None',
            group: 'ContourGroup',
            checked: function () {
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes ||
                    _this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourValues) {
                    return false;
                }
                else {
                    return true;
                }
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        contoursSubMenu.addRadiobutton({
            label: 'Planes',
            group: 'ContourGroup',
            checked: function () {
                return (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes && _this.valuePlanesPanel.visible === false);
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.contours = COLOR_CONTOURS;
                _this.renderer.options.renderMode = button.checked ? _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes : _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        contoursSubMenu.addRadiobutton({
            label: 'Values',
            group: 'ContourGroup',
            checked: function () {
                return (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourValues && _this.valuePlanesPanel.visible === false);
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.contours = COLOR_CONTOURS;
                _this.renderer.options.renderMode = button.checked ? _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourValues : _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        var highlightSubMenu = subMenu.addSubMenu('Highlights');
        highlightSubMenu.addRadiobutton({
            label: 'Show',
            group: 'HighlightsGroup',
            checked: function () { return _this.renderer.options.showHighlights && _this.renderer.renderModeCanToggleHighlights(); },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = true;
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights) {
                    _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                }
                _this.dirty = true;
            }
        });
        highlightSubMenu.addRadiobutton({
            label: 'Hide',
            group: 'HighlightsGroup',
            checked: function () { return !_this.renderer.options.showHighlights && _this.renderer.renderModeCanToggleHighlights(); },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = false;
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights) {
                    _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                }
                _this.dirty = true;
            }
        });
        highlightSubMenu.addRadiobutton({
            label: 'Emphasize',
            group: 'HighlightsGroup',
            checked: function () { return _this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights; },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = true;
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights;
                _this.dirty = true;
            }
        });
        highlightSubMenu.addSlider({
            label: 'Shininess',
            min: 1,
            max: 50,
            value: this.renderer.options.shininess,
            oninput: function (slider) {
                _this.renderer.options.shininess = slider.value;
                _this.dirty = true;
            },
        });
        var shadowsSubMenu = subMenu.addSubMenu('Shadows');
        shadowsSubMenu.addRadiobutton({
            label: 'Normal',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Highlight Terminator',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightTerminator; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightTerminator;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Highlight Shadow',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightShadow; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightShadow;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Light and Shadow Only',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].LightAndShadow; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].LightAndShadow;
                _this.dirty = true;
            }
        });
        subMenu.addItem('Perspective...', function () {
            _this.perspectivePanel.visible = true;
        });
        subMenu.addItem('Value Planes...', function () {
            _this.valuePlanesPanel.visible = true;
        });
        var lightSubMenu = subMenu.addSubMenu('Light');
        lightSubMenu.addRadiobutton({
            label: 'Directional Light',
            group: 'LightTypeGroup',
            checked: function () { return _this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Directional; },
            oncheck: function (button) {
                _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Directional;
                _this.dirty = true;
            }
        });
        lightSubMenu.addRadiobutton({
            label: 'Point Light',
            group: 'LightTypeGroup',
            checked: function () { return _this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point; },
            oncheck: function (button) {
                _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point;
                _this.dirty = true;
            }
        });
        lightSubMenu.addSlider({
            label: 'Falloff',
            min: 0,
            max: 0.9,
            value: this.renderer.options.falloff,
            oninput: function (slider) {
                _this.renderer.options.falloff = slider.value;
                _this.dirty = true;
            },
        });
        lightSubMenu.addSlider({
            label: 'Intensity',
            min: 0.5,
            max: 1.5,
            value: this.renderer.options.lightIntensity,
            oninput: function (slider) {
                _this.renderer.options.lightIntensity = slider.value;
                _this.dirty = true;
            },
        });
        lightSubMenu.addSlider({
            label: 'Ambient Intensity',
            min: 0.0,
            max: 0.4,
            value: this.renderer.options.valueRange.ambientIntensity,
            oninput: function (slider) {
                _this.renderer.options.valueRange.ambientIntensity = slider.value;
                var range = 0.6;
                var baseVal = _this.baseBackgroundColor.v;
                var newVal = (baseVal - range / 2) + range * slider.valueAsPercent;
                var newColor = new _Util_hsvColor__WEBPACK_IMPORTED_MODULE_6__["hsvColor"]([_this.baseBackgroundColor.h, _this.baseBackgroundColor.s, newVal]);
                _this.gl.canvas.style.backgroundColor = newColor.toHtmlColor().toCss();
                _this.dirty = true;
            },
        });
        subMenu = menubar.addSubMenu('Options', 'Options');
        var resetSubMenu = subMenu.addSubMenu('Reset');
        resetSubMenu.addItem('All', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].All);
            _this.dirty = true;
        });
        resetSubMenu.addItem('Lights', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].Lights);
            _this.dirty = true;
        });
        resetSubMenu.addItem('View', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].View);
            _this.dirty = true;
        });
        resetSubMenu.addItem('Rendering', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].Rendering);
            _this.dirty = true;
        });
        var floorSubMenu = subMenu.addSubMenu('Floor');
        floorSubMenu.addCheckbox({
            label: 'Show Floor',
            checked: function () { return _this.renderer.showFloor; },
            oncheck: function (checkbox) {
                _this.renderer.showFloor = checkbox.checked;
                _this.dirty = true;
            }
        });
        floorSubMenu.addCheckbox({
            label: 'Show Grid',
            checked: function () { return _this.renderer.showGrid; },
            oncheck: function (checkbox) {
                _this.renderer.showGrid = checkbox.checked;
                _this.dirty = true;
            }
        });
        subMenu.addItem('Reverse Object', function () {
            _this.renderer.tObj.reverse();
            _this.renderer.obj.uploadTriangles();
            _this.dirty = true;
        });
        var rotateSubMenu = subMenu.addSubMenu('Rotation');
        rotateSubMenu.addCheckbox({
            label: 'Keep the light pointing at the same spot on the model',
            checked: function () { return _this.rotateLightWithObject; },
            oncheck: function (checkbox) {
                _this.rotateLightWithObject = checkbox.checked;
            }
        });
        rotateSubMenu.addCheckbox({
            label: 'Rotate model independent of the floor',
            checked: function () { return _this.renderer.lockFloor; },
            oncheck: function (checkbox) {
                _this.renderer.lockFloor = checkbox.checked;
            }
        });
    };
    ViewerApp.prototype.optimize = function (normalType) {
        var obj = this.renderer.obj;
        var oldNumVertices = obj.tObj.numVertices;
        obj.optimize(normalType);
        var newNumVertices = obj.tObj.numVertices;
        //let msg = 'Optimized .OBJ content copied to clipboard\n\n';
        var msg = 'Optimized .OBJ content\n\n';
        msg += 'Num Triangles: ' + obj.tObj.numTriangles + '\n';
        msg += 'Num Vertices: ' + oldNumVertices + ' to ' + newNumVertices + ', ' + (100 * newNumVertices / oldNumVertices).toFixed() + ' %\n';
        alert(msg);
        //let str = obj.tObj.toObjString(6);
        //navigator.clipboard.writeText(str).then(() => { alert(msg) });
        this.dirty = true;
    };
    ViewerApp.prototype.updateSize = function () {
        var gl = this.gl;
        var width = window.innerWidth;
        var height = window.innerHeight;
        var menubarHeight = document.getElementById('Menubar').clientHeight;
        var panelHeight = 0;
        if (this.perspectivePanel.visible) {
            panelHeight = this.perspectivePanel.div.clientHeight;
        }
        else if (this.valuePlanesPanel.visible) {
            panelHeight = this.valuePlanesPanel.div.clientHeight;
        }
        gl.canvas.width = width;
        gl.canvas.height = height - menubarHeight - panelHeight;
        this.overlay.width = gl.canvas.width;
        this.overlay.height = gl.canvas.height;
    };
    ViewerApp.prototype.loadModel = function (file) {
        var _this = this;
        var lc = file.toLowerCase();
        if (lc.endsWith('.obj') || lc.endsWith('.blob')) {
            var statusFunc = function (status) {
                _this.overlay.clear();
                _this.overlay.fillText(status);
            };
            this.loader.loadModelFile(file, statusFunc)
                .then(function (tObj) {
                _this.perspectivePanel.visible = false;
                _this.valuePlanesPanel.visible = false;
                _this.renderer.setModel(tObj);
                _this.perspectivePanel.setModel(tObj);
                _this.loader.orient(_this.renderer.obj);
                if (file.startsWith('Head') || file.startsWith('Teapot') || file.startsWith('Male_02')) {
                    _this.renderer.options.useCulling = false;
                }
                _this.animate = false;
                _this.dirty = true;
                _this.pointerMode = PointerMode.View;
                if (!_this.animationFrame) {
                    _this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
                }
                /*
                let box = BoundingBox.infinite;
                box.max.x = 62.1;
                this.trim(tObj, box);
 
                this.loader.loadModelFile('SubTool3.blob', statusFunc).then((tObj2) => {
                   tObj.combine(tObj2);
                   return tObj;
                }).then(() => {
                   this.renderer.setModel(tObj);
 
                   this.dirty = true;
                   requestAnimationFrame(() => this.tick());
                });
                */
            });
        }
        else if (lc === 'sphere') {
            var tObj = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_15__["TriangleObjBuilder"]();
            tObj.addSphere(100, 1, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec3"]([0, 0, 0]));
            tObj.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__["NormalType"].Smooth);
            this.renderer.setModel(tObj);
            this.perspectivePanel.setModel(tObj);
            this.animate = false;
            this.dirty = true;
            this.pointerMode = PointerMode.View;
            if (!this.animationFrame) {
                this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
            }
        }
        else {
            // TODO multi line error messages not supported
            this.overlay.clear();
            this.overlay.fillText('Unknown Model:' + file);
        }
    };
    ViewerApp.prototype.toggleMode = function () {
        switch (this.pointerMode) {
            case PointerMode.View:
                this.pointerMode = PointerMode.Light;
                this.renderer.ballColor = this.renderer.yellow;
                break;
            case PointerMode.Light:
                this.pointerMode = PointerMode.View;
                this.renderer.ballColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"].modelWhite;
                break;
        }
        this.dirty = true;
    };
    ViewerApp.prototype.rotateLight = function (xRad, yRad) {
        this.renderer.rotateLight(xRad, yRad);
        this.dirty = true;
    };
    ViewerApp.prototype.rotateObjects = function (xRad, yRad) {
        // get the light vector with model transformation undone
        var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
        vec = this.renderer.obj.model.inverse().multV(vec);
        if (this.renderer.lockFloor) {
            // rotate in all directions if we're just rotating the object in space
            this.renderer.rotX(yRad);
            this.renderer.rotY(xRad);
            if (this.rotateLightWithObject) {
                // apply the changes to the light
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.options.lightPos = vec.xyz;
            }
        }
        else {
            // if the floor moves with the object, then up-down movement tilts the
            // whole scene while left-right movement only spins the model
            this.renderer.rotX(yRad);
            if (this.rotateLightWithObject) {
                this.renderer.preRotY(xRad);
                vec = this.renderer.obj.model.multV(vec);
            }
            else {
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.preRotY(xRad);
            }
            // apply the changes to the light
            this.renderer.options.lightPos = vec.xyz;
        }
    };
    ViewerApp.prototype.onDrag = function (pos, delta) {
        this.dirty = true;
        if (this.pointerMode === PointerMode.View) {
            this.rotateObjects(-delta.x * 0.01, -delta.y * 0.01);
        }
        else if (this.pointerMode === PointerMode.Light) {
            this.rotateLight(-delta.x * 0.01, -delta.y * 0.01);
        }
    };
    /**
     * Processes a click/touch event at the designated coordinates.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @returns true if a hit on one of the views occurs.
     */
    ViewerApp.prototype.onClick = function (pos) {
        var canvasWidth = this.gl.canvas.width;
        var canvasHeight = this.gl.canvas.height;
        var clipSpace = this.renderer.options.camera.getClipSpace(this.gl);
        var miniWidth = this.renderer.miniSize * (2 / clipSpace.width) * canvasWidth;
        var miniHeight = this.renderer.miniSize * (2 / clipSpace.height) * canvasHeight;
        if (pos.x < miniWidth && pos.y < miniHeight) {
            this.toggleMode();
            return true;
        }
        // not handled
        return false;
    };
    ViewerApp.prototype.onScale = function (scale, change) {
        this.renderer.options.camera.zoom(change);
        this.dirty = true;
    };
    ViewerApp.prototype.onRotate = function (angle, delta) {
        // get the light vector with model transformation undone
        var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
        vec = this.renderer.obj.model.inverse().multV(vec);
        this.renderer.rotZ(delta);
        // apply the updated transform 
        if (this.rotateLightWithObject) {
            vec = this.renderer.obj.model.multV(vec);
            this.renderer.options.lightPos = vec.xyz;
        }
        this.dirty = true;
    };
    ViewerApp.prototype.onTranslate = function (delta) {
        // TODO how can this scaling be detected from javascript?
        var factor = 1;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["isMobile"]) {
            factor = 2;
        }
        var clipSpace = this.renderer.options.camera.getClipSpace(this.gl);
        this.renderer.options.camera.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec2"]([
            factor * clipSpace.width * delta.x / this.gl.canvas.width,
            factor * clipSpace.height * delta.y / this.gl.canvas.height
        ]));
        this.dirty = true;
    };
    ViewerApp.prototype.tick = function () {
        var _this = this;
        this.fps.tick();
        if (this.dirty) {
            this.renderer.render();
            if (this.perspectivePanel.visible) {
                // synchronize the rotation matrices
                this.perspectivePanel.render(this.renderer.obj.model.clone());
            }
            this.dirty = false;
        }
        if (this.animate) {
            if (this.loader.loading === false) {
                this.overlay.clear();
                this.overlay.fillText(this.fps.rate.toFixed() + ' fps ' + this.fps.ms.toFixed(1) + ' ms', _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_2__["TextLocation"].BottomLeft);
            }
            // get the light vector with model transformation undone
            var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
            vec = this.renderer.obj.model.inverse().multV(vec);
            // animate
            this.renderer.preRotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(-1));
            // apply the updated transform 
            if (this.rotateLightWithObject) {
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.options.lightPos = vec.xyz;
            }
            this.dirty = true;
        }
        requestAnimationFrame(function () { return _this.tick(); });
    };
    ViewerApp.prototype.save = function () {
        var tObj = this.renderer.tObj;
        var name = tObj.name.split('.')[0] + '.blob';
        tObj.name = name;
        saveAs(tObj.toBlob(), name);
    };
    return ViewerApp;
}());



/***/ }),

/***/ "./src/Apps/Viewer/glObject.ts":
/*!*************************************!*\
  !*** ./src/Apps/Viewer/glObject.ts ***!
  \*************************************/
/*! exports provided: glObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glObject", function() { return glObject; });
/* harmony import */ var _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gl/glAttributeBuffer */ "./src/gl/glAttributeBuffer.ts");
/* harmony import */ var _gl_glIndexBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gl/glIndexBuffer */ "./src/gl/glIndexBuffer.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");





var glObject = /** @class */ (function () {
    function glObject(glCtx, tObj, program) {
        // this matrix normals the object so that all object are centered
        // about the origin with diagonal length of 2 units
        this.normalize = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        // this is the standard "model" matrix
        this.model = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.gl = glCtx;
        var gl = this.gl;
        var ext = gl.getExtension('OES_element_index_uint');
        this.tObj = tObj;
        this.program = program;
        this.createBuffers();
        this.uploadTriangles();
    }
    Object.defineProperty(glObject.prototype, "name", {
        get: function () {
            return this.tObj.name;
        },
        enumerable: false,
        configurable: true
    });
    /*
    public getBoundingPts(): BoundingPts {
       //return this.tObj.getBoundingPts();
       let pts = this.tObj.getBoundingPts();
       let p = new Profiler();
       //let bp = pts.multM(this.normalize.multM(this.model));
       //let bp = pts.multM(this.model.multM(this.normalize));
       let bp = pts.multM(this.normalize).multM(this.model);
       //p.log('mult');
       return bp;
    }
    */
    glObject.prototype.getBoundingBox = function () {
        return this.tObj.box.multM(this.normalize);
    };
    glObject.prototype.autoSize = function (center, size) {
        var objCenter = this.tObj.center;
        this.normalize = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.normalize.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec3"]([center.x - objCenter.x, center.y - objCenter.y, center.z - objCenter.z]));
        this.normalize.scale(size / this.tObj.diagonal);
    };
    glObject.prototype.createBuffers = function () {
        var gl = this.gl;
        // create buffers (and associated attributes)
        this.vertexBuffer = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__["glAttributeBuffer"](gl, this.program, 'aVertex');
        this.normalBuffer = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__["glAttributeBuffer"](gl, this.program, 'aNormal');
        this.indexBuffer = new _gl_glIndexBuffer__WEBPACK_IMPORTED_MODULE_1__["glIndexBuffer"](gl);
    };
    glObject.prototype.dispose = function () {
        this.vertexBuffer.dispose();
        this.normalBuffer.dispose();
        this.indexBuffer.dispose();
    };
    glObject.prototype.rebuildBuffers = function () {
        this.dispose();
        this.createBuffers();
        this.uploadTriangles();
    };
    glObject.prototype.rotX = function (angle) {
        this.model.rotX(angle);
    };
    glObject.prototype.rotY = function (angle) {
        this.model.rotY(angle);
    };
    glObject.prototype.rotZ = function (angle) {
        this.model.rotZ(angle);
    };
    glObject.prototype.preRotX = function (angle) {
        this.model.preRotX(angle);
    };
    glObject.prototype.preRotY = function (angle) {
        this.model.preRotY(angle);
    };
    glObject.prototype.preRotZ = function (angle) {
        this.model.preRotZ(angle);
    };
    glObject.prototype.scale = function (scale) {
        this.model.scale(scale);
    };
    glObject.prototype.translate = function (offset) {
        this.model.translate(offset);
    };
    glObject.prototype.clearTransforms = function () {
        this.model = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
    };
    glObject.prototype.uploadTriangles = function () {
        this.vertexBuffer.upload(this.tObj.vertices);
        this.normalBuffer.upload(this.tObj.normals);
        this.indexBuffer.upload(this.tObj.indices);
    };
    glObject.prototype.draw = function () {
        var gl = this.gl;
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_4__["glUniform"](gl, this.program);
        uni.set('model', this.model.multM(this.normalize));
        this.vertexBuffer.bind();
        this.indexBuffer.bind();
        this.normalBuffer.bind();
        gl.drawElements(gl.TRIANGLES, 3 * this.tObj.numTriangles, gl.UNSIGNED_INT, 0);
    };
    glObject.prototype.optimize = function (normalType) {
        this.tObj.optimize(normalType);
        this.rebuildBuffers();
    };
    glObject.prototype.applyToVecs = function (normals) {
        var vecs = normals ? this.tObj.normals : this.tObj.vertices;
        // if we're updating normals, ignore translation by setting w=0
        var vec = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec4"]([0, 0, 0, normals ? 0 : 1]);
        var xForm = this.model.multM(this.normalize);
        for (var i = 0; i < vecs.length / 3; i++) {
            vec.x = vecs[3 * i + 0];
            vec.y = vecs[3 * i + 1];
            vec.z = vecs[3 * i + 2];
            vec = xForm.multV(vec);
            if (normals) {
                vec = vec.normalize();
            }
            vecs[3 * i + 0] = vec.x;
            vecs[3 * i + 1] = vec.y;
            vecs[3 * i + 2] = vec.z;
        }
    };
    glObject.prototype.applyXForm = function () {
        this.applyToVecs(false);
        this.applyToVecs(true);
        this.normalize = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.model = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.tObj.findBounds();
        this.rebuildBuffers();
    };
    return glObject;
}());



/***/ }),

/***/ "./src/GUI/Checkbox.ts":
/*!*****************************!*\
  !*** ./src/GUI/Checkbox.ts ***!
  \*****************************/
/*! exports provided: Checkbox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Checkbox", function() { return Checkbox; });
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");

var Checkbox = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Checkbox(parent, setup) {
        var _this = this;
        var _a;
        if (typeof setup.checked === 'function') {
            this.getState = setup.checked;
        }
        var div = document.createElement('div');
        if (setup.id) {
            div.id = setup.id;
        }
        div.className = 'CheckboxDiv';
        parent.appendChild(div);
        var label = document.createElement('label');
        label.id = setup.id + 'Label';
        label.className = 'CheckboxLabel';
        label.innerText = (_a = setup.label) !== null && _a !== void 0 ? _a : '';
        div.appendChild(label);
        this.box = document.createElement('input');
        this.box.className = 'Checkbox';
        this.box.type = 'checkbox';
        this.box.id = setup.id + 'Checkbox';
        this.box.checked = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["getBooleanValue"])(setup.checked);
        this.box.onchange = function () {
            if (setup.oncheck) {
                setup.oncheck(_this);
            }
        };
        label.appendChild(this.box);
        var mark = document.createElement('span');
        mark.className = 'Checkmark';
        mark.id = setup.id + 'Checkmark';
        label.appendChild(mark);
    }
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: function () {
            return this.box.checked;
        },
        set: function (value) {
            this.box.checked = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "enabled", {
        get: function () {
            return !this.box.disabled;
        },
        set: function (value) {
            this.box.disabled = !value;
        },
        enumerable: false,
        configurable: true
    });
    Checkbox.prototype.refresh = function () {
        if (this.getState) {
            this.box.checked = this.getState();
        }
    };
    return Checkbox;
}());



/***/ }),

/***/ "./src/GUI/ColorRange.ts":
/*!*******************************!*\
  !*** ./src/GUI/ColorRange.ts ***!
  \*******************************/
/*! exports provided: ColorRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorRange", function() { return ColorRange; });
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/htmlColor */ "./src/Util/htmlColor.ts");

/**
 * Interpolates and array of colors
 */
var ColorRange = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param colors The colors to interpolate
     */
    function ColorRange(colors) {
        this.colors = colors;
    }
    /**
     * Gets an interpolated color.
     *
     * @param value A value between 0 and 1.
     */
    ColorRange.prototype.get = function (value) {
        if (value < 0) {
            return this.colors[0];
        }
        else if (value >= 1) {
            return this.colors[this.colors.length - 1];
        }
        else {
            var index = Math.floor((this.colors.length - 1) * value);
            var partial = (this.colors.length - 1) * value - index;
            var r = Math.round(this.colors[index].r + partial * (this.colors[index + 1].r - this.colors[index].r));
            var g = Math.round(this.colors[index].g + partial * (this.colors[index + 1].g - this.colors[index].g));
            var b = Math.round(this.colors[index].b + partial * (this.colors[index + 1].b - this.colors[index].b));
            return new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([r, g, b]);
        }
    };
    return ColorRange;
}());



/***/ }),

/***/ "./src/GUI/Dialog.ts":
/*!***************************!*\
  !*** ./src/GUI/Dialog.ts ***!
  \***************************/
/*! exports provided: Dialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dialog", function() { return Dialog; });
/* harmony import */ var _GUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GUI */ "./src/GUI/GUI.ts");

var Dialog = /** @class */ (function () {
    function Dialog(parent, baseName) {
        this.onShow = null;
        this.onHide = null;
        this.backgroundDiv = _GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', baseName + 'DialogBackgroundDiv', parent);
        this.backgroundDiv.className = 'DialogBackgroundClass';
        this.dialogDiv = _GUI__WEBPACK_IMPORTED_MODULE_0__["GUI"].create('div', baseName + 'DialogDiv', this.backgroundDiv);
    }
    Object.defineProperty(Dialog.prototype, "visible", {
        get: function () {
            return (getComputedStyle(this.backgroundDiv).display !== 'none');
        },
        set: function (flag) {
            if (flag === this.visible) {
                return;
            }
            if (flag) {
                this.backgroundDiv.style.display = 'flex';
                if (this.onShow) {
                    this.onShow();
                }
            }
            else {
                this.backgroundDiv.style.display = 'none';
                if (this.onHide) {
                    this.onHide();
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Dialog.prototype.dispose = function () {
        var parent = this.backgroundDiv.parentElement;
        parent.removeChild(this.backgroundDiv);
    };
    return Dialog;
}());



/***/ }),

/***/ "./src/GUI/GUI.ts":
/*!************************!*\
  !*** ./src/GUI/GUI.ts ***!
  \************************/
/*! exports provided: GUI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GUI", function() { return GUI; });
var GUI = /** @class */ (function () {
    function GUI() {
    }
    GUI.create = function (type, id, parent, className) {
        var elem = document.createElement(type);
        elem.id = id;
        parent.appendChild(elem);
        if (className) {
            elem.className = className;
        }
        return elem;
    };
    GUI.createAnimation = function (id, parent) {
        var div = document.createElement('div');
        div.id = id;
        div.className = 'lds-ring';
        div.appendChild(document.createElement('div'));
        div.appendChild(document.createElement('div'));
        div.appendChild(document.createElement('div'));
        div.appendChild(document.createElement('div'));
        parent.appendChild(div);
        return div;
    };
    return GUI;
}());



/***/ }),

/***/ "./src/GUI/ListBox.ts":
/*!****************************!*\
  !*** ./src/GUI/ListBox.ts ***!
  \****************************/
/*! exports provided: ListBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBox", function() { return ListBox; });
var StyleClasses;
(function (StyleClasses) {
    StyleClasses["ListBoxClass"] = "ListBoxClass";
    StyleClasses["ListBoxItemClass"] = "ListBoxItemClass";
    StyleClasses["ListBoxItemSelectedClass"] = "ListBoxItemSelectedClass";
})(StyleClasses || (StyleClasses = {}));
var ListBox = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function ListBox(parent, id) {
        this._items = [];
        this.onSelectedChanged = null;
        this.box = document.createElement('div');
        if (id) {
            this.box.id = id;
        }
        this.box.className = StyleClasses.ListBoxClass;
        parent.appendChild(this.box);
    }
    Object.defineProperty(ListBox.prototype, "selected", {
        get: function () {
            for (var i = 0; i < this._items.length; i++) {
                var item = this._items[i];
                if (item.div.classList.contains(StyleClasses.ListBoxItemSelectedClass)) {
                    return item.userData;
                }
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListBox.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListBox.prototype, "enabled", {
        get: function () {
            alert('Not Implemented Yet: ListBox.enabled');
            return false;
        },
        set: function (value) {
            alert('Not Implemented Yet: ListBox.enabled');
        },
        enumerable: false,
        configurable: true
    });
    ListBox.prototype.addItem = function (text, userData, id) {
        var _this = this;
        var oldSelected = this.selected;
        var item = document.createElement('div');
        if (id) {
            item.id = id;
        }
        item.className = StyleClasses.ListBoxItemClass;
        if (text) {
            item.innerText = text;
        }
        this.box.appendChild(item);
        item.onclick = function () {
            var oldSelected = _this.selected;
            for (var i = 0; i < _this._items.length; i++) {
                _this._items[i].div.classList.remove(StyleClasses.ListBoxItemSelectedClass);
            }
            item.classList.toggle(StyleClasses.ListBoxItemSelectedClass);
            if (oldSelected !== _this.selected) {
                if (_this.onSelectedChanged) {
                    _this.onSelectedChanged();
                }
            }
        };
        this._items.push({
            div: item,
            userData: userData,
        });
        if (this.selected === null) {
            item.classList.add(StyleClasses.ListBoxItemSelectedClass);
        }
        if (oldSelected !== this.selected) {
            if (this.onSelectedChanged) {
                this.onSelectedChanged();
            }
        }
        return item;
    };
    ListBox.prototype.clear = function () {
        var oldSelected = this.selected;
        this.box.innerHTML = '';
        this._items = [];
        if (oldSelected !== this.selected) {
            if (this.onSelectedChanged) {
                this.onSelectedChanged();
            }
        }
    };
    ListBox.prototype.refresh = function () {
        // nothing to do
    };
    return ListBox;
}());



/***/ }),

/***/ "./src/GUI/Menu.ts":
/*!*************************!*\
  !*** ./src/GUI/Menu.ts ***!
  \*************************/
/*! exports provided: Menubar, SubMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Menubar", function() { return Menubar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubMenu", function() { return SubMenu; });
/* harmony import */ var _Slider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Slider */ "./src/GUI/Slider.ts");
/* harmony import */ var _Checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Checkbox */ "./src/GUI/Checkbox.ts");
/* harmony import */ var _Radiobutton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Radiobutton */ "./src/GUI/Radiobutton.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _GUI__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GUI */ "./src/GUI/GUI.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var MenuLocation;
(function (MenuLocation) {
    MenuLocation[MenuLocation["Below"] = 0] = "Below";
    MenuLocation[MenuLocation["Right"] = 1] = "Right";
})(MenuLocation || (MenuLocation = {}));
/**
 * Common base classes for things that are menus - menubar, pulldown menu, etc
 */
var Menu = /** @class */ (function () {
    function Menu(parent, parentItem, id, className) {
        var _this = this;
        this.parent = null;
        this.children = [];
        this.ctrls = [];
        // the item that launches us
        this.parentItem = null;
        this.parent = parent;
        this.parentItem = parentItem;
        this.div = document.createElement('div');
        this.div.id = id;
        this.div.className = className;
        if (parent) {
            parent.div.appendChild(this.div);
        }
        if (!parent) {
            // if this is the root menu, add a global click handler for closing menus
            window.addEventListener('mousedown', function (event) {
                if (!_this.isMenuItem(event.target)) {
                    _this.hideDown();
                }
            });
            window.addEventListener('touchstart', function (event) {
                if (!_this.isMenuItem(event.target)) {
                    _this.hideDown();
                }
            });
        }
    }
    Object.defineProperty(Menu.prototype, "hidden", {
        get: function () {
            if (this.parentItem) {
                return this.parentItem.classList.contains('MenuItemHiddenClass');
            }
            else {
                return false;
            }
        },
        set: function (flag) {
            if (this.parentItem) {
                if (flag) {
                    this.parentItem.classList.add('MenuItemHiddenClass');
                }
                else {
                    this.parentItem.classList.remove('MenuItemHiddenClass');
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Menu.prototype, "enabled", {
        get: function () {
            if (this.parentItem) {
                return !this.parentItem.classList.contains('MenuItemDisabledClass');
            }
            else {
                return true;
            }
        },
        set: function (flag) {
            if (this.parentItem) {
                if (flag) {
                    this.parentItem.classList.remove('MenuItemDisabledClass');
                }
                else {
                    this.parentItem.classList.add('MenuItemDisabledClass');
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Menu.prototype.isMenuItem = function (element) {
        while (element) {
            if (element.className === 'MenuItem') {
                return true;
            }
            element = element.parentElement;
        }
        return false;
    };
    Menu.prototype.show = function () {
        this.ctrls.forEach(function (ctrl) { return ctrl.refresh(); });
        if (this.div.classList.contains('MenuShow') === false) {
            this.div.classList.add('MenuShow');
        }
    };
    Menu.prototype.hide = function () {
        if (this.div.classList.contains('MenuShow')) {
            this.div.classList.remove('MenuShow');
        }
    };
    Menu.prototype.hideUp = function () {
        var menu = this;
        while (menu.parent) {
            menu.hide();
            menu = menu.parent;
        }
    };
    Menu.prototype.hideDown = function () {
        this.children.forEach(function (child) {
            child.hide();
            child.hideDown();
        });
    };
    Menu.prototype.clear = function () {
        this.children = [];
        this.ctrls = [];
        this.div.innerHTML = '';
    };
    Menu.prototype.internalAddSubMenu = function (innerHtml, id, location) {
        var _this = this;
        var item = document.createElement('div');
        item.id = id + 'MenuItem';
        item.className = 'MenuItem';
        item.innerHTML = innerHtml;
        item.onclick = function () {
            _this.showSubMenu(item, subMenu, location);
        };
        this.div.appendChild(item);
        var subMenu = new SubMenu(this, item, id);
        this.children.push(subMenu);
        return subMenu;
    };
    Menu.prototype.showSubMenu = function (menuItem, subMenu, location) {
        if (subMenu.enabled === false) {
            return;
        }
        // position the menu off screen so that we can query it's height when
        // we make it visible. Then position it properly
        subMenu.div.style.left = -500 + 'px';
        subMenu.div.style.top = 0 + 'px';
        // hide sibling menus that are open
        this.hideDown();
        // show the desired submenu
        subMenu.show();
        // position the new menu
        var bodyRect = document.body.getBoundingClientRect();
        var menuItemRect = menuItem.getBoundingClientRect();
        var subMenuRect = subMenu.div.getBoundingClientRect();
        if (location === MenuLocation.Below) {
            subMenu.div.style.left = menuItemRect.left + 'px';
            subMenu.div.style.top = menuItemRect.bottom + 'px';
        }
        else if (location === MenuLocation.Right) {
            var left = menuItemRect.left + 0.5 * menuItemRect.width;
            if (left + subMenuRect.width > bodyRect.width) {
                left = menuItemRect.left - subMenuRect.width;
            }
            subMenu.div.style.left = left + 'px';
            var top_1 = menuItemRect.top;
            if (top_1 + subMenuRect.height > bodyRect.height) {
                top_1 = bodyRect.height - subMenuRect.height;
            }
            subMenu.div.style.top = top_1 + 'px';
        }
    };
    Menu.prototype.addItem = function (text, callback, options) {
        var _this = this;
        // create a div for this item
        var item = document.createElement('div');
        item.className = 'MenuItem';
        item.innerText = text;
        item.onclick = function (event) {
            // hide open menus in our hierarchy
            if (!(options && options.closeOnClick == false)) {
                _this.hideUp();
            }
            // fire the event
            callback(item);
        };
        this.div.appendChild(item);
        item.onmouseenter = function () {
            _this.hideDown();
        };
        return item;
    };
    Menu.prototype.addSlider = function (setup) {
        var div = this.addItem(setup.label, function () { return; }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Slider__WEBPACK_IMPORTED_MODULE_0__["Slider"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addCheckbox = function (setup) {
        var div = this.addItem('', function () { return; }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Checkbox__WEBPACK_IMPORTED_MODULE_1__["Checkbox"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addRadiobutton = function (setup) {
        var div = this.addItem('', function () { return; }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Radiobutton__WEBPACK_IMPORTED_MODULE_2__["Radiobutton"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addImage = function (src, callback) {
        var div = this.addItem('', callback);
        div.classList.add('ImageMenuItem');
        var img = _GUI__WEBPACK_IMPORTED_MODULE_4__["GUI"].create('img', '', div);
        img.className = 'MenuItemImage';
        img.src = src;
        return img;
    };
    return Menu;
}());
/**
 * Horizontal menubar across the top of the screen
 */
var Menubar = /** @class */ (function (_super) {
    __extends(Menubar, _super);
    function Menubar(parent) {
        var _this = _super.call(this, null, null, 'Menubar', 'Menubar') || this;
        parent.appendChild(_this.div);
        return _this;
    }
    Menubar.prototype.addSubMenu = function (text, id) {
        return this.internalAddSubMenu(text, id !== null && id !== void 0 ? id : (text + 'Menu'), MenuLocation.Below);
    };
    return Menubar;
}(Menu));

/**
 * A child menu of a menu, i.e. the item that appears when you click on something in the menubar
 */
var SubMenu = /** @class */ (function (_super) {
    __extends(SubMenu, _super);
    function SubMenu(parent, parentItem, id) {
        return _super.call(this, parent, parentItem, id + 'Menu', 'Menu') || this;
    }
    SubMenu.prototype.addSubMenu = function (text, id) {
        var _this = this;
        if (!id) {
            id = text.replace(/\s+/g, '');
        }
        var spanId = id + 'Span';
        var subMenu = this.internalAddSubMenu(text + '<span id="' + spanId + '" style="float:right">></span>', id, MenuLocation.Right);
        var span = document.getElementById(spanId);
        var div = span.parentElement;
        div.onmouseenter = function () {
            if (_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["isMobile"] === false) {
                // TODO this event is triggering on a touchscreen laptop when we don't want it to.
                _this.hideDown();
                _this.showSubMenu(div, subMenu, MenuLocation.Right);
            }
        };
        return subMenu;
    };
    return SubMenu;
}(Menu));



/***/ }),

/***/ "./src/GUI/OverlayCanvas.ts":
/*!**********************************!*\
  !*** ./src/GUI/OverlayCanvas.ts ***!
  \**********************************/
/*! exports provided: TextLocation, OverlayCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextLocation", function() { return TextLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayCanvas", function() { return OverlayCanvas; });
var TextLocation;
(function (TextLocation) {
    TextLocation[TextLocation["Center"] = 0] = "Center";
    TextLocation[TextLocation["TopLeft"] = 1] = "TopLeft";
    TextLocation[TextLocation["TopRight"] = 2] = "TopRight";
    TextLocation[TextLocation["BottomLeft"] = 3] = "BottomLeft";
    TextLocation[TextLocation["BottomRight"] = 4] = "BottomRight";
})(TextLocation || (TextLocation = {}));
var OverlayCanvas = /** @class */ (function () {
    function OverlayCanvas(parent, id) {
        this.canvas = document.createElement('canvas');
        if (id) {
            this.canvas.id = id;
        }
        this.canvas.className = 'Overlay';
        parent.appendChild(this.canvas);
        var dummy = document.createElement('div');
        parent.appendChild(dummy);
        dummy.className = 'Overlay';
        this.largeFont = getComputedStyle(dummy).font;
        dummy.className = 'OverlayAnnotation';
        this.smallFont = getComputedStyle(dummy).font;
        parent.removeChild(dummy);
    }
    Object.defineProperty(OverlayCanvas.prototype, "height", {
        get: function () {
            return this.canvas.height;
        },
        set: function (value) {
            this.canvas.height = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OverlayCanvas.prototype, "width", {
        get: function () {
            return this.canvas.width;
        },
        set: function (value) {
            this.canvas.width = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OverlayCanvas.prototype, "context", {
        get: function () {
            var context = this.canvas.getContext('2d');
            if (context === null) {
                throw new Error('Internal Error: context=null');
            }
            return context;
        },
        enumerable: false,
        configurable: true
    });
    OverlayCanvas.prototype.clear = function () {
        this.context.clearRect(0, 0, this.width, this.height);
    };
    OverlayCanvas.prototype.fillText = function (msg, location) {
        if (location === void 0) { location = TextLocation.Center; }
        var ctx = this.context;
        var style = getComputedStyle(this.canvas);
        ctx.fillStyle = style.color;
        var x;
        var y;
        switch (location) {
            case TextLocation.Center:
                ctx.font = this.largeFont;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                x = this.width / 2;
                y = this.height / 2;
                break;
            case TextLocation.BottomLeft:
                ctx.font = this.smallFont;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'bottom';
                x = 0;
                y = this.height;
                break;
            case TextLocation.BottomRight:
                ctx.font = this.smallFont;
                ctx.textAlign = 'right';
                ctx.textBaseline = 'bottom';
                x = this.width;
                y = this.height;
                break;
            case TextLocation.TopLeft:
                ctx.font = this.smallFont;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'top';
                x = 0;
                y = 0;
                break;
            case TextLocation.TopRight:
                ctx.font = this.smallFont;
                ctx.textAlign = 'right';
                ctx.textBaseline = 'top';
                x = this.width;
                y = 0;
                break;
        }
        ctx.fillText(msg, x, y);
    };
    return OverlayCanvas;
}());



/***/ }),

/***/ "./src/GUI/Panel.ts":
/*!**************************!*\
  !*** ./src/GUI/Panel.ts ***!
  \**************************/
/*! exports provided: Panel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Panel", function() { return Panel; });
var Panel = /** @class */ (function () {
    function Panel(parent, id) {
        var _this = this;
        this.onShow = null;
        this.onHide = null;
        this.div = document.createElement('div');
        this.div.id = id;
        this.div.className = 'Panel';
        this.div.classList.add('Container');
        parent.appendChild(this.div);
        var exitButton = document.createElement('div');
        exitButton.id = 'ExitButton';
        exitButton.className = 'DivButton';
        exitButton.innerText = 'X';
        exitButton.onclick = function () {
            _this.visible = false;
        };
        this.div.appendChild(exitButton);
    }
    Panel.prototype.show = function (value) {
        // virtual function
    };
    Object.defineProperty(Panel.prototype, "visible", {
        get: function () {
            return getComputedStyle(this.div).display === 'block';
        },
        set: function (value) {
            if (value !== this.visible) {
                this.div.style.display = value ? 'block' : 'none';
                // let derived classes know
                this.show(value);
                if (value) {
                    if (this.onShow) {
                        this.onShow(this);
                    }
                }
                else {
                    if (this.onHide) {
                        this.onHide(this);
                    }
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Panel.prototype.dispose = function () {
        // override this function in derived classes if needed
    };
    return Panel;
}());



/***/ }),

/***/ "./src/GUI/PointerEventHandler.ts":
/*!****************************************!*\
  !*** ./src/GUI/PointerEventHandler.ts ***!
  \****************************************/
/*! exports provided: PointerEventHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointerEventHandler", function() { return PointerEventHandler; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util3D/Vec */ "./src/Util3D/Vec.ts");

var DBL_CLICK_TIME = 300; // ms
/**
 * Utility class for managing touch/mouse events over a html element
 */
var PointerEventHandler = /** @class */ (function () {
    function PointerEventHandler(element) {
        var _this = this;
        this.mouseDown = false;
        this.onUp = null;
        this.onDown = null;
        this.onScale = null;
        this.onRotate = null;
        this.onTranslate = null;
        this.onClick = null;
        this.onDblClick = null;
        this.onDrag = null;
        this.onMove = null;
        this.ctrlKey = false;
        this.lastPos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([0, 0]);
        this.lastTouchTime = Date.now();
        this.primaryTouchId = null;
        this.secondaryTouchId = null;
        this.initialTouchDistance = -1;
        this.lastTouchDistance = -1;
        this.lastTouchAngle = -1;
        this.lastTouchCenter = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([-1, -1]);
        this.dblclick = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = _this.getPos(event);
            _this.ourDblClick(pos);
        };
        this.mousedown = function (event) {
            _this.ctrlKey = event.ctrlKey;
            // if this value is set, it means another handler already did something
            // with the event and we should not continue to process it.
            //
            // Some use cases:
            //   1) Levels Panel. Dragging the panel should move it around unless the
            //      user clicks on one of the items to drag it within the panel
            //   2) Menus closing. When clicking outside of a menu, the menu should close
            //
            if (event.defaultPrevented) {
                return;
            }
            if (event.target instanceof HTMLInputElement === false &&
                event.target instanceof HTMLButtonElement === false) {
                var pos = _this.getPos(event);
                _this.ourOnDown(pos);
                window.addEventListener('mouseup', _this.mouseup);
                // disable selection because we're doing something else with dragging
                event.preventDefault();
            }
        };
        this.mousemove = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = _this.getPos(event);
            if (_this.mouseDown) {
                _this.ourOnDrag(pos);
                _this.lastPos = _this.getPos(event);
            }
            else {
                _this.ourOnMove(pos);
                _this.lastPos = _this.getPos(event);
            }
        };
        this.mouseup = function (event) {
            _this.ctrlKey = event.ctrlKey;
            _this.ourOnUp(_this.getPos(event));
            window.removeEventListener('mouseup', _this.mouseup);
        };
        this.touchstart = function (event) {
            _this.ctrlKey = event.ctrlKey;
            // see mousedown for comments
            if (event.defaultPrevented) {
                return;
            }
            if (event.target instanceof HTMLInputElement === false &&
                event.target instanceof HTMLButtonElement === false) {
                // prevent the browser from using the event
                event.preventDefault();
                // if this is the first touch
                if (event.touches.length === 1) {
                    // record the primary touch id
                    _this.primaryTouchId = event.touches[0].identifier;
                    // send out onDown() and potentially onDblClick() events
                    var pos = _this.getPos(event.touches[0]);
                    var time = Date.now();
                    if (time - _this.lastTouchTime < DBL_CLICK_TIME) {
                        _this.ourDblClick(pos);
                    }
                    else {
                        _this.element.addEventListener('touchmove', _this.touchmove);
                        _this.element.addEventListener('touchend', _this.touchend);
                        _this.ourOnDown(pos);
                    }
                    _this.lastTouchTime = time;
                }
                // if this is the second touch
                else if (event.touches.length === 2 && _this.primaryTouchId !== null) {
                    // record the secondary touch id. It will always be the second element when
                    // there are only two elements
                    _this.secondaryTouchId = event.touches[1].identifier;
                    // set values for gestures
                    var distance = _this.computeTouchDistance(event);
                    _this.initialTouchDistance = distance;
                    _this.lastTouchDistance = distance;
                    _this.lastTouchAngle = _this.computeTouchAngle(event);
                    _this.lastTouchCenter = _this.computeTouchCenter(event);
                }
            }
        };
        this.touchmove = function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            // if the initial two touches are active
            if (_this.primaryTouchId !== null && _this.secondaryTouchId !== null) {
                // send out gesture events
                var distance = _this.computeTouchDistance(event);
                var scale = distance / _this.initialTouchDistance;
                var change = distance / _this.lastTouchDistance;
                _this.ourOnScale(scale, change);
                _this.lastTouchDistance = distance;
                var angle = _this.computeTouchAngle(event);
                _this.ourOnRotate(angle, angle - _this.lastTouchAngle);
                _this.lastTouchAngle = angle;
                var center = _this.computeTouchCenter(event);
                // reverse Y values so the bottom is zero instead of the top
                var delta = [center.x - _this.lastTouchCenter.x, _this.lastTouchCenter.y - center.y];
                _this.ourOnTranslate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"](delta));
                _this.lastTouchCenter = center;
            }
            // if only the initial touch is active
            else if (_this.primaryTouchId !== null) {
                // send out the drag event
                if (_this.mouseDown) {
                    var touch = _this.getTouch(event, _this.primaryTouchId);
                    if (touch === null) {
                        throw new Error('Internal Error: touch=null');
                    }
                    var pos = _this.getPos(touch);
                    _this.ourOnDrag(pos);
                    _this.lastPos = _this.getPos(touch);
                }
            }
        };
        this.touchend = function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            // needed to select an input element
            //event.preventDefault();
            if (_this.secondaryTouchId !== null) {
                if (_this.getTouch(event, _this.secondaryTouchId) === null) {
                    _this.secondaryTouchId = null;
                    // if we lifted the second finger, but not the first, go back
                    // to the drag gesture, but adjust the rememberd position to
                    // be the current one so that things don't jump
                    var touch = _this.getTouch(event, _this.primaryTouchId);
                    if (touch) {
                        _this.lastPos = _this.getPos(touch);
                    }
                }
            }
            if (_this.primaryTouchId !== null) {
                if (_this.getTouch(event, _this.primaryTouchId) === null) {
                    _this.primaryTouchId = null;
                    _this.ourOnUp(_this.lastPos);
                }
            }
            if (_this.secondaryTouchId === null || _this.primaryTouchId === null) {
                _this.initialTouchDistance = -1;
                _this.lastTouchDistance = -1;
                _this.lastTouchAngle = -1;
                _this.lastTouchCenter = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([-1, -1]);
            }
            if (_this.secondaryTouchId === null && _this.primaryTouchId === null) {
                _this.element.removeEventListener('touchmove', _this.touchmove);
                _this.element.removeEventListener('touchend', _this.touchend);
            }
        };
        this.element = element;
        this.element.addEventListener('touchstart', this.touchstart);
        this.element.addEventListener('mousedown', this.mousedown);
        window.addEventListener('mousemove', this.mousemove);
        this.element.addEventListener('dblclick', this.dblclick);
    }
    PointerEventHandler.prototype.dispose = function () {
        this.element.removeEventListener('touchstart', this.touchstart);
        this.element.removeEventListener('mousedown', this.mousedown);
        window.removeEventListener('mousemove', this.mousemove);
        this.element.removeEventListener('dblclick', this.dblclick);
    };
    PointerEventHandler.prototype.getTouch = function (event, id) {
        for (var i = 0; i < event.touches.length; i++) {
            var touch = event.touches[i];
            if (touch.identifier === id) {
                return touch;
            }
        }
        // no match was found
        return null;
    };
    PointerEventHandler.prototype.getPos = function (touchOrEvent) {
        var rect = this.element.getBoundingClientRect();
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([touchOrEvent.clientX - rect.x, touchOrEvent.clientY - rect.y]);
    };
    PointerEventHandler.prototype.getTouches = function (event) {
        if (this.primaryTouchId === null || this.secondaryTouchId === null) {
            throw Error('Two touches expected');
        }
        return {
            primaryTouch: this.getTouch(event, this.primaryTouchId),
            secondaryTouch: this.getTouch(event, this.secondaryTouchId),
        };
    };
    PointerEventHandler.prototype.computeTouchDistance = function (event) {
        var touches = this.getTouches(event);
        if (touches.primaryTouch === null) {
            throw new Error('Internal Error: computeTouchDistance() primaryTouch=null');
        }
        if (touches.secondaryTouch === null) {
            throw new Error('Internal Error: computeTouchDistance() secondaryTouch=null');
        }
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    };
    PointerEventHandler.prototype.computeTouchAngle = function (event) {
        var touches = this.getTouches(event);
        if (touches.primaryTouch === null) {
            throw new Error('Internal Error: computeTouchAngle() primaryTouch=null');
        }
        if (touches.secondaryTouch === null) {
            throw new Error('Internal Error: computeTouchAngle() secondaryTouch=null');
        }
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return Math.atan2(y2 - y1, x2 - x1);
    };
    PointerEventHandler.prototype.computeTouchCenter = function (event) {
        var touches = this.getTouches(event);
        if (touches.primaryTouch === null) {
            throw new Error('Internal Error: computeTouchCenter() primaryTouch=null');
        }
        if (touches.secondaryTouch === null) {
            throw new Error('Internal Error: computeTouchCenter() secondaryTouch=null');
        }
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([(x1 + x2) / 2, (y1 + y2) / 2]);
    };
    PointerEventHandler.prototype.ourOnDown = function (pos) {
        // check for a click handler
        if (this.onClick && this.onClick(pos.clone())) {
            return;
        }
        // if not handled by a click hander, send the onDown event
        else {
            this.mouseDown = true;
            this.lastPos = pos.clone();
            if (this.onDown) {
                this.onDown(pos.clone());
            }
        }
    };
    PointerEventHandler.prototype.ourOnUp = function (pos) {
        this.mouseDown = false;
        if (this.onUp) {
            this.onUp(pos.clone());
        }
    };
    PointerEventHandler.prototype.ourOnDrag = function (pos) {
        if (this.onDrag) {
            var delta = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([pos.x - this.lastPos.x, pos.y - this.lastPos.y]);
            this.onDrag(pos.clone(), delta);
        }
    };
    PointerEventHandler.prototype.ourOnMove = function (pos) {
        if (this.onMove) {
            var delta = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([pos.x - this.lastPos.x, pos.y - this.lastPos.y]);
            this.onMove(pos.clone(), delta);
        }
    };
    PointerEventHandler.prototype.ourDblClick = function (pos) {
        if (this.onDblClick) {
            this.onDblClick(pos);
        }
    };
    PointerEventHandler.prototype.ourOnScale = function (scale, change) {
        if (this.onScale) {
            this.onScale(scale, change);
        }
    };
    PointerEventHandler.prototype.ourOnRotate = function (angle, delta) {
        if (this.onRotate) {
            this.onRotate(angle, delta);
        }
    };
    PointerEventHandler.prototype.ourOnTranslate = function (delta) {
        if (this.onTranslate) {
            this.onTranslate(delta);
        }
    };
    return PointerEventHandler;
}());



/***/ }),

/***/ "./src/GUI/Radiobutton.ts":
/*!********************************!*\
  !*** ./src/GUI/Radiobutton.ts ***!
  \********************************/
/*! exports provided: Radiobutton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Radiobutton", function() { return Radiobutton; });
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");

var Radiobutton = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Radiobutton(parent, setup) {
        var _this = this;
        var _a, _b;
        this.getState = null;
        var id = (_a = setup.id) !== null && _a !== void 0 ? _a : 'Radiobutton';
        if (typeof setup.checked === 'function') {
            this.getState = setup.checked;
        }
        var div = document.createElement('div');
        div.id = id;
        div.className = 'RadiobuttonDiv';
        parent.appendChild(div);
        var label = document.createElement('label');
        label.id = id + 'Label';
        label.className = 'RadiobuttonLabel';
        label.innerText = (_b = setup.label) !== null && _b !== void 0 ? _b : '';
        div.appendChild(label);
        this.box = document.createElement('input');
        this.box.className = 'Radiobutton';
        this.box.type = 'radio';
        this.box.name = setup.group;
        this.box.id = id + 'Radiobutton';
        this.box.checked = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["getBooleanValue"])(setup.checked);
        this.box.onchange = function () {
            if (_this.box.checked) {
                if (setup.oncheck) {
                    setup.oncheck(_this);
                }
            }
            else {
                if (setup.onuncheck) {
                    setup.onuncheck(_this);
                }
            }
        };
        label.appendChild(this.box);
        var mark = document.createElement('span');
        mark.className = 'RadioCheckmark';
        mark.id = id + 'RadioCheckmark';
        label.appendChild(mark);
    }
    Object.defineProperty(Radiobutton.prototype, "checked", {
        get: function () {
            return this.box.checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Radiobutton.prototype, "enabled", {
        get: function () {
            return !this.box.disabled;
        },
        set: function (value) {
            this.box.disabled = !value;
        },
        enumerable: false,
        configurable: true
    });
    Radiobutton.prototype.check = function (value) {
        if (value === void 0) { value = true; }
        this.box.checked = value;
    };
    Radiobutton.prototype.refresh = function () {
        if (this.getState) {
            this.box.checked = this.getState();
        }
    };
    return Radiobutton;
}());



/***/ }),

/***/ "./src/GUI/Slider.ts":
/*!***************************!*\
  !*** ./src/GUI/Slider.ts ***!
  \***************************/
/*! exports provided: Slider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return Slider; });
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _ColorRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ColorRange */ "./src/GUI/ColorRange.ts");
/* harmony import */ var _Util_htmlColorWithAlpha__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Util/htmlColorWithAlpha */ "./src/Util/htmlColorWithAlpha.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gl/glColor */ "./src/gl/glColor.ts");




var RangeMapper = /** @class */ (function () {
    function RangeMapper(realMin, realMax) {
        this.sliderMin = 0;
        this.sliderMax = 1000;
        this.realMin = realMin;
        this.realMax = realMax;
    }
    Object.defineProperty(RangeMapper.prototype, "realRange", {
        get: function () {
            return this.realMax - this.realMin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeMapper.prototype, "sliderRange", {
        get: function () {
            return this.sliderMax - this.sliderMin;
        },
        enumerable: false,
        configurable: true
    });
    RangeMapper.prototype.sliderToReal = function (sliderValue) {
        return this.realMin + ((sliderValue - this.sliderMin) / this.sliderRange) * this.realRange;
    };
    RangeMapper.prototype.realToSlider = function (realValue) {
        return this.sliderMin + ((realValue - this.realMin) / this.realRange) * this.sliderRange;
    };
    return RangeMapper;
}());
/**
 * Class representing a slider composed of a label, input range, color span and value span
 */
var Slider = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Slider(parent, setup) {
        var _this = this;
        var _a, _b;
        var id = (_a = setup.id) !== null && _a !== void 0 ? _a : 'Slider';
        this._getText = setup.onGetText;
        var div = document.createElement('div');
        div.id = id;
        div.className = 'SliderDiv';
        parent.appendChild(div);
        this._label = document.createElement('label');
        this._label.id = id + 'Label';
        this._label.className = 'SliderLabel';
        this._label.innerText = (_b = setup.label) !== null && _b !== void 0 ? _b : '';
        div.appendChild(this._label);
        this._rangeMapper = new RangeMapper(setup.min, setup.max);
        this._range = document.createElement('input');
        this._range.type = 'range';
        this._range.id = id + 'Range';
        this._range.className = 'SliderRange';
        this._range.min = this._rangeMapper.sliderMin.toString();
        this._range.max = this._rangeMapper.sliderMax.toString();
        this._range.value = this._rangeMapper.realToSlider(setup.value).toString();
        this._range.addEventListener('input', function () {
            _this.updateSpanColor();
            _this.updateSpanText();
        });
        this._label.htmlFor = this._range.id;
        div.appendChild(this._range);
        if (setup.colors) {
            this._colorSpan = document.createElement('span');
            this._colorSpan.id = id + 'ColorSpan';
            this._colorSpan.className = 'SliderColorSpan';
            div.appendChild(this._colorSpan);
            // set the initial color.
            this.colors = setup.colors;
        }
        this._valueSpan = document.createElement('span');
        this._valueSpan.id = id + 'ValueSpan';
        this._valueSpan.className = 'SliderValueSpan';
        //      this._valueSpan.innerText = setup.value.toString();
        div.appendChild(this._valueSpan);
        // set the initial span text
        this.updateSpanText();
        if (setup.oninput) {
            this._range.oninput = function () { return setup.oninput(_this); };
        }
    }
    Object.defineProperty(Slider.prototype, "enabled", {
        get: function () {
            return !this._range.disabled;
        },
        set: function (value) {
            this._range.disabled = !value;
            if (value) {
                this._label.classList.remove('disabled');
                this._valueSpan.classList.remove('disabled');
                this._range.classList.remove('disabled');
            }
            else {
                this._label.classList.add('disabled');
                this._valueSpan.classList.add('disabled');
                this._range.classList.add('disabled');
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the span color to the currently selected color.
     */
    Slider.prototype.updateSpanColor = function () {
        if (this._colors) {
            var val = (this.value - this.min) / (this.max - this.min);
            var color = _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].fromColor(this._colors.get(val));
            this._colorSpan.style.backgroundColor = color.toHex();
        }
    };
    /**
     * Sets the span color to the currently selected color.
     */
    Slider.prototype.updateSpanText = function () {
        if (this._getText) {
            this._valueSpan.innerText = this._getText(this);
        }
    };
    Object.defineProperty(Slider.prototype, "range", {
        /**
         * Gets the html range object
         *
         * @returns The html range object.
         */
        get: function () {
            return this._range;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "value", {
        /**
         * Gets the current slider value
         *
         * @returns the current slider value
         */
        get: function () {
            return this._rangeMapper.sliderToReal(this._range.valueAsNumber);
        },
        /**
         * Sets the value of the slider (and associated content)
         *
         * @param val the desired slider value
         */
        set: function (val) {
            this._range.valueAsNumber = this._rangeMapper.realToSlider(val);
            this.updateSpanColor();
            this.updateSpanText();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "valueAsPercent", {
        /**
         * Gets the value of the slider as a percent [0-1] of the range
         *
         * @returns the value of the slider as a percent
         */
        get: function () {
            return this.value / (this.max - this.min);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "min", {
        /**
         * Gets the min slider value.
         *
         * @returns The min slider value.
         */
        get: function () {
            return this._rangeMapper.realMin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "max", {
        /**
         * Gets the max slider value.
         *
         * @returns The max slider value.
         */
        get: function () {
            return this._rangeMapper.realMax;
        },
        /**
         * Sets the max slider value.
         *
         * @param value The max slider value.
         */
        set: function (value) {
            // get the value before we change range values
            var currentValue = Math.min(this.value, value);
            // change the range
            this._rangeMapper.realMax = value;
            this._range.valueAsNumber = this._rangeMapper.realToSlider(currentValue);
            // update GUI
            this.updateSpanColor();
            this.updateSpanText();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "colors", {
        /**
         * Sets the color for the slider
         */
        set: function (colors) {
            // store the colors
            this._colors = new _ColorRange__WEBPACK_IMPORTED_MODULE_1__["ColorRange"](colors);
            // build the gradient style for the range object
            var gradientStr = '90deg';
            for (var i = 0; i < colors.length; i++) {
                gradientStr += ', ' + colors[i].toCss();
            }
            this._range.style.background = 'linear-gradient(' + gradientStr + ')';
            // update the span color too
            this.updateSpanColor();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "htmlColor", {
        /**
         * Gets the current color as an htmlColor object.
         *
         * @returns The current color.
         */
        get: function () {
            if (this._colors) {
                var val = (this.value - this.min) / (this.max - this.min);
                return this._colors.get(val);
            }
            else {
                return _Util_htmlColorWithAlpha__WEBPACK_IMPORTED_MODULE_2__["htmlColorWithAlpha"].transparent;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "glColor", {
        /**
         * Gets the current color as a glColor object.
         *
         * @returns The current color.
         */
        get: function () {
            if (this._colors) {
                var val = (this.value - this.min) / (this.max - this.min);
                return this._colors.get(val).toGlColor();
            }
            else {
                return new _gl_glColor__WEBPACK_IMPORTED_MODULE_3__["glColor3"]([0, 0, 0]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Slider.prototype.refresh = function () {
        // TODO implement
    };
    return Slider;
}());



/***/ }),

/***/ "./src/Launcher.ts":
/*!*************************!*\
  !*** ./src/Launcher.ts ***!
  \*************************/
/*! exports provided: Launcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Launcher", function() { return Launcher; });
/* harmony import */ var _GUI_Menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GUI/Menu */ "./src/GUI/Menu.ts");
/* harmony import */ var _Apps_PathTracer_PathTracerApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Apps/PathTracer/PathTracerApp */ "./src/Apps/PathTracer/PathTracerApp.ts");
/* harmony import */ var _Apps_Viewer_ViewerApp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Apps/Viewer/ViewerApp */ "./src/Apps/Viewer/ViewerApp.ts");
/* harmony import */ var _Apps_Squint_SquintApp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Apps/Squint/SquintApp */ "./src/Apps/Squint/SquintApp.ts");




var AppType;
(function (AppType) {
    AppType["ArtistsBall"] = "ArtistsBall";
    AppType["Viewer"] = "Viewer";
    AppType["Squint"] = "Squint";
})(AppType || (AppType = {}));
var Launcher = /** @class */ (function () {
    function Launcher() {
        var _this = this;
        this.app = null;
        this.setFontSize();
        window.addEventListener('orientationchange', function () { return _this.setFontSize(); });
        // default app type if one isn't specified via a URL parameter
        var type = AppType.Squint;
        // create the main div
        this.div = document.createElement('div');
        document.body.appendChild(this.div);
        this.menubar = new _GUI_Menu__WEBPACK_IMPORTED_MODULE_0__["Menubar"](this.div);
        var html = '<img style="width: 1em" src="' + location.origin + '/img/apps.svg' + '" />';
        var subMenu = this.menubar.addSubMenu(html, 'Apps');
        subMenu.addItem('3D Viewer', function () { return location.href = _this.getUrl(AppType.Viewer); });
        subMenu.addItem('Squint', function () { return location.href = _this.getUrl(AppType.Squint); });
        subMenu.addItem('Artist\'s Ball', function () { return location.href = _this.getUrl(AppType.ArtistsBall); });
        var paramString = location.href.split('?')[1];
        var query = new URLSearchParams(paramString);
        // TODO this can be done without a switch statement, but I
        // don't have time right now to figure out how to make it
        // work with strict TypeScript and ESLint
        var appTypeStr = query.get('App');
        switch (appTypeStr) {
            case AppType.ArtistsBall:
                type = AppType.ArtistsBall;
                break;
            case AppType.Squint:
                type = AppType.Squint;
                break;
            case AppType.Viewer:
                type = AppType.Viewer;
                break;
        }
        query.delete('App');
        var file = this.getFileFromQuery(query);
        switch (type) {
            case AppType.ArtistsBall:
                document.title = 'Artist\'s Tools: Artist\'s Ball';
                this.app = new _Apps_PathTracer_PathTracerApp__WEBPACK_IMPORTED_MODULE_1__["PathTracerApp"](file);
                break;
            case AppType.Viewer:
                document.title = 'Artist\'s Tools: Viewer';
                this.app = new _Apps_Viewer_ViewerApp__WEBPACK_IMPORTED_MODULE_2__["ViewerApp"](file);
                break;
            case AppType.Squint:
                document.title = 'Squint';
                this.app = new _Apps_Squint_SquintApp__WEBPACK_IMPORTED_MODULE_3__["SquintApp"]();
                break;
        }
        this.app.create(this.div);
        this.app.buildMenu(this.menubar);
    }
    Launcher.prototype.getFileFromQuery = function (query) {
        var params = [];
        query.forEach(function (value, key) {
            params.push({
                name: key,
                value: value,
            });
        });
        if (params.length === 1) {
            return params[0].name; // unnamed parameter
        }
        else {
            return '';
        }
    };
    Launcher.prototype.getUrl = function (type) {
        var base = location.href.split('?')[0];
        switch (type) {
            case AppType.ArtistsBall:
                return base + '?App=ArtistsBall';
                break;
            case AppType.Squint:
                return base + '?App=Squint';
                break;
            case AppType.Viewer:
                return base + '?App=Viewer';
                break;
            default:
                return base;
        }
    };
    Launcher.prototype.setFontSize = function () {
        // supposed to be able to do this stuff with media queries, but I give up! Browsers
        // behave differently on mobile devices and some alter scaling for portrait and
        // landscape too!
        var isMobile = (navigator.userAgent.indexOf('Mobile') > 0);
        var isFirefox = (navigator.userAgent.indexOf('Firefox') > 0);
        var isChome = (navigator.userAgent.indexOf('Chrome') > 0);
        var isPortrait = (window.orientation !== undefined && window.orientation === 0 || window.orientation === 180);
        var isIphone = (navigator.userAgent.indexOf('iPhone') > 0);
        var fontSize = 11;
        if (isFirefox) {
            fontSize = 11;
        }
        else {
            if (isMobile && isPortrait) {
                if (isIphone) {
                    fontSize = 28;
                }
                else {
                    fontSize = 24;
                }
            }
            else {
                if (isIphone) {
                    fontSize = 16;
                }
                else {
                    fontSize = 11;
                }
            }
        }
        // set the variable into the CSS code
        document.documentElement.style.setProperty('--fontSize', fontSize + 'pt');
    };
    return Launcher;
}());



/***/ }),

/***/ "./src/Util/BlobFile.ts":
/*!******************************!*\
  !*** ./src/Util/BlobFile.ts ***!
  \******************************/
/*! exports provided: BlobFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobFile", function() { return BlobFile; });
/* harmony import */ var _BlobShim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BlobShim */ "./src/Util/BlobShim.ts");
/* harmony import */ var _BlobShim__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_BlobShim__WEBPACK_IMPORTED_MODULE_0__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/**
 * Internal class for slicing up Blobs
 */
var BlobSlicer = /** @class */ (function () {
    /**
     * @param blob The Blob to be sliced
     */
    function BlobSlicer(blob) {
        // The start byte value for the next slice
        this.start = 0;
        this.blob = blob;
    }
    /**
     * Gets the next slice.
     *
     * @param len The length of the slice.
     * @returns The sliced Blob.
     */
    BlobSlicer.prototype.next = function (len) {
        var b = this.blob.slice(this.start, this.start + len);
        this.start += len;
        return b;
    };
    /**
     * Slices the Blob and returns it as an ArrayBuffer.
     *
     * @param len The length of the slice.
     * @returns An ArrayBuffer promise.
     */
    BlobSlicer.prototype.nextArrayBuffer = function (len) {
        return this.next(len).arrayBuffer();
    };
    /**
     * Slices the Blob and returns it as an Int32Array
     *
     * @param len The length of the slice.
     * @returns An Int32Array promise.
     */
    BlobSlicer.prototype.nextInt32Array = function (len) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Int32Array.bind;
                        return [4 /*yield*/, this.nextArrayBuffer(len)];
                    case 1: return [2 /*return*/, new (_a.apply(Int32Array, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    /**
     * Slices the Blob and returns it as a string
     *
     * @param len The length of the slice.
     * @returns A string promise.
     */
    BlobSlicer.prototype.nextString = function (len) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.next(len).text()];
            });
        });
    };
    return BlobSlicer;
}());
/**
 * Manages creation and extraction of a self describing Blob. Data
 * is stored as:
 *
 * [numEntries] - The number entries in the file. 4 byte Int32
 * [sizes] - Sizes of all the entries, including the info object
 * [info] - User supplied data as a JSON string
 * [entry 1] - First user entry
 * [entry 2] - Second user entry
 * [...]
 */
var BlobFile = /** @class */ (function () {
    /**
     * @param info The information header to be stored with the Blob
     * @param parts The data contents of the Blob
     */
    function BlobFile(info, parts) {
        this.parts = [];
        this.info = info;
        this.parts = parts;
    }
    /**
     * Converts a raw Blob object into a BlobFile
     *
     * @param blob The Blob to process.
     * @return A BlobFile promise.
     */
    BlobFile.extract = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var blobSlicer, numEntries, sizes, jsonInfo, parts, i, size;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blobSlicer = new BlobSlicer(blob);
                        return [4 /*yield*/, blobSlicer.nextInt32Array(4)];
                    case 1:
                        numEntries = (_a.sent())[0];
                        return [4 /*yield*/, blobSlicer.nextInt32Array(4 * (numEntries + 1))];
                    case 2:
                        sizes = _a.sent();
                        return [4 /*yield*/, blobSlicer.nextString(sizes[0])];
                    case 3:
                        jsonInfo = _a.sent();
                        parts = [];
                        for (i = 0; i < numEntries; i++) {
                            size = sizes[i + 1];
                            parts.push(blobSlicer.next(size));
                        }
                        return [2 /*return*/, new BlobFile(JSON.parse(jsonInfo), parts)];
                }
            });
        });
    };
    /**
     * Create a BlobFile Blob
     *
     * @param info The information header to be stored with the Blob
     * @param parts The data contents of the Blob
     */
    BlobFile.createBlob = function (info, parts) {
        var jsonInfo = JSON.stringify(info);
        // Build the array of sizes
        var sizes = [jsonInfo.length];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (part instanceof Int32Array) {
                sizes.push(4 * part.length);
            }
            else if (part instanceof Float32Array) {
                sizes.push(4 * part.length);
            }
            else if (part instanceof String) {
                sizes.push(part.length);
            }
            else {
                var msg = 'Unsupported Blob Part Type: ' + typeof part;
                console.error(msg);
                throw new Error(msg);
            }
        }
        // assemble the blob parts
        var allParts = [];
        allParts.push(new Int32Array([parts.length]));
        allParts.push(new Int32Array(sizes));
        allParts.push(jsonInfo);
        allParts.push.apply(allParts, parts);
        // create the blob
        return new Blob(allParts);
    };
    return BlobFile;
}());



/***/ }),

/***/ "./src/Util/BlobShim.ts":
/*!******************************!*\
  !*** ./src/Util/BlobShim.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

// needed for Safari
if (!Blob.prototype.arrayBuffer) {
    Blob.prototype.arrayBuffer = function () {
        var _this = this;
        // read the Blob the old fashioned way
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            // register event handlers
            reader.onloadend = function () {
                resolve(reader.result);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
            // start the read
            reader.readAsArrayBuffer(_this);
        });
    };
}
// needed for Safari
if (!Blob.prototype.text) {
    // read the Blob the old fashioned way
    Blob.prototype.text = function () {
        var _this = this;
        // read the Blob the old fashioned way
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            // register event handlers
            reader.onloadend = function () {
                // decode into a string
                var txt = new TextDecoder('utf-8').decode(reader.result);
                resolve(txt);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
            // start the read
            reader.readAsArrayBuffer(_this);
        });
    };
}


/***/ }),

/***/ "./src/Util/Color.ts":
/*!***************************!*\
  !*** ./src/Util/Color.ts ***!
  \***************************/
/*! exports provided: Color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/**
 * Class for representing color values. Values may be on a 0-1 or 0-255 scale.
 */
var Color = /** @class */ (function () {
    /**
     * @param color RGB values to store in this object
     */
    function Color(color) {
        this.r = color[0];
        this.g = color[1];
        this.b = color[2];
        if (color.length === 4) {
            this.a = color[3];
        }
        else {
            this.a = 0;
        }
    }
    return Color;
}());



/***/ }),

/***/ "./src/Util/ConsoleCapture.ts":
/*!************************************!*\
  !*** ./src/Util/ConsoleCapture.ts ***!
  \************************************/
/*! exports provided: ConsoleCapture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleCapture", function() { return ConsoleCapture; });
var NUM_COLS = 150;
var ConsoleCapture = /** @class */ (function () {
    function ConsoleCapture(id, numCols) {
        var _this = this;
        if (id === void 0) { id = 'Console'; }
        if (numCols === void 0) { numCols = NUM_COLS; }
        this.textArea = document.createElement('textarea');
        this.textArea.id = id;
        this.textArea.cols = numCols;
        document.body.appendChild(this.textArea);
        // TODO update these all to take the correct arguments for console functions
        var oldLog = console.log;
        console.log = function (msg) {
            _this.append(msg);
            oldLog(msg);
        };
        var oldTrace = console.trace;
        console.trace = function (msg) {
            _this.append('TRACE ' + msg);
            oldTrace(msg);
        };
        var oldInfo = console.info;
        console.info = function (msg) {
            _this.append('INFO ' + msg);
            oldInfo(msg);
        };
        var oldWarn = console.warn;
        console.warn = function (msg) {
            _this.append('WARN ' + msg);
            oldWarn(msg);
        };
        var oldError = console.error;
        console.error = function (msg) {
            _this.append('ERROR ' + msg);
            oldError(msg);
        };
        var oldClear = console.clear;
        console.clear = function () {
            _this.textArea.textContent = '';
            oldClear();
        };
        window.onerror = function (event, source, lineno, colno, error) {
            var stackTrace = error && error instanceof Error ? '\n' + error.stack : '';
            var msg = event + '\n' + source + ' line:' + lineno + ', col:' + colno + stackTrace;
            //alert(msg);
            _this.append(msg);
        };
    }
    Object.defineProperty(ConsoleCapture.prototype, "visible", {
        get: function () {
            return getComputedStyle(this.textArea).display === 'block';
        },
        set: function (flag) {
            this.textArea.style.display = flag ? 'block' : 'none';
        },
        enumerable: false,
        configurable: true
    });
    ConsoleCapture.prototype.append = function (msg) {
        var fullmsg = this.textArea.value;
        if (msg === null || msg === undefined) {
            msg = '' + msg;
        }
        if (typeof msg !== 'string') {
            msg = '' + msg;
        }
        msg = msg.substr(0, 100 * NUM_COLS);
        fullmsg = msg + '\n\n' + fullmsg;
        fullmsg = fullmsg.substr(0, 10 * 1000 * NUM_COLS);
        this.textArea.value = fullmsg;
        if (this.onMessage) {
            this.onMessage(msg);
        }
    };
    ConsoleCapture.prototype.setEdges = function (left, right, top, bottom) {
        this.textArea.style.left = left + 'px';
        this.textArea.style.right = right + 'px';
        this.textArea.style.top = top + 'px';
        this.textArea.style.bottom = bottom + 'px';
    };
    return ConsoleCapture;
}());



/***/ }),

/***/ "./src/Util/FPS.ts":
/*!*************************!*\
  !*** ./src/Util/FPS.ts ***!
  \*************************/
/*! exports provided: FPS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FPS", function() { return FPS; });
var FPS = /** @class */ (function () {
    function FPS() {
        this.ticks = [];
    }
    Object.defineProperty(FPS.prototype, "spanMs", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return (this.ticks[this.ticks.length - 1] - this.ticks[0]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FPS.prototype, "ms", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return this.spanMs / this.ticks.length;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FPS.prototype, "rate", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return 1000 / this.ms;
            }
        },
        enumerable: false,
        configurable: true
    });
    FPS.prototype.tick = function () {
        this.ticks.push(window.performance.now());
        // trim off the size as long as there are at least 20 entries and the
        // time span between all entries is at least 1 second
        while (this.ticks.length > 20 && this.spanMs > 2000) {
            this.ticks.shift();
        }
    };
    return FPS;
}());



/***/ }),

/***/ "./src/Util/Globals.ts":
/*!*****************************!*\
  !*** ./src/Util/Globals.ts ***!
  \*****************************/
/*! exports provided: isMobile, env, getEmPixels, pxToNumber, clamp, toDeg, toRad, mix, toCss, toSizeStr, toTimeStr, getBooleanValue, iOS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return isMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "env", function() { return env; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEmPixels", function() { return getEmPixels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pxToNumber", function() { return pxToNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toDeg", function() { return toDeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRad", function() { return toRad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toCss", function() { return toCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSizeStr", function() { return toSizeStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toTimeStr", function() { return toTimeStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBooleanValue", function() { return getBooleanValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iOS", function() { return iOS; });
var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
var env = {
    isTesting: false
};
function getEmPixels() {
    var style = getComputedStyle(document.body);
    return Number.parseFloat(style.fontSize.substr(0, style.fontSize.length - 2));
}
function pxToNumber(pxValue) {
    if (pxValue.endsWith('px')) {
        return Number.parseFloat(pxValue.substr(0, pxValue.length - 2));
    }
    else {
        return Number.NaN;
    }
}
function clamp(value, min, max) {
    if (value < min) {
        return min;
    }
    else if (value > max) {
        return max;
    }
    else {
        return value;
    }
}
function toDeg(rad) {
    return (180 / Math.PI) * rad;
}
function toRad(deg) {
    return (Math.PI / 180) * deg;
}
function mix(v1, v2, mix) {
    return v1 + clamp(mix, 0, 1) * (v2 - v1);
}
function toCss(r, g, b, a) {
    return 'rgb(' + r + ',' + g + ',' + b + (a === undefined ? '' : ',' + a) + ')';
}
function toSizeStr(val) {
    if (val < 1024) {
        return val + ' bytes';
    }
    else if (val < 1024 * 1024) {
        return (val / 1024).toFixed(1) + ' kb';
    }
    else {
        return (val / (1024 * 1024)).toFixed(1) + ' mb';
    }
}
function toTimeStr(val) {
    if (val < 1000) {
        return val.toFixed(0) + ' ms';
    }
    else {
        return (val / 1000).toFixed(1) + ' s';
    }
}
function getBooleanValue(value) {
    if (value === undefined || value === null) {
        return false;
    }
    else if (typeof value === 'boolean') {
        return value;
    }
    else if (typeof value === 'function') {
        return value();
    }
    else {
        return false;
    }
}
function iOS() {
    return [
        'iPad Simulator',
        'iPhone Simulator',
        'iPod Simulator',
        'iPad',
        'iPhone',
        'iPod'
    ].includes(navigator.platform)
        // iPad on iOS 13 detection
        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
}


/***/ }),

/***/ "./src/Util/Profiler.ts":
/*!******************************!*\
  !*** ./src/Util/Profiler.ts ***!
  \******************************/
/*! exports provided: Profiler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Profiler", function() { return Profiler; });
/* harmony import */ var _Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Stopwatch */ "./src/Util/Stopwatch.ts");

/**
 * Utility class for logging timing messages for profile code
 */
var Profiler = /** @class */ (function () {
    function Profiler() {
        this.sw = new _Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"]();
    }
    Object.defineProperty(Profiler.prototype, "elapsedMs", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return this.sw.elapsedMs;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Prints a message to console of the elapsed time
     *
     * @param msg The message to print with the time
     */
    Profiler.prototype.log = function (msg) {
        console.log(msg + ' ' + this.elapsedMs.toFixed(1) + ' ms');
        this.sw.restart();
    };
    return Profiler;
}());



/***/ }),

/***/ "./src/Util/Stopwatch.ts":
/*!*******************************!*\
  !*** ./src/Util/Stopwatch.ts ***!
  \*******************************/
/*! exports provided: Stopwatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stopwatch", function() { return Stopwatch; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Util/Globals.ts");

/**
 * Utility class for tracking time
 */
var Stopwatch = /** @class */ (function () {
    function Stopwatch(start) {
        if (start === void 0) { start = true; }
        this.accumulatedMs = 0;
        this._paused = false;
        this.reset(start);
    }
    Object.defineProperty(Stopwatch.prototype, "paused", {
        get: function () {
            return this._paused;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "running", {
        get: function () {
            return !this.paused;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "elapsedStr", {
        /**
         * The elapsed time in as a string
         */
        get: function () {
            return Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toTimeStr"])(this.elapsedMs);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "elapsedMs", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            if (isNaN(this.startTime)) {
                return this.accumulatedMs;
            }
            else {
                return this.accumulatedMs + (this.getTimeMs() - this.startTime);
            }
        },
        set: function (value) {
            this.accumulatedMs = value;
            if (this.running) {
                this.startTime = this.getTimeMs();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "elapsedS", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return this.elapsedMs / 1000;
        },
        enumerable: false,
        configurable: true
    });
    Stopwatch.prototype.getTimeMs = function () {
        // window.performance is not defined for nodejs so our test need
        // this to compile
        if (window.performance !== undefined) {
            return window.performance.now();
        }
        else {
            return Date.now();
        }
    };
    Stopwatch.prototype.reset = function (start) {
        this.accumulatedMs = 0;
        if (start) {
            this._paused = false;
            this.startTime = this.getTimeMs();
        }
        else {
            this._paused = true;
            this.startTime = NaN;
        }
    };
    Stopwatch.prototype.restart = function () {
        this.reset(true);
    };
    Stopwatch.prototype.pause = function () {
        if (this._paused === false) {
            this._paused = true;
            this.accumulatedMs = this.elapsedMs;
            this.startTime = NaN;
        }
    };
    Stopwatch.prototype.resume = function () {
        if (this._paused === true) {
            this._paused = false;
            this.startTime = this.getTimeMs();
        }
    };
    /**
     * Adjusts the elapsed time by the specified amount of time
     *
     * @param timeMs Adjustment in milliseconds
     */
    Stopwatch.prototype.adjustMs = function (timeMs) {
        this.startTime = this.startTime - timeMs;
    };
    return Stopwatch;
}());



/***/ }),

/***/ "./src/Util/hsvColor.ts":
/*!******************************!*\
  !*** ./src/Util/hsvColor.ts ***!
  \******************************/
/*! exports provided: hsvColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsvColor", function() { return hsvColor; });
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gl/glColor */ "./src/gl/glColor.ts");

/**
 * Class for representing color values. Values are on a 0-1 scale.
 */
var hsvColor = /** @class */ (function () {
    /**
     * @param color HSV values to store in this object
     */
    function hsvColor(color) {
        this.h = color[0];
        this.s = color[1];
        this.v = color[2];
    }
    /**
     * Sets the HSV values from html (0-255) RGB values
     *
     * @param r Red value
     * @param g Green value
     * @param b Blue value
     */
    hsvColor.prototype.fromHtmlValues = function (r, g, b) {
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var d = max - min;
        var h = 0;
        var s = (max === 0 ? 0 : d / max);
        var v = max / 255;
        switch (max) {
            case min:
                h = 0;
                break;
            case r:
                h = (g - b) + d * (g < b ? 6 : 0);
                h /= 6 * d;
                break;
            case g:
                h = (b - r) + d * 2;
                h /= 6 * d;
                break;
            case b:
                h = (r - g) + d * 4;
                h /= 6 * d;
                break;
        }
        this.h = h;
        this.s = s;
        this.v = v;
    };
    /**
     * Creates RGB values
     *
     * @param range Max RGB value
     * @returns The RGB values as an array
     */
    hsvColor.prototype.toRGBValues = function (range) {
        if (range === void 0) { range = 255; }
        var r, g, b;
        var i = Math.floor(this.h * 6);
        var f = this.h * 6 - i;
        var p = this.v * (1 - this.s);
        var q = this.v * (1 - f * this.s);
        var t = this.v * (1 - (1 - f) * this.s);
        switch (i % 6) {
            case 0:
                r = this.v, g = t, b = p;
                break;
            case 1:
                r = q, g = this.v, b = p;
                break;
            case 2:
                r = p, g = this.v, b = t;
                break;
            case 3:
                r = p, g = q, b = this.v;
                break;
            case 4:
                r = t, g = p, b = this.v;
                break;
            case 5:
                r = this.v, g = p, b = q;
                break;
            default:
                r = 0;
                g = 0;
                b = 0;
        }
        return [range * r, range * g, range * b];
    };
    /**
     * Creates an hsvColor object from an htmlColor object.
     *
     * @param color The htmlColor object.
     * @returns The hsvColor object.
     */
    hsvColor.fromHtmlColor = function (color) {
        var r = color.r;
        var g = color.g;
        var b = color.b;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var d = max - min;
        var h = 0;
        var s = (max === 0 ? 0 : d / max);
        var v = max / 255;
        switch (max) {
            case min:
                h = 0;
                break;
            case r:
                h = (g - b) + d * (g < b ? 6 : 0);
                h /= 6 * d;
                break;
            case g:
                h = (b - r) + d * 2;
                h /= 6 * d;
                break;
            case b:
                h = (r - g) + d * 4;
                h /= 6 * d;
                break;
        }
        return new hsvColor([h, s, v]);
    };
    /**
     * Creates an hsvColor object from a glColor object.
     *
     * @param color The glColor object.
     * @returns The hsvColor object.
     */
    hsvColor.fromGlColor = function (color) {
        return hsvColor.fromHtmlColor(color.toHtmlColor());
    };
    /**
     * Creates a glColor object from this object.
     *
     * @returns The glColor object.
     */
    hsvColor.prototype.toGlColor = function () {
        return new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"](this.toRGBValues(1));
    };
    /**
     * Creates an htmlColor object from this object.
     *
     * @returns The glColor object.
     */
    hsvColor.prototype.toHtmlColor = function () {
        return this.toGlColor().toHtmlColor();
    };
    return hsvColor;
}());



/***/ }),

/***/ "./src/Util/htmlColor.ts":
/*!*******************************!*\
  !*** ./src/Util/htmlColor.ts ***!
  \*******************************/
/*! exports provided: htmlColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlColor", function() { return htmlColor; });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ "./src/Util/Color.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gl/glColor */ "./src/gl/glColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Color class that requires RGB values to be between 0 and 255
 */
var htmlColor = /** @class */ (function (_super) {
    __extends(htmlColor, _super);
    /**
     * @param color An RGB color array
     */
    function htmlColor(color) {
        var _this = this;
        if (color.length != 3) {
            throw new Error('Invalid color array length (expected 3 elements)');
        }
        if (color[0] < 0 || color[0] > 255) {
            throw new Error('Invalid color \'r\' value (expected [0-255])');
        }
        if (color[1] < 0 || color[1] > 255) {
            throw new Error('Invalid color \'g\' value (expected [0-255])');
        }
        if (color[2] < 0 || color[2] > 255) {
            throw new Error('Invalid color \'b\' value (expected [0-255])');
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    /**
     * Converts a value to a hex string
     *
     * @param c The numeric value
     * @returns The hex string
     */
    htmlColor.prototype.componentToHex = function (c) {
        var hex = c.toString(16);
        return hex.length == 1 ? '0' + hex : hex;
    };
    /**
     * Converts this object to a hex string (e.g. #0f0f0f).
     *
     * @returns A hex string.
     */
    htmlColor.prototype.toHex = function () {
        var rHex = this.componentToHex(this.r);
        var gHex = this.componentToHex(this.g);
        var bHex = this.componentToHex(this.b);
        return '#' + rHex + gHex + bHex;
    };
    /**
     * Converts this object to a css string (e.g. 'rgb(128,228,32)').
     *
     * @returns A css string.
     */
    htmlColor.prototype.toCss = function () {
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["toCss"])(this.r, this.g, this.b);
    };
    /**
     * Converts a css style string (e.g. 'rgb(24,36,83)') to a color
     *
     * @param css The css string.
     * @returns The color.
     */
    htmlColor.fromCss = function (css) {
        var regex = /\d+/g;
        var vals = css.match(regex).slice(0, 3);
        return new htmlColor([parseInt(vals[0]), parseInt(vals[1]), parseInt(vals[2])]);
    };
    /**
     * Creates an htmlColor object from a hex string
     *
     * @param hex The hex string
     * @returns The htmlColor object
     */
    htmlColor.fromHex = function (hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (result) {
            var r = parseInt(result[1], 16);
            var g = parseInt(result[2], 16);
            var b = parseInt(result[3], 16);
            return new htmlColor([r, g, b]);
        }
        else {
            return new htmlColor([0, 0, 0]);
        }
    };
    /**
     * Creates an htmlColor object using values in a Color object.
     *
     * @param color A generic Color object.
     */
    htmlColor.fromColor = function (color) {
        var r = htmlColor.clamp(color.r);
        var g = htmlColor.clamp(color.g);
        var b = htmlColor.clamp(color.b);
        return new htmlColor([r, g, b]);
    };
    /**
     * Rounds a number to a whole number and clamps it between 0 and 255.
     *
     * @param val The value.
     * @returns The rounded & clamped value
     */
    htmlColor.clamp = function (val) {
        val = Math.round(val);
        if (val < 0) {
            return 0;
        }
        else if (val > 255) {
            return 255;
        }
        else {
            return val;
        }
    };
    /**
     * Converts this color to an equivalent gray-scale color
     *
     * @returns The gray-scale color.
     */
    htmlColor.prototype.toGray = function () {
        var rgb = Math.round((this.r + this.g + this.b) / 3);
        return new htmlColor([rgb, rgb, rgb]);
    };
    /**
     * Converts this object to a WebGL color object (0-1 based)
     *
     * @returns A glColor object.
     */
    htmlColor.prototype.toGlColor = function () {
        return new _gl_glColor__WEBPACK_IMPORTED_MODULE_2__["glColor3"]([this.r / 255, this.g / 255, this.b / 255]);
    };
    htmlColor.white = new htmlColor([255, 255, 255]);
    htmlColor.black = new htmlColor([0, 0, 0]);
    htmlColor.red = new htmlColor([255, 0, 0]);
    htmlColor.green = new htmlColor([0, 255, 0]);
    htmlColor.blue = new htmlColor([0, 0, 255]);
    htmlColor.orange = new htmlColor([255, 165, 0]);
    return htmlColor;
}(_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));



/***/ }),

/***/ "./src/Util/htmlColorWithAlpha.ts":
/*!****************************************!*\
  !*** ./src/Util/htmlColorWithAlpha.ts ***!
  \****************************************/
/*! exports provided: htmlColorWithAlpha */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlColorWithAlpha", function() { return htmlColorWithAlpha; });
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Globals */ "./src/Util/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * An html color with a transparency value
 */
var htmlColorWithAlpha = /** @class */ (function (_super) {
    __extends(htmlColorWithAlpha, _super);
    /**
     * @param color An RGBA color array
     */
    function htmlColorWithAlpha(color) {
        var _this = _super.call(this, [color[0], color[1], color[2]]) || this;
        /** The transparency (alpha) value */
        _this.a = 255;
        if (color.length != 4) {
            throw new Error('Invalid color array length (expected 4 elements)');
        }
        if (color[4] < 0 || color[4] > 255) {
            throw new Error('Invalid color \'a\' value (expected [0-255])');
        }
        _this.a = color[3];
        return _this;
    }
    /**
     * Converts this object to a css string (e.g. 'rgb(128,228,32,255)').
     *
     * @returns A css string.
     */
    htmlColorWithAlpha.prototype.toCss = function () {
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["toCss"])(this.r, this.g, this.b, this.a);
    };
    htmlColorWithAlpha.transparent = new htmlColorWithAlpha([0, 0, 0, 0]);
    return htmlColorWithAlpha;
}(_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]));



/***/ }),

/***/ "./src/Util3D/BoundingBox.ts":
/*!***********************************!*\
  !*** ./src/Util3D/BoundingBox.ts ***!
  \***********************************/
/*! exports provided: BoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingBox", function() { return BoundingBox; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");

var BoundingBox = /** @class */ (function () {
    function BoundingBox(min, max) {
        if (min === void 0) { min = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE]); }
        if (max === void 0) { max = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]); }
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(BoundingBox.prototype, "width", {
        get: function () {
            return this.max.x - this.min.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "height", {
        get: function () {
            return this.max.y - this.min.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "depth", {
        get: function () {
            return this.max.z - this.min.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "diagonal", {
        get: function () {
            var w = this.width;
            var h = this.height;
            var d = this.depth;
            return Math.sqrt(w * w + h * h + d * d);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "center", {
        get: function () {
            return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
                (this.min.x + this.max.x) / 2,
                (this.min.y + this.max.y) / 2,
                (this.min.z + this.max.z) / 2,
            ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "corners", {
        get: function () {
            var corners = [];
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.min.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.min.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.max.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.max.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.min.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.min.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.max.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.max.y, this.max.z]));
            return corners;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox, "infinite", {
        get: function () {
            var MAX = Number.POSITIVE_INFINITY;
            var MIN = Number.NEGATIVE_INFINITY;
            return new BoundingBox(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MIN, MIN, MIN]), new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MAX, MAX, MAX]));
        },
        enumerable: false,
        configurable: true
    });
    BoundingBox.prototype.inside = function (vec) {
        if (vec.x >= this.min.x && vec.x <= this.max.x &&
            vec.y >= this.min.y && vec.y <= this.max.y &&
            vec.z >= this.min.z && vec.z <= this.max.z) {
            return true;
        }
        else {
            return false;
        }
    };
    BoundingBox.prototype.toString = function (digits) {
        return '[' + this.min.toString(digits) + ']' +
            '[' + this.max.toString(digits) + ']';
    };
    BoundingBox.prototype.update = function (v) {
        if (isNaN(v.x) || isNaN(v.y) || isNaN(v.z)) {
            //console.log('----------------------------------------------NaN');
            return;
        }
        this.min.x = Math.min(this.min.x, v.x);
        this.min.y = Math.min(this.min.y, v.y);
        this.min.z = Math.min(this.min.z, v.z);
        this.max.x = Math.max(this.max.x, v.x);
        this.max.y = Math.max(this.max.y, v.y);
        this.max.z = Math.max(this.max.z, v.z);
    };
    BoundingBox.prototype.merge = function (other) {
        this.min.x = Math.min(this.min.x, other.min.x);
        this.min.y = Math.min(this.min.y, other.min.y);
        this.min.z = Math.min(this.min.z, other.min.z);
        this.max.x = Math.max(this.max.x, other.max.x);
        this.max.y = Math.max(this.max.y, other.max.y);
        this.max.z = Math.max(this.max.z, other.max.z);
    };
    BoundingBox.prototype.multM = function (mat) {
        var ret = new BoundingBox();
        var v1 = mat.multV(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"]([this.min.x, this.min.y, this.min.z, 1]));
        var v2 = mat.multV(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"]([this.max.x, this.max.y, this.max.z, 1]));
        ret.min.x = Math.min(v1.x, v2.x);
        ret.min.y = Math.min(v1.y, v2.y);
        ret.min.z = Math.min(v1.z, v2.z);
        ret.max.x = Math.max(v1.x, v2.x);
        ret.max.y = Math.max(v1.y, v2.y);
        ret.max.z = Math.max(v1.z, v2.z);
        return ret;
    };
    return BoundingBox;
}());



/***/ }),

/***/ "./src/Util3D/BoundingPts.ts":
/*!***********************************!*\
  !*** ./src/Util3D/BoundingPts.ts ***!
  \***********************************/
/*! exports provided: BoundingPts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingPts", function() { return BoundingPts; });
/**
 * A set of points used to define the bounding edges of an object. All points are
 * enclosed in the object
 */
var BoundingPts = /** @class */ (function () {
    function BoundingPts(pts) {
        this.pts = pts;
    }
    BoundingPts.prototype.get = function (i) {
        return this.pts[i];
    };
    BoundingPts.prototype.distToPoint = function (pt) {
        var ret = {
            min: Number.MAX_VALUE,
            max: -Number.MAX_VALUE,
        };
        this.pts.forEach(function (pt2) {
            var x = pt2.x - pt.x;
            var y = pt2.y - pt.y;
            var z = pt2.z - pt.z;
            var d = x * x + y * y + z * z;
            ret.min = Math.min(d, ret.min);
            ret.max = Math.max(d, ret.max);
        });
        // don't bother getting the square root of every calculation, just the min and max
        ret.min = Math.sqrt(ret.min);
        ret.max = Math.sqrt(ret.max);
        return ret;
    };
    BoundingPts.prototype.distToPlane = function (plane) {
        var ret = {
            min: Number.MAX_VALUE,
            max: -Number.MAX_VALUE,
        };
        this.pts.forEach(function (pt) {
            var d = plane.distToPt(pt);
            ret.min = Math.min(d, ret.min);
            ret.max = Math.max(d, ret.max);
        });
        return ret;
    };
    return BoundingPts;
}());



/***/ }),

/***/ "./src/Util3D/IndexedTriangle.ts":
/*!***************************************!*\
  !*** ./src/Util3D/IndexedTriangle.ts ***!
  \***************************************/
/*! exports provided: IndexedTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedTriangle", function() { return IndexedTriangle; });
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/Util3D/IndexedVec3.ts");

/**
 * Minimalist wrapper around a WebGL triangle element
 */
var IndexedTriangle = /** @class */ (function () {
    function IndexedTriangle(vertices, normals, i1, i2, i3) {
        this.v1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i1);
        this.v2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i2);
        this.v3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i3);
        this.n1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i1);
        this.n2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i2);
        this.n3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i3);
        this.i1 = i1;
        this.i2 = i2;
        this.i3 = i3;
    }
    Object.defineProperty(IndexedTriangle.prototype, "minX", {
        get: function () {
            return Math.min(this.v1.x, this.v2.x, this.v3.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "minY", {
        get: function () {
            return Math.min(this.v1.y, this.v2.y, this.v3.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "minZ", {
        get: function () {
            return Math.min(this.v1.z, this.v2.z, this.v3.z);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxX", {
        get: function () {
            return Math.max(this.v1.x, this.v2.x, this.v3.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxY", {
        get: function () {
            return Math.max(this.v1.y, this.v2.y, this.v3.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxZ", {
        get: function () {
            return Math.max(this.v1.z, this.v2.z, this.v3.z);
        },
        enumerable: false,
        configurable: true
    });
    IndexedTriangle.prototype.computeNormal = function () {
        var v1 = this.v1.toVec3();
        var v2 = this.v2.toVec3();
        var v3 = this.v3.toVec3();
        var a = v2.subtract(v1);
        var b = v3.subtract(v2);
        return a.cross(b).normalize();
    };
    return IndexedTriangle;
}());



/***/ }),

/***/ "./src/Util3D/IndexedVec3.ts":
/*!***********************************!*\
  !*** ./src/Util3D/IndexedVec3.ts ***!
  \***********************************/
/*! exports provided: IndexedVec3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedVec3", function() { return IndexedVec3; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");

var IndexedVec3 = /** @class */ (function () {
    function IndexedVec3(values, index) {
        this.values = values;
        this.index = index;
    }
    Object.defineProperty(IndexedVec3.prototype, "x", {
        get: function () {
            return this.values[3 * this.index + 0];
        },
        set: function (val) {
            this.values[3 * this.index + 0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedVec3.prototype, "y", {
        get: function () {
            return this.values[3 * this.index + 1];
        },
        set: function (val) {
            this.values[3 * this.index + 1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedVec3.prototype, "z", {
        get: function () {
            return this.values[3 * this.index + 2];
        },
        set: function (val) {
            this.values[3 * this.index + 2] = val;
        },
        enumerable: false,
        configurable: true
    });
    IndexedVec3.prototype.toVec3 = function () {
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.x, this.y, this.z]);
    };
    return IndexedVec3;
}());



/***/ }),

/***/ "./src/Util3D/Mat.ts":
/*!***************************!*\
  !*** ./src/Util3D/Mat.ts ***!
  \***************************/
/*! exports provided: Mat4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mat4", function() { return Mat4; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

/**
 * An x-y-z-w matrix for use in WebGL applications.
 */
var Mat4 = /** @class */ (function () {
    /**
     * @param values If supplied, the initial matrix values. If not supplied, the matrix is
     * initialized as an identity matrix.
     */
    function Mat4(values) {
        if (values) {
            this.values = __spreadArrays(values);
        }
        else {
            this.values = [
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ];
        }
    }
    Object.defineProperty(Mat4.prototype, "scaleFactors", {
        get: function () {
            var sX = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            var sY = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            var sZ = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([sX, sY, sZ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mat4, "identity", {
        /**
         * Get's an identity matrix. Same as creating a new matrix, but syntactically
         * shows what is happening.
         *
         * @returns A new idenity matrix.
         */
        get: function () {
            return new Mat4();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mat4, "ortho", {
        /**
         * Creates an orthographic matrix in the WebGL coordinate system (positive z towards you)
         *
         * @return A new orthographic matrix
         */
        get: function () {
            return Mat4.makeOrtho(-1, 1, -1, 1, 1, -1);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the matrix.
     *
     * @returns A copy of the matrix.
     */
    Mat4.prototype.clone = function () {
        return new Mat4(this.values);
    };
    /**
     * Gets a value in the matrix.
     *
     * @param row The row index.
     * @param col The column index.
     * @returns The matrix value.
     */
    Mat4.prototype.get = function (row, col) {
        return this.values[4 * row + col];
    };
    /**
     * Sets a value in the matrix.
     *
     * @param row The row index.
     * @param col The column index.
     * @param val The value.
     */
    Mat4.prototype.set = function (row, col, val) {
        this.values[4 * row + col] = val;
    };
    /**
     * Multiplies this matrix against a vector and returns the result.
     *
     * @param vec The vector.
     * @return The result of the multiplication.
     */
    Mat4.prototype.multV = function (vec) {
        var vals = [];
        for (var row = 0; row < 4; row++) {
            var sum = 0;
            for (var col = 0; col < 4; col++) {
                sum += this.values[row * 4 + col] * vec.values[col];
            }
            vals.push(sum);
        }
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"](vals);
    };
    /**
     * Transforms a 3d vec by this matrix.
     *
     * @param vec A 3d vec.
     * @param w The value to use for w. 0 = ignore translation. 1 = include.
     * @returns The new 3d vec.
     */
    Mat4.prototype.multVec3 = function (vec, w) {
        if (w === void 0) { w = 1; }
        return this.multV(vec.toVec4(w)).xyz;
    };
    /**
     * Multiplies this matrix against another matrix and returns the result.
     *
     * @param other The matrix.
     * @return The result of the multiplication.
     */
    Mat4.prototype.multM = function (other) {
        var result = new Mat4();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                var sum = 0;
                for (var i = 0; i < 4; i++) {
                    sum += this.get(row, i) * other.get(i, col);
                }
                result.set(row, col, sum);
            }
        }
        return result;
    };
    /**
     * Inverts this matrix and returns the result.
     *
     * @returns The inverse of this.
     */
    Mat4.prototype.inverse = function () {
        var result = new Mat4();
        var a00 = this.values[0], a01 = this.values[1], a02 = this.values[2], a03 = this.values[3];
        var a10 = this.values[4], a11 = this.values[5], a12 = this.values[6], a13 = this.values[7];
        var a20 = this.values[8], a21 = this.values[9], a22 = this.values[10], a23 = this.values[11];
        var a30 = this.values[12], a31 = this.values[13], a32 = this.values[14], a33 = this.values[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32;
        // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        result.values[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        result.values[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        result.values[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        result.values[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        result.values[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        result.values[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        result.values[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        result.values[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        result.values[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        result.values[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        result.values[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        result.values[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        result.values[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        result.values[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        result.values[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        result.values[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return result;
    };
    /**
     * Transposes this matrix and returns the result as a new matrix.
     *
     * @returns The transposed matrix.
     */
    Mat4.prototype.transpose = function () {
        var result = new Mat4();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                result.set(row, col, this.get(col, row));
            }
        }
        return result;
    };
    /**
     * Creates a matrix that contains a scale operation.
     *
     * @param scale The scale factor
     * @returns The transformation matrix.
     */
    Mat4.fromScale = function (scale) {
        return new Mat4([
            scale, 0, 0, 0,
            0, scale, 0, 0,
            0, 0, scale, 0,
            0, 0, 0, 1
        ]);
    };
    /**
     * Creates a matrix that contains a translation operation.
     *
     * @param vec The translations.
     * @returns The transformation matrix.
     */
    Mat4.fromTranslation = function (v) {
        return new Mat4([
            1, 0, 0, v.x,
            0, 1, 0, v.y,
            0, 0, 1, v.z,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotX = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            1, 0, 0, 0,
            0, c, s, 0,
            0, -s, c, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotY = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            c, 0, -s, 0,
            0, 1, 0, 0,
            s, 0, c, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotZ = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            c, s, 0, 0,
            -s, c, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.prototype.rotX = function (angle) {
        this.values = Mat4.fromRotX(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.rotY = function (angle) {
        this.values = Mat4.fromRotY(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.rotZ = function (angle) {
        this.values = Mat4.fromRotZ(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.preRotX = function (angle) {
        this.values = this.multM(Mat4.fromRotX(angle)).values;
        return this;
    };
    Mat4.prototype.preRotY = function (angle) {
        this.values = this.multM(Mat4.fromRotY(angle)).values;
        return this;
    };
    Mat4.prototype.preRotZ = function (angle) {
        this.values = this.multM(Mat4.fromRotZ(angle)).values;
        return this;
    };
    Mat4.prototype.translate = function (offset) {
        this.values = Mat4.fromTranslation(offset).multM(this).values;
        return this;
    };
    Mat4.prototype.scale = function (scale) {
        this.values = Mat4.fromScale(scale).multM(this).values;
        return this;
    };
    /**
     * Creates a viewing matrix. See gluLookAt.
     *
     * @param eye The eye position.
     * @param center The point of interest.
     * @param up The up vector.
     * @returns The viewing matrix.
     */
    Mat4.makeLookAt = function (eye, center, up) {
        var a = eye.subtract(center).normalize();
        var b = up.cross(a).normalize();
        var c = a.cross(b).normalize();
        var m = new Mat4([
            b.x, b.y, b.z, 0,
            c.x, c.y, c.z, 0,
            a.x, a.y, a.z, 0,
            0, 0, 0, 1
        ]);
        var t = new Mat4([
            1, 0, 0, -eye.x,
            0, 1, 0, -eye.y,
            0, 0, 1, -eye.z,
            0, 0, 0, 1
        ]);
        var result = m.multM(t);
        return result;
    };
    /**
     * Creates a perspective matrix. See gluPerspective.
     *
     * @param fovy Field of view (in degrees).
     * @param aspect View aspect ratio.
     * @param znear Near clipping plane.
     * @param zfar Far clipping plane.
     */
    Mat4.makePerspective = function (fovy, aspect, znear, zfar) {
        var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
        var ymin = -ymax;
        var xmin = ymin * aspect;
        var xmax = ymax * aspect;
        return Mat4.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
    };
    /**
     * Creates a perspective matrix. See gluFrustum.
     *
     * @param left The left clipping plane.
     * @param right The right clipping plane.
     * @param bottom The bottom clipping plane.
     * @param top The top clipping plane.
     * @param znear The near clipping plane.
     * @param zfar The far clipping plane.
     * @returns the perspective matrix.
     */
    Mat4.makeFrustum = function (left, right, bottom, top, znear, zfar) {
        var X = 2 * znear / (right - left);
        var Y = 2 * znear / (top - bottom);
        var A = (right + left) / (right - left);
        var B = (top + bottom) / (top - bottom);
        var C = -(zfar + znear) / (zfar - znear);
        var D = -2 * zfar * znear / (zfar - znear);
        return new Mat4([
            X, 0, A, 0,
            0, Y, B, 0,
            0, 0, C, D,
            0, 0, -1, 0
        ]);
    };
    /**
     * Creates a perspective matrix. See gluOrtho.
     *
     * @param left The left clipping plane.
     * @param right The right clipping plane.
     * @param bottom The bottom clipping plane.
     * @param top The top clipping plane.
     * @param znear The near clipping plane.
     * @param zfar The far clipping plane.
     * @returns the perspective matrix.
     */
    Mat4.makeOrtho = function (left, right, bottom, top, near, far) {
        return new Mat4([
            2 / (right - left), 0, 0, (right + left) / (right - left),
            0, 2 / (top - bottom), 0, (top + bottom) / (top - bottom),
            0, 0, 2 / (far - near), (far + near) / (far - near),
            0, 0, 0, 1
        ]);
    };
    Mat4.prototype.log = function (msg, digits) {
        if (digits === void 0) { digits = 2; }
        console.log(msg);
        for (var r = 0; r < 4; r++) {
            var line = '';
            for (var c = 0; c < 4; c++) {
                line += this.get(r, c).toFixed(digits) + ' ';
            }
            console.log(line);
        }
        console.log();
    };
    return Mat4;
}());



/***/ }),

/***/ "./src/Util3D/SphericalCoord.ts":
/*!**************************************!*\
  !*** ./src/Util3D/SphericalCoord.ts ***!
  \**************************************/
/*! exports provided: SphericalCoord */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalCoord", function() { return SphericalCoord; });
/**
 * Spherical coordinates based on the WebGL viewing system: x=left-right, y=up-down, z=near-far
 */
var SphericalCoord = /** @class */ (function () {
    /**
     * @param radius
     * @param elevationAngle
     * @param rotationAngle
     */
    function SphericalCoord(radius, elevationAngle, rotationAngle) {
        /**
         * The distance from the origin to the point
         */
        this.radius = 0;
        /**
         * The elevation from the floor to the point. 0 and 180 are on the
         * floor. 90 points up.
         */
        this.elevationAngle = 0;
        /**
         * The angle, when looking down from the top, to the point. 0 points right.
         */
        this.rotationAngle = 0;
        this.radius = radius;
        this.elevationAngle = elevationAngle;
        this.rotationAngle = rotationAngle;
    }
    /**
     * Creates a spherical coordinate from a cartesian point
     *
     * @param pos The cartesian point.
     * @returns The spherical coordinate.
     */
    SphericalCoord.fromXYZ = function (pos) {
        var x = pos[0];
        var y = pos[1];
        var z = pos[2];
        var radius = Math.sqrt(x * x + y * y + z * z);
        var rotationAngle = (180 / Math.PI) * Math.atan2(z, x);
        var elevationAngle = (180 / Math.PI) * Math.asin(y / radius);
        return new SphericalCoord(radius, elevationAngle, rotationAngle);
    };
    /**
     * Converts this spherical coordinate to a cartesian coordinate.
     *
     * @returns The cartesian coordinate.
     */
    SphericalCoord.prototype.toXYZ = function () {
        var floorRadius = this.radius * Math.cos((Math.PI / 180) * this.elevationAngle);
        var x = floorRadius * Math.cos((Math.PI / 180) * this.rotationAngle);
        var y = this.radius * Math.sin((Math.PI / 180) * this.elevationAngle);
        var z = floorRadius * Math.sin((Math.PI / 180) * this.rotationAngle);
        return [x, y, z];
    };
    return SphericalCoord;
}());



/***/ }),

/***/ "./src/Util3D/TriangleObj.ts":
/*!***********************************!*\
  !*** ./src/Util3D/TriangleObj.ts ***!
  \***********************************/
/*! exports provided: NormalType, TriangleObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalType", function() { return NormalType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObj", function() { return TriangleObj; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _BoundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BoundingBox */ "./src/Util3D/BoundingBox.ts");
/* harmony import */ var _BoundingPts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BoundingPts */ "./src/Util3D/BoundingPts.ts");
/* harmony import */ var _IndexedTriangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IndexedTriangle */ "./src/Util3D/IndexedTriangle.ts");
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/Util3D/IndexedVec3.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Util/Profiler */ "./src/Util/Profiler.ts");
/* harmony import */ var _Util_BlobFile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Util/BlobFile */ "./src/Util/BlobFile.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */








var NormalType;
(function (NormalType) {
    NormalType[NormalType["Smooth"] = 0] = "Smooth";
    NormalType[NormalType["Flat"] = 1] = "Flat";
})(NormalType || (NormalType = {}));
/**
 * Base class for representing an object from a bunch of triangles.
 */
var TriangleObj = /** @class */ (function () {
    function TriangleObj(name) {
        this.vertices = [];
        this.normals = [];
        this.indices = [];
        this.box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"]();
        this.name = name;
    }
    Object.defineProperty(TriangleObj.prototype, "numVertices", {
        get: function () {
            return this.vertices.length / 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "numTriangles", {
        get: function () {
            return this.indices.length / 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "width", {
        get: function () {
            return this.box.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "height", {
        get: function () {
            return this.box.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "depth", {
        get: function () {
            return this.box.depth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "diagonal", {
        get: function () {
            return this.box.diagonal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "center", {
        get: function () {
            return this.box.center;
        },
        enumerable: false,
        configurable: true
    });
    TriangleObj.prototype.getTriangle = function (index) {
        var i1 = this.indices[3 * index + 0];
        var i2 = this.indices[3 * index + 1];
        var i3 = this.indices[3 * index + 2];
        return new _IndexedTriangle__WEBPACK_IMPORTED_MODULE_3__["IndexedTriangle"](this.vertices, this.normals, i1, i2, i3);
    };
    TriangleObj.prototype.pushQuad = function (v1, v2, v3, v4) {
        this.pushTriangle(v1, v2, v3);
        this.pushTriangle(v2, v4, v3);
    };
    TriangleObj.prototype.pushTriangle = function (v1, v2, v3) {
        var _a, _b, _c;
        // add indices
        var i1 = this.numVertices;
        var i2 = i1 + 1;
        var i3 = i1 + 2;
        this.indices.push(i1, i2, i3);
        // add vertices
        this.vertices.push(v1.x, v1.y, v1.z, v2.x, v2.y, v2.z, v3.x, v3.y, v3.z);
        this.box.update(v1);
        this.box.update(v2);
        this.box.update(v3);
        // add normals
        var tri = new _IndexedTriangle__WEBPACK_IMPORTED_MODULE_3__["IndexedTriangle"](this.vertices, this.normals, i1, i2, i3);
        var normal = tri.computeNormal();
        (_a = this.normals).push.apply(_a, normal.values);
        (_b = this.normals).push.apply(_b, normal.values);
        (_c = this.normals).push.apply(_c, normal.values);
    };
    TriangleObj.prototype.computeNormals = function (type) {
        var _a;
        if (type === NormalType.Smooth) {
            var multiNormVertices = [];
            for (var i = 0; i < this.numVertices; i++) {
                multiNormVertices.push(new MultiNormVertex());
            }
            // store the normals with each vertex - we'll later average these
            for (var i = 0; i < this.numTriangles; i++) {
                var tri = this.getTriangle(i);
                var n = tri.computeNormal();
                multiNormVertices[tri.i1].push(n);
                multiNormVertices[tri.i2].push(n);
                multiNormVertices[tri.i3].push(n);
            }
            // populate the normals array
            this.normals = [];
            for (var i = 0; i < multiNormVertices.length; i++) {
                (_a = this.normals).push.apply(_a, multiNormVertices[i].normal.values);
            }
        }
        else {
            // to go this way we need to have a unique vector and normal for each triangle
            // corner. Blow away the old stuff and rebuild
            var oldIndices = this.indices;
            var oldVertices = this.vertices;
            // reset everything
            this.vertices = [];
            this.normals = [];
            this.indices = [];
            // rebuild
            for (var i = 0; i < oldIndices.length / 3; i++) {
                var v1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 0]);
                var v2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 1]);
                var v3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 2]);
                this.pushTriangle(v1, v2, v3);
            }
        }
    };
    TriangleObj.prototype.x = function (i) {
        return this.vertices[3 * i + 0];
    };
    TriangleObj.prototype.y = function (i) {
        return this.vertices[3 * i + 1];
    };
    TriangleObj.prototype.z = function (i) {
        return this.vertices[3 * i + 2];
    };
    TriangleObj.prototype.findBounds = function () {
        console.log('finding bounds');
        var box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"]();
        for (var i = 0; i < this.numTriangles; i++) {
            var tri = this.getTriangle(i);
            box.update(tri.v1);
            box.update(tri.v2);
            box.update(tri.v3);
        }
        this.box = box;
    };
    /**
     * Breaks the object into evenly spaced volumes. The number of volumes is automatically
     * determined based on the number of triangles.
     */
    TriangleObj.prototype.getBoundingPts = function () {
        if (this.boundingPts) {
            return this.boundingPts;
        }
        var numSteps = 15;
        var boxes = [];
        for (var i = 0; i < Math.pow(numSteps, 3); i++) {
            boxes.push(new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"]());
        }
        var v = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]();
        for (var i = 0; i < this.numVertices; i++) {
            v.x = this.vertices[3 * i + 0];
            v.y = this.vertices[3 * i + 1];
            v.z = this.vertices[3 * i + 2];
            var x = Math.floor(numSteps * (v.x - this.box.min.x) / (this.box.width));
            var y = Math.floor(numSteps * (v.y - this.box.min.y) / (this.box.height));
            var z = Math.floor(numSteps * (v.z - this.box.min.z) / (this.box.depth));
            x = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(x, 0, numSteps - 1);
            y = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(y, 0, numSteps - 1);
            z = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(z, 0, numSteps - 1);
            var index = x + y * numSteps + z * numSteps * numSteps;
            boxes[index].update(v);
        }
        var boxMap = new Map();
        var boxCount = 0;
        for (var x = 0; x < numSteps; x++) {
            for (var y = 0; y < numSteps; y++) {
                var first = void 0;
                var last = void 0;
                for (var z = 0; z < numSteps; z++) {
                    var index = x + y * numSteps + z * numSteps * numSteps;
                    var box = boxes[index];
                    if (box.min.x === Number.MAX_VALUE) {
                        continue;
                    }
                    boxCount++;
                    if (!first) {
                        first = { index: index, box: box };
                    }
                    last = { index: index, box: box };
                }
                if (first && boxMap.has(first.index) === false) {
                    boxMap.set(first.index, first.box);
                }
                if (last && boxMap.has(last.index) === false) {
                    boxMap.set(last.index, last.box);
                }
            }
        }
        var pts = [];
        boxes.forEach(function (box) {
            if (box.min.x !== Number.MAX_VALUE) {
                pts.push.apply(pts, box.corners);
            }
        });
        this.boundingPts = new _BoundingPts__WEBPACK_IMPORTED_MODULE_2__["BoundingPts"](pts);
        return this.boundingPts;
    };
    /**
     * Creates a string in the for .OBJ file format
     *
     * @returns the string
     */
    TriangleObj.prototype.toObjString = function (digits) {
        if (digits === void 0) { digits = 8; }
        var str = '';
        str += '# Vertices: ' + this.vertices.length + '\n';
        str += '# Triangles: ' + this.numTriangles + '\n';
        str += '\n';
        for (var i = 0; i < this.numVertices; i++) {
            var v = this.vertices;
            str += 'v ' + v[3 * i + 0].toPrecision(digits) + ' ' + v[3 * i + 1].toPrecision(digits) + ' ' + v[3 * i + 2].toPrecision(digits) + '\n';
        }
        for (var i = 0; i < this.numVertices; i++) {
            var n = this.normals;
            str += 'vn ' + n[3 * i + 0].toPrecision(digits) + ' ' + n[3 * i + 1].toPrecision(digits) + ' ' + n[3 * i + 2].toPrecision(digits) + '\n';
        }
        for (var i = 0; i < this.numTriangles; i++) {
            var t = this.getTriangle(i);
            str += 'f ' +
                (t.i1 + 1) + '//' + (t.i1 + 1) + ' ' +
                (t.i2 + 1) + '//' + (t.i2 + 1) + ' ' +
                (t.i3 + 1) + '//' + (t.i3 + 1) + '\n';
        }
        return str;
    };
    TriangleObj.prototype.optimize = function (normalType) {
        if (normalType === NormalType.Smooth) {
            var vertexToIndexMap = new Map();
            var indexToIndexMap = new Map();
            // first generate a unique set of vertices
            var uniqueVertices = [];
            for (var i = 0; i < this.numVertices; i++) {
                var oldVertex = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](this.vertices, i);
                var key = this.vertices[3 * i + 0].toFixed(4) + ' ' + this.vertices[3 * i + 1].toFixed(4) + ' ' + this.vertices[3 * i + 2].toFixed(4);
                var oldIndex = i + 1;
                var newIndex = void 0;
                if (vertexToIndexMap.has(key)) {
                    // just map the old index to the existing entry
                    newIndex = vertexToIndexMap.get(key);
                }
                else {
                    // create a new entry
                    newIndex = uniqueVertices.length + 1;
                    vertexToIndexMap.set(key, newIndex);
                    uniqueVertices.push(oldVertex);
                }
                // store the translation
                indexToIndexMap.set(oldIndex, newIndex);
            }
            // reset all the vertices
            this.vertices = [];
            for (var i = 0; i < uniqueVertices.length; i++) {
                this.vertices.push(uniqueVertices[i].x);
                this.vertices.push(uniqueVertices[i].y);
                this.vertices.push(uniqueVertices[i].z);
            }
            // remap all indices
            for (var i = 0; i < this.indices.length; i++) {
                var oldIndex = this.indices[i];
                this.indices[i] = indexToIndexMap.get(oldIndex + 1) - 1;
            }
        }
        else {
            // nothing to do for flat normals. New vertices and normals are created in 
            // computeNormals() below if needed
        }
        this.computeNormals(normalType);
    };
    TriangleObj.prototype.trim = function (box) {
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__["Profiler"]();
        var indices = [];
        for (var i = 0; i < this.numTriangles; i++) {
            var tri = this.getTriangle(i);
            if (box.inside(tri.v1) && box.inside(tri.v2) && box.inside(tri.v3)) {
                indices.push(tri.i1);
                indices.push(tri.i2);
                indices.push(tri.i3);
            }
        }
        console.log('trimmed ' + (this.indices.length - indices.length) + ' triangles');
        this.indices = indices;
        this.findBounds();
        p.log('Trim Complete');
    };
    TriangleObj.prototype.mirror = function (x, add) {
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__["Profiler"]();
        if (add) {
            // duplicate vertices
            var numVertices = this.numVertices;
            for (var i = 0; i < numVertices; i++) {
                this.vertices[3 * i + 0] -= x;
                this.vertices.push(-this.vertices[3 * i + 0]);
                this.vertices.push(this.vertices[3 * i + 1]);
                this.vertices.push(this.vertices[3 * i + 2]);
                this.normals.push(-this.normals[3 * i + 0]);
                this.normals.push(this.normals[3 * i + 1]);
                this.normals.push(this.normals[3 * i + 2]);
            }
            var numIndices = this.indices.length;
            var startIndex = numVertices;
            for (var i = 0; i < numIndices; i++) {
                this.indices.push(startIndex + this.indices[i]);
            }
        }
        else {
            // reflect vertices
            var numVertices = this.numVertices;
            for (var i = 0; i < numVertices; i++) {
                this.vertices[3 * i + 0] = x + (x - this.vertices[3 * i + 0]);
                this.normals[3 * i + 0] = -this.normals[3 * i + 0];
            }
        }
        this.findBounds();
        p.log('Mirror Complete');
    };
    TriangleObj.prototype.reverse = function () {
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__["Profiler"]();
        // reflect vertices
        var x = this.center.x;
        for (var i = 0; i < this.numVertices; i++) {
            this.vertices[3 * i + 0] = x + (x - this.vertices[3 * i + 0]);
            this.normals[3 * i + 0] = -this.normals[3 * i + 0];
        }
        // reorder triangles to preserve front-back facing
        for (var i = 0; i < this.numTriangles; i++) {
            var i1 = this.indices[3 * i + 0];
            var i2 = this.indices[3 * i + 1];
            this.indices[3 * i + 0] = i2;
            this.indices[3 * i + 1] = i1;
        }
        p.log('Reverse Complete');
    };
    TriangleObj.prototype.combine = function (tObj) {
        // save the value for the first index of the combined objects
        var startIndex = this.numVertices;
        // add the other vertices and normals to ours
        for (var i = 0; i < tObj.vertices.length; i++) {
            this.vertices.push(tObj.vertices[i]);
            this.normals.push(tObj.normals[i]);
        }
        // add the other indices, but offset them properly
        for (var i = 0; i < tObj.indices.length; i++) {
            this.indices.push(startIndex + tObj.indices[i]);
        }
        // merge the bounding boxes
        this.box.merge(tObj.box);
    };
    TriangleObj.prototype.toData = function () {
        return {
            source: this.source,
            name: this.name,
            vertices: new Float32Array(this.vertices),
            normals: new Float32Array(this.normals),
            indices: new Int32Array(this.indices),
            boxMin: this.box.min.clone(),
            boxMax: this.box.max.clone(),
        };
    };
    TriangleObj.fromData = function (data) {
        var tObj = new TriangleObj();
        tObj.name = data.name;
        tObj.vertices = Array.from(data.vertices);
        tObj.normals = Array.from(data.normals);
        tObj.indices = Array.from(data.indices);
        tObj.box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"](new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](data.boxMin.values), new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](data.boxMax.values));
        return tObj;
    };
    TriangleObj.prototype.toBlob = function () {
        // create a description
        var info = {
            FileType: 'Binary OBJ',
            Version: '1.0',
            Name: this.name,
            Source: this.source,
        };
        // get the raw data
        var data = this.toData();
        // break it into parts
        var parts = [];
        parts.push(data.vertices);
        parts.push(data.normals);
        parts.push(data.indices);
        parts.push(new Float32Array(data.boxMin.values));
        parts.push(new Float32Array(data.boxMax.values));
        // create the Blob
        return _Util_BlobFile__WEBPACK_IMPORTED_MODULE_7__["BlobFile"].createBlob(info, parts);
    };
    TriangleObj.fromBlob = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TriangleObj.blobToData(blob)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, TriangleObj.fromData(data)];
                }
            });
        });
    };
    TriangleObj.blobToData = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var bFile, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            var _m;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0: return [4 /*yield*/, _Util_BlobFile__WEBPACK_IMPORTED_MODULE_7__["BlobFile"].extract(blob)];
                    case 1:
                        bFile = _o.sent();
                        _m = {
                            name: bFile.info.Name,
                            source: bFile.info.Source
                        };
                        _a = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[0].arrayBuffer()];
                    case 2:
                        _m.vertices = new (_a.apply(Float32Array, [void 0, _o.sent()]))();
                        _b = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[1].arrayBuffer()];
                    case 3:
                        _m.normals = new (_b.apply(Float32Array, [void 0, _o.sent()]))();
                        _c = Int32Array.bind;
                        return [4 /*yield*/, bFile.parts[2].arrayBuffer()];
                    case 4:
                        _m.indices = new (_c.apply(Int32Array, [void 0, _o.sent()]))();
                        _d = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].bind;
                        _f = (_e = Array).from;
                        _g = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[3].arrayBuffer()];
                    case 5:
                        _m.boxMin = new (_d.apply(_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"], [void 0, _f.apply(_e, [new (_g.apply(Float32Array, [void 0, _o.sent()]))()])]))();
                        _h = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].bind;
                        _k = (_j = Array).from;
                        _l = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[4].arrayBuffer()];
                    case 6: return [2 /*return*/, (_m.boxMax = new (_h.apply(_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"], [void 0, _k.apply(_j, [new (_l.apply(Float32Array, [void 0, _o.sent()]))()])]))(),
                            _m)];
                }
            });
        });
    };
    return TriangleObj;
}());

/**
 * Class used to compute normals for vertices that join multiple faces
 */
var MultiNormVertex = /** @class */ (function () {
    function MultiNormVertex() {
        this.normals = [];
    }
    /**
     * Stores a normal for this vertex
     *
     * @param normal Stores a normal for the vertex
     */
    MultiNormVertex.prototype.push = function (normal) {
        this.normals.push(normal);
    };
    Object.defineProperty(MultiNormVertex.prototype, "normal", {
        /**
         * Computes the normal by averaging all the individual normals associated with the vertex
         */
        get: function () {
            var n = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]();
            for (var i = 0; i < this.normals.length; i++) {
                n.x += this.normals[i].x;
                n.y += this.normals[i].y;
                n.z += this.normals[i].z;
            }
            n.x /= this.normals.length;
            n.y /= this.normals.length;
            n.z /= this.normals.length;
            return n;
        },
        enumerable: false,
        configurable: true
    });
    return MultiNormVertex;
}());


/***/ }),

/***/ "./src/Util3D/TriangleObjBuilder.ts":
/*!******************************************!*\
  !*** ./src/Util3D/TriangleObjBuilder.ts ***!
  \******************************************/
/*! exports provided: TriangleObjBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjBuilder", function() { return TriangleObjBuilder; });
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TriangleObjBuilder = /** @class */ (function (_super) {
    __extends(TriangleObjBuilder, _super);
    function TriangleObjBuilder(name) {
        return _super.call(this, name) || this;
    }
    // TODO pass in args for construction
    TriangleObjBuilder.prototype.addArrow = function () {
        var NUM_STEPS = 30;
        var TOTAL_LENGTH = 0.4;
        var ARROW_RADIUS = 0.15;
        var ARROW_LENGTH = 1.5 * ARROW_RADIUS;
        var SHAFT_RADIUS = 0.5 * ARROW_RADIUS;
        var TIP = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        var TIP_BASE = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, ARROW_LENGTH, 0]);
        // build the arrow head
        for (var i = 0; i < NUM_STEPS; i++) {
            var x1 = ARROW_RADIUS * Math.sin(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var y1 = ARROW_LENGTH;
            var z1 = ARROW_RADIUS * Math.cos(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var x2 = ARROW_RADIUS * Math.sin((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var y2 = ARROW_LENGTH;
            var z2 = ARROW_RADIUS * Math.cos((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, y1, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, y2, z2]);
            this.pushTriangle(TIP, p2, p1);
            this.pushTriangle(TIP_BASE, p1, p2);
        }
        // build the arrow shaft
        var END = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, TOTAL_LENGTH, 0]);
        for (var i = 0; i < NUM_STEPS; i++) {
            var x1 = SHAFT_RADIUS * Math.sin(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var z1 = SHAFT_RADIUS * Math.cos(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var x2 = SHAFT_RADIUS * Math.sin((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var z2 = SHAFT_RADIUS * Math.cos((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, ARROW_LENGTH, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, ARROW_LENGTH, z2]);
            var p3 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, TOTAL_LENGTH, z1]);
            var p4 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, TOTAL_LENGTH, z2]);
            this.pushTriangle(p1, p2, p4);
            this.pushTriangle(p1, p4, p3);
            this.pushTriangle(END, p3, p4);
        }
    };
    TriangleObjBuilder.prototype.addSphere = function (numSteps, radius, center) {
        // create an array of vertices
        var vertices = [];
        for (var i = 0; i < numSteps; i++) {
            if (i === 0) {
                vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x, center.y + radius, center.z]));
            }
            else if (i === numSteps - 1) {
                vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x, center.y - radius, center.z]));
            }
            else {
                var y = radius * Math.cos(i / (numSteps - 1) * Math.PI);
                var r = radius * Math.sin(i / (numSteps - 1) * Math.PI);
                var offset = i % 2 ? 0 : ((2 * Math.PI) / numSteps) * 0.5;
                for (var j = 0; j < numSteps; j++) {
                    vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([
                        center.x + r * Math.sin((j / numSteps) * 2 * Math.PI - offset),
                        center.y + y,
                        center.z + r * Math.cos((j / numSteps) * 2 * Math.PI - offset),
                    ]));
                }
            }
        }
        // connect the vertices
        var first = 0;
        var last = vertices.length - 1;
        for (var i = 0; i < numSteps - 1; i++) {
            for (var j = 0; j < numSteps; j++) {
                if (i === 0) {
                    var i1 = first;
                    var i2 = j + 1;
                    var i3 = j === (numSteps - 1) ? 1 : i2 + 1;
                    this.pushTriangle(vertices[i1], vertices[i2], vertices[i3]);
                }
                else if (i === numSteps - 2) {
                    var startIndex = last - numSteps;
                    var i1 = last;
                    var i2 = startIndex + j;
                    var i3 = j === (numSteps - 1) ? startIndex : i2 + 1;
                    this.pushTriangle(vertices[i1], vertices[i3], vertices[i2]);
                }
                else {
                    var startA = 1 + (i - 1) * numSteps;
                    var startB = 1 + i * numSteps;
                    var i1 = startA + j;
                    var i2 = (j === (numSteps - 1)) ? startA : i1 + 1;
                    var i3 = startB + j;
                    var i4 = (j === (numSteps - 1)) ? startB : i3 + 1;
                    if (i % 2) {
                        this.pushTriangle(vertices[i1], vertices[i4], vertices[i2]);
                        this.pushTriangle(vertices[i1], vertices[i3], vertices[i4]);
                    }
                    else {
                        this.pushTriangle(vertices[i1], vertices[i3], vertices[i2]);
                        this.pushTriangle(vertices[i2], vertices[i3], vertices[i4]);
                    }
                }
            }
        }
    };
    TriangleObjBuilder.prototype.addCube = function (size, center) {
        var v1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y - size / 2, center.z - size / 2]);
        var v2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y - size / 2, center.z + size / 2]);
        var v3 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y + size / 2, center.z - size / 2]);
        var v4 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y + size / 2, center.z + size / 2]);
        var v5 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y - size / 2, center.z - size / 2]);
        var v6 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y - size / 2, center.z + size / 2]);
        var v7 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y + size / 2, center.z - size / 2]);
        var v8 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y + size / 2, center.z + size / 2]);
        this.pushQuad(v1, v2, v3, v4);
        this.pushQuad(v5, v7, v6, v8);
        this.pushQuad(v1, v5, v2, v6);
        this.pushQuad(v3, v4, v7, v8);
        this.pushQuad(v1, v3, v5, v7);
        this.pushQuad(v2, v6, v4, v8);
    };
    TriangleObjBuilder.prototype.addDisk = function (numSteps, radius, center) {
        for (var i = 0; i <= numSteps; i++) {
            var x1 = center.x + radius * Math.sin((i / numSteps) * 2 * Math.PI);
            var y1 = center.y;
            var z1 = center.z + radius * Math.cos((i / numSteps) * 2 * Math.PI);
            var x2 = center.x + radius * Math.sin(((i + 1) / numSteps) * 2 * Math.PI);
            var y2 = center.y;
            var z2 = center.z + radius * Math.cos(((i + 1) / numSteps) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, y1, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, y2, z2]);
            this.pushTriangle(center, p1, p2);
        }
    };
    return TriangleObjBuilder;
}(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["TriangleObj"]));



/***/ }),

/***/ "./src/Util3D/TriangleObjFile.ts":
/*!***************************************!*\
  !*** ./src/Util3D/TriangleObjFile.ts ***!
  \***************************************/
/*! exports provided: TriangleObjFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjFile", function() { return TriangleObjFile; });
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _Util_Profiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Util/Profiler */ "./src/Util/Profiler.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Class that loads a .obj file and creates triangles for it
 */
var TriangleObjFile = /** @class */ (function (_super) {
    __extends(TriangleObjFile, _super);
    function TriangleObjFile(name, src, updateStatus) {
        var _this = _super.call(this, name) || this;
        // record the status function. If one is not supplied, create one that does nothing
        if (!updateStatus) {
            updateStatus = function (status) { return; };
        }
        _this.parse(src, updateStatus);
        return _this;
    }
    TriangleObjFile.prototype.parseFace = function (line) {
        var ret = {
            iV: [],
            iN: [],
        };
        var tokens = line.match(/\S+/g);
        var numVals = tokens.length - 1;
        for (var i = 0; i < numVals; i++) {
            var vals = tokens[i + 1].split('/');
            ret.iV.push(parseInt(vals[0]) - 1);
            if (vals.length === 3) {
                ret.iN.push(parseInt(vals[2]) - 1);
            }
        }
        return ret;
    };
    TriangleObjFile.prototype.parse = function (src, updateStatus) {
        updateStatus('Processing');
        var t = Date.now();
        var p2 = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_1__["Profiler"]();
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_1__["Profiler"]();
        var lines = src.split('\n');
        p.log('split');
        var vertices = [];
        var normals = [];
        var vIndices = [];
        var nIndices = [];
        var match = true;
        var containsNormals = true;
        for (var i = 0; i < lines.length; i++) {
            // report progress every 50 ms
            if (Date.now() - t > 50) {
                updateStatus('Processing: ' + (100 * i / lines.length).toFixed() + '%');
                t = Date.now();
            }
            var line = lines[i];
            if (line.startsWith('v ')) {
                var tokens = line.match(/\S+/g);
                vertices.push(parseFloat(tokens[1]));
                vertices.push(parseFloat(tokens[2]));
                vertices.push(parseFloat(tokens[3]));
            }
            else if (line.startsWith('vn ')) {
                var tokens = line.match(/\S+/g);
                normals.push(parseFloat(tokens[1]));
                normals.push(parseFloat(tokens[2]));
                normals.push(parseFloat(tokens[3]));
            }
            else if (line.startsWith('f ')) {
                var ret = this.parseFace(line);
                if (containsNormals) {
                    if (ret.iV.length !== ret.iN.length) {
                        containsNormals = false;
                        console.warn('Normals not specified in file. Flat normals will be computed.');
                    }
                    else if (match) {
                        for (var i_1 = 0; i_1 < ret.iV.length; i_1++) {
                            if (ret.iV[i_1] != ret.iN[i_1]) {
                                console.warn('Vertices and normals don\'t match. Content will be re-indexed');
                                match = false;
                                break;
                            }
                        }
                    }
                }
                if (ret.iV.length === 4) {
                    vIndices.push(ret.iV[0], ret.iV[1], ret.iV[2]);
                    vIndices.push(ret.iV[0], ret.iV[2], ret.iV[3]);
                    if (containsNormals) {
                        nIndices.push(ret.iN[0], ret.iN[1], ret.iN[2]);
                        nIndices.push(ret.iN[0], ret.iN[2], ret.iN[3]);
                    }
                }
                else {
                    vIndices.push(ret.iV[0], ret.iV[1], ret.iV[2]);
                    if (containsNormals) {
                        nIndices.push(ret.iN[0], ret.iN[1], ret.iN[2]);
                    }
                }
            }
        }
        p.log('parse');
        if (match) {
            this.vertices = vertices;
            this.indices = vIndices;
            if (containsNormals) {
                this.normals = normals;
            }
        }
        else {
            this.vertices = [];
            this.normals = [];
            this.indices = [];
            for (var i = 0; i < vIndices.length; i++) {
                this.vertices.push(vertices[3 * vIndices[i] + 0]);
                this.vertices.push(vertices[3 * vIndices[i] + 1]);
                this.vertices.push(vertices[3 * vIndices[i] + 2]);
                this.normals.push(normals[3 * nIndices[i] + 0]);
                this.normals.push(normals[3 * nIndices[i] + 1]);
                this.normals.push(normals[3 * nIndices[i] + 2]);
                this.indices.push(i);
            }
            p.log('reindex');
        }
        if (containsNormals === false) {
            this.computeNormals(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["NormalType"].Flat);
            p.log('compute normals');
        }
        this.findBounds();
        p.log('findBounds');
        p2.log('Total');
        updateStatus('Processing: 100%');
        console.log('Vertices: ' + this.vertices.length);
        console.log('Normals: ' + this.normals.length);
        console.log('Triangles: ' + this.numTriangles);
    };
    return TriangleObjFile;
}(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["TriangleObj"]));



/***/ }),

/***/ "./src/Util3D/Vec.ts":
/*!***************************!*\
  !*** ./src/Util3D/Vec.ts ***!
  \***************************/
/*! exports provided: Vec2, Vec3, Vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec2", function() { return Vec2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec3", function() { return Vec3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec4", function() { return Vec4; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * Vector class for use with WebGL applications.
 */
var Vec = /** @class */ (function () {
    /**
     * @param valuesOrSize If a array, the values for the vector. If a number, the size of the vector.
     */
    function Vec(valuesOrSize) {
        if (valuesOrSize instanceof Array) {
            this.values = __spreadArrays(valuesOrSize);
        }
        else {
            this.values = new Array(valuesOrSize);
            for (var i = 0; i < valuesOrSize; i++) {
                this.values[i] = 0;
            }
        }
    }
    /**
     * Computes the magnitude of the vector.
     *
     * @return The vector magnitude.
     */
    Vec.prototype.magnitude = function () {
        var sum = 0;
        for (var i = 0; i < this.values.length; i++) {
            sum += this.values[i] * this.values[i];
        }
        return Math.sqrt(sum);
    };
    return Vec;
}());
/**
 * An x-y vector.
 */
var Vec2 = /** @class */ (function (_super) {
    __extends(Vec2, _super);
    /**
     * @param vals If supplied, the initial values for the vector
     */
    function Vec2(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 2) || this;
        }
        return _this;
    }
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec2.prototype.clone = function () {
        return new Vec2(this.values);
    };
    Object.defineProperty(Vec2.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec2.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Computes the distance to another point
     *
     * @param other The other point
     * @returns The distance between this point and the other point
     */
    Vec2.prototype.distance = function (other) {
        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));
    };
    /**
     * Creates a string representation of the vector
     *
     * @param digits The number of decimal places to display. This value is passed to toFixed().
     * @param divider The string to separate each number.
     * @returns A string representation.
     */
    Vec2.prototype.toString = function (digits, divider) {
        if (digits === void 0) { digits = 2; }
        if (divider === void 0) { divider = ','; }
        return this.x.toFixed(digits) + divider + this.y.toFixed(digits);
    };
    return Vec2;
}(Vec));

/**
 * An x-y-z vector.
 */
var Vec3 = /** @class */ (function (_super) {
    __extends(Vec3, _super);
    /**
     * @param vals If supplied, the initial values for the vector
     */
    function Vec3(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 3) || this;
        }
        return _this;
    }
    Object.defineProperty(Vec3, "origin", {
        get: function () {
            return new Vec3([0, 0, 0]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "z", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[2];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[2] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "xy", {
        /**
         * Gets the x-y components as a 2d vec
         *
         * @return the Vec3
         */
        get: function () {
            return new Vec2([this.x, this.y]);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec3.prototype.clone = function () {
        return new Vec3(this.values);
    };
    /**
     * Creates a string representation of the vector
     *
     * @param digits The number of decimal places to display. This value is passed to toFixed().
     * @param divider The string to separate each number.
     * @returns A string representation.
     */
    Vec3.prototype.toString = function (digits, divider) {
        if (digits === void 0) { digits = 2; }
        if (divider === void 0) { divider = ','; }
        return this.x.toFixed(digits) + divider + this.y.toFixed(digits) + divider + this.z.toFixed(digits);
    };
    /**
     * Returns a normalized version of this vector.
     *
     * @returns The resulting normalized vector.
     */
    Vec3.prototype.normalize = function () {
        var mag = this.magnitude();
        if (mag === 0) {
            return new Vec3();
        }
        else {
            return this.mult(1 / mag);
        }
    };
    /**
     * Multiplies members by a value and returns the new vector
     *
     * @param value The multiplication value.
     */
    Vec3.prototype.mult = function (value) {
        return new Vec3([
            this.x * value,
            this.y * value,
            this.z * value,
        ]);
    };
    /**
     * Returns the vector pointing in the opposite direction.
     *
     * @returns The negated vector.
     */
    Vec3.prototype.negate = function () {
        return new Vec3([-this.x, -this.y, -this.z]);
    };
    /**
     * Subtracts values from this vector.
     *
     * @param vec The vector to subtract.
     * @returns The computed vector.
     */
    Vec3.prototype.subtract = function (vec) {
        return new Vec3([
            this.values[0] - vec.values[0],
            this.values[1] - vec.values[1],
            this.values[2] - vec.values[2]
        ]);
    };
    /**
     * Adds values from this vector.
     *
     * @param vec The vector to add.
     * @returns The computed vector.
     */
    Vec3.prototype.add = function (vec) {
        return new Vec3([
            this.values[0] + vec.values[0],
            this.values[1] + vec.values[1],
            this.values[2] + vec.values[2]
        ]);
    };
    /**
     * Computes the cross product of this vector and another vector.
     *
     * @param other The other vector.
     */
    Vec3.prototype.cross = function (other) {
        var A = this.values;
        var B = other.values;
        return new Vec3([
            A[1] * B[2] - A[2] * B[1],
            A[2] * B[0] - A[0] * B[2],
            A[0] * B[1] - A[1] * B[0]
        ]);
    };
    /**
     * Computes the distance from this point to a specified point.
     *
     * @param pt The point.
     * @returns The distance to the point.
     */
    Vec3.prototype.distToPoint = function (pt) {
        return this.subtract(pt).magnitude();
    };
    /**
     * Builds a Vec4 from this Vec3
     *
     * @param w The w component of the new vector.
     * @returns The new vector.
     */
    Vec3.prototype.toVec4 = function (w) {
        return new Vec4([this.x, this.y, this.z, w]);
    };
    return Vec3;
}(Vec));

/**
 * An x-y-z-w vector.
 */
var Vec4 = /** @class */ (function (_super) {
    __extends(Vec4, _super);
    /**
     * @param vals If supplied, the initial values for the vector.
     */
    function Vec4(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 4) || this;
        }
        return _this;
    }
    Object.defineProperty(Vec4.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "z", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[2];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[2] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "w", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[3];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[3] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "xyz", {
        /**
         * Gets the x-y-z components as a 3d vec
         *
         * @return the Vec3
         */
        get: function () {
            return new Vec3([this.x, this.y, this.z]);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec4.prototype.clone = function () {
        return new Vec4(this.values);
    };
    /**
     * Returns an x-y-z vector where each element is computed by dividing this vectors
     * elements by the w value.
     *
     * @returns An x-y-z vector.
     */
    Vec4.prototype.divideByW = function () {
        var w = this.values[3];
        return new Vec3([
            this.values[0] / w,
            this.values[1] / w,
            this.values[2] / w
        ]);
    };
    /**
     * Normalizes this vector, and stores and returns the result.
     *
     * @returns The resulting normalized vector.
     */
    Vec4.prototype.normalize = function () {
        var mag = this.magnitude();
        var ret = this.clone();
        if (mag !== 0) {
            for (var i = 0; i < this.values.length; i++) {
                ret.values[i] /= mag;
            }
        }
        return ret;
    };
    /**
     * Creates a Vec4 from a Vec3 object
     *
     * @param vec The Vec3 object
     * @param w The w value for the Vec4
     */
    Vec4.fromVec3 = function (vec, w) {
        if (w === void 0) { w = 1; }
        return new Vec4([vec.x, vec.y, vec.z, w]);
    };
    return Vec4;
}(Vec));



/***/ }),

/***/ "./src/gl/glAttributeBuffer.ts":
/*!*************************************!*\
  !*** ./src/gl/glAttributeBuffer.ts ***!
  \*************************************/
/*! exports provided: glAttributeBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glAttributeBuffer", function() { return glAttributeBuffer; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");

/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glAttributeBuffer = /** @class */ (function () {
    function glAttributeBuffer(glCtx, program, attributeName) {
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.buffer = gl.createBuffer();
        this.attributeLocation = gl.getAttribLocation(program, attributeName);
    }
    glAttributeBuffer.prototype.dispose = function () {
        if (this.buffer) {
            this.gl.deleteBuffer(this.buffer);
            this.buffer = null;
        }
        this.attributeLocation = -1;
    };
    glAttributeBuffer.prototype.upload = function (values) {
        var gl = this.gl;
        this.bind();
        if (values instanceof Float32Array) {
            gl.bufferData(gl.ARRAY_BUFFER, values, gl.STATIC_DRAW);
        }
        else {
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(values), gl.STATIC_DRAW);
        }
    };
    glAttributeBuffer.prototype.bind = function (size) {
        if (size === void 0) { size = 3; }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.enableVertexAttribArray(this.attributeLocation);
        gl.vertexAttribPointer(this.attributeLocation, size, // size
        gl.FLOAT, // type
        false, // normalized
        0, // stride
        0 // offset
        );
    };
    return glAttributeBuffer;
}());



/***/ }),

/***/ "./src/gl/glBuffer.ts":
/*!****************************!*\
  !*** ./src/gl/glBuffer.ts ***!
  \****************************/
/*! exports provided: glBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glBuffer", function() { return glBuffer; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");

/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glBuffer = /** @class */ (function () {
    function glBuffer(glCtx, program, attributeName) {
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.buffer = gl.createBuffer();
        this.attributeLocation = gl.getAttribLocation(program, attributeName);
    }
    glBuffer.prototype.dispose = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = null;
        this.attributeLocation = -1;
    };
    glBuffer.prototype.upload = function (vertices) {
        var gl = this.gl;
        this.bind();
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    };
    glBuffer.prototype.bind = function (size) {
        if (size === void 0) { size = 3; }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.enableVertexAttribArray(this.attributeLocation);
        gl.vertexAttribPointer(this.attributeLocation, size, // size - 2,3 or 4 values per vertex
        gl.FLOAT, // type
        false, // normalized
        0, // stride
        0 // offset
        );
    };
    return glBuffer;
}());



/***/ }),

/***/ "./src/gl/glColor.ts":
/*!***************************!*\
  !*** ./src/gl/glColor.ts ***!
  \***************************/
/*! exports provided: glColor3, glColor4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColor3", function() { return glColor3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColor4", function() { return glColor4; });
/* harmony import */ var _Util_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/Color */ "./src/Util/Color.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Util/htmlColor */ "./src/Util/htmlColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Color class that requires RGB values to be between 0 and 1
 */
var glColor3 = /** @class */ (function (_super) {
    __extends(glColor3, _super);
    /**
     * @param color An RGB color array
     */
    function glColor3(color) {
        var _this = this;
        if (color.length != 3) {
            throw new Error('Invalid color array length (expected 3 elements)');
        }
        if (color[0] < 0 || color[0] > 1) {
            throw new Error('Invalid color \'r\' value (expected [0-1])');
        }
        if (color[1] < 0 || color[1] > 1) {
            throw new Error('Invalid color \'g\' value (expected [0-1])');
        }
        if (color[2] < 0 || color[2] > 1) {
            throw new Error('Invalid color \'b\' value (expected [0-1])');
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    /**
     * Creates an glColor object using values in a Color object.
     *
     * @param color A generic Color object.
     */
    glColor3.fromColor = function (color) {
        var r = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(color.r, 0, 1);
        var g = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(color.g, 0, 1);
        var b = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(color.b, 0, 1);
        return new glColor3([r, g, b]);
    };
    /**
     * Returns the lighter of two colors
     *
     * @param c1 The first color.
     * @param c2 The second color.
     * @returns The lightest color.
     */
    glColor3.lightest = function (c1, c2) {
        // TODO: use luminosity instead?
        if (c1.r + c1.g + c1.b > c2.r + c2.g + c2.b) {
            return c1;
        }
        else {
            return c2;
        }
    };
    /**
     * Returns the darker of two colors
     *
     * @param c1 The first color.
     * @param c2 The second color.
     * @returns The darkest color.
     */
    glColor3.darkest = function (c1, c2) {
        // TODO: use luminosity instead?
        if (c1.r + c1.g + c1.b < c2.r + c2.g + c2.b) {
            return c1;
        }
        else {
            return c2;
        }
    };
    /**
     * Converts this object to an html color object (0-255 based).
     *
     * @returns An htmlColor object.
     */
    glColor3.prototype.toHtmlColor = function () {
        var r = Math.round(255 * this.r);
        var g = Math.round(255 * this.g);
        var b = Math.round(255 * this.b);
        return new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_2__["htmlColor"]([r, g, b]);
    };
    glColor3.modelWhite = new glColor3([255 / 255, 250 / 255, 242 / 255]);
    glColor3.modelBlack = new glColor3([0, 0, 0]);
    return glColor3;
}(_Util_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));

/**
 * Color class that requires RGBA values to be between 0 and 1
 */
var glColor4 = /** @class */ (function (_super) {
    __extends(glColor4, _super);
    /**
     * @param color An RGB color array
     */
    function glColor4(color) {
        var _this = this;
        if (color.length != 4) {
            throw new Error('Invalid color array length (expected 4 elements)');
        }
        if (color[0] < 0 || color[0] > 1) {
            throw new Error('Invalid color \'r\' value (expected [0-1])');
        }
        if (color[1] < 0 || color[1] > 1) {
            throw new Error('Invalid color \'g\' value (expected [0-1])');
        }
        if (color[2] < 0 || color[2] > 1) {
            throw new Error('Invalid color \'b\' value (expected [0-1])');
        }
        if (color[3] < 0 || color[3] > 1) {
            throw new Error('Invalid color \'a\' value (expected [0-1])');
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    return glColor4;
}(_Util_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));



/***/ }),

/***/ "./src/gl/glColorWithTemperature.ts":
/*!******************************************!*\
  !*** ./src/gl/glColorWithTemperature.ts ***!
  \******************************************/
/*! exports provided: glColorWithTemperature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColorWithTemperature", function() { return glColorWithTemperature; });
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glColor */ "./src/gl/glColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Class that adds temperature to a Color object
 */
var glColorWithTemperature = /** @class */ (function (_super) {
    __extends(glColorWithTemperature, _super);
    /**
     * @param color An RGB color array
     * @param temperature Temperature in Kelvin
     */
    function glColorWithTemperature(color, temperature) {
        var _this = _super.call(this, color) || this;
        _this._temperature = temperature;
        return _this;
    }
    Object.defineProperty(glColorWithTemperature.prototype, "temperature", {
        /**
         * Gets the temperature in Kelvin
         */
        get: function () {
            return this._temperature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "daylight", {
        get: function () {
            return this.create(6000);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "minTemperature", {
        /**
         * Gets the minimum supported temperature.
         *
         * @returns temperature value in Kelvin.
         */
        get: function () {
            return this.colors[0].temperature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "maxTemperature", {
        /**
         * Gets the maximum supported temperature.
         *
         * @returns temperature value in Kelvin.
         */
        get: function () {
            return this.colors[this.colors.length - 1].temperature;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets a Color matching the specified temperature.
     *
     * @returns temperature value in Kelvin.
     */
    glColorWithTemperature.create = function (temperature) {
        if (temperature <= this.minTemperature) {
            return this.colors[0];
        }
        else if (temperature >= this.maxTemperature) {
            return this.colors[this.colors.length - 1];
        }
        else {
            for (var i = 0; i < this.colors.length - 1; i++) {
                var color1 = this.colors[i];
                var color2 = this.colors[i + 1];
                if (temperature >= color1.temperature && temperature <= color2.temperature) {
                    var ratio = (temperature - color1.temperature) / (color2.temperature - color1.temperature);
                    var r = color1.r + ratio * (color2.r - color1.r);
                    var g = color1.g + ratio * (color2.g - color1.g);
                    var b = color1.b + ratio * (color2.b - color1.b);
                    return new glColorWithTemperature([r, g, b], temperature);
                }
            }
            // shouldn't get here, but if we do, return the last color
            return this.colors[this.colors.length - 1];
        }
    };
    /**
     * Known color values. For other requests the class will return interpolated values
     */
    glColorWithTemperature.colors = [
        new glColorWithTemperature([255 / 255, 147 / 255, 41 / 255], 1900),
        new glColorWithTemperature([255 / 255, 197 / 255, 143 / 255], 2600),
        new glColorWithTemperature([255 / 255, 214 / 255, 170 / 255], 2850),
        new glColorWithTemperature([255 / 255, 241 / 255, 224 / 255], 3200),
        new glColorWithTemperature([255 / 255, 250 / 255, 244 / 255], 5200),
        new glColorWithTemperature([255 / 255, 255 / 255, 251 / 255], 5400),
        new glColorWithTemperature([255 / 255, 255 / 255, 255 / 255], 6000),
        new glColorWithTemperature([201 / 255, 226 / 255, 255 / 255], 7000),
        new glColorWithTemperature([64 / 255, 156 / 255, 255 / 255], 20000),
    ];
    return glColorWithTemperature;
}(_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]));



/***/ }),

/***/ "./src/gl/glFrameBuffer.ts":
/*!*********************************!*\
  !*** ./src/gl/glFrameBuffer.ts ***!
  \*********************************/
/*! exports provided: glFrameBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glFrameBuffer", function() { return glFrameBuffer; });
/* harmony import */ var _glTexture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glTexture */ "./src/gl/glTexture.ts");

/**
 * Lightweight WebGL wrapper for a framebuffer
 */
var glFrameBuffer = /** @class */ (function () {
    /**
     * Create a frame buffer
     *
     * @param glCtx The WebGL context
     * @param width The width (in pixels) of the rendering (must be power of 2)
     * @param height The height (in pixels) of the rendering (must be power of 2)
     */
    function glFrameBuffer(glCtx, width, height) {
        this.gl = glCtx;
        this.width = width;
        this.height = height;
        var gl = this.gl;
        this.frameBuffer = gl.createFramebuffer();
    }
    Object.defineProperty(glFrameBuffer.prototype, "size", {
        /**
         * Gets the larger of the width or height
         */
        get: function () {
            return Math.max(this.width, this.height);
        },
        enumerable: false,
        configurable: true
    });
    glFrameBuffer.prototype.dispose = function () {
        var gl = this.gl;
        if (this.frameBuffer) {
            gl.deleteFramebuffer(this.frameBuffer);
            this.frameBuffer = null;
        }
    };
    glFrameBuffer.prototype.get = function () {
        return this.frameBuffer;
    };
    glFrameBuffer.prototype.bind = function () {
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
    };
    glFrameBuffer.prototype.createTexture = function (style) {
        return new _glTexture__WEBPACK_IMPORTED_MODULE_0__["glTexture"](this.gl, this.width, this.height, style);
    };
    glFrameBuffer.prototype.attachTexture = function (attachment, texture) {
        if (texture instanceof _glTexture__WEBPACK_IMPORTED_MODULE_0__["glTexture"]) {
            texture = texture.get();
        }
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);
    };
    glFrameBuffer.prototype.check = function () {
        var gl = this.gl;
        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status !== gl.FRAMEBUFFER_COMPLETE) {
            var msg = 'The created frame buffer is invalid: ' + status.toString();
            alert(msg);
            console.log(msg);
        }
    };
    return glFrameBuffer;
}());



/***/ }),

/***/ "./src/gl/glIndexBuffer.ts":
/*!*********************************!*\
  !*** ./src/gl/glIndexBuffer.ts ***!
  \*********************************/
/*! exports provided: glIndexBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glIndexBuffer", function() { return glIndexBuffer; });
/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glIndexBuffer = /** @class */ (function () {
    function glIndexBuffer(glCtx) {
        this.gl = glCtx;
        var gl = this.gl;
        this.buffer = gl.createBuffer();
    }
    glIndexBuffer.prototype.dispose = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = null;
    };
    glIndexBuffer.prototype.upload = function (values) {
        var gl = this.gl;
        this.bind();
        if (values instanceof Int32Array) {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, values, gl.STATIC_DRAW);
        }
        else {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int32Array(values), gl.STATIC_DRAW);
        }
    };
    glIndexBuffer.prototype.bind = function () {
        var gl = this.gl;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
    };
    return glIndexBuffer;
}());



/***/ }),

/***/ "./src/gl/glProgram.ts":
/*!*****************************!*\
  !*** ./src/gl/glProgram.ts ***!
  \*****************************/
/*! exports provided: glProgram */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glProgram", function() { return glProgram; });
/**
 * Utility wrapper for compiling WebGL shader programs
 */
var glProgram = /** @class */ (function () {
    /**
     * Compiles and links vertex and fragment shaders into a program
     *
     * @param gl The WebGL context
     * @param vertexSource Vertex shader source
     * @param fragmentSource Fragment shader source
     * @returns the program id
     * @throws if the compilation fails
     */
    function glProgram(gl, vertexSource, fragmentSource) {
        this.gl = gl;
        this.compile(vertexSource, fragmentSource);
    }
    /**
     * Gets the underlying WebGLProgram
     *
     * @return the WebGLProgram
     */
    glProgram.prototype.get = function () {
        return this.program;
    };
    /**
     * Calls useProgram() for this program
     */
    glProgram.prototype.use = function () {
        var gl = this.gl;
        gl.useProgram(this.program);
    };
    /**
     * Compiles a shader program
     *
     * @param gl The WebGL context
     * @param source The source code
     * @param type The shader type
     * @throws if the compilation fails
     */
    glProgram.prototype.compileShader = function (source, type) {
        var gl = this.gl;
        var shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.log(source);
            var err = gl.getShaderInfoLog(shader);
            console.error(err);
            throw 'compile error: ' + err;
        }
        return shader;
    };
    glProgram.prototype.dispose = function () {
        var gl = this.gl;
        gl.deleteProgram(this.program);
        this.program = null;
    };
    /**
     * Compiles and links vertex and fragment shaders into a program
     *
     * @param vertexSource Vertex shader source
     * @param fragmentSource Fragment shader source
     * @returns the program id
     * @throws if the compilation fails
     */
    glProgram.prototype.compile = function (vertexSource, fragmentSource) {
        var gl = this.gl;
        this.program = gl.createProgram();
        gl.attachShader(this.program, this.compileShader(vertexSource, gl.VERTEX_SHADER));
        gl.attachShader(this.program, this.compileShader(fragmentSource, gl.FRAGMENT_SHADER));
        gl.linkProgram(this.program);
        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
            var err = gl.getProgramInfoLog(this.program);
            console.error(err);
            throw 'link error: ' + err;
        }
    };
    return glProgram;
}());



/***/ }),

/***/ "./src/gl/glSpace.ts":
/*!***************************!*\
  !*** ./src/gl/glSpace.ts ***!
  \***************************/
/*! exports provided: glSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glSpace", function() { return glSpace; });
/**
 * Utility for holding a clip space. Can be used to hold the viewing space
 * or clip space.
 */
var glSpace = /** @class */ (function () {
    function glSpace(min, max) {
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(glSpace.prototype, "left", {
        get: function () {
            return this.min.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "right", {
        get: function () {
            return this.max.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "top", {
        get: function () {
            return this.max.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "bottom", {
        get: function () {
            return this.min.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "near", {
        get: function () {
            return this.min.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "far", {
        get: function () {
            return this.max.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "width", {
        get: function () {
            return Math.abs(this.max.x - this.min.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "height", {
        get: function () {
            return Math.abs(this.max.y - this.min.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "depth", {
        get: function () {
            return Math.abs(this.max.z - this.min.z);
        },
        enumerable: false,
        configurable: true
    });
    return glSpace;
}());



/***/ }),

/***/ "./src/gl/glTexture.ts":
/*!*****************************!*\
  !*** ./src/gl/glTexture.ts ***!
  \*****************************/
/*! exports provided: glTextureStyle, glTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glTextureStyle", function() { return glTextureStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glTexture", function() { return glTexture; });
var glTextureStyle;
(function (glTextureStyle) {
    glTextureStyle[glTextureStyle["Color"] = 0] = "Color";
    glTextureStyle[glTextureStyle["Depth"] = 1] = "Depth";
    glTextureStyle[glTextureStyle["Float"] = 2] = "Float";
})(glTextureStyle || (glTextureStyle = {}));
/**
 * Lightweight WebGL wrapper for a texture
 */
var glTexture = /** @class */ (function () {
    /**
     * Create a frame buffer for rendering into texture objects.
     *
     * @param glCtx The WebGL context
     * @param width The width (in pixels) of the rendering (must be power of 2)
     * @param height The height (in pixels) of the rendering (must be power of 2)
     */
    function glTexture(glCtx, width, height, style) {
        this.gl = glCtx;
        this.width = width;
        this.height = height;
        switch (style) {
            case glTextureStyle.Color:
                this.createColor(width, height);
                break;
            case glTextureStyle.Depth:
                this.createDepth(width, height);
                break;
            case glTextureStyle.Float:
                this.createFloat(width, height);
                break;
        }
    }
    glTexture.prototype.dispose = function () {
        var gl = this.gl;
        if (this.texture) {
            gl.deleteTexture(this.texture);
            this.texture = null;
        }
    };
    glTexture.prototype.createColor = function (width, height) {
        var gl = this.gl;
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        gl.RGBA, // internal format
        width, // width
        height, // height
        0, // border
        gl.RGBA, // format
        gl.UNSIGNED_BYTE, // type
        null // pixels
        );
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    glTexture.prototype.createDepth = function (width, height) {
        var gl = this.gl;
        var depth_texture_extension = gl.getExtension('WEBGL_depth_texture');
        if (!depth_texture_extension) {
            alert('This WebGL program requires the use of the WEBGL_depth_texture extension.');
            return;
        }
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        gl.DEPTH_COMPONENT, // internal format
        width, // width
        height, // height
        0, // border
        gl.DEPTH_COMPONENT, // format
        gl.UNSIGNED_INT, // type
        null // pixels
        );
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    glTexture.prototype.createFloat = function (width, height) {
        var gl = this.gl;
        var internalFormat;
        var format;
        var type;
        // create textures
        if (gl instanceof WebGLRenderingContext) {
            var ext = gl.getExtension('OES_texture_half_float');
            if (ext) {
                // Thanks Apple. Always got to do things a little differently
                internalFormat = gl.RGBA;
                format = gl.RGBA;
                type = ext.HALF_FLOAT_OES;
            }
            else {
                // No floating point textures? really fall back to unsigned bytes
                internalFormat = gl.RGBA;
                format = gl.RGBA;
                type = gl.UNSIGNED_BYTE;
            }
        }
        // Typescript doesn't let you do an 'else if' here and when WebGL2 is
        // not supported, we get an exception, so thus the try-catch
        // see: https://stackoverflow.com/questions/45381122/typescript-type-narrowed-to-never-with-instanceof-in-an-if-else-statement
        try {
            if (gl instanceof WebGL2RenderingContext) {
                gl.getExtension('EXT_color_buffer_float');
                internalFormat = gl.RGBA32F;
                format = gl.RGBA;
                type = gl.FLOAT;
            }
        }
        catch (error) {
        }
        // create two textures. One we display and one we draw to
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        internalFormat, // internal format
        width, // width
        height, // height
        0, // border
        format, // format
        type, // type
        null // pixels
        );
        gl.bindTexture(gl.TEXTURE_2D, null);
    };
    glTexture.prototype.get = function () {
        return this.texture;
    };
    glTexture.prototype.bind = function () {
        var gl = this.gl;
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
    };
    return glTexture;
}());



/***/ }),

/***/ "./src/gl/glUniform.ts":
/*!*****************************!*\
  !*** ./src/gl/glUniform.ts ***!
  \*****************************/
/*! exports provided: glUniform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glUniform", function() { return glUniform; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Util3D/Mat */ "./src/Util3D/Mat.ts");




/**
 * Utility class for setting uniform values in a shader
 */
var glUniform = /** @class */ (function () {
    /**
     * Creates an object for setting values and calls gl.useProgram
     *
     * @param glCtx The WebGL context
     * @param program The program associated with the uniform values
     */
    function glUniform(glCtx, program) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.program = program;
        gl.useProgram(program);
    }
    /**
     * Sets a uniform value
     *
     * @param name The variable name
     * @param value The value
     * @param int If true and the value is a number, it is treated as an integer
     */
    glUniform.prototype.set = function (name, value, int) {
        if (int === void 0) { int = false; }
        var gl = this.gl;
        var loc = gl.getUniformLocation(this.program, name);
        if (loc) {
            if (value instanceof _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]) {
                gl.uniform3fv(loc, new Float32Array(value.values));
            }
            else if (value instanceof _glColor__WEBPACK_IMPORTED_MODULE_2__["glColor3"]) {
                gl.uniform3fv(loc, new Float32Array([value.r, value.g, value.b]));
            }
            else if (value instanceof _glColor__WEBPACK_IMPORTED_MODULE_2__["glColor4"]) {
                gl.uniform4fv(loc, new Float32Array([value.r, value.g, value.b, value.a]));
            }
            else if (value instanceof _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"]) {
                gl.uniformMatrix4fv(loc, false, new Float32Array(value.transpose().values));
            }
            else if (typeof (value) === 'boolean') {
                gl.uniform1i(loc, value ? 1.0 : 0.0);
            }
            else if (name === 'uMode') {
                gl.uniform1i(loc, value);
            }
            else {
                if (int) {
                    gl.uniform1i(loc, value);
                }
                else {
                    gl.uniform1f(loc, value);
                }
            }
        }
    };
    /**
     * Sets an integer uniform value (same as set(name, value, true))
     *
     * @param name The variable name
     * @param value The value
     */
    glUniform.prototype.seti = function (name, value) {
        this.set(name, value, true);
    };
    /**
     * Sets all values for variables stored as members of an object
     *
     * @param uniforms The object with member values
     */
    glUniform.prototype.setAll = function (uniforms) {
        for (var name_1 in uniforms) {
            var value = uniforms[name_1];
            this.set(name_1, value);
        }
    };
    return glUniform;
}());



/***/ }),

/***/ "./src/gl/glUniformBlock.ts":
/*!**********************************!*\
  !*** ./src/gl/glUniformBlock.ts ***!
  \**********************************/
/*! exports provided: glUniformBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glUniformBlock", function() { return glUniformBlock; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");

var glUniformBlock = /** @class */ (function () {
    function glUniformBlock(glCtx, program, blockName, blockBinding) {
        this.gl2 = glCtx;
        var gl2 = this.gl2;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.blockLocation = gl2.getUniformBlockIndex(program, blockName);
        gl2.uniformBlockBinding(program, this.blockLocation, blockBinding);
        this.blockBuffer = gl2.createBuffer();
        gl2.bindBufferBase(gl2.UNIFORM_BUFFER, blockBinding, this.blockBuffer);
    }
    glUniformBlock.prototype.dispose = function () {
        var gl2 = this.gl2;
        gl2.deleteBuffer(this.blockBuffer);
    };
    glUniformBlock.prototype.upload = function (data) {
        var gl2 = this.gl2;
        gl2.bindBuffer(gl2.UNIFORM_BUFFER, this.blockBuffer);
        gl2.bufferData(gl2.UNIFORM_BUFFER, data, gl2.STATIC_DRAW);
        gl2.bindBuffer(gl2.UNIFORM_BUFFER, null);
    };
    return glUniformBlock;
}());



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/styles.css */ "./src/styles/styles.css");
/* harmony import */ var _styles_styles_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_styles_styles_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Launcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Launcher */ "./src/Launcher.ts");


window.onload = function () {
    var app = new _Launcher__WEBPACK_IMPORTED_MODULE_1__["Launcher"]();
};


/***/ }),

/***/ "./src/shaders/PathTracerToScreenFragment.glsl":
/*!*****************************************************!*\
  !*** ./src/shaders/PathTracerToScreenFragment.glsl ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\r\nvarying vec2 texCoord;\r\nuniform sampler2D uTexture;\r\nuniform int uMode;\r\nuniform float uMaxChroma;\r\n\r\nuniform vec3 uHighlightColor;\r\nuniform vec3 uLightLightColor;\r\nuniform vec3 uMidLightColor;\r\nuniform vec3 uDarkLightColor;\r\n\r\nuniform vec3 uShadowColor;\r\nuniform vec3 uReflectedLightColor;\r\nuniform vec3 uDarkAccentColor;\r\n\r\nuniform float uShadowAlpha;\r\nuniform float uLightAlpha;\r\n\r\n#define MODE_SCIENCE 0\r\n#define MODE_VALUE 1\r\n#define MODE_CHROMA 2\r\n#define MODE_BANDS 3\r\n\r\nvec4 white = vec4(1.0, 1.0, 1.0, 1.0);\r\nvec4 red = vec4(1.0, 0.0, 0.0, 1.0);\r\nvec4 orange = vec4(1.0, 0.65, 0.0, 1.0);\r\nvec4 yellow = vec4(1.0, 1.0, 0.0, 1.0);\r\nvec4 green = vec4(0.0, 1.0, 0.0, 1.0);\r\nvec4 cyan = vec4(0.0, 1.0, 1.0, 1.0);\r\nvec4 blue = vec4(0.0, 0.0, 1.0, 1.0);\r\nvec4 black = vec4(0.0, 0.0, 0.0, 1.0);\r\n#define NUM_COLORS 6\r\nvec4 colors[NUM_COLORS];\r\n\r\nvec4 value2Color(float value)\r\n{\r\n   float span = 1.0 / float(NUM_COLORS - 1);\r\n   value *= float(NUM_COLORS - 1);\r\n   if (value < 0.0)\r\n   {\r\n      return colors[0];\r\n   }\r\n   else if (value < 1.0)\r\n   {\r\n      return colors[0] + value * (colors[1] - colors[0]);\r\n   }\r\n   else if (value < 2.0)\r\n   {\r\n      return colors[1] + (value - 1.0) * (colors[2] - colors[1]);\r\n   }\r\n   else if (value < 3.0)\r\n   {\r\n      return colors[2] + (value - 2.0) * (colors[3] - colors[2]);\r\n   }\r\n   else if (value < 4.0)\r\n   {\r\n      return colors[3] + (value - 3.0) * (colors[4] - colors[3]);\r\n   }\r\n   else if (value < 5.0)\r\n   {\r\n      return colors[4] + (value - 4.0) * (colors[5] - colors[4]);\r\n   }\r\n   /*\r\n   else if (value < 6.0)\r\n   {\r\n      return colors[5] + (value - 5.0) * (colors[6] - colors[5]);\r\n   }\r\n   */\r\n   else\r\n   {\r\n      return colors[NUM_COLORS - 1];\r\n   }\r\n}\r\n\r\nfloat toGray(vec4 c)\r\n{\r\n   // lots of ways to convert RGB to gray scale.\r\n\r\n   // simple averaging method\r\n   // return (c.r + c.g + c.b) / 3.0;\r\n\r\n   // relative perceptual values\r\n   // return 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\r\n\r\n   // luminosity measure\r\n   float gamma = 2.2;\r\n   float y = 0.2126 * pow(c.r, gamma) + 0.7152 * pow(c.g, gamma) + .0722 * pow(c.b, gamma);\r\n   float l = 116.0 * pow(y, 1.0 / 3.0) - 16.0;\r\n   return l / 100.0;\r\n}\r\n\r\nvec4 renderAsValue()\r\n{\r\n   vec4 color = texture2D(uTexture, texCoord);\r\n   float rgb = toGray(color);\r\n   return vec4(rgb, rgb, rgb, 1.0);\r\n}\r\n\r\nvec4 renderAsChroma()\r\n{\r\n   vec4 color = texture2D(uTexture, texCoord);\r\n\r\n   // render the scale as a bar on the left\r\n   if (texCoord.x < 0.03)\r\n   {\r\n      return value2Color((texCoord.y - 0.1) / 0.9);\r\n   }\r\n   else\r\n   {\r\n      if (color.a >= uShadowAlpha)\r\n      {\r\n         float avg = (color.r + color.g + color.b) / 3.0;\r\n         float rgb = (abs(avg - color.r) + abs(avg - color.g) + abs(avg - color.b)) / (4.0 / 3.0);\r\n         return value2Color(rgb / uMaxChroma);\r\n      }\r\n      else\r\n      {\r\n         return vec4(0.0, 0.0, 0.0, 1.0);\r\n      }\r\n   }\r\n}\r\n\r\nfloat d2(vec3 c1, vec3 c2)\r\n{\r\n   // sum the squares of the differences\r\n   return pow(c1.r - c2.r, 2.0) + pow(c1.g - c2.g, 2.0) + pow(c1.b - c2.b, 2.0);\r\n}\r\n\r\nvec3 closest(vec3 color, vec3 light, vec3 mid, vec3 dark)\r\n{\r\n   float dlight = d2(color, light);\r\n   float dmid = d2(color, mid);\r\n   float ddark = d2(color, dark);\r\n\r\n   float dmin = min(dlight, min(dmid, ddark));\r\n   if (dmin == dlight)\r\n   {\r\n      return light;\r\n   }\r\n   else if (dmin == dmid)\r\n   {\r\n      return mid;\r\n   }\r\n   else\r\n   {\r\n      return dark;\r\n   }\r\n}\r\n\r\nvec4 renderAsBands()\r\n{\r\n   float size = 0.07;\r\n   float margin = (1.0 - 6.0 * size) / 2.0;\r\n   if (texCoord.x < size && texCoord.y > margin && texCoord.y < (1.0 - margin))\r\n   {\r\n      if (texCoord.y < (margin + 1.0 * size))\r\n      {\r\n         return vec4(uDarkAccentColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 2.0 * size))\r\n      {\r\n         return vec4(uShadowColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 3.0 * size))\r\n      {\r\n         return vec4(uDarkLightColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 4.0 * size))\r\n      {\r\n         return vec4(uMidLightColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 5.0 * size))\r\n      {\r\n         return vec4(uLightLightColor, 1.0);\r\n      }\r\n      else // if (texCoord.y < (margin + 7.0 * size))\r\n      {\r\n         return vec4(uHighlightColor, 1.0);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      vec4 color = texture2D(uTexture, texCoord);\r\n\r\n      // define the terminator as the point where things are 50% in shadow\r\n      float terminator = ((uShadowAlpha + uLightAlpha) / 2.0);\r\n      if (color.a > 1.0 && color.a <= terminator)\r\n      {\r\n         vec3 c = closest(color.rgb, uShadowColor, uReflectedLightColor, uDarkAccentColor);\r\n         return vec4(c, 1.0);\r\n      }\r\n      else if (color.a > terminator)\r\n      {\r\n         // only render the highlight where it's contribution is significant, i.e. greater\r\n         // than some threshold\r\n         const float SPECULAR_THRESHOLD = 0.1;\r\n         if (color.a > (uLightAlpha + SPECULAR_THRESHOLD))\r\n         {\r\n            return vec4(uHighlightColor, 1.0);\r\n         }\r\n         else\r\n         {\r\n            vec3 c = closest(color.rgb, uLightLightColor, uMidLightColor, uDarkLightColor);\r\n            return vec4(c, 1.0);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         return color;\r\n      }\r\n   }\r\n}\r\n\r\nvec4 renderAsScience()\r\n{\r\n   // just return the texture\r\n   return texture2D(uTexture, texCoord);\r\n}\r\n\r\nvoid main()\r\n{\r\n   colors[0] = black;\r\n   colors[1] = blue;\r\n   colors[2] = green;\r\n   colors[3] = yellow;\r\n   colors[4] = orange;\r\n   colors[5] = red;\r\n\r\n   if (uMode == MODE_VALUE)\r\n   {\r\n      gl_FragColor = renderAsValue();\r\n   }\r\n   else if (uMode == MODE_CHROMA)\r\n   {\r\n      gl_FragColor = renderAsChroma();\r\n   }\r\n   else if (uMode == MODE_BANDS)\r\n   {\r\n      gl_FragColor = renderAsBands();\r\n   }\r\n   else\r\n   {\r\n      gl_FragColor = renderAsScience();\r\n   }\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/PathTracerToScreenVertex.glsl":
/*!***************************************************!*\
  !*** ./src/shaders/PathTracerToScreenVertex.glsl ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("attribute vec3 vertex;\r\nvarying vec2 texCoord;\r\nuniform float uScale;\r\nuniform float uXOffset;\r\nuniform float uYOffset;\r\n\r\nvoid main()\r\n{\r\n   texCoord = vertex.xy * 0.5 + 0.5;\r\n\r\n   gl_Position = vec4(uScale * vertex.x + uXOffset, uScale * vertex.y + uYOffset, 0.0, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/PathTracerToTextureFragment.glsl":
/*!******************************************************!*\
  !*** ./src/shaders/PathTracerToTextureFragment.glsl ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<VERSION>\r\n\r\n#define NOTHING\r\n\r\n#ifdef USE_TRIANGLES\r\n#define ES300\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n#ifdef ES300\r\nin vec3 initialRay;\r\n#else\r\nvarying vec3 initialRay;\r\n#endif\r\n\r\nuniform vec3 uEye;\r\nuniform float uTextureSize;\r\nuniform float uRandom;\r\nuniform sampler2D uTexture;\r\nuniform vec3 uLightPos;\r\nuniform float uLightIntensity;\r\nuniform vec3 uLightColor;\r\nuniform float uAmbientLightIntensity;\r\nuniform vec3 uObjColor;\r\nuniform float uBallRadius;\r\nuniform float uSample;\r\nuniform float uLightAlpha;\r\nuniform float uShadowAlpha;\r\n\r\n#ifdef ES300\r\nout vec4 fragColor;\r\n#else\r\n#define fragColor gl_FragColor\r\n#define texture texture2D\r\n#endif\r\n\r\nconst int MAX_BOUNCES = 10;\r\nconst float EPSILON = 0.000001;\r\nconst float OFFSET = 0.0001;\r\nconst float INFINITY = 10000.0;\r\nconst float LIGHT_SIZE = 0.1;\r\n#define BALL_CENTER vec3(0, uBallRadius, 0)\r\nconst vec3 DOME_CENTER = vec3(0, 0, 0);\r\nconst float DOME_RADIUS = 8.0;\r\nconst float VAL = 0.8;\r\nconst vec3 DOME_COLOR = vec3(VAL, VAL, VAL);\r\nconst vec3 FLOOR_COLOR = vec3(VAL, VAL, VAL);\r\nconst vec3 AMBIENT_COLOR = vec3(1.0, 1.0, 1.0);\r\nconst int NUM_LIGHTS = 6;\r\nconst float HEIGHT = 5.0;\r\nconst float RADIUS = 4.0;\r\nconst float PI = 3.14159265;\r\n\r\nstruct Light\r\n{\r\n   float intensity;\r\n   float size;\r\n   vec3 pos;\r\n   vec3 color;\r\n};\r\n\r\n Light Lights[NUM_LIGHTS];\r\n\r\n#ifdef USE_TRIANGLES\r\nstruct Triangle\r\n{\r\n   vec3 p0;\r\n   vec3 p1;\r\n   vec3 p2;\r\n};\r\n\r\nstruct Volume\r\n{\r\n   int startIndex;\r\n   int numTriangles;\r\n   vec3 boxMin;\r\n   vec3 boxMax;\r\n};\r\n\r\n// The following line is replaced with code generated in JavaScript\r\nconst int NUM_VERTICES = <NUM_VERTICES>;\r\nconst int NUM_VOLUMES = <NUM_VOLUMES>;\r\nconst int NUM_TRIANGLES = <NUM_TRIANGLES>;\r\n\r\nlayout(std140) uniform MyVerticesBlock { vec3 vertices[NUM_VERTICES]; };\r\n\r\nstruct ITriangle\r\n{\r\n   int i0;\r\n   int i1;\r\n   int i2;\r\n};\r\n\r\nlayout(std140) uniform MyTrianglesBlock { ITriangle triangles[NUM_TRIANGLES]; };\r\nTriangle getTriangle(int index)\r\n{\r\n   ITriangle tri = triangles[index];\r\n   vec3 p0 = vertices[tri.i0];\r\n   vec3 p1 = vertices[tri.i1];\r\n   vec3 p2 = vertices[tri.i2];\r\n   return Triangle(p0, p1, p2);\r\n}\r\n\r\n// The central object being rendered\r\nstruct Object\r\n{\r\n   Volume volumes[NUM_VOLUMES];\r\n   vec3 boxMin;\r\n   vec3 boxMax;\r\n};\r\n\r\nuniform Object object;\r\n\r\nbool intersectBox(const vec3 origin, const vec3 ray, const vec3 boxMin, const vec3 boxMax)\r\n{\r\n   vec3 rayInv = 1.0 / ray;\r\n   vec3 tbot = rayInv * (boxMin - origin);\r\n   vec3 ttop = rayInv * (boxMax - origin);\r\n   vec3 tmin = min(ttop, tbot);\r\n   vec3 tmax = max(ttop, tbot);\r\n   vec2 t = max(tmin.xx, tmin.yz);\r\n   float t0 = max(t.x, t.y);\r\n   t = min(tmax.xx, tmax.yz);\r\n   float t1 = min(t.x, t.y);\r\n   return t1 > max(t0, 0.0);\r\n}\r\n\r\nbool intersectVol(const vec3 origin, const vec3 ray, Volume vol)\r\n{\r\n   if (vol.numTriangles == 0)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   return intersectBox(origin, ray, vol.boxMin, vol.boxMax);\r\n}\r\n\r\nbool intersectObj(const vec3 origin, const vec3 ray, Object object)\r\n{\r\n   return intersectBox(origin, ray, object.boxMin, object.boxMax);\r\n}\r\n\r\n// Möller–Trumbore ray-triangle intersection algorithm\r\n// source: http://bit.ly/2MxnPMG\r\nfloat intersectTriangle(vec3 origin, vec3 ray, Triangle tri)\r\n{\r\n   vec3 edge1, edge2, h, s, q;\r\n   float a, f, u, v;\r\n   edge1 = tri.p1 - tri.p0;\r\n   edge2 = tri.p2 - tri.p0;\r\n\r\n   h = cross(ray, edge2);\r\n   a = dot(edge1, h);\r\n   if (abs(a) < EPSILON)\r\n      return INFINITY;\r\n\r\n   f = 1.0 / a;\r\n   s = origin - tri.p0;\r\n   u = f * dot(s, h);\r\n   if (u < 0.0 || u > 1.0)\r\n      return INFINITY;\r\n\r\n   q = cross(s, edge1);\r\n   v = f * dot(ray, q);\r\n   if (v < 0.0 || (u + v) > 1.0)\r\n      return INFINITY;\r\n\r\n   // At this stage we can compute t to find out where the intersection point is on the line.\r\n   float t = f * dot(edge2, q);\r\n   if (t <= EPSILON) // this means that there is a line intersection but not a ray intersection.\r\n      return INFINITY;\r\n\r\n   return t; // ray intersection\r\n}\r\n\r\nvec3 normalForTriangle(vec3 origin, vec3 hit, int tIndex)\r\n{\r\n   Triangle tri = getTriangle(tIndex);\r\n   vec3 normal = cross(tri.p1 - tri.p0, tri.p2 - tri.p0);\r\n   normal = normalize(normal);\r\n   if (dot(normal, origin - hit) > 0.0)\r\n   {\r\n      return normal;\r\n   }\r\n   else\r\n   {\r\n      return -normal;\r\n   }\r\n}\r\n#endif\r\n\r\nfloat intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius)\r\n{\r\n   vec3 toSphere = origin - sphereCenter;\r\n   float a = dot(ray, ray);\r\n   float b = 2.0 * dot(toSphere, ray);\r\n   float c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\r\n   float discriminant = b * b - 4.0 * a * c;\r\n   if (discriminant > 0.0)\r\n   {\r\n      float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\r\n      float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\r\n      if (t1 > 0.0)\r\n      {\r\n         return t1;\r\n      }\r\n      else if (t2 > 0.0)\r\n      {\r\n         return t2;\r\n      }\r\n   }\r\n   return INFINITY;\r\n}\r\n\r\nvec3 normalForSphere(vec3 hit, vec3 sphereCenter, float sphereRadius)\r\n{\r\n   return (hit - sphereCenter) / sphereRadius;\r\n}\r\n\r\nfloat random(vec3 scale, float seed)\r\n{\r\n   return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n}\r\n\r\nvec3 cosineWeightedDirection(float seed, vec3 normal)\r\n{\r\n   float u = random(vec3(12.9898, 78.233, 151.7182), seed);\r\n   float v = random(vec3(63.7264, 10.873, 623.6736), seed);\r\n   float r = sqrt(u);\r\n   float angle = 6.283185307179586 * v;\r\n   // compute basis from normal\r\n   vec3 sdir, tdir;\r\n   if (abs(normal.x) < .5)\r\n   {\r\n      sdir = cross(normal, vec3(1, 0, 0));\r\n   }\r\n   else\r\n   {\r\n      sdir = cross(normal, vec3(0, 1, 0));\r\n   }\r\n   tdir = cross(normal, sdir);\r\n   return r * cos(angle) * sdir + r * sin(angle) * tdir + sqrt(1. - u) * normal;\r\n}\r\n\r\nvec3 uniformlyRandomDirection(float seed)\r\n{\r\n   float u = random(vec3(12.9898, 78.233, 151.7182), seed);\r\n   float v = random(vec3(63.7264, 10.873, 623.6736), seed);\r\n   float z = 1.0 - 2.0 * u;\r\n   float r = sqrt(1.0 - z * z);\r\n   float angle = 6.283185307179586 * v;\r\n   return vec3(r * cos(angle), r * sin(angle), z);\r\n}\r\n\r\nvec3 uniformlyRandomVector(float seed)\r\n{\r\n   return uniformlyRandomDirection(seed) * sqrt(random(vec3(36.7539, 50.3658, 306.2759), seed));\r\n}\r\n\r\nbool inShadow(vec3 origin, vec3 ray, float tLight)\r\n{\r\n   float tBall = intersectSphere(origin, ray, BALL_CENTER, uBallRadius);\r\n   if (tBall < tLight)\r\n   {\r\n      return true;\r\n   }\r\n\r\n#ifdef USE_TRIANGLES\r\n   if (intersectObj(origin, ray, object))\r\n   {\r\n      for (int i = 0; i < NUM_VOLUMES; i++)\r\n      {\r\n         Volume vol = object.volumes[i];\r\n         if (intersectVol(origin, ray, vol))\r\n         {\r\n            for (int i = vol.startIndex; i < (vol.startIndex + vol.numTriangles); i++)\r\n            {\r\n               Triangle tri = getTriangle(i);\r\n               if (intersectTriangle(origin, ray, tri) < tLight)\r\n               {\r\n                  return true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n#endif\r\n\r\n   return false;\r\n}\r\n\r\n// All components are in the range [0…1], including hue.\r\nvec4 rgb2hsv(vec4 c)\r\n{\r\n   vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n   vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n   vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n   float d = q.x - min(q.w, q.y);\r\n   float e = 1.0e-10;\r\n   return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x, c.a);\r\n}\r\n\r\n// All components are in the range[0…1], including hue.\r\nvec4 hsv2rgb(vec4 c)\r\n{\r\n   vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n   vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n   return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y), c.a);\r\n}\r\n\r\nvec4 shiftTemperature(vec4 rgb, float deg, float tintStrength)\r\n{\r\n   vec4 hsv = rgb2hsv(rgb);\r\n   hsv.x += deg / 360.0;\r\n   vec4 fullTintRgb = hsv2rgb(hsv);\r\n\r\n   return mix(rgb, fullTintRgb, tintStrength);\r\n}\r\n\r\n// TODO move to a common file\r\nfloat toGray(vec4 c)\r\n{\r\n   // lots of ways to convert RGB to gray scale.\r\n\r\n   // simple averaging method\r\n   // return (c.r + c.g + c.b) / 3.0;\r\n\r\n   // relative perceptual values\r\n   // return 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\r\n\r\n   // luminosity measure\r\n   float gamma = 2.2;\r\n   float y = 0.2126 * pow(c.r, gamma) + 0.7152 * pow(c.g, gamma) + .0722 * pow(c.b, gamma);\r\n   float l = 116.0 * pow(y, 1.0 / 3.0) - 16.0;\r\n   return l / 100.0;\r\n}\r\n\r\nvec4 calculateColor(vec3 origin, vec3 ray)\r\n{\r\n   vec3 accumulatedColor = vec3(0.0);\r\n   vec3 colorMask = vec3(1.0);\r\n   vec3 eye = origin;\r\n   bool objHit = false;\r\n   bool objShadow = false;\r\n   float specularContribution = 0.0;\r\n\r\n   // main raytracing loop\r\n   for (int bounce = 0; bounce < MAX_BOUNCES; bounce++)\r\n   {\r\n      // compute the intersection with everything\r\n      float tBall = intersectSphere(origin, ray, BALL_CENTER, uBallRadius);\r\n      vec3 surfaceColor = vec3(0.5, 0.5, 0.5);\r\n\r\n      float tObj = INFINITY;\r\n      int tIndex;\r\n#ifdef USE_TRIANGLES\r\n      if (intersectObj(origin, ray, object))\r\n      {\r\n         for (int i = 0; i < NUM_VOLUMES; i++)\r\n         {\r\n            Volume vol = object.volumes[i];\r\n            if (intersectVol(origin, ray, vol))\r\n            {\r\n               for (int i = vol.startIndex; i < (vol.startIndex + vol.numTriangles); i++)\r\n               {\r\n                  Triangle tri = getTriangle(i);\r\n                  float tTri = min(tObj, intersectTriangle(origin, ray, tri));\r\n                  if (tTri < tObj)\r\n                  {\r\n                     tObj = tTri;\r\n                     tIndex = i;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n#endif\r\n\r\n      // if the first ray hits the light, return the light color. This\r\n      // simulates displaying the light\r\n      if (bounce == 0)\r\n      {\r\n         for (int i = 0; i < NUM_LIGHTS; i++)\r\n         {\r\n            float tLight = intersectSphere(origin, ray, Lights[i].pos, Lights[i].size);\r\n            if (tLight < tBall && tLight < tObj)\r\n            {\r\n               return vec4(Lights[i].intensity * Lights[i].color, 1.0);\r\n            }\r\n         }\r\n      }\r\n\r\n      // find the closest intersection\r\n      float tDome = intersectSphere(origin, ray, DOME_CENTER, DOME_RADIUS);\r\n      float tFloor = INFINITY;\r\n\r\n      // check for intersection with the ground\r\n      if (ray.y < 0.0)\r\n      {\r\n         // distance to floor = num unit vectors required to reach the floor\r\n         tFloor = -origin.y / ray.y;\r\n      }\r\n\r\n      // find the closest hit\r\n      float t = min(min(tDome, tFloor), min(tBall, tObj));\r\n\r\n      // info about hit\r\n      vec3 hit = origin + ray * t;\r\n      vec3 normal;\r\n\r\n      // calculate the normal\r\n      if (t == tFloor)\r\n      {\r\n         surfaceColor = FLOOR_COLOR;\r\n         normal = vec3(0.0, 1.0, 0.0);\r\n      }\r\n      else if (t == tBall)\r\n      {\r\n         surfaceColor = vec3(uObjColor);\r\n         normal = normalForSphere(hit, BALL_CENTER, uBallRadius);\r\n\r\n         if (bounce == 0)\r\n         {\r\n            objHit = true;\r\n         }\r\n      }\r\n#ifdef USE_TRIANGLES\r\n      else if (t == tObj)\r\n      {\r\n         surfaceColor = uObjColor;\r\n         normal = normalForTriangle(origin, hit, tIndex);\r\n\r\n         if (bounce == 0)\r\n         {\r\n            objHit = true;\r\n         }\r\n      }\r\n#endif\r\n      else if (t == tDome)\r\n      {\r\n         surfaceColor = DOME_COLOR;\r\n         normal = -normalForSphere(hit, DOME_CENTER, DOME_RADIUS);\r\n      }\r\n      else\r\n      {\r\n         break;\r\n      }\r\n\r\n      colorMask *= surfaceColor;\r\n\r\n      if (length(colorMask) < 0.01)\r\n      {\r\n         break;\r\n      }\r\n\r\n      for (int i = 0; i < NUM_LIGHTS; i++)\r\n      {\r\n         // compute diffuse lighting contribution\r\n         vec3 toLight = Lights[i].pos - hit;\r\n         vec3 toLightN = normalize(toLight);\r\n\r\n         // trace a shadow ray to the light\r\n         if (inShadow(hit + normal * OFFSET, toLightN, length(toLight)) == false)\r\n         {\r\n            // diffuse component\r\n            float diffuse = max(0.0, dot(toLightN, normal));\r\n\r\n            // specular component\r\n            vec3 toEye = eye - hit;\r\n            vec3 n2l = toLightN;\r\n            vec3 n2e = normalize(toEye);\r\n            vec3 bisector = (n2l + n2e) / length(n2l + n2e);\r\n            float specularCoefficient = 0.5;\r\n            float shininess = 100.0;\r\n            float specular = specularCoefficient * pow(max(0.0, dot(bisector, normal)), shininess);\r\n\r\n            // apply light fall off as distance squares. Use a min value for the\r\n            // light size otherwise falloff is too rapid\r\n            float radius = max(0.75, Lights[i].size);\r\n            float dist = max(1.0, (length(toLight) - radius) / radius);\r\n            float lightIntensity = Lights[i].intensity / (dist * dist);\r\n\r\n            accumulatedColor += colorMask * Lights[i].color * lightIntensity * diffuse;\r\n\r\n            // TODO define a color mask for specular reflection\r\n            //            accumulatedColor += mix(surfaceColor, Lights[i].color, 0.8) *\r\n            //            lightIntensity * specular;\r\n            accumulatedColor +=\r\n                (length(surfaceColor) * Lights[i].color) * lightIntensity * specular;\r\n\r\n            if (bounce == 0 && i == 0)\r\n            {\r\n               specularContribution += lightIntensity * specular;\r\n            }\r\n         }\r\n         else if (bounce == 0 && i == 0)\r\n         {\r\n            objShadow = true;\r\n         }\r\n      }\r\n\r\n      // calculate next origin\r\n      ray = cosineWeightedDirection(uRandom + float(bounce), normal);\r\n\r\n      origin = hit;\r\n   }\r\n\r\n   float alpha = 1.0;\r\n   if (objHit)\r\n   {\r\n      if (objShadow)\r\n      {\r\n         alpha = uShadowAlpha;\r\n      }\r\n      else\r\n      {\r\n         alpha = uLightAlpha;\r\n      }\r\n      alpha += clamp(specularContribution, 0.0, 1.0);\r\n   }\r\n\r\n   vec4 scienceColor = vec4(clamp(accumulatedColor, 0.0, 1.0), alpha);\r\n   return scienceColor;\r\n   /*\r\n   if (objHit)\r\n   {\r\n      return vec4(toArtist(scienceColor).rgb, alpha);\r\n   }\r\n   else\r\n   {\r\n      return scienceColor;\r\n   }\r\n   */\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec3 rand = uniformlyRandomVector(uRandom) * LIGHT_SIZE;\r\n\r\n   Lights[0].intensity = uLightIntensity;\r\n   Lights[0].size = LIGHT_SIZE;\r\n   Lights[0].pos = uLightPos + rand;\r\n   Lights[0].color = uLightColor;\r\n\r\n   for (int i = 1; i < NUM_LIGHTS; i++)\r\n   {\r\n      float x = RADIUS * sin(2.0 * PI * float(i) / (float(NUM_LIGHTS) - 1.0)) + rand.x;\r\n      float y = HEIGHT + rand.y;\r\n      float z = RADIUS * cos(2.0 * PI * float(i) / (float(NUM_LIGHTS) - 1.0)) + rand.z;\r\n\r\n      Lights[i].intensity = uAmbientLightIntensity;\r\n      Lights[i].size = 2.0 * LIGHT_SIZE;\r\n      Lights[i].pos = vec3(x, y, z);\r\n      Lights[i].color = AMBIENT_COLOR;\r\n   }\r\n\r\n   // merge the new color into the existing texture\r\n   vec4 textureColor = texture(uTexture, gl_FragCoord.xy / uTextureSize);\r\n   vec4 newColor = calculateColor(uEye, initialRay);\r\n   float weight = (uSample / (1.0 + uSample));\r\n   fragColor = mix(newColor, textureColor, weight);\r\n}");

/***/ }),

/***/ "./src/shaders/PathTracerToTextureVertex.glsl":
/*!****************************************************!*\
  !*** ./src/shaders/PathTracerToTextureVertex.glsl ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<VERSION>\r\n\r\n#define NOTHING\r\n#ifdef USE_TRIANGLES\r\n#define ES300\r\n#endif\r\n\r\nprecision highp float;\r\nuniform vec3 uEye, uRay00, uRay01, uRay10, uRay11;\r\n\r\n#ifdef ES300\r\nin vec3 vertex;\r\nout vec3 initialRay;\r\n#else\r\nattribute vec3 vertex;\r\nvarying vec3 initialRay;\r\n#endif \r\n\r\nvoid main()\r\n{\r\n   vec2 percent = vertex.xy * 0.5 + 0.5;\r\n   initialRay = mix(mix(uRay00, uRay01, percent.y), mix(uRay10, uRay11, percent.y), percent.x);\r\n   gl_Position = vec4(vertex, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/TextureRendererFragment.glsl":
/*!**************************************************!*\
  !*** ./src/shaders/TextureRendererFragment.glsl ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nprecision highp float;\r\nvarying vec2 texCoord;\r\nuniform sampler2D uTexture;\r\n\r\nvoid main() { gl_FragColor = texture2D(uTexture, texCoord); }\r\n");

/***/ }),

/***/ "./src/shaders/TextureRendererVertex.glsl":
/*!************************************************!*\
  !*** ./src/shaders/TextureRendererVertex.glsl ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nattribute vec2 vertex;\r\nvarying vec2 texCoord;\r\n\r\nvoid main()\r\n{\r\n   texCoord = vertex.xy * 0.5 + 0.5;\r\n\r\n   gl_Position = vec4(vertex.xy, 0.0, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/ViewerFragment.glsl":
/*!*****************************************!*\
  !*** ./src/shaders/ViewerFragment.glsl ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\r\n\r\n// interpolated values from the vertex shader\r\nvarying vec3 vNormal;\r\nvarying vec3 vVertex;\r\nvarying vec3 vShadowVertex;\r\nvarying vec3 vModelVertex;\r\n\r\nuniform mat4 model;\r\nuniform vec3 uEye;\r\nuniform bool uOrthographic;\r\n\r\n#define NORMAL 0\r\n#define CONTOUR_PLANES 1\r\n#define CONTOUR_VALUES 2\r\n#define LIGHT_AND_SHADOW 3\r\n#define HIGHLIGHT_TERMINATOR 4\r\n#define HIGHLIGHT_SHADOW 5\r\n#define EMPHASIZE_HIGHLIGHTS 6\r\n\r\nuniform int uRenderMode;\r\n\r\n// these are value between 0-1\r\nuniform float uDiffuseIntensity;\r\nuniform float uAmbientIntensity;\r\nuniform float uSpecularIntensity;\r\n\r\n// the colors we use to represent our lightest and darkest values\r\nuniform vec3 uWhiteColor;\r\nuniform vec3 uBlackColor;\r\n\r\nuniform vec3 uLightPos;\r\nuniform bool uPointLight;\r\nuniform float uFalloff;\r\nuniform float uLightIntensity;\r\nuniform float uLightIntensityAtSource;\r\n\r\nuniform bool uUseShadows;\r\nuniform sampler2D uShadowTexture;\r\n\r\nuniform vec3 uFloorCenter;\r\nuniform float uFloorRadius;\r\nuniform bool uRenderingFloor;\r\nuniform bool uShowGrid;\r\n#define MAX_CONTOURS 9\r\nuniform int uNumContours;\r\nuniform vec3 uContourColors[9];\r\nuniform float uContourAngles[9];\r\nuniform bool uShowHighlights;\r\nuniform float uShininess;\r\n\r\n// For contour shading, the minimum specular contribution required to\r\n// show something as a highlight\r\nconst float SPECULAR_THRESHOLD = 0.06;\r\n\r\nbool uShowTerminator = true;\r\n\r\nbool in_shadow()\r\n{\r\n   if (uUseShadows == false)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   // The vertex location rendered from the light source is almost in Normalized\r\n   // Device Coordinates (NDC), but the perspective division has not been\r\n   // performed yet. Perform the perspective divide. The (x,y,z) vertex location\r\n   // components are now each in the range [-1.0,+1.0].\r\n   // vec3 vertex_relative_to_light = v_Vertex_relative_to_light.xyz / v_Vertex_relative_to_light.w;\r\n   vec3 vertex = vShadowVertex;\r\n\r\n   // Convert the the values from Normalized Device Coordinates (range [-1.0,+1.0])\r\n   // to the range [0.0,1.0]. This mapping is done by scaling\r\n   // the values by 0.5, which gives values in the range [-0.5,+0.5] and then\r\n   // shifting the values by +0.5.\r\n   vertex = vertex * 0.5 + 0.5;\r\n\r\n   // Get the z value of this fragment in relationship to the light source.\r\n   // This value was stored in the shadow map (depth buffer of the frame buffer)\r\n   // which was passed to the shader as a texture map.\r\n   // vec4 textureValue = texture2D(uShadowSampler, vertex.xy);\r\n\r\n   // The texture map contains a single depth value for each pixel. However,\r\n   // the texture2D sampler always returns a color from a texture. For a\r\n   // gl.DEPTH_COMPONENT texture, the color contains the depth value in\r\n   // each of the color components. If the value was d, then the color returned\r\n   // is (d,d,d,1). This is a \"color\" (depth) value between [0.0,+1.0].\r\n   float shadowmap_distance = texture2D(uShadowTexture, vertex.xy).r;\r\n\r\n   // Test the distance between this fragment and the light source as\r\n   // calculated using the shadowmap transformation (vertex_relative_to_light.z) and\r\n   // the smallest distance between the closest fragment to the light source\r\n   // for this location, as stored in the shadowmap. When the closest\r\n   // distance to the light source was saved in the shadowmap, some\r\n   // precision was lost. Therefore we need a small tolerance factor to\r\n   // compensate for the lost precision.\r\n   float tol = 0.001;\r\n   if (vertex.z <= shadowmap_distance + tol)\r\n   {\r\n      // This surface receives full light because it is the closest surface\r\n      // to the light.\r\n      return false;\r\n   }\r\n   else\r\n   {\r\n      // This surface is in a shadow because there is a closer surface to\r\n      // the light source.\r\n      return true;\r\n   }\r\n}\r\n\r\nvec4 val2Color(float val) { return vec4(mix(uBlackColor, uWhiteColor, val), 1.0); }\r\n\r\nvec4 val2ContourColor(float val)\r\n{\r\n   val = clamp(val, 0.0, 1.0);\r\n   for (int i = 0; i < MAX_CONTOURS; i++)\r\n   {\r\n      float max = (float(i) + 1.0) / float(uNumContours);\r\n      if (val <= max)\r\n      {\r\n         return vec4(uContourColors[(MAX_CONTOURS - 1) - i], 1.0);\r\n      }\r\n   }\r\n}\r\n\r\nfloat getDiffuse(vec3 normal, vec3 toLight)\r\n{\r\n   float vDot = clamp(dot(normal, toLight), 0.0, 1.0);\r\n   float diffuse = uDiffuseIntensity * vDot;\r\n   return diffuse;\r\n}\r\n\r\nfloat getSpecular(vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = 0.0;\r\n\r\n   if (uShowHighlights)\r\n   {\r\n      vec3 reflection = normalize(2.0 * dot(normal, toLight) * normal - toLight);\r\n      float cosAngle = clamp(dot(reflection, toEye), 0.0, 1.0); // clamp to avoid values > 90 deg\r\n      specular = uSpecularIntensity * (uShininess / 15.0) * pow(cosAngle, uShininess);\r\n   }\r\n\r\n   return specular;\r\n}\r\n\r\nfloat getDistancePtToPlane(vec3 pt, vec3 plane)\r\n{\r\n   float a = plane.x;\r\n   float b = plane.y;\r\n   float c = plane.z;\r\n   float d = -(a * a + b * b + c * c);\r\n\r\n   return -(a * pt.x + b * pt.y + c * pt.z + d) / sqrt(a * a + b * b + c * c);\r\n}\r\n\r\nfloat getLightDistance(vec3 lightPos)\r\n{\r\n   if (uPointLight)\r\n   {\r\n      return length(lightPos - vVertex);\r\n   }\r\n   else\r\n   {\r\n      return getDistancePtToPlane(vVertex, lightPos);\r\n   }\r\n}\r\n\r\nfloat getValueFromLight(vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float diffuse = getDiffuse(normal, toLight);\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n\r\n   float falloff = 1.0;\r\n   if (uFalloff > 0.0)\r\n   {\r\n      float vDot = dot(normal, toLight);\r\n\r\n      float vDistance = getLightDistance(uLightPos);\r\n      falloff = uLightIntensityAtSource / (vDistance * vDistance);\r\n\r\n      // the light only shines one way\r\n      if (vDistance < 0.0)\r\n      {\r\n         diffuse = 0.0;\r\n         specular = 0.0;\r\n      }\r\n   }\r\n\r\n   return uAmbientIntensity + uLightIntensity * falloff * (diffuse + specular);\r\n}\r\n\r\nvec4 getContourPlaneColor(float vDot, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n   if (specular > SPECULAR_THRESHOLD)\r\n   {\r\n      return val2Color(uAmbientIntensity + uDiffuseIntensity + uSpecularIntensity);\r\n   }\r\n\r\n   float angle = (180.0 / 3.1415926) * acos(vDot);\r\n   if (angle > 90.0)\r\n   {\r\n      return val2Color(uAmbientIntensity);\r\n   }\r\n   else\r\n   {\r\n      for (int i = 0; i < MAX_CONTOURS; i++)\r\n      {\r\n         if (i < uNumContours)\r\n         {\r\n            if (angle < uContourAngles[i])\r\n            {\r\n               return vec4(uContourColors[i], 1.0);\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\nvec4 getContourValueColor(float vDot, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n   if (specular > SPECULAR_THRESHOLD)\r\n   {\r\n      return vec4(1.0, 1.0, 1.0, 1.0);\r\n   }\r\n\r\n   float val = getValueFromLight(normal, toLight, toEye);\r\n   return val2ContourColor(val);\r\n}\r\n\r\nfloat round(float val) { return floor(val + 0.5); }\r\n\r\nfloat getFloorGridAdjustment(float dist)\r\n{\r\n   float thickness = 0.001;\r\n   float alias = 0.005;\r\n\r\n   if (dist < (thickness + alias))\r\n   {\r\n      if (dist < thickness)\r\n      {\r\n         return 0.5;\r\n      }\r\n      else\r\n      {\r\n         return 0.5 * (1.0 + (dist - thickness) / alias);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      return 1.0;\r\n   }\r\n}\r\n\r\nvec4 getFloorColor(bool inShadow, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   vec4 fragColor;\r\n\r\n   // gradiate out the background from half transparent to full transparency\r\n   vec3 center = (model * vec4(uFloorCenter, 1.0)).xyz;\r\n   float dist = length(center - vVertex);\r\n   float a = 0.5 * (1.0 - dist / uFloorRadius);\r\n\r\n   float gridFactor = 1.0;\r\n   if (uShowGrid)\r\n   {\r\n      float circle = getFloorGridAdjustment(abs(dist - round(dist)));\r\n      float x = getFloorGridAdjustment(abs(vModelVertex.x - round(vModelVertex.x)));\r\n      float z = getFloorGridAdjustment(abs(vModelVertex.z - round(vModelVertex.z)));\r\n\r\n      gridFactor = min(circle, min(x, z));\r\n   }\r\n\r\n   float val = 0.0;\r\n   if (inShadow)\r\n   {\r\n      val = uAmbientIntensity;\r\n   }\r\n   else\r\n   {\r\n      val = getValueFromLight(normal, toLight, toEye);\r\n   }\r\n\r\n   fragColor = val2Color(gridFactor * val);\r\n   fragColor.a = a;\r\n\r\n   return fragColor;\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec3 toLight;\r\n   if (uPointLight)\r\n   {\r\n      toLight = normalize(uLightPos - vVertex);\r\n   }\r\n   else\r\n   {\r\n      toLight = normalize(uLightPos);\r\n   }\r\n\r\n   bool inShadow = in_shadow();\r\n\r\n   vec3 toEye;\r\n   if (uOrthographic)\r\n   {\r\n      toEye = vec3(0.0, 0.0, 1.0);\r\n   }\r\n   else\r\n   {\r\n      toEye = normalize(uEye - vVertex);\r\n   }\r\n\r\n   vec3 normal = normalize(vNormal); // vNormal is interpolated and nolonger normal\r\n\r\n   // swap normals for back facing triangles\r\n   if (dot(normal, toEye) < 0.0)\r\n   {\r\n      normal = -normal;\r\n   }\r\n\r\n   // compute diffuse contribution = cos of angle between the vectors (dot product)\r\n   float vDot = dot(normal, toLight);\r\n\r\n   vec4 fragColor;\r\n   if (uRenderingFloor)\r\n   {\r\n      fragColor = getFloorColor(inShadow, normal, toLight, toEye);\r\n   }\r\n   else\r\n   {\r\n      if (uRenderMode == CONTOUR_PLANES)\r\n      {\r\n         if (inShadow)\r\n         {\r\n            fragColor = val2Color(uAmbientIntensity);\r\n         }\r\n         else\r\n         {\r\n            fragColor = getContourPlaneColor(vDot, normal, toLight, toEye);\r\n         }\r\n      }\r\n      else if (uRenderMode == CONTOUR_VALUES)\r\n      {\r\n         if (inShadow)\r\n         {\r\n            fragColor = val2ContourColor(uAmbientIntensity);\r\n         }\r\n         else\r\n         {\r\n            fragColor = getContourValueColor(vDot, normal, toLight, toEye);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         vec4 highlightColor = vec4(0.0, 0.7, 0.7, 1.0);\r\n\r\n         if (inShadow)\r\n         {\r\n            if (uRenderMode == HIGHLIGHT_SHADOW)\r\n            {\r\n               fragColor = highlightColor;\r\n            }\r\n            else if (uRenderMode == LIGHT_AND_SHADOW)\r\n            {\r\n               fragColor = val2Color(uAmbientIntensity);\r\n            }\r\n            else\r\n            {\r\n               // when in shadow, apply slight shading as if the light\r\n               // were coming from the eye.\r\n               vec3 toShadowLight = vec3(0.0, 0.0, 1.0);\r\n               float val = getValueFromLight(normal, toShadowLight, toEye) / 20.0;\r\n               fragColor = val2Color(uAmbientIntensity + val);\r\n            }\r\n         }\r\n         else\r\n         {\r\n            if (uRenderMode == LIGHT_AND_SHADOW)\r\n            {\r\n               fragColor = val2Color(uAmbientIntensity + 0.75 * uDiffuseIntensity);\r\n               vec4 shadowColor = val2Color(uAmbientIntensity);\r\n\r\n               float vDot = dot(normal, toLight);\r\n               float angle = (180.0 / 3.1415926) * acos(vDot);\r\n               float range = 8.0; // degrees\r\n               float percentTerminator = clamp((angle - (90.0 - range)) / (range / 2.0), 0.0, 1.0);\r\n               fragColor = mix(fragColor, shadowColor, percentTerminator);\r\n            }\r\n            else if (uRenderMode == HIGHLIGHT_SHADOW || uRenderMode == HIGHLIGHT_TERMINATOR)\r\n            {\r\n               // fade highlighting from terminator through the shadow\r\n               float val = getValueFromLight(normal, toLight, toEye);\r\n               fragColor = val2Color(val);\r\n\r\n               float vDot = dot(normal, toLight);\r\n               float angle = (180.0 / 3.1415926) * acos(vDot);\r\n               float range = 8.0; // degrees\r\n               float percentTerminator;\r\n\r\n               if (uRenderMode == HIGHLIGHT_SHADOW)\r\n               {\r\n                  percentTerminator = clamp((angle - (90.0 - range)) / (range), 0.0, 1.0);\r\n               }\r\n               else\r\n               {\r\n                  if (angle > 90.0)\r\n                  {\r\n                     range = 2.0;\r\n                     percentTerminator = clamp(1.0 - (angle - 90.0) / range, 0.0, 1.0);\r\n                  }\r\n                  else\r\n                  {\r\n                     percentTerminator = clamp((angle - (90.0 - range)) / (range), 0.0, 1.0);\r\n                  }\r\n               }\r\n               fragColor = mix(fragColor, highlightColor, percentTerminator);\r\n            }\r\n            else\r\n            {\r\n               float val = getValueFromLight(normal, toLight, toEye);\r\n               fragColor = val2Color(val);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   gl_FragColor = fragColor;\r\n}");

/***/ }),

/***/ "./src/shaders/ViewerVertex.glsl":
/*!***************************************!*\
  !*** ./src/shaders/ViewerVertex.glsl ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("attribute vec3 aVertex;\r\nattribute vec3 aNormal;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 lightView;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec3 vVertex;\r\nvarying vec3 vShadowVertex;\r\nvarying vec3 vModelVertex;\r\n\r\nvoid main()\r\n{\r\n   gl_Position = projection * view * model * vec4(aVertex, 1.0);\r\n   vNormal = (model * vec4(aNormal, 0.0)).xyz;\r\n   vVertex = (model * vec4(aVertex, 1.0)).xyz;\r\n   vShadowVertex = (lightView * model * vec4(aVertex, 1.0)).xyz;\r\n   vModelVertex = aVertex;\r\n}");

/***/ }),

/***/ "./src/styles/styles.css":
/*!*******************************!*\
  !*** ./src/styles/styles.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,