/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Customize the label (the CheckboxLabel) */\r\n.CheckboxLabel {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 25px;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n/* Hide the browser's default checkbox */\r\n.CheckboxLabel input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n/* Create a custom checkbox */\r\n.Checkmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 20px;\r\n  width: 20px;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n/* When the checkbox is checked, add a blue background */\r\n.CheckboxLabel input:checked ~ .Checkmark {\r\n  background-color: #2196f3;\r\n}\r\n\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.Checkmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n\r\n/* Show the checkmark when checked */\r\n.CheckboxLabel input:checked ~ .Checkmark:after {\r\n  display: block;\r\n}\r\n\r\n/* Style the checkmark/indicator */\r\n.CheckboxLabel .Checkmark:after {\r\n  left: 7px;\r\n  top: 3px;\r\n  width: 4px;\r\n  height: 8px;\r\n  border: solid white;\r\n  border-width: 0 3px 3px 0;\r\n  -webkit-transform: rotate(45deg);\r\n  -ms-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .CheckboxLabel {\r\n    padding-left: 50px;\r\n  }\r\n\r\n  /* Create a custom checkbox */\r\n  .Checkmark {\r\n    height: 40px;\r\n    width: 40px;\r\n  }\r\n\r\n  /* Style the checkmark/indicator */\r\n  .CheckboxLabel .Checkmark:after {\r\n    left: 14px;\r\n    top: 6px;\r\n    width: 8px;\r\n    height: 16px;\r\n    border-width: 0 6px 6px 0;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css":
/*!**********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".ListBox {\r\n  background-color: white;\r\n  overflow-y: scroll;\r\n  cursor: pointer;\r\n}\r\n\r\n.ListBoxItem:hover {\r\n  background-color: powderblue;\r\n}\r\n\r\n.ListBoxItemSelected,\r\n.ListBoxItemSelected:hover {\r\n  background-color: steelblue;\r\n  color: white;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".Menubar {\r\n  left: 0px;\r\n  top: 0px;\r\n  right: 0px;\r\n  padding-left: 10px;\r\n  color: black;\r\n  background-color: rgba(var(--main-color), 0.25);\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.Menubar > .MenuItem {\r\n  color: black;\r\n  padding: 8px;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n}\r\n\r\n.Menu {\r\n  display: none;\r\n  position: fixed;\r\n  background-color: rgba(230, 230, 230, 0.9);\r\n  width: 200px;\r\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n  z-index: 1;\r\n}\r\n\r\n.MenuItem {\r\n  color: black;\r\n  padding: 8px;\r\n  text-decoration: none;\r\n  display: block;\r\n  cursor: pointer;\r\n}\r\n\r\n.MenuItem .SliderRange {\r\n  width: 175px;\r\n}\r\n\r\n.MenuItem:hover {\r\n  background-color: rgba(200, 200, 255, 0.75);\r\n}\r\n\r\n/* Style we add or remove as menus are displayed or hidden */\r\n.MenuShow {\r\n  display: block;\r\n}\r\n\r\n.MenuItem .SliderLabel,\r\n.MenuItem .SliderColorSpan,\r\n.MenuItem .SliderValueSpan {\r\n  display: none;\r\n}\r\n\r\n.MenuItem .Checkbox {\r\n  float: left;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .Menu {\r\n    width: 400px;\r\n  }\r\n\r\n  .Menubar > .MenuItem {\r\n    padding: 16px;\r\n  }\r\n\r\n  .MenuItem {\r\n    padding: 16px;\r\n  }\r\n\r\n  .MenuItem .SliderRange {\r\n    width: 350px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css":
/*!****************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#PathTracerApp #description {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  left: 2px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  border-radius: 5px;\r\n  font-size: 10pt;\r\n  font-family: arial;\r\n  color: white;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n}\r\n\r\n#PathTracerApp #drawTime {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 2px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  font-size: 8pt;\r\n  font-family: arial;\r\n  color: white;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n}\r\n\r\n#PathTracerApp #progressBar {\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  right: 0px;\r\n  height: 5px;\r\n  background-color: rgba(50, 205, 50, 0.75);\r\n}\r\n\r\n#PathTracerApp #modeButton {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 5px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  border-radius: 5px;\r\n  font-size: 10pt;\r\n  font-family: arial;\r\n  color: yellow;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n}\r\n\r\n#PathTracerApp .SliderLabel {\r\n  flex: 0 0 150px;\r\n}\r\n\r\n#PathTracerApp .SliderValueSpan {\r\n  flex: 0 0 80px;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #PathTracerApp #drawTime {\r\n    left: 4px;\r\n    top: 10px;\r\n    font-size: 16pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp #modeButton {\r\n    font-size: 20pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp #description {\r\n    font-size: 20pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp .SliderLabel {\r\n    flex: 0 0 300px;\r\n  }\r\n\r\n  #PathTracerApp .SliderValueSpan {\r\n    flex: 0 0 160px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css":
/*!**************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Customize the label (the RadiobuttonLabel) */\r\n.RadiobuttonLabel {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 25px;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n/* Hide the browser's default Radiobutton */\r\n.RadiobuttonLabel input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n/* Create a custom Radiobutton */\r\n.RadioCheckmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 18.5px;\r\n  width: 18px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 50%;\r\n}\r\n\r\n/* When the Radiobutton is checked, add a blue background */\r\n.RadiobuttonLabel input:checked ~ .RadioCheckmark {\r\n  background-color: #2196f3;\r\n}\r\n\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.RadioCheckmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n\r\n/* Show the checkmark when checked */\r\n.RadiobuttonLabel input:checked ~ .RadioCheckmark:after {\r\n  display: block;\r\n}\r\n\r\n/* Style the checkmark/indicator */\r\n.RadiobuttonLabel .RadioCheckmark:after {\r\n  background: white;\r\n  top: 5px;\r\n  left: 4.5px;\r\n  width: 9px;\r\n  height: 8.5px;\r\n  border-radius: 50%;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .RadiobuttonLabel {\r\n    padding-left: 50px;\r\n  }\r\n\r\n  /* Create a custom Radiobutton */\r\n  .RadioCheckmark {\r\n    top: 4px;\r\n    height: 37px;\r\n    width: 36px;\r\n  }\r\n\r\n  /* Style the checkmark/indicator */\r\n  .RadiobuttonLabel .RadioCheckmark:after {\r\n    top: 10px;\r\n    left: 9px;\r\n    width: 18px;\r\n    height: 17px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".SliderDiv {\r\n  display: flex;\r\n  align-items: stretch;\r\n  margin-top: 7px;\r\n  margin-bottom: 7px;\r\n}\r\n\r\n.SliderLabel {\r\n  flex: 0 0 125px;\r\n  text-align: right;\r\n}\r\n\r\n.SliderRange {\r\n  flex: 1 1 200px;\r\n  -webkit-appearance: none;\r\n  outline: none;\r\n  border-radius: 15px;\r\n  height: 15px;\r\n  margin-top: 3px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3) inset;\r\n  border: gray;\r\n  border-style: solid;\r\n  border-width: 0.5px;\r\n  vertical-align: bottom;\r\n}\r\n\r\n.SliderRange::-webkit-slider-thumb {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  border-color: black;\r\n  background: linear-gradient(135deg, lightgreen, darkgreen);\r\n}\r\n\r\n.SliderRange::-moz-range-thumb {\r\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  border-color: black;\r\n  background: linear-gradient(135deg, lightgreen, darkgreen);\r\n  cursor: pointer;\r\n}\r\n\r\n.SliderColorSpan {\r\n  vertical-align: text-bottom;\r\n  flex: 0 0 15px;\r\n  width: 15px;\r\n  height: 15px;\r\n  margin-right: 5px;\r\n  margin-top: 2px;\r\n  border-radius: 50%;\r\n  border: gray;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n}\r\n\r\n.SliderValueSpan {\r\n  flex: 0 0 60px;\r\n}\r\n\r\n#Slider .disabled {\r\n  color: gray;\r\n}\r\n\r\n#Slider .disabled::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n  border-color: gray;\r\n}\r\n\r\n#Slider .disabled::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n  border-color: gray;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .SliderDiv {\r\n    margin-top: 12px;\r\n    margin-bottom: 12px;\r\n  }\r\n\r\n  .SliderLabel {\r\n    flex: 0 0 250px;\r\n  }\r\n\r\n  .SliderRange {\r\n    flex: 1 1 400px;\r\n    border-radius: 30px;\r\n    height: 30px;\r\n    margin-top: 6px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.3) inset;\r\n    border-width: 1px;\r\n  }\r\n\r\n  .SliderRange::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    box-shadow: 2px 2px 2px #000000, 0px 0px 2px #0d0d0d;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-width: 1px;\r\n  }\r\n\r\n  .SliderRange::-moz-range-thumb {\r\n    box-shadow: 2px 2px 2px #000000, 0px 0px 1px #0d0d0d;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-width: 1px;\r\n  }\r\n\r\n  .SliderColorSpan {\r\n    flex: 0 0 30px;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-right: 10px;\r\n    margin-top: 4px;\r\n    border-width: 2px;\r\n  }\r\n\r\n  .SliderValueSpan {\r\n    flex: 0 0 120px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#SquintApp #Panel {\r\n  flex: 0 0 300px;\r\n  display: block;\r\n  background-color: white;\r\n}\r\n\r\n#SquintApp #Canvas {\r\n  flex-grow: 1;\r\n}\r\n\r\n#SquintApp .Picture {\r\n  background-color: lightblue;\r\n  padding: 10px;\r\n}\r\n\r\n#SquintApp .Camera {\r\n  background-color: lightpink;\r\n  padding: 10px;\r\n}\r\n\r\n#SquintApp .SliderLabel .disabled {\r\n  color: gray;\r\n}\r\n\r\n#SquintApp #Slider .disabled::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, lightgray);\r\n}\r\n\r\n#SquintApp .CheckboxDiv {\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n#SquintApp .RadiobuttonDiv {\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n#SquintApp .SliderLabel {\r\n  flex: 0 0 80px;\r\n}\r\n\r\n#SquintApp .SliderRange {\r\n  flex: 1 1 80px;\r\n}\r\n\r\n#SquintApp .DialogBackground {\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1; /* Sit on top */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  background-color: rgb(0, 0, 0, 0.4);\r\n  display: none;\r\n}\r\n\r\n#SquintApp #DialogDiv {\r\n  position: absolute;\r\n  flex-direction: column;\r\n  display: flex;\r\n  top: 20%;\r\n  left: 20%;\r\n  width: 60%;\r\n  height: 60%;\r\n  background-color: white;\r\n  border-radius: 20px;\r\n}\r\n\r\n#SquintApp #DialogTitleDiv {\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n  background-color: lightgray;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  display: flex;\r\n}\r\n\r\n#SquintApp #TitleDiv {\r\n  font-weight: bold;\r\n}\r\n\r\n#SquintApp #ConnectingText {\r\n  color: white;\r\n  flex: 1 1 auto;\r\n  text-align: right;\r\n  padding-right: 10px;\r\n}\r\n\r\n#SquintApp #ConnectingAnimation {\r\n  zoom: 0.2;\r\n}\r\n\r\n#SquintApp #DialogBodyDiv {\r\n  display: flex;\r\n  background-color: white;\r\n  border-bottom-right-radius: 10px;\r\n  border-bottom-left-radius: 10px;\r\n  flex: 1 1;\r\n  position: relative;\r\n}\r\n\r\n#SquintApp .ButtonDiv {\r\n  text-align: right;\r\n}\r\n\r\n#SquintApp #ViewPanelDiv {\r\n  flex: auto;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: lightblue;\r\n  border-radius: 10px;\r\n}\r\n\r\n#SquintApp #ViewButton {\r\n  flex: 0 1 20px;\r\n  margin-top: 10px;\r\n}\r\n\r\n#SquintApp #ViewListBox {\r\n  margin-top: 10px;\r\n  flex: 1 1 auto;\r\n}\r\n\r\n#SquintApp #OrParentDiv {\r\n  align-items: center;\r\n  justify-content: center;\r\n  display: flex;\r\n}\r\n\r\n#SquintApp #OrDiv {\r\n  padding: 10px;\r\n}\r\n\r\n#SquintApp #HostPanelDiv {\r\n  flex: auto;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: lightpink;\r\n  border-radius: 10px;\r\n}\r\n\r\n#SquintApp #SessionNameDiv {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #NameInputText {\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n}\r\n\r\n#SquintApp .Stretch {\r\n  flex: 1 0 auto;\r\n}\r\n\r\n#SquintApp .NoStretch {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n#SquintApp #Video {\r\n  display: \"none\";\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 50px;\r\n  width: 20%;\r\n  border: solid 1px;\r\n  border-color: white;\r\n}\r\n\r\n#SquintApp #Canvas {\r\n  font-size: 40px;\r\n}\r\n\r\n/* cool animation from https://loading.io/css/ */\r\n.lds-ring {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 80px;\r\n}\r\n.lds-ring div {\r\n  box-sizing: border-box;\r\n  display: block;\r\n  position: absolute;\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 8px;\r\n  border: 8px solid #fff;\r\n  border-radius: 50%;\r\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n  border-color: #fff transparent transparent transparent;\r\n}\r\n.lds-ring div:nth-child(1) {\r\n  animation-delay: -0.45s;\r\n}\r\n.lds-ring div:nth-child(2) {\r\n  animation-delay: -0.3s;\r\n}\r\n.lds-ring div:nth-child(3) {\r\n  animation-delay: -0.15s;\r\n}\r\n@keyframes lds-ring {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n@media (orientation: landscape) {\r\n  #SquintApp #DialogBodyDiv {\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  #SquintApp #DialogBodyDiv {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #SquintApp #Video {\r\n    top: 100px;\r\n    width: 30%;\r\n  }\r\n\r\n  #SquintApp #HostPanelDiv,\r\n  #SquintApp #ViewPanelDiv {\r\n    padding: 20px;\r\n    margin: 20px;\r\n  }\r\n\r\n  #SquintApp .SliderLabel {\r\n    flex: 0 0 120px;\r\n  }\r\n\r\n  #SquintApp #ConnectingAnimation {\r\n    zoom: 0.4;\r\n  }\r\n  #SquintApp * {\r\n    font-size: 25pt;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Style the tab */\r\n.Tabs {\r\n  overflow: hidden;\r\n}\r\n\r\n/* Style the buttons that are used to open the tab content */\r\n.Tabs button {\r\n  background-color: #fff;\r\n  float: left;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  padding: 10px 20px;\r\n  color: #333;\r\n}\r\n\r\n/* Change background color of buttons on hover */\r\n.Tabs button:hover {\r\n  background-color: #ddd;\r\n  color: #000;\r\n}\r\n\r\n/* Create an active/current tablink class */\r\n.Tabs button.active {\r\n  background-color: #eee;\r\n  color: #000;\r\n}\r\n\r\n/* Style the tab content */\r\n.TabContent {\r\n  display: none;\r\n  padding: 20px 12px;\r\n  background-color: #eee;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .Tabs button {\r\n    padding: 20px 40px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#ViewerApp #PerspectiveCanvas {\r\n  background-color: rgb(114, 117, 134);\r\n  height: 100px;\r\n  width: 100%;\r\n}\r\n\r\n#ViewerApp #ValuePlanesPanel {\r\n  height: 154px;\r\n  width: 100%;\r\n}\r\n\r\n#ValuePlanesPanel .SlidersDiv {\r\n  position: absolute;\r\n  left: 0px;\r\n  right: 154px;\r\n}\r\n\r\n#ValuePlanesPanel #LightLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #LightLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #MidLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #MidLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #DarkLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #DarkLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #ValuePlanesCanvas {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: rgb(128, 128, 150);\r\n}\r\n\r\n#ValuePlanesPanel #ValuePlanesOverlayCanvas {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: transparent;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #ViewerApp #PerspectiveCanvas {\r\n    height: 200px;\r\n  }\r\n\r\n  #ViewerApp #ValuePlanesPanel {\r\n    height: 308px;\r\n  }\r\n\r\n  #ValuePlanesPanel .SlidersDiv {\r\n    right: 308px;\r\n  }\r\n\r\n  #ValuePlanesPanel #ValuePlanesCanvas {\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n\r\n  #ValuePlanesPanel #ValuePlanesOverlayCanvas {\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
var ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Menu.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css");
var ___CSS_LOADER_AT_RULE_IMPORT_1___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Slider.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css");
var ___CSS_LOADER_AT_RULE_IMPORT_2___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Tabs.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css");
var ___CSS_LOADER_AT_RULE_IMPORT_3___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Checkbox.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css");
var ___CSS_LOADER_AT_RULE_IMPORT_4___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Radiobutton.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css");
var ___CSS_LOADER_AT_RULE_IMPORT_5___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./ListBox.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css");
var ___CSS_LOADER_AT_RULE_IMPORT_6___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./PathTracerApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css");
var ___CSS_LOADER_AT_RULE_IMPORT_7___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./ViewerApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css");
var ___CSS_LOADER_AT_RULE_IMPORT_8___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./SquintApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css");
exports = ___CSS_LOADER_API_IMPORT___(false);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_1___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_2___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_3___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_4___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_5___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_6___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_7___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_8___);
// Module
exports.push([module.i, "* {\r\n  font-family: Verdana;\r\n}\r\n\r\n:root {\r\n  --main-color: 114, 117, 134;\r\n}\r\n\r\nbody {\r\n  margin: 0px;\r\n  scrollbar-width: none;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.Container {\r\n  position: relative;\r\n}\r\n\r\n.FlexContainer {\r\n  display: flex;\r\n}\r\n\r\n#MainCanvas {\r\n  background-color: rgb(114, 117, 134);\r\n}\r\n\r\n.Overlay {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  font-size: 40px;\r\n  text-align: center;\r\n  color: white;\r\n  background-color: transparent;\r\n  user-select: none;\r\n  pointer-events: none;\r\n}\r\n\r\n/* hide panels by default - users show them via menus */\r\n.Panel {\r\n  display: none;\r\n}\r\n\r\n.Panel #ExitButton {\r\n  position: absolute;\r\n  display: inline-block;\r\n  width: 20px;\r\n  right: 0;\r\n  top: 0;\r\n  cursor: pointer;\r\n  color: lightgray;\r\n  z-index: 1;\r\n}\r\n\r\n.ViewerApp #ExitButton:hover {\r\n  color: red;\r\n}\r\n\r\n#Console {\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  bottom: 0px;\r\n  right: 0px;\r\n  background-color: darkblue;\r\n  color: white;\r\n  font-size: \"12px\";\r\n  display: none;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  * {\r\n    font-size: 40px;\r\n  }\r\n\r\n  .Panel #ExitButton {\r\n    width: 40px;\r\n  }\r\n\r\n  .OverlayAnnotation {\r\n    font-size: 20pt;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js":
/*!******************************************************************!*\
  !*** ./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var SDPUtils = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        // If the offer contained RTX but the answer did not,
        // remove RTX from sendEncodingParameters.
        var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

        var hasRtx = commonCapabilities.codecs.filter(function(c) {
          return c.name.toLowerCase() === 'rtx';
        }).length;
        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
          delete transceiver.sendEncodingParameters[0].rtx;
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
      }
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && transceiver.dtlsTransport &&
          !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      }
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};


/***/ }),

/***/ "./node_modules/sdp/sdp.js":
/*!*********************************!*\
  !*** ./node_modules/sdp/sdp.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env node */


// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  var parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES paramters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(parts) {
      return parts.attribute === 'cname';
    });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(function(line) {
      var parts = line.substr(17).split(' ');
      return parts.map(function(part) {
        return parseInt(part, 10);
      });
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(obj) {
      return obj.attribute === 'cname';
    })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(msidParts) {
      return msidParts.attribute === 'msid';
    });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n'
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
    transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
    transceiver.dtlsTransport.getLocalParameters(),
    type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_core.js":
/*!************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_core.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter_factory.js */ "./node_modules/webrtc-adapter/src/js/adapter_factory.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





const adapter =
  Object(_adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__["adapterFactory"])({window: typeof window === 'undefined' ? undefined : window});
/* harmony default export */ __webpack_exports__["default"] = (adapter);


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_factory.js ***!
  \***************************************************************/
/*! exports provided: adapterFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adapterFactory", function() { return adapterFactory; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chrome/chrome_shim */ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js");
/* harmony import */ var _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./edge/edge_shim */ "./node_modules/webrtc-adapter/src/js/edge/edge_shim.js");
/* harmony import */ var _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./firefox/firefox_shim */ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js");
/* harmony import */ var _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./safari/safari_shim */ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js");
/* harmony import */ var _common_shim__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common_shim */ "./node_modules/webrtc-adapter/src/js/common_shim.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */


  // Browser shims.






// Shimming starts here.
function adapterFactory({window} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimEdge: true,
  shimSafari: true,
}) {
  // Utils.
  const logging = _utils__WEBPACK_IMPORTED_MODULE_0__["log"];
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  const adapter = {
    browserDetails,
    commonShim: _common_shim__WEBPACK_IMPORTED_MODULE_5__,
    extractVersion: _utils__WEBPACK_IMPORTED_MODULE_0__["extractVersion"],
    disableLog: _utils__WEBPACK_IMPORTED_MODULE_0__["disableLog"],
    disableWarnings: _utils__WEBPACK_IMPORTED_MODULE_0__["disableWarnings"]
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ || !_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimPeerConnection"] ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__;

      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimGetUserMedia"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimMediaStream"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimPeerConnection"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimOnTrack"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimAddTrackRemoveTrack"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimGetSendersWithDtmf"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimGetStats"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["shimSenderReceiverGetStats"](window);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__["fixNegotiationNeeded"](window);

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimRTCIceCandidate"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimConnectionState"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["removeAllowExtmapMixed"](window);
      break;
    case 'firefox':
      if (!_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__ || !_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimPeerConnection"] ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__;

      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimGetUserMedia"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimPeerConnection"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimOnTrack"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimRemoveStream"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimSenderGetStats"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimReceiverGetStats"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimRTCDataChannel"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimAddTransceiver"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimGetParameters"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimCreateOffer"](window);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_3__["shimCreateAnswer"](window);

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimRTCIceCandidate"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimConnectionState"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      break;
    case 'edge':
      if (!_edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__ || !_edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimPeerConnection"] || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__;

      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimGetUserMedia"](window);
      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimGetDisplayMedia"](window);
      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimPeerConnection"](window);
      _edge_edge_shim__WEBPACK_IMPORTED_MODULE_2__["shimReplaceTrack"](window);

      // the edge shim implements the full RTCIceCandidate object.

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      break;
    case 'safari':
      if (!_safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__ || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__;

      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimRTCIceServerUrls"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimCreateOfferLegacy"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimCallbacksAPI"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimLocalStreamsAPI"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimRemoteStreamsAPI"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimTrackEventTransceiver"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimGetUserMedia"](window);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_4__["shimAudioContext"](window);

      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimRTCIceCandidate"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimMaxMessageSize"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["shimSendThrowTypeError"](window);
      _common_shim__WEBPACK_IMPORTED_MODULE_5__["removeAllowExtmapMixed"](window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js ***!
  \******************************************************************/
/*! exports provided: shimGetUserMedia, shimGetDisplayMedia, shimMediaStream, shimOnTrack, shimGetSendersWithDtmf, shimGetStats, shimSenderReceiverGetStats, shimAddTrackRemoveTrackWithNative, shimAddTrackRemoveTrack, shimPeerConnection, fixNegotiationNeeded */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimMediaStream", function() { return shimMediaStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimOnTrack", function() { return shimOnTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetSendersWithDtmf", function() { return shimGetSendersWithDtmf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetStats", function() { return shimGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimSenderReceiverGetStats", function() { return shimSenderReceiverGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAddTrackRemoveTrackWithNative", function() { return shimAddTrackRemoveTrackWithNative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAddTrackRemoveTrack", function() { return shimAddTrackRemoveTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimPeerConnection", function() { return shimPeerConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixNegotiationNeeded", function() { return fixNegotiationNeeded; });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return _getusermedia__WEBPACK_IMPORTED_MODULE_1__["shimGetUserMedia"]; });

/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__["shimGetDisplayMedia"]; });

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */






function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
      window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = (e) => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {track: te.track};
              }

              const event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {track};
              }
              const event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver',
          {value: {receiver: e.receiver}});
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection &&
      !('getSenders' in window.RTCPeerConnection.prototype) &&
      'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack =
        function addTrack(track, stream) {
          let sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack =
        function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          const idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
    }
    const origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);

        stream.getTracks().forEach(track => {
          const sender = this._senders.find(s => s.track === track);
          if (sender) { // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
  } else if (typeof window === 'object' && window.RTCPeerConnection &&
             'getSenders' in window.RTCPeerConnection.prototype &&
             'createDTMFSender' in window.RTCPeerConnection.prototype &&
             window.RTCRtpSender &&
             !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 ||
        typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_,
        selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["filterStats"](result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers =
        function getReceivers() {
          const receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
    }
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result =>
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["filterStats"](result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype &&
      'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 &&
        arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || (sender && receiver)) {
        return Promise.reject(new DOMException(
          'There are more than one sender or receiver for the track.',
          'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        'There is no sender or receiver for the track.',
        'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams)
        .map(streamId => this._shimmedLocalStreams[streamId][0]);
    };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      const sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders()
      .filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
}

function shimAddTrackRemoveTrack(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack &&
      browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  const origGetLocalStreams = window.RTCPeerConnection.prototype
      .getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      const nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};

      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);
      delete this._reverseStreams[(this._streams[stream.id] ?
          this._streams[stream.id].id : stream.id)];
      delete this._streams[stream.id];
    };

  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      const streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      const oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        const newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
          externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
          internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function(method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {[method]() {
      const args = arguments;
      const isLegacyCall = arguments.length &&
          typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments)
      .then(description => replaceInternalStreamId(this, description));
    }};
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  const origSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  const origLocalDescription = Object.getOwnPropertyDescriptor(
      window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype,
      'localDescription', {
        get() {
          const description = origLocalDescription.get.apply(this);
          if (description.type === '') {
            return description;
          }
          return replaceInternalStreamId(this, description);
        }
      });

  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      const isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      let stream;
      Object.keys(this._streams).forEach(streamid => {
        const hasTrack = this._streams[streamid].getTracks()
          .find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
}

function shimPeerConnection(window) {
  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  const addIceCandidateNullSupported =
    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  // support for addIceCandidate(null or undefined)
  const nativeAddIceCandidate =
      window.RTCPeerConnection.prototype.addIceCandidate;
  window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!addIceCandidateNullSupported && !arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions. Native support planned for Chrome M77.
      if (browserDetails.version < 78 &&
        arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window) {
  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'negotiationneeded', e => {
    const pc = e.target;
    if (browserDetails.version < 72 || (pc.getConfiguration &&
        pc.getConfiguration().sdpSemantics === 'plan-b')) {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js":
/*!**********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js ***!
  \**********************************************************************/
/*! exports provided: shimGetDisplayMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return shimGetDisplayMedia; });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' +
        'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      return getSourceId(constraints)
        .then(sourceId => {
          const widthSpecified = constraints.video && constraints.video.width;
          const heightSpecified = constraints.video &&
            constraints.video.height;
          const frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js ***!
  \*******************************************************************/
/*! exports provided: shimGetUserMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


const logging = _utils_js__WEBPACK_IMPORTED_MODULE_0__["log"];

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const browserDetails = _utils_js__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  const constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      const remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            let dev = devices.find(d => matches.some(match =>
              d.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/common_shim.js":
/*!***********************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/common_shim.js ***!
  \***********************************************************/
/*! exports provided: shimRTCIceCandidate, shimMaxMessageSize, shimSendThrowTypeError, shimConnectionState, removeAllowExtmapMixed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRTCIceCandidate", function() { return shimRTCIceCandidate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimMaxMessageSize", function() { return shimMaxMessageSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimSendThrowTypeError", function() { return shimSendThrowTypeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimConnectionState", function() { return shimConnectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAllowExtmapMixed", function() { return removeAllowExtmapMixed; });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate &&
        args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.parseCandidate(args.candidate);
      const augmentedCandidate = Object.assign(nativeCandidate,
          parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment,
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  _utils__WEBPACK_IMPORTED_MODULE_1__["wrapPeerConnectionEvent"](window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimMaxMessageSize(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_1__["detectBrowser"](window);

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application'
          && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function(description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize =
          browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox'
         && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = sdp__WEBPACK_IMPORTED_MODULE_0___default.a.matchPrefix(description.sdp,
      'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' &&
                remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
    function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        const {sdpSemantics} = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true,
          });
        }
      }

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        const isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        const canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        let maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        const sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection &&
      'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' &&
          pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' +
          pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel =
    window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel =
    function createDataChannel() {
      const dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
  _utils__WEBPACK_IMPORTED_MODULE_1__["wrapPeerConnectionEvent"](window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}


/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection ||
      'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange',
            this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange',
            this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange',
          this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeAllowExtmapMixed(window) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_1__["detectBrowser"](window);
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
  function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      desc.sdp = desc.sdp.split('\n').filter((line) => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
    }
    return nativeSRD.apply(this, arguments);
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/edge_shim.js":
/*!**************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/edge_shim.js ***!
  \**************************************************************/
/*! exports provided: shimGetUserMedia, shimGetDisplayMedia, shimPeerConnection, shimReplaceTrack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimPeerConnection", function() { return shimPeerConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimReplaceTrack", function() { return shimReplaceTrack; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _filtericeservers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filtericeservers */ "./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js");
/* harmony import */ var rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rtcpeerconnection-shim */ "./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js");
/* harmony import */ var rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/edge/getusermedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return _getusermedia__WEBPACK_IMPORTED_MODULE_3__["shimGetUserMedia"]; });

/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return _getdisplaymedia__WEBPACK_IMPORTED_MODULE_4__["shimGetDisplayMedia"]; });

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */









function shimPeerConnection(window) {
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  if (window.RTCIceGatherer) {
    if (!window.RTCIceCandidate) {
      window.RTCIceCandidate = function RTCIceCandidate(args) {
        return args;
      };
    }
    if (!window.RTCSessionDescription) {
      window.RTCSessionDescription = function RTCSessionDescription(args) {
        return args;
      };
    }
    // this adds an additional event listener to MediaStrackTrack that signals
    // when a tracks enabled property was changed. Workaround for a bug in
    // addStream, see below. No longer required in 15025+
    if (browserDetails.version < 15025) {
      const origMSTEnabled = Object.getOwnPropertyDescriptor(
          window.MediaStreamTrack.prototype, 'enabled');
      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
        set(value) {
          origMSTEnabled.set.call(this, value);
          const ev = new Event('enabled');
          ev.enabled = value;
          this.dispatchEvent(ev);
        }
      });
    }
  }

  // ORTC defines the DTMF sender a bit different.
  // https://github.com/w3c/ortc/issues/714
  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = new window.RTCDtmfSender(this);
          } else if (this.track.kind === 'video') {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
  // Edge currently only implements the RTCDtmfSender, not the
  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
  if (window.RTCDtmfSender && !window.RTCDTMFSender) {
    window.RTCDTMFSender = window.RTCDtmfSender;
  }

  const RTCPeerConnectionShim = rtcpeerconnection_shim__WEBPACK_IMPORTED_MODULE_2___default()(window,
      browserDetails.version);
  window.RTCPeerConnection = function RTCPeerConnection(config) {
    if (config && config.iceServers) {
      config.iceServers = Object(_filtericeservers__WEBPACK_IMPORTED_MODULE_1__["filterIceServers"])(config.iceServers,
        browserDetails.version);
      _utils__WEBPACK_IMPORTED_MODULE_0__["log"]('ICE servers after filtering:', config.iceServers);
    }
    return new RTCPeerConnectionShim(config);
  };
  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
}

function shimReplaceTrack(window) {
  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
  if (window.RTCRtpSender &&
      !('replaceTrack' in window.RTCRtpSender.prototype)) {
    window.RTCRtpSender.prototype.replaceTrack =
        window.RTCRtpSender.prototype.setTrack;
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js ***!
  \*********************************************************************/
/*! exports provided: filterIceServers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterIceServers", function() { return filterIceServers; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */



// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  let hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(server => {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('RTCIceServer.url', 'RTCIceServer.urls');
      }
      const isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(url => {
        // filter STUN unconditionally.
        if (url.indexOf('stun:') === 0) {
          return false;
        }

        const validTurn = url.startsWith('turn') &&
            !url.startsWith('turn:[') &&
            url.includes('transport=udp');
        if (validTurn && !hasTurn) {
          hasTurn = true;
          return true;
        }
        return validTurn && !hasTurn;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js ***!
  \********************************************************************/
/*! exports provided: shimGetDisplayMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return shimGetDisplayMedia; });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


function shimGetDisplayMedia(window) {
  if (!('getDisplayMedia' in window.navigator)) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    window.navigator.getDisplayMedia.bind(window.navigator);
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/getusermedia.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/getusermedia.js ***!
  \*****************************************************************/
/*! exports provided: shimGetUserMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  const shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  const origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js ***!
  \********************************************************************/
/*! exports provided: shimGetUserMedia, shimGetDisplayMedia, shimOnTrack, shimPeerConnection, shimSenderGetStats, shimReceiverGetStats, shimRemoveStream, shimRTCDataChannel, shimAddTransceiver, shimGetParameters, shimCreateOffer, shimCreateAnswer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimOnTrack", function() { return shimOnTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimPeerConnection", function() { return shimPeerConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimSenderGetStats", function() { return shimSenderGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimReceiverGetStats", function() { return shimReceiverGetStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRemoveStream", function() { return shimRemoveStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRTCDataChannel", function() { return shimRTCDataChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAddTransceiver", function() { return shimAddTransceiver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetParameters", function() { return shimGetParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCreateOffer", function() { return shimCreateOffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCreateAnswer", function() { return shimCreateAnswer; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return _getusermedia__WEBPACK_IMPORTED_MODULE_1__["shimGetUserMedia"]; });

/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__["shimGetDisplayMedia"]; });

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */






function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent &&
      ('receiver' in window.RTCTrackEvent.prototype) &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimPeerConnection(window) {
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);

  if (typeof window !== 'object' ||
      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  // support for addIceCandidate(null or undefined)
  // as well as ignoring {sdpMid, candidate: ""}
  if (browserDetails.version < 68) {
    const nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      if (arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null])
      .then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      })
      .then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) :
        Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  _utils__WEBPACK_IMPORTED_MODULE_0__["wrapPeerConnectionEvent"](window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection ||
      'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver =
      function addTransceiver() {
        this.setParametersPromises = [];
        const initParameters = arguments[1];
        const shouldPerformCheck = initParameters &&
                                  'sendEncodings' in initParameters;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          initParameters.sendEncodings.forEach((encodingParam) => {
            if ('rid' in encodingParam) {
              const ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        const transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          const {sender} = transceiver;
          const params = sender.getParameters();
          if (!('encodings' in params)) {
            params.encodings = initParameters.sendEncodings;
            sender.sendEncodings = initParameters.sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params)
              .then(() => {
                delete sender.sendEncodings;
              }).catch(() => {
                delete sender.sendEncodings;
              })
            );
          }
        }
        return transceiver;
      };
  }
}

function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters =
      function getParameters() {
        var params = origGetParameters.apply(this, arguments);
        if (!('sendEncodings' in this)) {
          return params;
        }
        return Object.assign({}, {encodings: this.sendEncodings}, params);
      };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateOffer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateAnswer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js":
/*!***********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js ***!
  \***********************************************************************/
/*! exports provided: shimGetDisplayMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return shimGetDisplayMedia; });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        const err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js ***!
  \********************************************************************/
/*! exports provided: shimGetUserMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */




function shimGetUserMedia(window) {
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__["detectBrowser"](window);
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints =
        MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/safari/safari_shim.js ***!
  \******************************************************************/
/*! exports provided: shimLocalStreamsAPI, shimRemoteStreamsAPI, shimCallbacksAPI, shimGetUserMedia, shimConstraints, shimRTCIceServerUrls, shimTrackEventTransceiver, shimCreateOfferLegacy, shimAudioContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimLocalStreamsAPI", function() { return shimLocalStreamsAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRemoteStreamsAPI", function() { return shimRemoteStreamsAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCallbacksAPI", function() { return shimCallbacksAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return shimGetUserMedia; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimConstraints", function() { return shimConstraints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimRTCIceServerUrls", function() { return shimRTCIceServerUrls; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimTrackEventTransceiver", function() { return shimTrackEventTransceiver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimCreateOfferLegacy", function() { return shimCreateOfferLegacy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shimAudioContext", function() { return shimAudioContext; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */



function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams =
      function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,
        stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,
        stream));
    };

    window.RTCPeerConnection.prototype.addTrack =
      function addTrack(track, ...streams) {
        if (streams) {
          streams.forEach((stream) => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        const index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        const tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
  }
}

function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams =
      function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = (e) => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        const pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              const event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
  }
}

function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer =
    function createOffer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  prototype.createAnswer =
    function createAnswer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices &&
    navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints)
      .then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({},
      constraints,
      {video: _utils__WEBPACK_IMPORTED_MODULE_0__["compactObject"](constraints.video)}
    );
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  const OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection =
    function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        const newIceServers = [];
        for (let i = 0; i < pcConfig.iceServers.length; i++) {
          let server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            _utils__WEBPACK_IMPORTED_MODULE_0__["deprecated"]('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent &&
      'receiver' in window.RTCTrackEvent.prototype &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer =
    function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio =
            !!offerOptions.offerToReceiveAudio;
        }
        const audioTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          this.addTransceiver('audio');
        }

        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo =
            !!offerOptions.offerToReceiveVideo;
        }
        const videoTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          this.addTransceiver('video');
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
}

function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/utils.js ***!
  \*****************************************************/
/*! exports provided: extractVersion, wrapPeerConnectionEvent, disableLog, disableWarnings, log, deprecated, detectBrowser, compactObject, walkStats, filterStats */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractVersion", function() { return extractVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapPeerConnectionEvent", function() { return wrapPeerConnectionEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableLog", function() { return disableLog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableWarnings", function() { return disableWarnings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deprecated", function() { return deprecated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detectBrowser", function() { return detectBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compactObject", function() { return compactObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walkStats", function() { return walkStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterStats", function() { return filterStats; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


let logDisabled_ = true;
let deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e) => {
      const modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return (bool) ? 'adapter.js logging disabled' :
      'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
      ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  const result = {browser: null, version: null};

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {navigator} = window;

  if (navigator.mozGetUserMedia) { // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent,
        /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia ||
      (window.isSecureContext === false && window.webkitRTCPeerConnection &&
       !window.RTCIceGatherer)) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent,
        /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (navigator.mediaDevices &&
      navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
    result.browser = 'edge';
    result.version = extractVersion(navigator.userAgent,
        /Edge\/(\d+).(\d+)$/, 2);
  } else if (window.RTCPeerConnection &&
      navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent,
        /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&
        'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else { // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {[key]: value});
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}



/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/Apps/Viewer/LoaderWorker.ts":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/Apps/Viewer/LoaderWorker.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "LoaderWorker.worker.js");
};

/***/ }),

/***/ "./src/Apps/PathTracer/ColorAnalyzer.ts":
/*!**********************************************!*\
  !*** ./src/Apps/PathTracer/ColorAnalyzer.ts ***!
  \**********************************************/
/*! exports provided: ColorAnalyzer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorAnalyzer", function() { return ColorAnalyzer; });
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");

/**
 * This class grabs a copy of the rendered texture and examines it for
 * color values.
 */
var ColorAnalyzer = /** @class */ (function () {
    /**
     * @param size The width and height of the buffer
     */
    function ColorAnalyzer(size) {
        this.size = size;
        // allocate the buffer used for grabs
        this.pixels = new Float32Array(this.size * this.size * 4);
    }
    /**
     * Runs the analysis - grabs a copy of the frame buffer and scans it.
     *
     * @param alphaLight The alpha value for things in light. Values above this are due to specular lighting.
     * @param alphaShadow The alpha value for things in shadow.
     */
    ColorAnalyzer.prototype.run = function (gl, alphaLight, alphaShadow) {
        var data = {
            maxChroma: 0,
            avgLightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            lightestLightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            darkestLightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([1, 1, 1]),
            avgShadowColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            lightestShadowColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            darkestShadowColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([1, 1, 1]),
            terminatorColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            highlightColor: new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
        };
        // TODO handle case when the text type is UNSIGNED_BYTE
        // TODO gl.FLOAT not supported on Safari.
        gl.readPixels(0, 0, this.size, this.size, gl.RGBA, gl.FLOAT, this.pixels);
        var numLightPixels = 0;
        var numShadowPixels = 0;
        var numTerminatorPixels = 0;
        for (var row = 0; row < this.size; row++) {
            for (var col = 0; col < this.size; col++) {
                var index = (row * this.size + col) * 4;
                var r = this.pixels[index + 0];
                var g = this.pixels[index + 1];
                var b = this.pixels[index + 2];
                var a = this.pixels[index + 3];
                // ignore values that are not part of the ball
                if (a === 1) {
                    continue;
                }
                var avg = (r + g + b) / 3;
                var chroma = (Math.abs(r - avg) + Math.abs(g - avg) + Math.abs(b - avg)) / (4 / 3);
                if (chroma > data.maxChroma) {
                    data.maxChroma = chroma;
                }
                var color = new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([r, g, b]);
                if (a == alphaLight) {
                    numLightPixels++;
                    if (data.lightestLightColor == null) {
                        data.lightestLightColor = color;
                    }
                    if (data.darkestLightColor == null) {
                        data.darkestLightColor = color;
                    }
                    data.lightestLightColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.lightestLightColor, color);
                    data.darkestLightColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].darkest(data.darkestLightColor, color);
                    data.avgLightColor.r += color.r;
                    data.avgLightColor.b += color.b;
                    data.avgLightColor.g += color.g;
                }
                else if (a == alphaShadow) {
                    numShadowPixels++;
                    if (data.lightestShadowColor == null) {
                        data.lightestShadowColor = color;
                    }
                    if (data.darkestShadowColor == null) {
                        data.darkestShadowColor = color;
                    }
                    data.lightestShadowColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.lightestShadowColor, color);
                    data.darkestShadowColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].darkest(data.darkestShadowColor, color);
                    data.avgShadowColor.r += color.r;
                    data.avgShadowColor.b += color.b;
                    data.avgShadowColor.g += color.g;
                }
                else if (a > alphaLight) {
                    data.highlightColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.highlightColor, color);
                }
                var terminator = (alphaLight + alphaShadow) / 2.0;
                if (Math.abs(a - terminator) < 0.1) {
                    numTerminatorPixels++;
                    data.terminatorColor.r += color.r;
                    data.terminatorColor.b += color.b;
                    data.terminatorColor.g += color.g;
                }
            }
        }
        if (numLightPixels > 0) {
            data.avgLightColor.r /= numLightPixels;
            data.avgLightColor.g /= numLightPixels;
            data.avgLightColor.b /= numLightPixels;
        }
        if (numShadowPixels > 0) {
            data.avgShadowColor.r /= numShadowPixels;
            data.avgShadowColor.g /= numShadowPixels;
            data.avgShadowColor.b /= numShadowPixels;
        }
        if (numTerminatorPixels > 0) {
            data.terminatorColor.r /= numTerminatorPixels;
            data.terminatorColor.g /= numTerminatorPixels;
            data.terminatorColor.b /= numTerminatorPixels;
        }
        return data;
    };
    return ColorAnalyzer;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/PathTracerApp.ts":
/*!**********************************************!*\
  !*** ./src/Apps/PathTracer/PathTracerApp.ts ***!
  \**********************************************/
/*! exports provided: PathTracerApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerApp", function() { return PathTracerApp; });
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PathTracerRenderer */ "./src/Apps/PathTracer/PathTracerRenderer.ts");
/* harmony import */ var _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/SphericalCoord */ "./src/Util3D/SphericalCoord.ts");
/* harmony import */ var _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../GUI/Slider */ "./src/GUI/Slider.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _gl_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../gl/glColorWithTemperature */ "./src/gl/glColorWithTemperature.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
/* harmony import */ var _Util3D_TriangleObjFile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util3D/TriangleObjFile */ "./src/Util3D/TriangleObjFile.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");











var skinTones = [
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([240, 223, 214]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([255, 218, 200]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([232, 179, 117]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([190, 136, 87]),
    //   new htmlColor([115, 91, 59]),
    new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([139, 73, 65])
    //   new htmlColor([132, 55, 34]),
    //new htmlColor([61, 12, 2]),
    //   new htmlColor([38, 7, 1])
];
var PointerMode;
(function (PointerMode) {
    PointerMode[PointerMode["View"] = 0] = "View";
    PointerMode[PointerMode["Light"] = 1] = "Light";
})(PointerMode || (PointerMode = {}));
var PathTracerApp = /** @class */ (function () {
    function PathTracerApp(query) {
        this.gl = null;
        this.pointerMode = PointerMode.View;
        this.pointerModeSpecial = false;
        this.angleX = 0.5;
        this.angleY = 0.75;
        this.zoomZ = 3.5;
        this.lastTimes = [];
        this.MAX_SAMPLES = 500;
        this.query = query;
    }
    PathTracerApp.prototype.create = function (div) {
        var _this = this;
        div.id = 'PathTracerApp';
        var container = document.createElement('div');
        container.className = 'Container';
        div.appendChild(container);
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'canvasx';
        container.appendChild(this.canvas);
        var context = this.canvas.getContext('webgl2');
        if (!context) {
            context = this.canvas.getContext('webgl');
        }
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        var size = 512;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["isMobile"]) {
            size = document.body.clientWidth;
        }
        this.gl.canvas.width = size;
        this.gl.canvas.height = size;
        div.style.width = size + 'px';
        container.style.height = size + 'px';
        this.renderer = new _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["PathTracerRenderer"](this.gl);
        var handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_5__["PointerEventHandler"](this.canvas);
        handler.onDrag = function (pos, delta) { return _this.onMove(pos, delta); };
        handler.onClick = function (pos) { return _this.click(pos.x, pos.y); };
        handler.onDown = function (pos) { return _this.onDown(pos.x, pos.y); };
        this.loadModel(this.query).then(function (tObj) {
            _this.renderer.setObj(tObj);
            requestAnimationFrame(function () { return _this.tick(); });
        });
        var drawTime = document.createElement('div');
        drawTime.id = 'drawTime';
        container.appendChild(drawTime);
        var description = document.createElement('div');
        description.id = 'description';
        container.appendChild(description);
        var button = document.createElement('div');
        button.id = 'modeButton';
        button.innerHTML = 'View';
        this.pointerMode = PointerMode.View;
        button.onclick = function () {
            switch (_this.pointerMode) {
                case PointerMode.View:
                    button.innerHTML = 'Light';
                    _this.pointerMode = PointerMode.Light;
                    break;
                case PointerMode.Light:
                    button.innerHTML = 'View';
                    _this.pointerMode = PointerMode.View;
                    break;
            }
        };
        container.appendChild(button);
        var progressBar = document.createElement('div');
        progressBar.id = 'progressBar';
        container.appendChild(progressBar);
        this.intensitySlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'LightIntensity',
            label: 'Light Intensity',
            min: 0,
            max: 1,
            value: this.renderer.uniforms.uLightIntensity,
            colors: [_Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].black, _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].white],
            oninput: function () {
                _this.renderer.uniforms.uLightIntensity = _this.intensitySlider.value;
                _this.restart();
            }
        });
        // build a range of colors
        var min = 2000;
        var max = 10000;
        var colors = [];
        for (var i = 0; i < 10; i++) {
            var temp = min + (i / 9) * (max - min);
            colors.push(_gl_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_7__["glColorWithTemperature"].create(temp).toHtmlColor());
        }
        this.lightColorSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'LightColor',
            label: 'Light Color',
            min: 2000,
            max: 10000,
            value: _gl_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_7__["glColorWithTemperature"].daylight.temperature,
            colors: colors,
            oninput: function () {
                _this.setLightColor();
            },
            getText: function (slider) { return slider.value.toFixed() + "K"; }
        });
        // apply the initial colors
        this.setLightColor();
        this.ballColorSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'BallColor',
            label: 'Ball Color',
            min: 0,
            max: 100,
            value: 50,
            colors: skinTones,
            oninput: function () {
                _this.renderer.uniforms.uObjColor = _this.ballColorSlider.glColor;
                _this.restart();
            }
        });
        // make sure gl matches the initial UI setting
        this.renderer.uniforms.uObjColor = this.ballColorSlider.glColor;
        this.ambientIntensitySlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_3__["Slider"](div, {
            id: 'AmbientIntensity',
            label: 'Ambient Light',
            min: 0,
            max: 1,
            value: this.renderer.uniforms.uAmbientLightIntensity,
            colors: [_Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].black, _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].white],
            oninput: function () {
                _this.renderer.uniforms.uAmbientLightIntensity = _this.ambientIntensitySlider.value;
                _this.restart();
            }
        });
    };
    PathTracerApp.prototype.delete = function () {
        cancelAnimationFrame(this.animationFrame);
        this.renderer.delete();
    };
    PathTracerApp.prototype.buildMenu = function (menubar) {
    };
    PathTracerApp.prototype.loadModel = function (query) {
        if (query && query.toLowerCase() === 'sphere') {
            this.renderer.uniforms.uBallRadius = 0;
            var radius = 0.5;
            var center = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, radius, 0]);
            var tObj = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_8__["TriangleObjBuilder"]();
            tObj.addSphere(8, radius, center);
            return Promise.resolve(tObj);
        }
        else if (query && query.toLowerCase() === 'cube') {
            this.renderer.uniforms.uBallRadius = 0;
            var size = 0.8;
            var center = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, size / 2.0, 0]);
            var tObj = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_8__["TriangleObjBuilder"]();
            tObj.addCube(size, center);
            return Promise.resolve(tObj);
        }
        else if (query && query.toLowerCase().endsWith('.obj')) {
            this.renderer.uniforms.uBallRadius = 0;
            return fetch(query)
                .then(function (res) { return res.text(); })
                .then(function (res) {
                var tObj = new _Util3D_TriangleObjFile__WEBPACK_IMPORTED_MODULE_9__["TriangleObjFile"](query, res);
                return tObj;
            });
        }
        else {
            return Promise.resolve(null);
        }
    };
    PathTracerApp.prototype.setLightColor = function () {
        // update the colors for the intensity slider
        this.intensitySlider.colors = [_Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].black, this.lightColorSlider.htmlColor];
        // use the value in rendering
        this.renderer.uniforms.uLightColor = this.lightColorSlider.glColor;
        this.restart();
    };
    PathTracerApp.prototype.onDown = function (x, y) {
        this.pointerModeSpecial = (x < 0.1 * this.canvas.width) ? true : false;
        this.pos = _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_2__["SphericalCoord"].fromXYZ(this.renderer.uniforms.uLightPos.values);
    };
    PathTracerApp.prototype.onMove = function (pos, delta) {
        if (this.pointerMode === PointerMode.View) {
            if (this.pointerModeSpecial) {
                this.zoomZ -= (delta.y) * 0.01;
                this.zoomZ = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["clamp"])(this.zoomZ, 1, 8);
            }
            else {
                // update the angles based on how far we moved since last time
                this.angleY -= (delta.x) * 0.01;
                this.angleX += (delta.y) * 0.01;
                // don't go upside down
                this.angleX = Math.max(this.angleX, -Math.PI / 2 + 0.01);
                this.angleX = Math.min(this.angleX, Math.PI / 2 - 0.01);
            }
        }
        else if (this.pointerMode === PointerMode.Light) {
            if (this.pointerModeSpecial) {
                this.pos.radius -= (delta.y) * 0.005;
                this.pos.radius = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["clamp"])(this.pos.radius, this.renderer.uniforms.uBallRadius + 0.5, 5);
                this.renderer.uniforms.uLightPos.values = this.pos.toXYZ();
            }
            else {
                this.pos.rotationAngle += (-delta.x);
                this.pos.elevationAngle += (-delta.y);
                this.pos.elevationAngle = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["clamp"])(this.pos.elevationAngle, 0, 180);
                this.renderer.uniforms.uLightPos.values = this.pos.toXYZ();
            }
        }
        // clear the sample buffer
        this.restart();
    };
    /**
     * Processes a click/touch event at the designated coordinates. If a hit
     * occurs, the clicked on view is swapped for the primary view and true
     * is returned. If no hit occurs, false is returned.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @returns true if a hit on one of the views occurs.
     */
    PathTracerApp.prototype.click = function (x, y) {
        // TODO handle this within the PathTracer class so that we don't have to hard code view stuff
        var size = 0.2 * this.canvas.width;
        if (y < size) {
            if (x > this.canvas.width - 1 * size) {
                this.swap(2);
                this.setDescription();
                return true;
            }
            else if (x > this.canvas.width - 2 * size) {
                this.swap(1);
                this.setDescription();
                return true;
            }
            else if (x > this.canvas.width - 3 * size) {
                this.swap(0);
                this.setDescription();
                return true;
            }
        }
        return false;
    };
    PathTracerApp.prototype.setDescription = function () {
        var description = document.getElementById('description');
        switch (this.renderer.renderMode) {
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Artist:
                description.innerText = "";
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Chroma:
                description.innerText = "Chroma View: red=highest chroma";
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Value:
                description.innerText = "Value View";
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Bands:
                description.innerText = "5 Color + Highlight View";
                break;
        }
    };
    PathTracerApp.prototype.updateTexture = function () {
        var modelview = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_10__["Mat4"].makeLookAt(this.renderer.uniforms.uEye, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, 1, 0]), // center point
        new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_6__["Vec3"]([0, 1, 0]) // up vector
        );
        var projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_10__["Mat4"].makePerspective(55, 1, 0.1, 100);
        var modelviewProjection = projection.multM(modelview);
        this.renderer.updateTexture(modelviewProjection);
    };
    ;
    PathTracerApp.prototype.displayTexture = function () {
        this.renderer.displayTexture();
    };
    ;
    PathTracerApp.prototype.restart = function () {
        if (this.renderer) {
            this.renderer.restart();
        }
    };
    PathTracerApp.prototype.swap = function (pos) {
        this.renderer.swap(pos);
    };
    PathTracerApp.prototype.tick = function () {
        var _this = this;
        this.updateTimerLabel();
        this.updateProgress();
        if (this.renderer.uniforms.uSample < this.MAX_SAMPLES) {
            this.renderer.uniforms.uEye.values[0] = this.zoomZ * Math.sin(this.angleY) * Math.cos(this.angleX);
            this.renderer.uniforms.uEye.values[1] = this.zoomZ * Math.sin(this.angleX);
            this.renderer.uniforms.uEye.values[2] = this.zoomZ * Math.cos(this.angleY) * Math.cos(this.angleX);
            this.updateTexture();
            this.displayTexture();
        }
        this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
    };
    PathTracerApp.prototype.updateTimerLabel = function () {
        var t = window.performance.now();
        var drawTimeLabel = document.getElementById('drawTime');
        if (this.lastTimes.length > 0) {
            var elapsedMs = (t - this.lastTimes[0]) / this.lastTimes.length;
            drawTimeLabel.innerText = elapsedMs.toFixed(0) + 'ms';
        }
        this.lastTimes.push(t);
        if (this.lastTimes.length > 30) {
            this.lastTimes.shift();
        }
        drawTimeLabel.style.visibility = this.renderer.uniforms.uSample < this.MAX_SAMPLES ? 'visible' : 'hidden';
    };
    PathTracerApp.prototype.updateProgress = function () {
        var progress = this.renderer.uniforms.uSample / this.MAX_SAMPLES;
        var bar = document.getElementById('progressBar');
        if (progress >= 0 && progress < 1) {
            bar.style.visibility = 'visible';
            var w = this.canvas.width;
            bar.style.right = w * (1 - progress) + 'px';
        }
        else {
            bar.style.visibility = 'hidden';
        }
    };
    return PathTracerApp;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/PathTracerObj.ts":
/*!**********************************************!*\
  !*** ./src/Apps/PathTracer/PathTracerObj.ts ***!
  \**********************************************/
/*! exports provided: PathTracerObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerObj", function() { return PathTracerObj; });
/* harmony import */ var _Volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Volume */ "./src/Apps/PathTracer/Volume.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util3D_IndexedVec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/IndexedVec3 */ "./src/Util3D/IndexedVec3.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");




/**
 * Wrapper for TriangleObj used by the PathTracer app. Adds the ability to
 * move vertices (as opposed to using a tranformation matrix) and to break
 * things down into volumes.
 */
var PathTracerObj = /** @class */ (function () {
    function PathTracerObj(tObj) {
        this.volumes = [];
        this.tObj = tObj;
        this.autoCenter();
        this.breakIntoVolumes();
    }
    /**
     * Scales the object, centers it, and puts it on the floor at y=0
     */
    PathTracerObj.prototype.autoCenter = function () {
        var center = this.tObj.box.center;
        var trans = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-center.x, -center.y + this.tObj.height / 2, -center.z]);
        var scale = 2 / this.tObj.diagonal;
        for (var i = 0; i < this.tObj.numVertices; i++) {
            var v = new _Util3D_IndexedVec3__WEBPACK_IMPORTED_MODULE_2__["IndexedVec3"](this.tObj.vertices, i);
            v.x = (v.x + trans.x) * scale;
            v.y = (v.y + trans.y) * scale;
            v.z = (v.z + trans.z) * scale;
        }
        this.tObj.box.min.x = (this.tObj.box.min.x + trans.x) * scale;
        this.tObj.box.min.y = (this.tObj.box.min.y + trans.y) * scale;
        this.tObj.box.min.z = (this.tObj.box.min.z + trans.z) * scale;
        this.tObj.box.max.x = (this.tObj.box.max.x + trans.x) * scale;
        this.tObj.box.max.y = (this.tObj.box.max.y + trans.y) * scale;
        this.tObj.box.max.z = (this.tObj.box.max.z + trans.z) * scale;
        for (var i = 0; i < this.volumes.length; i++) {
            var v = this.volumes[i];
            v.boxMin.x = (v.boxMin.x + trans.x) * scale;
            v.boxMin.y = (v.boxMin.y + trans.y) * scale;
            v.boxMin.z = (v.boxMin.z + trans.z) * scale;
            v.boxMax.x = (v.boxMax.x + trans.x) * scale;
            v.boxMax.y = (v.boxMax.y + trans.y) * scale;
            v.boxMax.z = (v.boxMax.z + trans.z) * scale;
        }
    };
    /**
     * Breaks the object into evenly spaced volumes. The number of volumes is automatically
     * determined based on the number of triangles.
     */
    PathTracerObj.prototype.breakIntoVolumes = function () {
        var numSteps;
        if (this.tObj.numTriangles < 40) {
            numSteps = 1;
        }
        else if (this.tObj.numTriangles < 1500) {
            numSteps = 2;
        }
        else {
            numSteps = 3;
        }
        this.volumes = [];
        for (var i = 0; i < Math.pow(numSteps, 3); i++) {
            this.volumes.push(new _Volume__WEBPACK_IMPORTED_MODULE_0__["Volume"]());
        }
        for (var i = 0; i < this.tObj.numTriangles; i++) {
            var t = this.tObj.getTriangle(i);
            var x = Math.floor(numSteps * (t.minX - this.tObj.box.min.x) / (this.tObj.box.width));
            var y = Math.floor(numSteps * (t.minY - this.tObj.box.min.y) / (this.tObj.box.height));
            var z = Math.floor(numSteps * (t.minZ - this.tObj.box.min.z) / (this.tObj.box.depth));
            x = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["clamp"])(x, 0, numSteps - 1);
            y = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["clamp"])(y, 0, numSteps - 1);
            z = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["clamp"])(z, 0, numSteps - 1);
            var index = x + y * numSteps + z * numSteps * numSteps;
            this.volumes[index].push(t);
        }
    };
    return PathTracerObj;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/PathTracerRenderer.ts":
/*!***************************************************!*\
  !*** ./src/Apps/PathTracer/PathTracerRenderer.ts ***!
  \***************************************************/
/*! exports provided: RenderMode, PathTracerRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderMode", function() { return RenderMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerRenderer", function() { return PathTracerRenderer; });
/* harmony import */ var _shaders_PathTracerToScreenVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/PathTracerToScreenVertex.glsl */ "./src/shaders/PathTracerToScreenVertex.glsl");
/* harmony import */ var _shaders_PathTracerToScreenFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/PathTracerToScreenFragment.glsl */ "./src/shaders/PathTracerToScreenFragment.glsl");
/* harmony import */ var _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shaders/PathTracerToTextureVertex.glsl */ "./src/shaders/PathTracerToTextureVertex.glsl");
/* harmony import */ var _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shaders/PathTracerToTextureFragment.glsl */ "./src/shaders/PathTracerToTextureFragment.glsl");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util3D/SphericalCoord */ "./src/Util3D/SphericalCoord.ts");
/* harmony import */ var _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../gl/glFrameBuffer */ "./src/gl/glFrameBuffer.ts");
/* harmony import */ var _gl_glTexture__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../gl/glTexture */ "./src/gl/glTexture.ts");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gl/glAttributeBuffer */ "./src/gl/glAttributeBuffer.ts");
/* harmony import */ var _ColorAnalyzer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ColorAnalyzer */ "./src/Apps/PathTracer/ColorAnalyzer.ts");
/* harmony import */ var _gl_glUniformBlock__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../gl/glUniformBlock */ "./src/gl/glUniformBlock.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_Profiler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Util/Profiler */ "./src/Util/Profiler.ts");
/* harmony import */ var _PathTracerObj__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PathTracerObj */ "./src/Apps/PathTracer/PathTracerObj.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _GUI_ColorRange__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../GUI/ColorRange */ "./src/GUI/ColorRange.ts");



















/**
 * Rendering mode for displaying the texture
 */
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["Artist"] = 0] = "Artist";
    RenderMode[RenderMode["Value"] = 1] = "Value";
    RenderMode[RenderMode["Chroma"] = 2] = "Chroma";
    RenderMode[RenderMode["Bands"] = 3] = "Bands";
})(RenderMode || (RenderMode = {}));
var Uniforms = /** @class */ (function () {
    function Uniforms() {
        this.uScale = 1.0;
        this.uXOffset = 0.0;
        this.uYOffset = 0.0;
        this.uMode = 0;
        this.uMaxChroma = 1.0;
        this.uLightAlpha = 1001;
        this.uShadowAlpha = 1000;
        this.uLightIntensity = 0.7;
        this.uLightColor = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([1.0, 1.0, 1.0]);
        this.uLightPos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"](new _Util3D_SphericalCoord__WEBPACK_IMPORTED_MODULE_6__["SphericalCoord"](2, 60, 110).toXYZ());
        this.uAmbientLightIntensity = 0.3;
        this.uObjColor = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([0.5, 0.5, 0.8]);
        this.uBallRadius = 0.5;
        this.uEye = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uTextureSize = 256;
        this.uRandom = Math.random();
        this.uRay00 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uRay01 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uRay10 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uRay11 = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([0, 0, 0]);
        this.uSample = 0.0;
    }
    return Uniforms;
}());
/**
 * Class that does the work of building the Path Traced texture
 */
var PathTracerRenderer = /** @class */ (function () {
    function PathTracerRenderer(glCtx) {
        this.gl = null;
        this.uniforms = new Uniforms();
        this.mainView = RenderMode.Artist;
        this.smallViews = [
            RenderMode.Chroma,
            RenderMode.Value,
            RenderMode.Bands,
        ];
        this.vertices = [
            -1, -1,
            -1, +1,
            +1, -1,
            +1, +1
        ];
        this.gl = glCtx;
        var gl = this.gl;
        // larger texture is higher resolution, but takes longer to compute
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_13__["isMobile"]) {
            this.uniforms.uTextureSize = 256;
        }
        else {
            // this.uniforms.uTextureSize = 512;
            this.uniforms.uTextureSize = 256;
        }
        this.analyzer = new _ColorAnalyzer__WEBPACK_IMPORTED_MODULE_11__["ColorAnalyzer"](this.uniforms.uTextureSize);
        // create framebuffer
        this.frameBuffer = new _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_7__["glFrameBuffer"](gl, this.uniforms.uTextureSize, this.uniforms.uTextureSize);
        // create two textures. One we display and one we draw to
        this.textures = [];
        for (var i = 0; i < 2; i++) {
            this.textures.push(this.frameBuffer.createTexture(_gl_glTexture__WEBPACK_IMPORTED_MODULE_8__["glTextureStyle"].Float));
        }
        // create toScreen shader
        this.toScreenProgram = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__["glProgram"](gl, _shaders_PathTracerToScreenVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_PathTracerToScreenFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        this.toScreenVertexAttribute = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_10__["glAttributeBuffer"](gl, this.toScreenProgram, 'vertex');
        this.toScreenVertexAttribute.upload(this.vertices);
    }
    PathTracerRenderer.prototype.setObj = function (tObj) {
        this.compileShader(tObj);
    };
    PathTracerRenderer.prototype.delete = function () {
        this.frameBuffer.delete();
        this.textures[0].delete();
        this.textures[1].delete();
        if (this.vBlock) {
            this.vBlock.delete();
        }
        if (this.tBlock) {
            this.tBlock.delete();
        }
    };
    PathTracerRenderer.prototype.compileShader = function (tObj) {
        var gl = this.gl;
        if (this.toTextureProgram) {
            this.toTextureProgram.delete();
            this.toTextureProgram = null;
        }
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_14__["Profiler"]();
        // create the toTexture shader
        if (tObj && tObj.numTriangles > 0) {
            var pObj = new _PathTracerObj__WEBPACK_IMPORTED_MODULE_15__["PathTracerObj"](tObj);
            this.toTextureProgram = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__["glProgram"](gl, _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_2__["default"]
                .replace('<VERSION>', '#version 300 es')
                .replace('NOTHING', 'USE_TRIANGLES'), _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_3__["default"]
                .replace('<VERSION>', '#version 300 es')
                .replace('NOTHING', 'USE_TRIANGLES')
                .replace('<NUM_VERTICES>', tObj.numVertices.toString())
                .replace('<NUM_VOLUMES>', pObj.volumes.length.toString())
                .replace('<NUM_TRIANGLES>', tObj.numTriangles.toString()));
            // upload triangles to the GPU
            this.uploadUniforms(pObj);
        }
        else {
            this.toTextureProgram = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_9__["glProgram"](gl, _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_2__["default"]
                .replace('<VERSION>', ''), _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_3__["default"]
                .replace('<VERSION>', ''));
        }
        this.toTextureVertexAttribute = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_10__["glAttributeBuffer"](gl, this.toTextureProgram, 'vertex');
        this.toTextureVertexAttribute.upload(this.vertices);
        p.log('compile');
    };
    /**
     * Uploads all the triangle data to WebGL
     *
     * @param program The program to upload to
     */
    PathTracerRenderer.prototype.uploadUniforms = function (pObj) {
        var gl = this.gl;
        var tObj = pObj.tObj;
        // upload the big chunks as Uniform Blocks
        var blockBinding = 2;
        this.vBlock = new _gl_glUniformBlock__WEBPACK_IMPORTED_MODULE_12__["glUniformBlock"](gl, this.toTextureProgram, 'MyVerticesBlock', blockBinding);
        // put the data into a Float32Array for uploading
        var vData = new Float32Array(pObj.tObj.numVertices * 4);
        for (var i = 0; i < tObj.numVertices; i++) {
            vData[4 * i + 0] = tObj.vertices[3 * i + 0];
            vData[4 * i + 1] = tObj.vertices[3 * i + 1];
            vData[4 * i + 2] = tObj.vertices[3 * i + 2];
            vData[4 * i + 3] = 0;
        }
        this.vBlock.upload(vData);
        blockBinding = 3;
        this.tBlock = new _gl_glUniformBlock__WEBPACK_IMPORTED_MODULE_12__["glUniformBlock"](gl, this.toTextureProgram, 'MyTrianglesBlock', blockBinding);
        // put the data into a Float32Array for uploading
        var tData = new Int32Array(tObj.numTriangles * 4);
        var index = 0;
        for (var v = 0; v < pObj.volumes.length; v++) {
            var vol = pObj.volumes[v];
            for (var i = 0; i < vol.triangles.length; i++) {
                var t = vol.triangles[i];
                tData[index++] = t.i1;
                tData[index++] = t.i2;
                tData[index++] = t.i3;
                tData[index++] = 0;
            }
        }
        this.tBlock.upload(tData);
        // Upload the volume info as a standard uniform
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__["glUniform"](gl, this.toTextureProgram);
        var startIndex = 0;
        for (var i = 0; i < pObj.volumes.length; i++) {
            var vol = pObj.volumes[i];
            uni.set('object.volumes[' + i + '].startIndex', startIndex, true);
            uni.set('object.volumes[' + i + '].numTriangles', vol.triangles.length, true);
            uni.set('object.volumes[' + i + '].boxMin', vol.boxMin);
            uni.set('object.volumes[' + i + '].boxMax', vol.boxMax);
            startIndex += vol.triangles.length;
        }
        uni.set('object.boxMin', tObj.box.min);
        uni.set('object.boxMax', tObj.box.max);
    };
    Object.defineProperty(PathTracerRenderer.prototype, "renderMode", {
        get: function () {
            return this.mainView;
        },
        enumerable: false,
        configurable: true
    });
    PathTracerRenderer.prototype.restart = function () {
        this.uniforms.uSample = 0;
    };
    PathTracerRenderer.prototype.getEyeRay = function (matrix, x, y) {
        var vec = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec4"]([x, y, 0, 1]);
        return matrix.multV(vec).divideByW().subtract(this.uniforms.uEye);
    };
    PathTracerRenderer.prototype.updateTexture = function (modelviewProjection) {
        var gl = this.gl;
        // implement aliasing by random sampling within a pixel
        var x = (Math.random() * 2 - 1) / this.uniforms.uTextureSize;
        var y = (Math.random() * 2 - 1) / this.uniforms.uTextureSize;
        var z = 0;
        var v = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_5__["Vec3"]([x, y, z]);
        var jitter = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_17__["Mat4"].fromTranslation(v);
        var matrix = jitter.multM(modelviewProjection).inverse();
        this.uniforms.uRay00 = this.getEyeRay(matrix, -1, -1);
        this.uniforms.uRay01 = this.getEyeRay(matrix, -1, +1);
        this.uniforms.uRay10 = this.getEyeRay(matrix, +1, -1);
        this.uniforms.uRay11 = this.getEyeRay(matrix, +1, +1);
        // set uniforms
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__["glUniform"](gl, this.toTextureProgram);
        uni.setAll(this.uniforms);
        // render to texture
        gl.viewport(0, 0, this.uniforms.uTextureSize, this.uniforms.uTextureSize);
        this.textures[0].bind();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
        this.frameBuffer.bind();
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.textures[1].get(), 0);
        this.toTextureVertexAttribute.bind(2);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        var data = this.analyzer.run(gl, this.uniforms.uLightAlpha, this.uniforms.uShadowAlpha);
        this.uniforms.uMaxChroma = data.maxChroma;
        var cr = new _GUI_ColorRange__WEBPACK_IMPORTED_MODULE_18__["ColorRange"]([data.darkestLightColor.toHtmlColor(), data.avgLightColor.toHtmlColor(), data.lightestLightColor.toHtmlColor()]);
        this.uniforms.uHighlightColor = data.highlightColor;
        this.uniforms.uLightLightColor = cr.get(0.85).toGlColor();
        this.uniforms.uMidLightColor = cr.get(0.5).toGlColor();
        this.uniforms.uDarkLightColor = cr.get(0.15).toGlColor();
        cr = new _GUI_ColorRange__WEBPACK_IMPORTED_MODULE_18__["ColorRange"]([data.darkestShadowColor.toHtmlColor(), data.avgShadowColor.toHtmlColor(), data.lightestShadowColor.toHtmlColor()]);
        //this.uniforms.uShadowColor = data.terminatorColor;
        this.uniforms.uShadowColor = data.avgShadowColor;
        this.uniforms.uReflectedLightColor = cr.get(1).toGlColor();
        this.uniforms.uDarkAccentColor = cr.get(0.0).toGlColor();
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        // ping pong textures
        this.textures.reverse();
        this.uniforms.uSample++;
        this.uniforms.uRandom = Math.random();
    };
    ;
    PathTracerRenderer.prototype.displayTexture = function () {
        var gl = this.gl;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        this.toScreenProgram.use();
        this.textures[0].bind();
        this.toScreenVertexAttribute.bind(2);
        // display the main screen
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_16__["glUniform"](gl, this.toScreenProgram);
        this.uniforms.uScale = 1.0;
        this.uniforms.uXOffset = 0.0;
        this.uniforms.uYOffset = 0.0;
        this.uniforms.uMode = this.mainView;
        uni.setAll(this.uniforms);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        // display the smaller views
        this.uniforms.uScale = 0.2;
        for (var i = 0; i < this.smallViews.length; i++) {
            this.uniforms.uXOffset = 1.0 - (this.smallViews.length - i - 0.5) * (2 * this.uniforms.uScale);
            this.uniforms.uYOffset = 1.0 - this.uniforms.uScale;
            this.uniforms.uMode = this.smallViews[i];
            uni.setAll(this.uniforms);
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        }
    };
    PathTracerRenderer.prototype.swap = function (pos) {
        this.smallViews = [
            RenderMode.Chroma,
            RenderMode.Value,
            RenderMode.Bands,
        ];
        if (this.mainView == this.smallViews[pos]) {
            this.mainView = RenderMode.Artist;
        }
        else {
            this.mainView = this.smallViews[pos];
            this.smallViews[pos] = RenderMode.Artist;
        }
        this.displayTexture();
    };
    return PathTracerRenderer;
}());



/***/ }),

/***/ "./src/Apps/PathTracer/Volume.ts":
/*!***************************************!*\
  !*** ./src/Apps/PathTracer/Volume.ts ***!
  \***************************************/
/*! exports provided: Volume */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Volume", function() { return Volume; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");

var MAX = 1000; // INFINITY in our rendering world
/**
 * Class that manages a set of triangles within a given space
 */
var Volume = /** @class */ (function () {
    function Volume() {
        /**
         * The triangles enclosed within the bounding box
         */
        this.triangles = [];
        /**
         * Bounding box minimum
         */
        this.boxMin = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MAX, MAX, MAX]);
        /**
         * Bounding box maximum
         */
        this.boxMax = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-MAX, -MAX, -MAX]);
    }
    /**
     * Stores a triangle and updates the bounding box
     *
     * @param triangle The triangle to store
     */
    Volume.prototype.push = function (triangle) {
        this.triangles.push(triangle);
        this.boxMin.x = Math.min(this.boxMin.x, triangle.minX);
        this.boxMin.y = Math.min(this.boxMin.y, triangle.minY);
        this.boxMin.z = Math.min(this.boxMin.z, triangle.minZ);
        this.boxMax.x = Math.max(this.boxMax.x, triangle.maxX);
        this.boxMax.y = Math.max(this.boxMax.y, triangle.maxY);
        this.boxMax.z = Math.max(this.boxMax.z, triangle.maxZ);
    };
    return Volume;
}());



/***/ }),

/***/ "./src/Apps/Squint/Servers.ts":
/*!************************************!*\
  !*** ./src/Apps/Squint/Servers.ts ***!
  \************************************/
/*! exports provided: SquintUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintUrl", function() { return SquintUrl; });
//export const SquintUrl = 'ws://localhost:8080/V1/'
//export const SquintUrl = 'ws://192.168.86.23:8080/V1/'
var SquintUrl = 'wss://squintserver-11278.nodechef.com/V1/';
//static readonly url = 'ws://localhost:8080/V1/'
//static readonly url = 'wss://squintserver-11278.nodechef.com/V1/'
//private host = 'https://woyaktest.ue.r.appspot.com/';
//private host = 'http://192.168.86.23:8080/';
//private host = 'http://localhost:8080/';
//private host = 'http://' + location.hostname + ':8080/V1';
//private host = 'http://' + location.hostname + ':3000/';
//static readonly url = 'https://squintserver-11278.nodechef.com/V1';
//static readonly url = 'http://' + location.hostname + ':8080/V1'
//static readonly url = 'http://localhost:8080/V1'


/***/ }),

/***/ "./src/Apps/Squint/Squint.ts":
/*!***********************************!*\
  !*** ./src/Apps/Squint/Squint.ts ***!
  \***********************************/
/*! exports provided: Squint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Squint", function() { return Squint; });
/* harmony import */ var _Servers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Servers */ "./src/Apps/Squint/Servers.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");


var Squint = /** @class */ (function () {
    function Squint() {
        var _this = this;
        window.addEventListener('unload', function () {
            if (_this.ws && _this.ws.readyState === WebSocket.OPEN) {
                _this.ws.close();
            }
        });
        /*
        window.addEventListener('beforeunload', () => {
           console.log('beforeunload');
        });
  
        window.addEventListener('pagehide', () => {
           alert('pagehide');
           console.log('pagehide');
        });
        */
    }
    Object.defineProperty(Squint.prototype, "connected", {
        get: function () {
            return (this.ws && this.ws.readyState === WebSocket.OPEN);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Squint.prototype, "bufferReady", {
        get: function () {
            if (!this.connected) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.bufferReady() called after websocket was disconnected');
                return false;
            }
            return this.ws.bufferedAmount === 0;
        },
        enumerable: false,
        configurable: true
    });
    Squint.prototype.setWS = function (ws) {
        var _this = this;
        this.ws = ws;
        ws.onopen = null;
        ws.onerror = function (event) {
            _this.ws = null;
            if (_this.onError) {
                _this.onError(event);
            }
        };
        ws.onmessage = function (message) {
            // process the image
            if (message.data instanceof Blob) {
                if (_this.onImage) {
                    _this.onImage(message.data);
                }
            }
            else if (typeof message.data === 'string') {
                try {
                    var obj = JSON.parse(message.data);
                    _this.processMessage(obj);
                }
                catch (err) {
                    console.log('Invalid message not received: Invalid JSON.\n' + message.data);
                }
            }
        };
        ws.onclose = function (event) {
            _this.ws = null;
            if (_this.onClose) {
                _this.onClose(event);
            }
        };
    };
    Squint.prototype.connect = function (url, reconnectId) {
        var _this = this;
        if (reconnectId === void 0) { reconnectId = undefined; }
        return new Promise(function (resolve, reject) {
            if (_this.connected) {
                reject('Cannot connect to server: previous connection is still open');
                return;
            }
            // create temporary handlers that process the server handshake
            var ws = new WebSocket(url);
            ws.onopen = function () {
                // send handshake message
                ws.send(JSON.stringify({
                    subject: 'Hello',
                    reconnectId: reconnectId,
                    userAgent: navigator.userAgent,
                    platform: navigator.platform,
                }));
            };
            ws.onclose = function (event) {
                reject('Cannot connect to server: ' + event.code);
            };
            ws.onerror = function (event) {
                reject('Cannot connect to ' + url);
            };
            ws.onmessage = function (messageEvent) {
                try {
                    var msg = JSON.parse(messageEvent.data);
                    if (msg.subject && msg.subject === 'Hello') {
                        _this.connectionId = msg.id;
                        _this.setWS(ws);
                        console.log('Squint connection established. ID=' + msg.id);
                        resolve();
                    }
                    else {
                        Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Expected Hello response, got: ' + JSON.stringify(msg, null, ' '));
                        reject('Cannot connect to ' + url + '\n\nInvalid server handshake.');
                    }
                }
                catch (err) {
                    Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Expected Hello response, got: ' + messageEvent.data);
                    reject('Cannot connect to ' + url + '\n\nInvalid server handshake.');
                }
            };
        });
    };
    Squint.prototype.close = function () {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.close() called but no connection exists');
            return;
        }
        this.ws.close();
        this.ws = null;
    };
    Squint.prototype.processMessage = function (msg) {
        switch (msg.subject) {
            case 'SessionCreated':
                if (this.onSessionCreated) {
                    this.onSessionCreated({
                        name: msg.name,
                        connectionId: msg.connectionId,
                    });
                }
                ;
                break;
            case 'SessionCreateError':
                if (this.onSessionCreateError) {
                    this.onSessionCreateError(msg.error);
                }
                ;
                break;
            case 'SessionList':
                if (this.onSessionList) {
                    this.onSessionList(msg.sessions);
                }
                break;
            case undefined:
                console.error('Invalid Message: \'subject\' not found.\n' + JSON.stringify(msg, null, ' '));
                break;
            default:
                console.error('Invalid Message: unknown \'subject\'.\n' + JSON.stringify(msg, null, ' '));
                break;
        }
    };
    Squint.prototype.send = function (msg) {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.send() called, but not connected');
            return;
        }
        this.ws.send(JSON.stringify(msg));
    };
    Squint.prototype.sendImage = function (blob) {
        if (!this.connected) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Squint.sendImage() called, but not connected');
            return;
        }
        if (this.bufferReady) {
            this.ws.send(blob);
        }
        else {
            console.log('skipping upload, buffer not empty: ' + this.ws.bufferedAmount);
        }
    };
    Squint.prototype.requestNextImage = function () {
        this.send({
            subject: 'ReadyForNextImage',
        });
    };
    Squint.prototype.createSession = function (name) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this.connected) {
                console.log('createSession() socket ready state: ' + (_this.ws ? _this.ws.readyState : 'null'));
                reject('WebSocket not connected.');
            }
            _this.send({
                subject: 'CreateSession',
                name: name,
            });
            var closeHandler = function () {
                reject('WebSocket was closed');
            };
            _this.ws.addEventListener('close', closeHandler);
            var errHandler = function () {
                reject('WebSocket error');
            };
            _this.ws.addEventListener('error', errHandler);
            _this.onSessionCreated = function (session) {
                _this.onSessionCreated = null;
                _this.onSessionCreateError = null;
                _this.ws.removeEventListener('close', closeHandler);
                _this.ws.removeEventListener('error', errHandler);
                resolve(session);
            };
            _this.onSessionCreateError = function (err) {
                _this.onSessionCreated = null;
                _this.onSessionCreateError = null;
                _this.ws.removeEventListener('close', closeHandler);
                _this.ws.removeEventListener('error', errHandler);
                reject(err);
            };
        });
    };
    Squint.prototype.subscribe = function (connectionId) {
        if (!this.connected) {
            throw new Error('Cannot subscribe. WebSocket not connected.');
        }
        this.send({
            subject: 'Subscribe',
            connectionId: connectionId,
        });
    };
    Squint.url = _Servers__WEBPACK_IMPORTED_MODULE_0__["SquintUrl"];
    return Squint;
}());



/***/ }),

/***/ "./src/Apps/Squint/SquintApp.ts":
/*!**************************************!*\
  !*** ./src/Apps/Squint/SquintApp.ts ***!
  \**************************************/
/*! exports provided: SquintStrings, debug, SquintApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintStrings", function() { return SquintStrings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debug", function() { return debug; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintApp", function() { return SquintApp; });
/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ "./node_modules/webrtc-adapter/src/js/adapter_core.js");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Video */ "./src/Apps/Squint/Video.ts");
/* harmony import */ var _Uploader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Uploader */ "./src/Apps/Squint/Uploader.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_ConsoleCapture__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util/ConsoleCapture */ "./src/Util/ConsoleCapture.ts");
/* harmony import */ var _StartDialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StartDialog */ "./src/Apps/Squint/StartDialog.ts");
/* harmony import */ var _Version__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Version */ "./src/Apps/Squint/Version.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Squint */ "./src/Apps/Squint/Squint.ts");
/* harmony import */ var _Util_FPS__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util/FPS */ "./src/Util/FPS.ts");










var SquintStrings = /** @class */ (function () {
    function SquintStrings() {
    }
    SquintStrings.CAMERA_NOT_READY = 'Camera not ready';
    return SquintStrings;
}());

;
function debug(msg) {
    console.error(msg);
    //alert('debug error: ' + msg);
}
var SquintApp = /** @class */ (function () {
    function SquintApp() {
        this.desired = {
            label: '',
            width: 0,
            height: 0,
            frameRate: 0,
            facingMode: '',
            deviceId: '',
        };
        this.downloadFPS = new _Util_FPS__WEBPACK_IMPORTED_MODULE_9__["FPS"]();
        this.cameraCtrls = [];
        this.xOffset = 0;
        this.yOffset = 0;
        this.imgSize = 0;
        this.sessionName = '';
        this.consoleCapture = new _Util_ConsoleCapture__WEBPACK_IMPORTED_MODULE_5__["ConsoleCapture"]();
        document.title += (' ' + _Version__WEBPACK_IMPORTED_MODULE_7__["Version"].Build);
        //alert(document.title);
        var msg = '';
        if (Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["iOS"])()) {
            msg += '. Running on Apple';
        }
        msg += '\nuserAgent: ' + navigator.userAgent;
        msg += '\nplatform: ' + navigator.platform;
        console.log(msg);
    }
    SquintApp.prototype.create = function (div) {
        var _this = this;
        div.id = 'SquintApp';
        this.squint = new _Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"]();
        this.squint.onImage = function (blob) { return _this.onDownload(blob); };
        this.squint.onClose = function () {
            alert('Squint connection closed.');
            console.log('Squing connection closed.');
            _this.stopUploader();
            _this.enableVideo(false);
            _this.startDialog.visible = true;
            var ctx = _this.canvas.getContext('2d');
            ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
        };
        this.squint.onError = function (msg) { return alert('onError: ' + msg); };
        this.startDialog = new _StartDialog__WEBPACK_IMPORTED_MODULE_6__["StartDialog"](div, this.squint, function (connectionId) {
            _this.squint.subscribe(connectionId);
        }, function (sessionName) {
            _this.sessionName = sessionName;
            _this.enableVideo(true);
        });
        this.div = document.createElement('div');
        this.div.className = 'FlexContainer';
        div.appendChild(this.div);
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'Canvas';
        this.div.appendChild(this.canvas);
        this.video = document.createElement('video');
        this.video.id = 'Video';
        this.video.autoplay = true;
        this.video.setAttribute('playsinline', 'true'); // needed for iPhones
        this.video.onerror = function (err) {
            alert('video.onerror(): ' + err);
        };
        this.div.appendChild(this.video);
        this.video.style.display = 'none';
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_1__["PointerEventHandler"](this.canvas);
        this.handler.onScale = function (scale, change) { return _this.onScale(scale, change); };
        this.handler.onTranslate = function (delta) { return _this.onTranslate(delta); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        window.addEventListener('resize', function () { return _this.onResize(); });
        this.updateSizes();
        this.startDialog.visible = true;
    };
    SquintApp.prototype.delete = function () {
    };
    SquintApp.prototype.startSession = function () {
        var _this = this;
        console.log('creating session \'' + this.sessionName + '\' on ' + _Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].url);
        this.squint.createSession(this.sessionName)
            .then(function (session) {
            console.log('Session created');
            _this.startUploader();
        })
            .catch(function (err) {
            alert('Failed to create session: ' + err);
            _this.startDialog.visible = true;
            _this.enableVideo(false);
        });
    };
    SquintApp.prototype.startUploader = function () {
        var _this = this;
        console.log('starting uploader, video.readyState=' + this.video.readyState);
        this.uploader = new _Uploader__WEBPACK_IMPORTED_MODULE_3__["Uploader"](this.squint, function () { return _this.takePicture(); });
    };
    SquintApp.prototype.stopUploader = function () {
        if (this.uploader) {
            this.uploader.stop();
            this.uploader = null;
        }
    };
    SquintApp.prototype.enableCameraCtrls = function (flag) {
        for (var i = 0; i < this.cameraCtrls.length; i++) {
            this.cameraCtrls[i].enabled = flag;
        }
    };
    SquintApp.prototype.buildMenu = function (menubar) {
        var _this = this;
        var viewMenu = menubar.addSubMenu('View');
        this.brightness = viewMenu.addSlider({
            label: 'Brightness',
            min: 0,
            max: 200,
            value: 100,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        this.contrast = viewMenu.addSlider({
            label: 'Contrast',
            min: 0,
            max: 200,
            value: 100,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        this.saturate = viewMenu.addSlider({
            label: 'Chroma',
            min: 0,
            max: 200,
            value: 100,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        this.blur = viewMenu.addSlider({
            label: 'Blur',
            min: 0,
            max: 10,
            value: 0,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0); },
        });
        this.zoom = viewMenu.addSlider({
            label: 'Zoom',
            min: 0.1,
            max: 5,
            value: 1,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; },
        });
        var cameraMenu = menubar.addSubMenu('Camera');
        var firstItem = true;
        _Video__WEBPACK_IMPORTED_MODULE_2__["Video"].getCameras(function (resolution) {
            var radioButton = cameraMenu.addRadiobutton({
                label: resolution.label,
                oncheck: function () {
                    _this.desired = resolution;
                    _this.enableVideo(true);
                },
                checked: firstItem,
                group: 'CamerasGroup',
            });
            if (firstItem) {
                _this.desired = resolution;
                firstItem = false;
            }
            _this.cameraCtrls.push(radioButton);
        });
        var button = cameraMenu.addItem('Capabilities...', function () {
            if (_this.video.srcObject) {
                var stream = _this.video.srcObject;
                var track = stream.getVideoTracks()[0];
                if (track.getCapabilities) {
                    var capabilities = track.getCapabilities();
                    var msg = 'Camera Capabilities:\n';
                    for (var key in capabilities) {
                        if (key === 'deviceId' || key === 'groupId') {
                            continue;
                        }
                        msg += _this.capabilityToString(capabilities, key) + '\n';
                    }
                    alert(msg);
                    console.log(JSON.stringify(capabilities, null, ' '));
                }
            }
        });
        this.quality = cameraMenu.addSlider({
            label: 'JPeg Photo Quality',
            min: 0.1,
            max: 1,
            value: 0.5,
            getText: function (slider) { return (100 * slider.value).toFixed() + '%'; },
        });
        this.cameraCtrls.push(this.quality);
        this.resolution = cameraMenu.addSlider({
            label: 'Camera Resolution',
            min: 0.1,
            max: 1,
            value: 0.5,
            getText: function (slider) { return (100 * slider.value).toFixed() + '%'; },
        });
        this.cameraCtrls.push(this.resolution);
        this.enableCameraCtrls(false);
        var sessionMenu = menubar.addSubMenu('Session');
        sessionMenu.addItem('Stop', function () {
            _this.squint.close();
        });
        var item = sessionMenu.addItem('Show Log', function () {
            _this.consoleCapture.show = !_this.consoleCapture.show;
            item.innerText = _this.consoleCapture.show ? 'Hide Log' : 'Show Log';
        });
    };
    SquintApp.prototype.numToString = function (num) {
        if (Number.isInteger(num)) {
            return num.toString();
        }
        else {
            return num.toFixed(3);
        }
    };
    SquintApp.prototype.capabilityToString = function (capabilities, name) {
        var obj = capabilities[name];
        var str = name + ': ';
        if (typeof obj === 'object') {
            if (obj['min'] !== undefined) {
                str += this.numToString(obj['min']) + ' to ' + this.numToString(obj['max']);
            }
            else if (obj instanceof Array) {
                for (var i = 0; i < obj.length; i++) {
                    if (i > 0) {
                        str += ', ';
                    }
                    str += JSON.stringify(obj[i]);
                }
            }
            else {
                str += JSON.stringify(obj);
            }
        }
        else {
            str += JSON.stringify(obj);
        }
        return str;
    };
    SquintApp.prototype.onDownload = function (blob) {
        if (!blob) {
            debug('onDownload() blob is null');
        }
        // let the server know we're ready for the next download
        this.squint.requestNextImage();
        this.drawBlob(blob);
    };
    SquintApp.prototype.drawBlob = function (blob) {
        var _this = this;
        this.downloadFPS.tick();
        var img = document.createElement('img');
        img.onload = function () {
            _this.img = img;
            _this.imgSize = blob.size;
            _this.drawImg();
        };
        img.onerror = function (reason) {
            alert('cannot load image: ' + reason);
        };
        img.src = URL.createObjectURL(blob);
    };
    SquintApp.prototype.setConstraints = function () {
        var _this = this;
        var constraints;
        if (this.desired.deviceId && this.desired.deviceId.trim().length > 0) {
            constraints = {
                video: {
                    width: { ideal: 10 * 1000 },
                    height: { ideal: 10 * 1000 },
                    deviceId: this.desired.deviceId,
                },
                audio: false,
            };
        }
        else {
            //debug('no device id, falling back to any camera');
            constraints = {
                video: {
                    width: { ideal: 10 * 1000 },
                    height: { ideal: 10 * 1000 },
                },
                audio: false,
            };
        }
        console.log('---getUserMedia() requesting\n' + JSON.stringify(constraints, null, ' '));
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function (stream) {
            console.log('---getUserMedia().then() ' + stream);
            //alert('---getUserMedia().then() ' + stream + ' ' + stream.getVideoTracks()[0].getSettings().width);
            if (stream === null) {
                alert('Could not create video stream');
            }
            else {
                var track = stream.getVideoTracks()[0];
                var settings = track.getSettings();
                if (Math.max(settings.width, settings.height) > 1000) {
                    _this.resolution.value = Math.min(1000 / settings.width, 1000 / settings.height);
                }
                console.log('actual video size: ' + settings.width + ' x ' + settings.height);
                _this.updateVideoSize(settings.width, settings.height);
                console.log('setting video.srcObject to ' + stream);
                _this.video.srcObject = stream;
                _this.video.play()
                    .then(function () {
                    console.log('playing');
                    _this.updateVideoSize(_this.video.videoWidth, _this.video.videoHeight);
                })
                    .catch(function (err) {
                    console.log('error playing: ' + err);
                });
                if (!_this.uploader) {
                    _this.startSession();
                }
            }
        })
            .catch(function (reason) {
            alert('video error: ' + reason);
        });
    };
    SquintApp.prototype.enableVideo = function (enable) {
        // stop the last video
        this.stopTracks();
        this.enableCameraCtrls(enable);
        if (enable) {
            this.video.style.display = 'block';
            this.setConstraints();
        }
        else {
            this.stopUploader();
            this.video.style.display = 'none';
        }
    };
    SquintApp.prototype.stopTracks = function () {
        if (this.video.srcObject) {
            console.log('stopping tracks');
            // Using the camera is not robust. Applying constraints to change things
            // like which camera is in use only works sometimes. The most robust I can
            // make it is to close the video element and create a new one.
            var stream = this.video.srcObject;
            stream.getTracks().forEach(function (track) {
                track.stop();
            });
        }
    };
    SquintApp.prototype.takePicture = function () {
        var _this = this;
        if (!this.squint.connected) {
            console.error('takePicture() after close');
        }
        if (this.video.readyState != 4) {
            return Promise.reject(SquintStrings.CAMERA_NOT_READY);
        }
        var canvas = document.createElement('canvas');
        canvas.width = this.video.videoWidth * this.resolution.value;
        canvas.height = this.video.videoHeight * this.resolution.value;
        //console.log('capturing image: ' + canvas.width + 'x' + canvas.height);
        var context = canvas.getContext('2d');
        context.drawImage(this.video, 0, 0, canvas.width, canvas.height);
        // upload
        return new Promise(function (resolve, reject) {
            canvas.toBlob(function (blob) {
                // draw what was uploaded, i.e. simulate a download
                _this.drawBlob(blob);
                resolve(blob);
            }, 'image/jpeg', _this.quality.value);
        });
    };
    SquintApp.prototype.onResize = function () {
        this.updateSizes();
    };
    SquintApp.prototype.updateVideoSize = function (videoWidth, videoHeight) {
        if (getComputedStyle(this.video).display !== 'none') {
            var videoSize = Math.max(this.video.clientWidth, this.video.clientHeight);
            if (videoWidth > videoHeight) {
                this.video.style.width = videoSize + 'px';
                this.video.style.height = (videoSize * videoHeight / videoWidth) + 'px';
            }
            else {
                this.video.style.height = videoSize + 'px';
                this.video.style.width = (videoSize * videoWidth / videoHeight) + 'px';
            }
        }
    };
    SquintApp.prototype.updateSizes = function () {
        var menubarHeight = document.getElementById('Menubar').clientHeight;
        this.consoleCapture.setEdges(0, 0, menubarHeight, 0);
        var viewWidth = document.documentElement.clientWidth;
        var viewHeight = document.documentElement.clientHeight;
        this.canvas.width = viewWidth;
        this.canvas.height = viewHeight - menubarHeight;
        this.drawImg();
    };
    SquintApp.prototype.drawImg = function () {
        if (!this.squint.connected) {
            console.error('drawImg() after close');
        }
        if (!this.img) {
            return;
        }
        var canvasWidth = this.canvas.width;
        var canvasHeight = this.canvas.height;
        var canvasAR = canvasWidth / canvasHeight;
        var imgWidth = this.img.width;
        var imgHeight = this.img.height;
        var imgAR = imgWidth / imgHeight;
        var width;
        var height;
        if (canvasAR > imgAR) {
            height = this.zoom.value * canvasHeight;
            width = height * imgAR;
        }
        else {
            width = this.zoom.value * canvasWidth;
            height = width / imgAR;
        }
        /*
        if (canvasAR > imgAR) {
           height = this.zoom.value * imgHeight;
           width = height * imgAR;
        }
        else {
           width = this.zoom.value * imgWidth;
           height = width / imgAR;
        }
        */
        var x = (canvasWidth - width) / 2.0 + this.xOffset;
        var y = (canvasHeight - height) / 2.0 - this.yOffset;
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        ctx.filter =
            'brightness(' + this.brightness.value + '%) ' +
                'contrast(' + this.contrast.value + '%) ' +
                'saturate(' + this.saturate.value + '%) ' +
                'blur(' + this.blur.value + 'px) ';
        ctx.drawImage(this.img, x, y, width, height);
        var msg;
        ctx.font = '10px sans-serif';
        ctx.fillText(_Squint__WEBPACK_IMPORTED_MODULE_8__["Squint"].url, 0, 10);
        var fontSize = _Util_Globals__WEBPACK_IMPORTED_MODULE_4__["isMobile"] ? 20 : 10;
        ctx.font = fontSize + 'px sans-serif';
        msg = imgWidth + 'x' + imgHeight;
        ctx.fillText(msg, 0, canvasHeight - (3 * fontSize + 5));
        if (this.uploader) {
            msg = 'upload: ' + this.uploader.fps.toFixed(1);
            ctx.fillText(msg, 0, canvasHeight - (2 * fontSize + 5));
            var bandwidth = this.uploader.bandwidth;
            if (bandwidth < 5) {
                msg = 'bandwidth: ' + this.uploader.bandwidth.toFixed(2) + ' Mbsp';
            }
            else {
                msg = 'bandwidth: ' + this.uploader.bandwidth.toFixed(1) + ' Mbsp';
            }
            ctx.fillText(msg, 0, canvasHeight - (fontSize + 5));
        }
        else {
            msg = 'download: ' + this.downloadFPS.rate.toFixed(1);
            ctx.fillText(msg, 0, canvasHeight - (fontSize + 5));
        }
        msg = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_4__["toSizeStr"])(this.imgSize);
        ctx.fillText(msg, 0, canvasHeight - 5);
    };
    SquintApp.prototype.onScale = function (scale, change) {
        // TODO: center scaling about your two fingers
        var factor = change;
        if (this.zoom.value > 2) {
            1 + (change - 1) / (this.zoom.value / 2);
        }
        this.zoom.value *= factor;
        this.xOffset *= factor;
        this.yOffset *= factor;
        this.drawImg();
    };
    SquintApp.prototype.onTranslate = function (delta) {
        //let factor = 1;
        //if (isMobile) {
        //   factor = 2;
        //}
        this.xOffset += delta.x;
        this.yOffset += delta.y;
        this.drawImg();
    };
    SquintApp.prototype.onDrag = function (pos, delta) {
        // TODO delta is opposite of translate in Y direction
        this.xOffset += delta.x;
        this.yOffset -= delta.y;
        this.drawImg();
    };
    return SquintApp;
}());



/***/ }),

/***/ "./src/Apps/Squint/StartDialog.ts":
/*!****************************************!*\
  !*** ./src/Apps/Squint/StartDialog.ts ***!
  \****************************************/
/*! exports provided: StartDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StartDialog", function() { return StartDialog; });
/* harmony import */ var _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/ListBox */ "./src/GUI/ListBox.ts");
/* harmony import */ var _Version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Version */ "./src/Apps/Squint/Version.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Squint */ "./src/Apps/Squint/Squint.ts");



var StartDialog = /** @class */ (function () {
    function StartDialog(parent, squint, onViewSession, onStartSession) {
        var _this = this;
        this.squint = squint;
        this.squint.onSessionList = function (sessions) { return _this.onSessionList(sessions); };
        this.onStartView = onViewSession;
        this.onStartSession = onStartSession;
        this.backgroundDiv = document.createElement('div');
        this.backgroundDiv.className = 'DialogBackground';
        parent.appendChild(this.backgroundDiv);
        var dialogDiv = document.createElement('div');
        dialogDiv.id = 'DialogDiv';
        this.backgroundDiv.appendChild(dialogDiv);
        var dialogTitleDiv = document.createElement('div');
        dialogTitleDiv.id = 'DialogTitleDiv';
        dialogDiv.appendChild(dialogTitleDiv);
        var titleDiv = document.createElement('div');
        titleDiv.id = 'TitleDiv';
        titleDiv.innerText = 'Squint V' + _Version__WEBPACK_IMPORTED_MODULE_1__["Version"].Build;
        dialogTitleDiv.appendChild(titleDiv);
        this.connectingDiv = document.createElement('div');
        this.connectingDiv.id = 'ConnectingText';
        this.connectingDiv.innerText = 'connecting...';
        dialogTitleDiv.appendChild(this.connectingDiv);
        this.connectingAnimationDiv = document.createElement('div');
        this.connectingAnimationDiv.id = 'ConnectingAnimation';
        this.connectingAnimationDiv.className = 'lds-ring';
        this.connectingAnimationDiv.appendChild(document.createElement('div'));
        this.connectingAnimationDiv.appendChild(document.createElement('div'));
        this.connectingAnimationDiv.appendChild(document.createElement('div'));
        this.connectingAnimationDiv.appendChild(document.createElement('div'));
        dialogTitleDiv.appendChild(this.connectingAnimationDiv);
        this.bodyDiv = document.createElement('div');
        this.bodyDiv.id = 'DialogBodyDiv';
        dialogDiv.appendChild(this.bodyDiv);
        //
        // View a session panel
        //
        var viewPanelDiv = document.createElement('div');
        viewPanelDiv.id = 'ViewPanelDiv';
        this.bodyDiv.appendChild(viewPanelDiv);
        var viewHeader = document.createElement('div');
        viewHeader.id = 'ViewHeader';
        viewHeader.className = 'Header';
        viewHeader.innerText = 'View a camera...';
        viewPanelDiv.appendChild(viewHeader);
        this.viewListBox = new _GUI_ListBox__WEBPACK_IMPORTED_MODULE_0__["ListBox"](viewPanelDiv, {
            id: 'ViewListBox'
        });
        this.viewListBox.onSelectedChanged = function () {
            goViewButton.disabled = (_this.viewListBox.selected === null);
        };
        var buttonDiv = document.createElement('div');
        buttonDiv.className = 'ButtonDiv';
        viewPanelDiv.appendChild(buttonDiv);
        var goViewButton = document.createElement('button');
        goViewButton.id = 'ViewButton';
        goViewButton.innerText = 'Go';
        goViewButton.disabled = true;
        buttonDiv.appendChild(goViewButton);
        goViewButton.onclick = function () {
            _this.visible = false;
            var connectionId = _this.viewListBox.selected;
            _this.onStartView(connectionId);
        };
        //
        // Or panel
        //
        var orParentDiv = document.createElement('div');
        orParentDiv.id = 'OrParentDiv';
        this.bodyDiv.appendChild(orParentDiv);
        var orDiv = document.createElement('div');
        orDiv.id = 'OrDiv';
        orDiv.innerText = 'OR';
        orParentDiv.appendChild(orDiv);
        //
        // Host a session panel
        //
        var hostPanelDiv = document.createElement('div');
        hostPanelDiv.id = 'HostPanelDiv';
        this.bodyDiv.appendChild(hostPanelDiv);
        var hostHeader = document.createElement('div');
        hostHeader.id = 'HostHeader';
        hostHeader.className = 'Header';
        hostHeader.innerText = 'Host a camera...';
        hostPanelDiv.appendChild(hostHeader);
        var sessionNameDiv = document.createElement('div');
        sessionNameDiv.id = 'SessionNameDiv';
        sessionNameDiv.classList.add('Stretch');
        hostPanelDiv.appendChild(sessionNameDiv);
        var nameLabel = document.createElement('label');
        nameLabel.innerText = 'Name:';
        nameLabel.htmlFor = 'NameInputText';
        sessionNameDiv.appendChild(nameLabel);
        this.sessionNameInput = document.createElement('input');
        this.sessionNameInput.type = 'text';
        this.sessionNameInput.id = 'NameInputText';
        this.sessionNameInput.placeholder = 'Your Name';
        sessionNameDiv.appendChild(this.sessionNameInput);
        this.sessionNameInput.oninput = function () {
            goHostButton.disabled = (_this.sessionNameInput.value.trim().length === 0);
        };
        buttonDiv = document.createElement('div');
        buttonDiv.classList.add('ButtonDiv', 'NoStretch');
        hostPanelDiv.appendChild(buttonDiv);
        var goHostButton = document.createElement('button');
        goHostButton.id = 'HostOkButton';
        goHostButton.innerText = 'Go';
        goHostButton.disabled = true;
        buttonDiv.appendChild(goHostButton);
        goHostButton.onclick = function () {
            _this.onStartSession(_this.sessionNameInput.value);
            _this.visible = false;
        };
    }
    Object.defineProperty(StartDialog.prototype, "enable", {
        get: function () {
            return (getComputedStyle(this.bodyDiv).pointerEvents === 'none');
        },
        set: function (flag) {
            // TODO move this all to an "Enabled" style
            this.bodyDiv.style.pointerEvents = flag ? 'auto' : 'none';
            this.bodyDiv.style.filter = flag ? '' : 'grayscale(1) contrast(0.4)';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StartDialog.prototype, "visible", {
        get: function () {
            return (getComputedStyle(this.backgroundDiv).display === 'block');
        },
        set: function (flag) {
            if (flag === this.visible) {
                return;
            }
            if (flag) {
                this.enable = false;
                this.backgroundDiv.style.display = 'block';
                this.connect();
            }
            else {
                this.backgroundDiv.style.display = 'none';
            }
        },
        enumerable: false,
        configurable: true
    });
    StartDialog.prototype.connect = function () {
        var _this = this;
        this.connectingDiv.style.display = 'block';
        this.connectingAnimationDiv.style.display = 'block';
        this.viewListBox.clear();
        this.sessionNameInput.value = '';
        this.squint.connect(_Squint__WEBPACK_IMPORTED_MODULE_2__["Squint"].url)
            .then(function () {
            _this.squint.onSessionList = function (sessions) {
                _this.onSessionList(sessions);
            };
            _this.connectingDiv.style.display = 'none';
            _this.connectingAnimationDiv.style.display = 'none';
            _this.enable = true;
        })
            .catch(function (err) {
            alert(err);
            setTimeout(function () {
                _this.connect();
            }, 1000);
        });
    };
    StartDialog.prototype.onSessionList = function (sessions) {
        this.viewListBox.clear();
        for (var i = 0; i < sessions.length; i++) {
            this.viewListBox.addItem(sessions[i].name, sessions[i].connectionId);
        }
    };
    return StartDialog;
}());



/***/ }),

/***/ "./src/Apps/Squint/UploadRateTracker.ts":
/*!**********************************************!*\
  !*** ./src/Apps/Squint/UploadRateTracker.ts ***!
  \**********************************************/
/*! exports provided: UploadRateTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UploadRateTracker", function() { return UploadRateTracker; });
/* harmony import */ var _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/Stopwatch */ "./src/Util/Stopwatch.ts");
/* harmony import */ var _Util_Averager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util/Averager */ "./src/Util/Averager.ts");


var MAX_FPS = 10;
var Uploads = /** @class */ (function () {
    function Uploads() {
        this._bytes = 0;
        this._numUploads = 0;
        this._lastUploadBytes = 0;
    }
    Object.defineProperty(Uploads.prototype, "numUploads", {
        get: function () {
            return this._numUploads;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uploads.prototype, "bytes", {
        get: function () {
            return this._bytes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uploads.prototype, "lastUploadBytes", {
        get: function () {
            return this._lastUploadBytes;
        },
        enumerable: false,
        configurable: true
    });
    Uploads.prototype.reset = function () {
        this._bytes = 0;
        this._numUploads = 0;
    };
    Uploads.prototype.onUpload = function (bytes) {
        this._bytes += bytes;
        this._numUploads++;
        this._lastUploadBytes = bytes;
    };
    return Uploads;
}());
/**
 * This class monitors the upload rate and recommends a frame rate to match. We
 * can then use this to pace our uploads to match available bandwidth.
 */
var UploadRateTracker = /** @class */ (function () {
    function UploadRateTracker() {
        this.bufferFull = false;
        this.uploads = new Uploads();
        this.bandwidthAverager = new _Util_Averager__WEBPACK_IMPORTED_MODULE_1__["Averager"](20);
        this.boostFps = false;
    }
    Object.defineProperty(UploadRateTracker.prototype, "recommendedMsPerFrame", {
        /**
         * The number of ms that should occur between upload attempts
         */
        get: function () {
            // if we haven't computed a bandwidth yet, just go with 10 FPS
            if (this.bandwidthAverager.numSamples === 0) {
                return 1000 / MAX_FPS;
            }
            // convert bytes to bits to get Mbps
            var lastSizeBits = 8 * this.uploads.lastUploadBytes;
            var megaBitsPerMs = (1000 * 1000 * this.bandwidthAverager.average) / 1000;
            var calcMs = lastSizeBits / megaBitsPerMs;
            if (this.boostFps) {
                calcMs = 0.9 * calcMs;
            }
            // the actual rate, or a max FPS of 10
            return Math.max(1000 / MAX_FPS, calcMs);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UploadRateTracker.prototype, "recommendedFPS", {
        get: function () {
            return 1000 / this.recommendedMsPerFrame;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UploadRateTracker.prototype, "bandwidth", {
        /**
         * Upload bandwidth, Mbps
         */
        get: function () {
            if (this.bandwidthAverager.numSamples === 0) {
                return ((this.uploads.lastUploadBytes * 8) / (1000 * 1000)) * MAX_FPS;
            }
            else {
                return this.bandwidthAverager.average;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Call this when the buffer gets full
     */
    UploadRateTracker.prototype.onBufferFull = function () {
        this.bufferFull = true;
        this.boostFps = false;
    };
    /**
     * Call this when the buffer empties and is ready again
     */
    UploadRateTracker.prototype.onReady = function () {
        // if we hit a situation where the buffer filled up, we know we have a situation
        // where we can accurately measure bandwidth
        if (this.bufferFull) {
            // first successful send since the buffer filled up. We can now measure bandwidth
            var bandwidth = 8 * (this.uploads.bytes / this.uploadTimer.elapsedS) / (1000 * 1000);
            this.bandwidthAverager.push(bandwidth);
            // reset tracking of uploads
            this.uploads.reset();
            this.uploadTimer = null;
            this.bufferFull = false;
        }
        else if (
        // conditions that must be met before increasing requested framerate
        this.uploads.numUploads > 5 &&
            this.uploads.bytes > 300 * 1000 &&
            this.recommendedFPS < MAX_FPS) {
            // signal that we want a better rate
            this.boostFps = true;
        }
    };
    /**
     * Call this each time an upload is performed
     *
     * @param amount The size of the upload in bytes
     */
    UploadRateTracker.prototype.onUpload = function (amount) {
        this.onReady();
        this.uploads.onUpload(amount);
        if (!this.uploadTimer) {
            this.uploadTimer = new _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"]();
        }
    };
    return UploadRateTracker;
}());



/***/ }),

/***/ "./src/Apps/Squint/Uploader.ts":
/*!*************************************!*\
  !*** ./src/Apps/Squint/Uploader.ts ***!
  \*************************************/
/*! exports provided: Uploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return Uploader; });
/* harmony import */ var _Util_FPS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/FPS */ "./src/Util/FPS.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");
/* harmony import */ var _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util/Stopwatch */ "./src/Util/Stopwatch.ts");
/* harmony import */ var _UploadRateTracker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UploadRateTracker */ "./src/Apps/Squint/UploadRateTracker.ts");




var Uploader = /** @class */ (function () {
    function Uploader(squint, onDataNeeded) {
        this.fpsTracker = new _Util_FPS__WEBPACK_IMPORTED_MODULE_0__["FPS"]();
        this.running = true;
        this.busy = false;
        this.timer = new _Util_Stopwatch__WEBPACK_IMPORTED_MODULE_2__["Stopwatch"]();
        this.uploadTracker = new _UploadRateTracker__WEBPACK_IMPORTED_MODULE_3__["UploadRateTracker"]();
        console.log('starting uploader');
        this.squint = squint;
        this.onDataNeeded = onDataNeeded;
        this.upload();
    }
    Object.defineProperty(Uploader.prototype, "fps", {
        get: function () {
            return this.fpsTracker.rate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "bandwidth", {
        get: function () {
            return this.uploadTracker.bandwidth;
        },
        enumerable: false,
        configurable: true
    });
    Uploader.prototype.stop = function () {
        if (this.running) {
            console.log('stopping uploader');
            this.running = false;
        }
    };
    Uploader.prototype.upload = function (delay) {
        var _this = this;
        if (delay === void 0) { delay = 0; }
        if (!this.running) {
            return;
        }
        if (this.busy) {
            console.error('upload() called before previous call returned');
            return;
        }
        if (delay > 0) {
            setTimeout(function () {
                _this.upload(0);
            }, delay);
            return;
        }
        if (this.squint.connected === false) {
            this.stop();
            return;
        }
        if (this.timer.elapsedMs < this.uploadTracker.recommendedMsPerFrame) {
            this.upload(this.uploadTracker.recommendedMsPerFrame - this.timer.elapsedMs);
            return;
        }
        else {
            this.timer.restart();
        }
        if (!this.squint.bufferReady) {
            this.uploadTracker.onBufferFull();
            requestAnimationFrame(function () { _this.upload(); });
            return;
        }
        this.uploadTracker.onReady();
        this.busy = true;
        try {
            this.onDataNeeded()
                .then(function (blob) {
                if (_this.squint.connected) {
                    _this.squint.sendImage(blob);
                    _this.uploadTracker.onUpload(blob.size);
                    _this.fpsTracker.tick();
                    requestAnimationFrame(function () { _this.upload(); });
                }
            }).catch(function (err) {
                if (err === _SquintApp__WEBPACK_IMPORTED_MODULE_1__["SquintStrings"].CAMERA_NOT_READY) {
                    // this happens when the camera is being initialized. Just try
                    // again in a second
                    _this.busy = false;
                    _this.upload(1000);
                    return;
                }
                else {
                    Object(_SquintApp__WEBPACK_IMPORTED_MODULE_1__["debug"])('Cannot generate image from video: ' + err);
                }
            })
                .finally(function () {
                _this.busy = false;
            });
        }
        catch (err) {
            console.error('Unexpected exception in Uploader.onDataNeeded(): ' + err);
            this.stop();
        }
    };
    return Uploader;
}());



/***/ }),

/***/ "./src/Apps/Squint/Version.ts":
/*!************************************!*\
  !*** ./src/Apps/Squint/Version.ts ***!
  \************************************/
/*! exports provided: Version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
var Version = /** @class */ (function () {
    function Version() {
    }
    Version.Major = 0;
    Version.Minor = 0;
    Version.Build = 47;
    return Version;
}());



/***/ }),

/***/ "./src/Apps/Squint/Video.ts":
/*!**********************************!*\
  !*** ./src/Apps/Squint/Video.ts ***!
  \**********************************/
/*! exports provided: Video */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Video", function() { return Video; });
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SquintApp */ "./src/Apps/Squint/SquintApp.ts");

var Video = /** @class */ (function () {
    function Video() {
    }
    Video.getCameras = function (onFound) {
        navigator.mediaDevices.enumerateDevices()
            .then(function (devices) {
            var str = '';
            var count = 0;
            for (var i = 0; i < devices.length; i++) {
                var device = devices[i];
                if (device.kind === 'videoinput') {
                    count++;
                    str += '"' + device.deviceId + '": ' + device.label + '\n';
                }
            }
            str = count + ' cameras found.\n' + str;
            console.log('enumerateDevices()\n' + str);
            var cameraCount = 1;
            for (var i = 0; i < devices.length; i++) {
                var device = devices[i];
                if (device.kind === 'videoinput') {
                    var actual = {
                        label: 'camera ' + cameraCount++,
                        deviceId: device.deviceId,
                    };
                    onFound(actual);
                }
            }
        })
            .catch(function (err) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_0__["debug"])('Cannot enumerate video devices: ' + err);
        });
    };
    return Video;
}());



/***/ }),

/***/ "./src/Apps/Viewer/Camera.ts":
/*!***********************************!*\
  !*** ./src/Apps/Viewer/Camera.ts ***!
  \***********************************/
/*! exports provided: ObjSizeProvider, FixedSizeProvider, Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjSizeProvider", function() { return ObjSizeProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedSizeProvider", function() { return FixedSizeProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glSpace */ "./src/gl/glSpace.ts");





// When viewing an object, view this much more than the object
var BUFFER_FACTOR = 1.1;
var ObjSizeProvider = /** @class */ (function () {
    function ObjSizeProvider(obj) {
        this.obj = obj;
    }
    Object.defineProperty(ObjSizeProvider.prototype, "maxWidth", {
        get: function () {
            //let xBox = this.obj.getBoundingPts();
            var xBox = this.obj.getBoundingBox();
            return BUFFER_FACTOR * Math.sqrt(xBox.width * xBox.width + xBox.depth * xBox.depth);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjSizeProvider.prototype, "maxHeight", {
        get: function () {
            var xBox = this.obj.getBoundingBox();
            return BUFFER_FACTOR * Math.sqrt(xBox.height * xBox.height + xBox.depth * xBox.depth);
        },
        enumerable: false,
        configurable: true
    });
    return ObjSizeProvider;
}());

var FixedSizeProvider = /** @class */ (function () {
    function FixedSizeProvider(maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
    }
    return FixedSizeProvider;
}());

var Camera = /** @class */ (function () {
    function Camera(settings) {
        var _a, _b, _c, _d, _e, _f;
        this.eye = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](_Renderer__WEBPACK_IMPORTED_MODULE_1__["INITIAL_EYE"]);
        this.lookAt = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].origin;
        this.zoomFactor = 1;
        this.useOrthographic = false;
        if (settings) {
            this.sizeProvider = (_a = settings.sizeProvider) !== null && _a !== void 0 ? _a : this.sizeProvider;
            this.eye = (_b = settings.eye) !== null && _b !== void 0 ? _b : this.eye;
            this.lookAt = (_c = settings.lookAt) !== null && _c !== void 0 ? _c : this.lookAt;
            this.zoomFactor = (_d = settings.zoomFactor) !== null && _d !== void 0 ? _d : this.zoomFactor;
            this.useOrthographic = (_e = settings.useOrthographic) !== null && _e !== void 0 ? _e : this.useOrthographic;
            this.fov = (_f = settings.fov) !== null && _f !== void 0 ? _f : this.fov;
        }
    }
    Camera.prototype.getProjection = function (gl) {
        var projection;
        var space = this.getViewSpace(gl);
        if (this.useOrthographic) {
            projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makeOrtho(space.min.x, space.max.x, space.min.y, space.max.y, space.min.z, space.max.z);
        }
        else {
            var eye = this.eye;
            var up = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, 1, 0]);
            var mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makeLookAt(eye, this.lookAt, up);
            this.fov = 2 * Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["toDeg"])(Math.atan2(space.height / 2, eye.z));
            var near = 0.1;
            var far = 20;
            var ar = space.width / space.height;
            projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makePerspective(this.fov, ar, near, far).multM(mat);
        }
        return projection;
    };
    //
    // The functions below change our view of the model
    //
    Camera.prototype.zoom = function (zoom) {
        this.zoomFactor *= zoom;
    };
    Camera.prototype.translate = function (delta) {
        this.eye.x -= delta.x / this.zoomFactor;
        this.eye.y -= delta.y / this.zoomFactor;
        this.lookAt.x -= delta.x / this.zoomFactor;
        this.lookAt.y -= delta.y / this.zoomFactor;
    };
    /**
     * Clipspace is defined as a range of [-1,1] in the smaller of the width and height.
     * The other dimensions is scaled to match the aspect ratio of the canvas
     */
    Camera.prototype.getClipSpace = function (gl) {
        var ar = gl.canvas.width / gl.canvas.height;
        if (ar > 1) {
            return new _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-ar, -1, 100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([ar, 1, -100]));
        }
        else {
            return new _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-1, -(1 / ar), 100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([1, (1 / ar), -100]));
        }
    };
    /**
     * View space is the world coordinate space of what can be currently viewed.
     */
    Camera.prototype.getViewSpace = function (gl) {
        var winAR = gl.canvas.width / gl.canvas.height;
        var objMaxWidth = this.sizeProvider.maxWidth;
        var objMaxHeight = this.sizeProvider.maxHeight;
        var objAR = objMaxWidth / objMaxHeight;
        var desiredWidth;
        var desiredHeight;
        if (objAR < winAR) {
            // make the object height fit
            desiredHeight = objMaxHeight;
            desiredWidth = objMaxHeight * winAR;
        }
        else {
            // make the object width fit
            desiredHeight = objMaxWidth / winAR;
            desiredWidth = objMaxWidth;
        }
        desiredHeight /= this.zoomFactor;
        desiredWidth /= this.zoomFactor;
        var clipSpace = this.getClipSpace(gl);
        var min = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
            -desiredWidth / 2 - this.lookAt.x,
            -desiredHeight / 2 - this.lookAt.y,
            clipSpace.near + this.lookAt.z,
        ]);
        var max = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
            desiredWidth / 2 - this.lookAt.x,
            desiredHeight / 2 - this.lookAt.y,
            clipSpace.far + this.lookAt.z,
        ]);
        return new _gl_glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](min, max);
    };
    return Camera;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ModelLoader.ts":
/*!****************************************!*\
  !*** ./src/Apps/Viewer/ModelLoader.ts ***!
  \****************************************/
/*! exports provided: ModelLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelLoader", function() { return ModelLoader; });
/* harmony import */ var worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-loader?name=LoaderWorker.worker.js!./LoaderWorker */ "./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/Apps/Viewer/LoaderWorker.ts");
/* harmony import */ var worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
// specify loader and options here. This value must match the
// contents of worker.d.ts



/**
 * Class for doing the work of loading a file into a glObject
 */
var ModelLoader = /** @class */ (function () {
    function ModelLoader() {
        this._loading = false;
    }
    Object.defineProperty(ModelLoader.prototype, "loading", {
        /**
         * Returns true if a file is currently being loaded
         */
        get: function () {
            return this._loading;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Loads a file
     *
     * @param file The file url to load
     * @param updateStatus Callback that is notified of progress
     * @returns TriangleObj promise
     */
    ModelLoader.prototype.loadModelFile = function (file, updateStatus) {
        var _this = this;
        this._loading = true;
        return new Promise(function (resolve, reject) {
            // if a previous worker exists, close it
            if (_this.worker) {
                _this.worker.terminate();
                _this.worker = undefined;
            }
            _this.worker = new worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0___default.a();
            var tStart = Date.now();
            _this.worker.onmessage = function (_a) {
                var data = _a.data;
                if (typeof data === 'string') {
                    // avoid flashing messages for things that happen very quickly.
                    if (Date.now() - tStart > 500) {
                        updateStatus(data);
                    }
                }
                else {
                    _this._loading = false;
                    var tObj = _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_2__["TriangleObj"].fromData(data);
                    updateStatus('');
                    _this.worker.terminate();
                    _this.worker = undefined;
                    resolve(tObj);
                }
            };
            _this.worker.postMessage(file);
        });
    };
    ModelLoader.prototype.orient = function (model) {
        // orient each file so that it is facing forward
        var name = model.name.split('.')[0].toLowerCase();
        switch (name) {
            case 'wolf':
                model.normalize.rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(-140));
                model.normalize.rotX(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(5));
                model.normalize.rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(180));
                break;
            case 'sheephead':
                model.normalize.rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["toRad"])(20));
                break;
            default:
                break;
        }
    };
    return ModelLoader;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ModelsMenu.ts":
/*!***************************************!*\
  !*** ./src/Apps/Viewer/ModelsMenu.ts ***!
  \***************************************/
/*! exports provided: createModelsMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createModelsMenu", function() { return createModelsMenu; });
var menuItems = [
    {
        label: 'Objects', id: 'ObjectsSubMenu', menuItems: [
            { label: 'Sphere', file: 'Sphere' },
            { label: 'Football', file: 'Football.blob' },
            { label: 'Pill', file: 'Pill.blob' },
            { label: 'Pill Bottle', file: 'PillBottle.blob' },
            { label: 'Soda Can', file: 'SodaCan.blob' },
            { label: 'Soccer Ball', file: 'SoccerBall.blob' },
            { label: 'Spoon', file: 'Spoon.blob' },
            { label: 'Teapot', file: 'Teapot.blob' },
            { label: 'Torus (Donut)', file: 'Torus.blob' },
            { label: 'Torus Knot', file: 'TorusKnot.blob' },
            { label: 'Vase', file: 'Vase.blob' },
            { label: 'Vitamin', file: 'Vitamin.blob' },
            { label: 'Wine Bottle', file: 'WineBottle.blob' },
        ]
    },
    {
        label: 'Sculptures', id: 'SculpturesSubMenu', menuItems: [
            { label: 'Belvedere Torso', file: 'BelvedereTorso.blob' },
            { label: 'David', file: 'David.blob' },
            { label: 'Head of David', file: 'HeadOfDavid.blob' },
            { label: 'Lacoon and His Sons', file: 'LaocoonAndHisSons.blob' },
            { label: 'Nefertiti', file: 'Nefertiti.blob' },
            { label: 'Thinker', file: 'Thinker.blob' },
            { label: 'Venus de Milo', file: 'VenusDeMilo.blob' },
            { label: 'Venus of Willendorf', file: 'VenusOfWillendorf.blob' },
            { label: 'Winged Victory of Samothrace', file: 'WingedVictory.blob' },
            { label: 'Winged Victory of Samothrace w/Base', file: 'WingedVictoryWithBase.blob' },
        ]
    },
    {
        label: 'Anatomy', id: 'AnatomySubMenu', menuItems: [
            { label: 'Skull 1', file: 'Skull1.blob' },
            { label: 'Skull 2', file: 'Skull2.blob' },
            { label: 'Skull 3', file: 'Skull3.blob' },
            { label: 'Skull 4', file: 'Skull4.blob' },
            { label: 'Pelvis', file: 'Pelvis.blob' },
            { label: 'Clavicle', file: 'Clavicle.blob' },
            { label: 'Scapula', file: 'Scapula.blob' },
            { label: 'Humerus', file: 'Humerus.blob' },
            { label: 'Head Ecorche', file: 'HeadEcorche.blob' },
            { label: 'Head Ecorche 2', file: 'HeadEcorche2.blob' },
            { label: 'Head Ecorche 3', file: 'HeadEcorche3.blob' },
            { label: 'Head Ecorche 4', file: 'HeadEcorche4.blob' },
        ]
    },
    {
        label: 'Poses', id: 'PosesSubMenu', menuItems: [
            { label: 'Pose 1', file: 'Pose_01.blob' },
            { label: 'Pose 2', file: 'Pose_02.blob' },
            { label: 'Pose 3', file: 'Pose_03.blob' },
            { label: 'Pose 4', file: 'Pose_04.blob' },
            { label: 'Pose 5', file: 'Pose_05.blob' },
            { label: 'Pose 6', file: 'Pose_06.blob' },
            { label: 'Pose 7', file: 'Pose_07.blob' },
            { label: 'Pose 8', file: 'Pose_08.blob' },
            { label: 'Pose 9', file: 'Pose_09.blob' },
            { label: 'Pose 10', file: 'Pose_010.blob' },
            { label: 'Pose 11', file: 'Pose_011.blob' },
            { label: 'Pose 12', file: 'Pose_012.blob' },
            { label: 'Pose 13', file: 'Pose_013.blob' },
            { label: 'Pose 14', file: 'Pose_014.blob' },
            { label: 'Pose 15', file: 'Pose_015.blob' },
            { label: 'Pose 16', file: 'Pose_016.blob' },
            { label: 'Female Pose', file: 'Pose1.blob' },
        ]
    },
    {
        label: 'Heads', id: 'HeadsSubMenu', menuItems: [
            { label: 'Head 1', file: 'Head1.blob' },
            { label: 'Head 2', file: 'Head2.blob' },
            { label: 'Head 3', file: 'Head3.blob' },
            { label: 'Head 4', file: 'Head4.blob' },
            { label: 'Head 5', file: 'Head5.blob' },
            { label: 'Head 6', file: 'Head6.blob' },
            { label: 'Head 7', file: 'Head7.blob' },
            { label: 'Head 8', file: 'Head8.blob' },
            { label: 'Head 9', file: 'Head9.blob' },
            { label: 'Head 10', file: 'Head10.blob' },
            { label: 'Head 11', file: 'Head.blob' },
            { label: 'Female Head', file: 'FemaleHead.blob' },
            { label: 'Arnold', file: 'Arnold.blob' },
        ]
    },
    {
        label: 'Expressions', id: 'ExpressionsSubMenu', menuItems: [
            {
                label: 'Neutral', id: 'NeutralSubMenu', menuItems: [
                    { label: 'Neutral', file: 'Male_02_01_Neutral.blob' },
                    { label: 'Neutral, Eyes Closed', file: 'Male_02_02_Neutral_Eyes_Closed.blob' },
                    { label: 'Neutral, Lips Parted', file: 'Male_02_038_Neutral_Lips_Parted.blob' },
                ]
            },
            {
                label: 'Eyes', id: 'EyesSubMenu', menuItems: [
                    { label: 'Look Up', file: 'Male_02_05_Look_Up.blob' },
                    { label: 'Look Down', file: 'Male_02_06_Look_Down.blob' },
                    { label: 'Look Left', file: 'Male_02_07_Look_Left.blob' },
                    { label: 'Look Right', file: 'Male_02_08_Look_Right.blob' },
                    { label: 'Brows Up', file: 'Male_02_016_Brows_Up.blob' },
                    { label: 'Brows Down', file: 'Male_02_017_Brows_Down.blob' },
                ]
            },
            {
                label: 'Jaw', id: 'JawSubMenu', menuItems: [
                    { label: 'Wide Open', file: 'Male_02_09_Jaw_Wide_Open.blob' },
                    { label: 'Side Right', file: 'Male_02_018_Jaw_Side_Right.blob' },
                    { label: 'Side Left', file: 'Male_02_019_Jaw_Side_Left.blob' },
                    { label: 'Thrust', file: 'Male_02_020_Jaw_Thrust.blob' },
                    { label: 'Clench', file: 'Male_02_021_Jaw_Clench.blob' },
                ]
            },
            {
                label: 'Cheeks', id: 'CheeksSubMenu', menuItems: [
                    { label: 'Puff', file: 'Male_02_022_Cheek_Puff.blob' },
                    { label: 'Suck', file: 'Male_02_023_Cheek_Suck.blob' },
                    { label: 'Dimple', file: 'Male_02_027_Dimple_Cheeks.blob' },
                ]
            },
            {
                label: 'Lips', id: 'LipsSubMenu', menuItems: [
                    { label: 'Tighten', file: 'Male_02_010_Tighten Lips.blob' },
                    { label: 'Pucker', file: 'Male_02_012_Pucker.blob' },
                    { label: 'Flare', file: 'Male_02_026_Flare_Lips.blob' },
                    { label: 'Sounds: "CH"', file: 'Male_02_024_Phoneme_CH.blob' },
                    { label: 'Sounds: "FV"', file: 'Male_02_025_Phoneme_FV.blob' },
                ]
            },
            {
                label: 'Emotions', id: 'EmotionsSubMenu', menuItems: [
                    { label: 'Smile, Mouth Closed', file: 'Male_02_03_Smile_Mouth_Closed.blob' },
                    { label: 'Smile, Mouth Open', file: 'Male_02_04_Smile_Mouth_Open.blob' },
                    { label: 'Snarl', file: 'Male_02_013_Snarl.blob' },
                    { label: 'Frown', file: 'Male_02_014_Frown.blob' },
                    { label: 'Happy', file: 'Male_02_028_Happy.blob' },
                    { label: 'Surprise', file: 'Male_02_029_Surprise.blob' },
                    { label: 'Sad', file: 'Male_02_030_Sad.blob' },
                    { label: 'Angry', file: 'Male_02_031_Angry.blob' },
                    { label: 'Pain', file: 'Male_02_032_Pain.blob' },
                    { label: 'Fear', file: 'Male_02_033_Fear.blob' },
                    { label: 'Disgust', file: 'Male_02_034_Disgust.blob' },
                    { label: 'Shock', file: 'Male_02_035_Shock.blob' },
                    { label: 'Rage', file: 'Male_02_036_Rage.blob' },
                ]
            },
            {
                label: 'Other', id: 'OtherSubMenu', menuItems: [
                    { label: 'Face Compression', file: 'Male_02_011_Face_Compression.blob' },
                    { label: 'Neck Tighten', file: 'Male_02_015_Neck_Tighten.blob' },
                    { label: 'Tongue', file: 'Male_02_037_Tongue.blob' },
                ]
            },
        ]
    },
];
function addItems(menu, items, loadModel) {
    items.forEach(function (item) {
        if ('menuItems' in item) {
            var subMenu = menu.addSubMenu(item.label, item.id);
            addItems(subMenu, item.menuItems, loadModel);
        }
        else {
            menu.addItem(item.label, function () { loadModel(item.file); });
        }
    });
}
function createModelsMenu(menubar, loadModel) {
    var menu = menubar.addSubMenu('Models', 'Models');
    addItems(menu, menuItems, loadModel);
}


/***/ }),

/***/ "./src/Apps/Viewer/PerspectiveCtrl.ts":
/*!********************************************!*\
  !*** ./src/Apps/Viewer/PerspectiveCtrl.ts ***!
  \********************************************/
/*! exports provided: PerspectiveCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCtrl", function() { return PerspectiveCtrl; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GUI/OverlayCanvas */ "./src/GUI/OverlayCanvas.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Camera */ "./src/Apps/Viewer/Camera.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _gl_glSpace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../gl/glSpace */ "./src/gl/glSpace.ts");







var PerspectiveCtrl = /** @class */ (function () {
    function PerspectiveCtrl(parent, provider) {
        var _this = this;
        this.provider = provider;
        var canvas = document.createElement('canvas');
        canvas.id = 'PerspectiveCanvas';
        parent.appendChild(canvas);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl', { alpha: false });
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_3__["Renderer"](context);
        this.renderer.showMiniView = false;
        this.renderer.showBall = false;
        this.renderer.options.camera = new _Camera__WEBPACK_IMPORTED_MODULE_4__["Camera"]({
            sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_4__["FixedSizeProvider"](2, 2)
        });
        this.renderer.options.camera.useOrthographic = true;
        this.renderer.showFloor = false;
        this.overlay = new _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_1__["OverlayCanvas"](parent, 'PerspectiveOverlayCanvas');
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__["PointerEventHandler"](canvas);
        this.handler.onDown = function (pos) { return _this.onDown(pos); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
    }
    PerspectiveCtrl.prototype.delete = function () {
        this.renderer.delete();
    };
    PerspectiveCtrl.prototype.setEyePos = function (pos) {
        // convert to model space
        this.provider.eye = this.fromScreen(pos);
        if (this.onChange) {
            this.onChange();
        }
    };
    PerspectiveCtrl.prototype.onDown = function (pos) {
        this.setEyePos(pos);
    };
    PerspectiveCtrl.prototype.onDrag = function (pos, delta) {
        this.setEyePos(pos);
    };
    PerspectiveCtrl.prototype.setSize = function (width, height) {
        var gl = this.gl;
        gl.canvas.width = width;
        gl.canvas.height = height;
    };
    PerspectiveCtrl.prototype.render = function (modelMat) {
        // set the model matrix of the object to that of the primary
        // obj with an additional 90 deg rotation
        this.renderer.obj.model = modelMat.clone().rotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(90));
        // shift the view so that the object is on the far right. Far enough that there is
        // a square space on the end that contains the origin (center of object we're viewing)
        var viewSpace = this.renderer.options.camera.getViewSpace(this.gl);
        this.renderer.options.camera.lookAt = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-viewSpace.width / 2 + viewSpace.height / 2, 0, 0]);
        this.renderer.render();
        this.drawEye();
    };
    PerspectiveCtrl.prototype.fromScreen = function (pt) {
        var canvas = this.gl.canvas;
        var ar = canvas.width / canvas.height;
        // the space we're viewing is a 2x2 box on the right
        var width = 2 * ar; // space.width * (2.0 / space.height);
        var height = 2.0;
        var space = new _gl_glSpace__WEBPACK_IMPORTED_MODULE_6__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-width / 2, -height / 2, -100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([width / 2, height / 2, 100]));
        var boxSize = space.height;
        var z = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])((1 - pt.x / canvas.width) * space.width - boxSize / 2, boxSize / 2, 100);
        var y = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(space.bottom + (1 - pt.y / canvas.height) * space.height, -1, 1);
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.provider.eye.x, y, z]);
    };
    PerspectiveCtrl.prototype.toScreen = function (pt) {
        var canvas = this.gl.canvas;
        var ar = canvas.width / canvas.height;
        // the space we're viewing is a 2x2 box on the right
        var width = 2 * ar; // space.width * (2.0 / space.height);
        var height = 2.0;
        var space = new _gl_glSpace__WEBPACK_IMPORTED_MODULE_6__["glSpace"](new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-width / 2, -height / 2, -100]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([width / 2, height / 2, 100]));
        var boxSize = space.height;
        var x = (1 - (pt.z + boxSize / 2) / space.width) * canvas.width;
        var y = (1 - (pt.y - space.bottom) / space.height) * canvas.height;
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([x, y]);
    };
    PerspectiveCtrl.prototype.drawLine = function (ctx, pt1, pt2) {
        var p1 = this.toScreen(pt1);
        var p2 = this.toScreen(pt2);
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
    };
    PerspectiveCtrl.prototype.drawEye = function () {
        var gl = this.gl;
        var ctx = this.overlay.context;
        ctx.canvas.width = gl.canvas.width;
        ctx.canvas.height = gl.canvas.height;
        ctx.lineWidth = 2;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["isMobile"]) {
            ctx.lineWidth = 2 * ctx.lineWidth;
        }
        ctx.clearRect(0, 0, this.gl.canvas.width, this.gl.canvas.height);
        var space = this.renderer.options.camera.getViewSpace(this.gl);
        // draw the front 'view' line
        ctx.strokeStyle = 'rgba(255,255,255,0.2)';
        this.drawLine(ctx, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, space.top, space.height / 2]), new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, space.bottom, space.height / 2]));
        // draw line from the eye to the look at center
        this.drawLine(ctx, this.provider.eye, this.provider.lookAt);
        var p1 = this.toScreen(this.provider.eye);
        var p2 = this.toScreen(this.provider.lookAt);
        var angle = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toDeg"])(Math.atan2(p2.y - p1.y, p2.x - p1.x));
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        p2.x = p1.x + ctx.canvas.width * Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle + this.provider.fov / 2));
        p2.y = p1.y + ctx.canvas.width * Math.sin(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle + this.provider.fov / 2));
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        p2.x = p1.x + ctx.canvas.width * Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle - this.provider.fov / 2));
        p2.y = p1.y + ctx.canvas.width * Math.sin(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(angle - this.provider.fov / 2));
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        var center = this.toScreen(this.provider.eye);
        ctx.strokeStyle = 'white';
        ctx.fillStyle = 'rgba(255,255,255,0.6)';
        // draw the actual eye
        var openAngle = 70;
        var radius = 0.12 * ctx.canvas.height;
        var startAngle = angle + openAngle / 2;
        var endAngle = startAngle + (360 - openAngle);
        ctx.beginPath();
        ctx.moveTo(center.x, center.y);
        ctx.arc(center.x, center.y, radius, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(startAngle), Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(endAngle));
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        ctx.strokeStyle = 'transparent';
        ctx.fillStyle = 'rgba(255,255,255,0.3)';
        ctx.beginPath();
        ctx.moveTo(center.x, center.y);
        ctx.arc(center.x, center.y, radius, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(startAngle), Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(endAngle), true);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        // draw the look at point (center of object)
        center = this.toScreen(this.provider.lookAt);
        radius = 2;
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(center.x, center.y, radius, 0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["toRad"])(360));
        ctx.fill();
    };
    PerspectiveCtrl.prototype.setModel = function (tObj) {
        this.renderer.setModel(tObj);
    };
    return PerspectiveCtrl;
}());



/***/ }),

/***/ "./src/Apps/Viewer/PerspectivePanel.ts":
/*!*********************************************!*\
  !*** ./src/Apps/Viewer/PerspectivePanel.ts ***!
  \*********************************************/
/*! exports provided: PerspectivePanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectivePanel", function() { return PerspectivePanel; });
/* harmony import */ var _GUI_Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/Panel */ "./src/GUI/Panel.ts");
/* harmony import */ var _PerspectiveCtrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PerspectiveCtrl */ "./src/Apps/Viewer/PerspectiveCtrl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PerspectivePanel = /** @class */ (function (_super) {
    __extends(PerspectivePanel, _super);
    function PerspectivePanel(parent, id, camera) {
        var _this = _super.call(this, parent, id) || this;
        _this.resizeListener = function () { return _this.onResize(); };
        _this.perspectiveCtrl = new _PerspectiveCtrl__WEBPACK_IMPORTED_MODULE_1__["PerspectiveCtrl"](_this.div, camera);
        _this.perspectiveCtrl.onChange = function () {
            if (_this.onChange) {
                _this.onChange();
            }
        };
        window.addEventListener('resize', _this.resizeListener);
        return _this;
    }
    PerspectivePanel.prototype.delete = function () {
        window.removeEventListener('resize', this.resizeListener);
        this.perspectiveCtrl.delete();
    };
    PerspectivePanel.prototype.render = function (model) {
        this.perspectiveCtrl.render(model);
    };
    PerspectivePanel.prototype.setModel = function (tObj) {
        this.perspectiveCtrl.setModel(tObj);
    };
    PerspectivePanel.prototype.show = function (value) {
        if (value === true) {
            this.onResize();
        }
    };
    PerspectivePanel.prototype.onResize = function () {
        this.perspectiveCtrl.setSize(this.div.clientWidth, this.div.clientHeight);
    };
    return PerspectivePanel;
}(_GUI_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/Apps/Viewer/Plane.ts":
/*!**********************************!*\
  !*** ./src/Apps/Viewer/Plane.ts ***!
  \**********************************/
/*! exports provided: Plane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plane", function() { return Plane; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");

/**
 * Represents a plane defined by a*x + b*y + c*z = d
 */
var Plane = /** @class */ (function () {
    /**
     * @param pt A point on the plane perpendicular to the origin
     * @param origin If the perpendicular point is not the origin, specify it here
     */
    function Plane(pt, origin) {
        if (!origin) {
            origin = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].origin;
        }
        this.origin = origin;
        this.a = origin.x - pt.x;
        this.b = origin.y - pt.y;
        this.c = origin.z - pt.z;
        this.d = this.a * this.a + this.b * this.b + this.c * this.c;
        this.distanceTerm = Math.sqrt(this.d);
    }
    /**
     * Computes the distance to a point.
     *
     * @param pt The point.
     * @returns the Distance.
     */
    Plane.prototype.distToPt = function (pt) {
        var x = pt.x - this.origin.x;
        var y = pt.y - this.origin.y;
        var z = pt.z - this.origin.z;
        return Math.abs(this.a * x + this.b * y + this.c * z + this.d) / this.distanceTerm;
    };
    return Plane;
}());



/***/ }),

/***/ "./src/Apps/Viewer/Renderer.ts":
/*!*************************************!*\
  !*** ./src/Apps/Viewer/Renderer.ts ***!
  \*************************************/
/*! exports provided: INITIAL_EYE, Contour, RenderMode, Reset, LightType, Renderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INITIAL_EYE", function() { return INITIAL_EYE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contour", function() { return Contour; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderMode", function() { return RenderMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reset", function() { return Reset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightType", function() { return LightType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return Renderer; });
/* harmony import */ var _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/ViewerVertex.glsl */ "./src/shaders/ViewerVertex.glsl");
/* harmony import */ var _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/ViewerFragment.glsl */ "./src/shaders/ViewerFragment.glsl");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Camera */ "./src/Apps/Viewer/Camera.ts");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _glObject__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./glObject */ "./src/Apps/Viewer/glObject.ts");
/* harmony import */ var _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gl/glFrameBuffer */ "./src/gl/glFrameBuffer.ts");
/* harmony import */ var _gl_glTexture__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../gl/glTexture */ "./src/gl/glTexture.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");
/* harmony import */ var _Plane__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Plane */ "./src/Apps/Viewer/Plane.ts");
/* harmony import */ var _TextureRenderer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./TextureRenderer */ "./src/Apps/Viewer/TextureRenderer.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");


















var BALL_RADIUS = 0.5;
var INITIAL_LIGHT_POS = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1.0, 1.0, 1.5]);
var INITIAL_VIEW = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity;
var INITIAL_SHININESS = 15;
var INITIAL_LIGHT_INTENSITY = 1.0;
var INITIAL_FALLOFF = 0.5;
var INITIAL_EYE = [0, 0, 6]; // 3 times the max object dimension of 2. For a model, about 15 ft away
var Contour = /** @class */ (function () {
    function Contour(color, angle) {
        if (color instanceof _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]) {
            this.color = color;
        }
        else {
            this.color = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([color, color, color]);
        }
        this.angle = angle;
    }
    return Contour;
}());

// Rendering modes. Must match values in ViewerFragment.glsl
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["Normal"] = 0] = "Normal";
    RenderMode[RenderMode["ContourPlanes"] = 1] = "ContourPlanes";
    RenderMode[RenderMode["ContourValues"] = 2] = "ContourValues";
    RenderMode[RenderMode["LightAndShadow"] = 3] = "LightAndShadow";
    RenderMode[RenderMode["HighlightTerminator"] = 4] = "HighlightTerminator";
    RenderMode[RenderMode["HighlightShadow"] = 5] = "HighlightShadow";
    RenderMode[RenderMode["EmphasizeHighlights"] = 6] = "EmphasizeHighlights";
})(RenderMode || (RenderMode = {}));
var Reset;
(function (Reset) {
    Reset[Reset["All"] = 0] = "All";
    Reset[Reset["View"] = 1] = "View";
    Reset[Reset["Lights"] = 2] = "Lights";
    Reset[Reset["Rendering"] = 3] = "Rendering";
})(Reset || (Reset = {}));
var LightType;
(function (LightType) {
    LightType[LightType["Point"] = 0] = "Point";
    LightType[LightType["Directional"] = 1] = "Directional";
})(LightType || (LightType = {}));
/**
 * Class that renders triangles and a light source
 */
var Renderer = /** @class */ (function () {
    function Renderer(glCtx) {
        this.gl = null;
        this.yellow = new _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"]([1.0, 0.9, 0.7]);
        this.options = {
            view: _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity,
            valueRange: _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard,
            lightPos: INITIAL_LIGHT_POS.clone(),
            lightType: LightType.Point,
            falloff: INITIAL_FALLOFF,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: true,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_6__["Camera"](),
            whiteColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite,
            blackColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack,
            useShadows: true,
            renderMode: RenderMode.Normal,
        };
        this.arrowOptions = {
            view: _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity,
            valueRange: new _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"](1.0, 0.4, 0.1),
            lightPos: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1, 0.5, 0.5]),
            lightType: LightType.Directional,
            falloff: 0.0,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: false,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_6__["Camera"]({
                sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_6__["FixedSizeProvider"](2, 2),
                useOrthographic: true,
            }),
            whiteColor: this.yellow,
            blackColor: _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__["htmlColor"].black.toGlColor(),
            useShadows: false,
            renderMode: RenderMode.Normal,
        };
        this.ballOptions = {
            view: _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity,
            valueRange: _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard,
            lightPos: new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1, 0.5, 0.5]),
            lightType: LightType.Directional,
            falloff: 0.0,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: false,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_6__["Camera"]({
                sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_6__["FixedSizeProvider"](2, 2),
                useOrthographic: true,
            }),
            whiteColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite,
            blackColor: _gl_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack,
            useShadows: false,
            renderMode: RenderMode.Normal,
        };
        // size of the smaller view
        this.miniSize = 0.2;
        this.showShadowMap = false;
        this.showMiniView = true;
        this.showBall = true;
        this.showFloor = true;
        this.showGrid = false;
        this.miniViewShowContours = false;
        this.lockFloor = false;
        this.gl = glCtx;
        var gl = this.gl;
        // enable z-buffer
        gl.enable(gl.DEPTH_TEST);
        // enable alpha values
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        this.program = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_7__["glProgram"](gl, _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        var tBall = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__["TriangleObjBuilder"]('Ball');
        tBall.addSphere(50, BALL_RADIUS, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]));
        tBall.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_13__["NormalType"].Smooth);
        this.ball = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](gl, tBall, this.program);
        var tArrow = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__["TriangleObjBuilder"]('Light Arrow');
        tArrow.addArrow();
        this.arrow = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](gl, tArrow, this.program);
        this.arrowOptions.camera.useOrthographic = true;
        var style = getComputedStyle(gl.canvas);
        var color = _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__["htmlColor"].fromCss(style.backgroundColor).toGlColor();
        gl.clearColor(color.r, color.g, color.b, 1);
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        // tests
        /*
        let light = new Vec3([0, 10, 0]);
        let pt = new Vec3([2, 0, 0]);
        let mat = new Mat4();
        mat.translate(new Vec3([0, -100, 0]));
        mat.scale(0.5);
        mat.rotZ(toRad(-90));
        mat.rotY(toRad(45));
        let xpt = mat.multVec3(pt);
        let xLight = mat.inverse().multVec3(light);
        let xOrigin = mat.inverse().multVec3(new Vec3([0, 0, 0]));
        let plane = new Plane(light);
        let plane2 = new Plane(xLight, xOrigin);
        console.log('\n\n----------------------');
        console.log('pt: ' + pt.toString(2) + '      xlight: ' + xLight.toString(2) + '   ' + (plane2.distToPt(pt) * mat.scaleFactors.x));
        console.log('xpt: ' + xpt.toString(2) + '    light: ' + light.toString(2) + '   ' + plane.distToPt(xpt));
        console.log('xOrigin: ' + xOrigin.toString(2));
        */
    }
    Object.defineProperty(Renderer.prototype, "ballColor", {
        set: function (color) {
            this.ballOptions.whiteColor = color;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.delete = function () {
        this.obj.delete();
        this.floor.delete();
        this.ball.delete();
        this.arrow.delete();
        if (this.shadowFrameBuffer) {
            this.shadowFrameBuffer.delete();
            this.shadowColorTexture.delete();
            this.shadowDepthTexture.delete();
        }
        this.obj = null;
        this.floor = null;
        this.ball = null;
        this.arrow = null;
        this.shadowFrameBuffer = null;
        this.shadowColorTexture = null;
        this.shadowDepthTexture = null;
    };
    Renderer.prototype.renderModeCanToggleHighlights = function () {
        if (this.options.renderMode === RenderMode.EmphasizeHighlights || this.options.renderMode === RenderMode.LightAndShadow) {
            return false;
        }
        else {
            return true;
        }
    };
    Renderer.prototype.rotX = function (angle) {
        this.obj.rotX(angle);
        if (this.lockFloor == false) {
            this.floor.rotX(angle);
        }
    };
    Renderer.prototype.rotY = function (angle) {
        this.obj.rotY(angle);
        if (this.lockFloor == false) {
            this.floor.rotY(angle);
        }
    };
    Renderer.prototype.rotZ = function (angle) {
        this.obj.rotZ(angle);
        if (this.lockFloor == false) {
            this.floor.rotZ(angle);
        }
    };
    Renderer.prototype.preRotX = function (angle) {
        this.obj.preRotX(angle);
        if (this.lockFloor == false) {
            this.floor.preRotX(angle);
        }
    };
    Renderer.prototype.preRotY = function (angle) {
        this.obj.preRotY(angle);
        if (this.lockFloor == false) {
            this.floor.preRotY(angle);
        }
    };
    Renderer.prototype.preRotZ = function (angle) {
        this.obj.preRotZ(angle);
        if (this.lockFloor == false) {
            this.floor.preRotZ(angle);
        }
    };
    Renderer.prototype.scale = function (scale) {
        this.obj.scale(scale);
        if (this.lockFloor == false) {
            this.floor.scale(scale);
        }
    };
    Renderer.prototype.translate = function (offset) {
        this.obj.translate(offset);
        if (this.lockFloor == false) {
            this.floor.translate(offset);
        }
    };
    Renderer.prototype.rotateLight = function (xRad, yRad) {
        var matX = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].fromRotX(yRad);
        var matY = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].fromRotY(xRad);
        var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec4"].fromVec3(this.options.lightPos, 1);
        vec = matX.multV(vec);
        vec = matY.multV(vec);
        this.options.lightPos = vec.xyz;
    };
    Object.defineProperty(Renderer.prototype, "tObj", {
        get: function () {
            return this.obj.tObj;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.setModel = function (tObj) {
        if (this.obj) {
            this.obj.delete();
        }
        this.obj = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](this.gl, tObj, this.program);
        this.options.camera.sizeProvider = new _Camera__WEBPACK_IMPORTED_MODULE_6__["ObjSizeProvider"](this.obj);
        // move the object so that the center is at [0,0,0] and it is scaled
        // so that it's diagonal is 2 units across
        var objScale = 2.0 / tObj.diagonal;
        this.obj.autoSize(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]), 2);
        if (this.floor) {
            this.floor.delete;
        }
        var tFloor = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_12__["TriangleObjBuilder"]('Floor');
        // make the floor size slightly larger than the object, centered at the bottom
        var radius = 4;
        var pos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, -objScale * tObj.height / 2, 0]);
        tFloor.addDisk(50, radius, pos);
        this.floor = new _glObject__WEBPACK_IMPORTED_MODULE_9__["glObject"](this.gl, tFloor, this.program);
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__["glUniform"](this.gl, this.program);
        uni.set('uFloorCenter', tFloor.center);
        uni.set('uFloorRadius', radius);
        // reset the view and the light
        this.reset(Reset.All);
    };
    Renderer.prototype.reset = function (what) {
        switch (what) {
            case Reset.All:
                this.reset(Reset.Lights);
                this.reset(Reset.Rendering);
                this.reset(Reset.View);
                break;
            case Reset.Lights:
                this.options.lightPos = INITIAL_LIGHT_POS.clone();
                this.options.falloff = INITIAL_FALLOFF;
                this.options.lightIntensity = INITIAL_LIGHT_INTENSITY;
                this.options.valueRange.ambientIntensity = _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard.ambientIntensity;
                break;
            case Reset.View:
                this.options.view = INITIAL_VIEW.clone();
                this.obj.clearTransforms();
                this.floor.clearTransforms();
                this.options.camera.eye = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"](INITIAL_EYE);
                this.options.camera.lookAt = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"].origin;
                this.options.camera.zoomFactor = 1;
                break;
            case Reset.Rendering:
                this.options.renderMode = RenderMode.Normal;
                this.options.showHighlights = true;
                this.options.shininess = INITIAL_SHININESS;
                this.options.valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].Standard;
                break;
        }
    };
    Renderer.prototype.render = function () {
        this.program.use();
        this.renderToShadowMap();
        this.renderToScreen();
    };
    Renderer.prototype.setValueRangeUniforms = function (valueRange) {
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__["glUniform"](this.gl, this.program);
        uni.set('uDiffuseIntensity', valueRange.diffuseIntensity);
        uni.set('uAmbientIntensity', valueRange.shadow);
        uni.set('uSpecularIntensity', valueRange.specularIntensity);
    };
    Renderer.prototype.setOptions = function (options) {
        var gl = this.gl;
        options.useCulling ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_14__["glUniform"](this.gl, this.program);
        uni.set('view', options.view);
        uni.set('lightView', this.lightView);
        uni.set('projection', options.camera.getProjection(this.gl));
        uni.set('uEye', options.camera.eye);
        uni.set('uOrthographic', options.camera.useOrthographic);
        uni.set('uUseShadows', options.useShadows);
        uni.seti('uRenderMode', options.renderMode);
        uni.set('uShowHighlights', options.showHighlights || options.renderMode === RenderMode.EmphasizeHighlights);
        uni.set('uShininess', options.shininess);
        var valueRange;
        if (options.renderMode === RenderMode.EmphasizeHighlights) {
            valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"].EmphasizeHighlights;
        }
        else {
            valueRange = options.valueRange;
        }
        this.setValueRangeUniforms(valueRange);
        uni.set('uWhiteColor', options.whiteColor);
        uni.set('uBlackColor', options.blackColor);
        uni.seti('uNumContours', options.contours.length);
        for (var i = 0; i < options.contours.length; i++) {
            uni.set('uContourColors[' + i + ']', options.contours[i].color);
            uni.set('uContourAngles[' + i + ']', options.contours[i].angle);
        }
        uni.set('uPointLight', options.lightType === LightType.Point);
        uni.set('uFalloff', options.falloff);
        uni.set('uLightIntensity', options.lightIntensity);
        if (options.falloff === 0) {
            uni.set('uLightPos', options.lightPos);
        }
        else {
            // compute the minimum distance to the light. We'll use this value to auto-adjust
            // the light
            var dist = void 0;
            // We can get the distance in two ways. 1: transform all the points by the model
            // matrix and compute distances. This is expensive since we have to transform each
            // point so we instead, 2: do the inverse transform to the light and compute the
            // distance to the untransformed points.
            var boundingPts = this.obj.tObj.getBoundingPts();
            // get the inverse transform of the light position
            var obj = this.obj;
            var mat = obj.model.multM(obj.normalize);
            var inverse = mat.inverse();
            var xLightPos = inverse.multVec3(options.lightPos);
            if (options.lightType === LightType.Point) {
                dist = boundingPts.distToPoint(xLightPos);
            }
            else {
                // figure out the light plane for the inverse light
                var xOrigin = inverse.multVec3(_Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"].origin);
                var xPlane = new _Plane__WEBPACK_IMPORTED_MODULE_15__["Plane"](xLightPos, xOrigin);
                // distance to the raw object points
                dist = boundingPts.distToPlane(xPlane);
            }
            // to get the actual distance, we now need to reapply the scale factor to
            // get the true distance. The scale factor is the same in all directions
            // so just use the x value
            var s = obj.model.multM(obj.normalize).scaleFactors.x;
            dist = {
                min: dist.min * s,
                max: dist.max * s,
            };
            // we need to compute the distance to the light and the light intensity such that
            // the closest point gets lit with value 1 and the furthest point matches the
            // target falloff.
            //
            // - d is the distance the light needs to be from the closest point. Light falls off
            // with the square of distance.
            // - falloffDistance is the size of the object
            var falloffDistance = dist.max - dist.min;
            var d = (falloffDistance * Math.sqrt(1.0 - options.falloff)) / (1.0 - Math.sqrt(1.0 - options.falloff));
            // intensity = d^2 so that intensity at d (1/d^2) = 1.0
            var lightIntensityAtSource = d * d;
            uni.set('uLightIntensityAtSource', lightIntensityAtSource);
            // actual light position is measured from the object, not the origin. Shift 
            // it back
            var objToOrigin = options.lightPos.magnitude() - dist.min;
            options.lightPos = options.lightPos.normalize().mult(d + objToOrigin);
            uni.set('uLightPos', options.lightPos);
        }
        return uni;
    };
    Renderer.prototype.renderToShadowMap = function () {
        var gl = this.gl;
        var maxTextureSize = Math.min(gl.getParameter(gl.MAX_TEXTURE_SIZE));
        var desiredSize = this.options.camera.zoomFactor * Math.min(gl.canvas.width, gl.canvas.height);
        var size = 256;
        while (size < desiredSize && size * 2 <= maxTextureSize) {
            size *= 2;
        }
        if (!this.shadowFrameBuffer || size !== this.shadowFrameBuffer.size) {
            if (this.shadowFrameBuffer) {
                this.shadowFrameBuffer.delete();
                this.shadowColorTexture.delete();
                this.shadowDepthTexture.delete();
            }
            this.shadowFrameBuffer = new _gl_glFrameBuffer__WEBPACK_IMPORTED_MODULE_10__["glFrameBuffer"](gl, size, size);
            this.shadowColorTexture = this.shadowFrameBuffer.createTexture(_gl_glTexture__WEBPACK_IMPORTED_MODULE_11__["glTextureStyle"].Color);
            this.shadowDepthTexture = this.shadowFrameBuffer.createTexture(_gl_glTexture__WEBPACK_IMPORTED_MODULE_11__["glTextureStyle"].Depth);
            this.shadowFrameBuffer.attachTexture(gl.COLOR_ATTACHMENT0, this.shadowColorTexture);
            this.shadowFrameBuffer.attachTexture(gl.DEPTH_ATTACHMENT, this.shadowDepthTexture);
            this.shadowFrameBuffer.check();
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        gl.viewport(0, 0, this.shadowFrameBuffer.width, this.shadowFrameBuffer.height);
        this.shadowFrameBuffer.bind();
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        var center = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]);
        var up = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 1, 0]);
        var eye = this.options.lightPos;
        var mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeLookAt(eye, center, up);
        mat.set(0, 3, 0);
        mat.set(1, 3, 0);
        mat.set(2, 3, 0);
        if (this.options.lightType === LightType.Directional) {
            // to avoid clipping, expand the z range to allow full rotation of
            // anything in a 3-3-3 cube.
            var maxSize = Math.sqrt(27);
            mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeOrtho(-1, 1, -1, 1, maxSize, -maxSize).multM(mat);
            this.lightView = mat;
        }
        else {
            // TODO make point light sources work for shadow maps
            /*
            let fov = 2 * toDeg(Math.atan2(3 / 2, eye.z));
            console.log('fov=' + fov);
            mat = Mat4.makePerspective(fov, 1, 0.1, 20).multM(mat);
            this.lightView = mat;
            */
            var maxSize = Math.sqrt(27);
            mat = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeOrtho(-1, 1, -1, 1, maxSize, -maxSize).multM(mat);
            this.lightView = mat;
        }
        var uni = this.setOptions(this.options);
        // change the view matrix so that our view is from the light
        uni.set('view', this.lightView);
        uni.set('projection', _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity);
        // don't try to use the shadow texture while we're creating it
        uni.set('uUseShadows', false);
        uni.seti('uRenderMode', RenderMode.Normal);
        gl.disable(gl.CULL_FACE);
        this.obj.draw();
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    };
    Renderer.prototype.renderToScreen = function () {
        var gl = this.gl;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // display the depth buffer for testing purposes
        if (this.showShadowMap) {
            gl.disable(gl.CULL_FACE);
            var tr = new _TextureRenderer__WEBPACK_IMPORTED_MODULE_16__["TextureRenderer"](gl);
            tr.render(this.shadowDepthTexture, this.shadowFrameBuffer.width, this.shadowFrameBuffer.height);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        else {
            this.shadowDepthTexture.bind();
            var style = getComputedStyle(gl.canvas);
            var color = _Util_htmlColor__WEBPACK_IMPORTED_MODULE_8__["htmlColor"].fromCss(style.backgroundColor).toGlColor();
            gl.clearColor(color.r, color.g, color.b, 1);
            gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
            this.drawFloor();
            // draw the main object
            this.setOptions(this.options);
            this.obj.draw();
            gl.clear(gl.DEPTH_BUFFER_BIT);
            this.drawMiniView();
            this.drawBall();
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
    };
    Renderer.prototype.drawFloor = function () {
        if (this.showFloor) {
            var gl = this.gl;
            var uni = this.setOptions(this.options);
            // set the special mode for the floor
            uni.set('uRenderingFloor', true);
            uni.set('uShowGrid', this.showGrid);
            // cull polygons so we don't see the floor from below
            gl.enable(gl.CULL_FACE);
            gl.cullFace(gl.BACK);
            uni.seti('uRenderMode', RenderMode.Normal);
            //this.setValueRangeUniforms(ValueRange.Standard);
            this.floor.draw();
            uni.set('uRenderingFloor', false);
        }
    };
    Renderer.prototype.drawMiniView = function () {
        if (this.showMiniView) {
            var gl = this.gl;
            gl.enable(gl.CULL_FACE);
            var uni = this.setOptions(this.options);
            var clipSpace = this.options.camera.getClipSpace(gl);
            var projection = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].makeOrtho(clipSpace.left, clipSpace.right, clipSpace.bottom, clipSpace.top, clipSpace.near, clipSpace.far);
            uni.set('projection', projection);
            uni.set('uOthrographic', true);
            // draw the object in the upper right at a reduced size
            var view = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity;
            view.scale(this.miniSize);
            view.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([clipSpace.max.x - this.miniSize, clipSpace.max.y - this.miniSize, 0]));
            uni.set('view', view);
            uni.seti('uRenderMode', this.miniViewShowContours ? RenderMode.ContourPlanes : RenderMode.Normal);
            this.obj.draw();
        }
    };
    Renderer.prototype.drawBall = function () {
        if (this.showBall === false) {
            return;
        }
        var gl = this.gl;
        // create a view matrix that renders in the upper left
        var clipSpace = this.options.camera.getClipSpace(gl);
        var view = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"].identity;
        view.scale(this.miniSize);
        view.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([clipSpace.min.x + this.miniSize, clipSpace.max.y - this.miniSize, 0]));
        this.ballOptions.view = view.clone();
        this.ballOptions.valueRange = this.options.valueRange.clone();
        this.ballOptions.lightPos = this.options.lightPos.clone();
        this.ballOptions.lightType = this.options.lightType;
        this.ballOptions.falloff = this.options.falloff;
        // TODO compute distance and intensity for light for the ball
        this.ballOptions.lightIntensity = this.options.lightIntensity;
        this.ballOptions.showHighlights = this.options.showHighlights;
        this.ballOptions.shininess = this.options.shininess;
        this.ballOptions.renderMode = this.options.renderMode;
        this.ballOptions.contours = this.options.contours;
        var uni = this.setOptions(this.ballOptions);
        if (this.ballOptions.falloff > 0) {
            // TODO this code is similar to the code in setOptions. Combine it.
            var falloffDistance = 1.0; // ball diameter
            var d = (falloffDistance * Math.sqrt(1.0 - this.ballOptions.falloff)) / (1.0 - Math.sqrt(1.0 - this.ballOptions.falloff));
            // intensity = d^2 so that intensity at d (1/d^2) = 1.0
            var lightIntensityAtSource = d * d;
            uni.set('uLightIntensityAtSource', lightIntensityAtSource);
            // actual light position is measured from the object, not the origin. Shift 
            // it back
            var objToOrigin = 0.5;
            this.ballOptions.lightPos = this.ballOptions.lightPos.normalize().mult(d + objToOrigin);
            uni.set('uLightPos', this.ballOptions.lightPos);
        }
        this.ball.draw();
        // back out angles as if looking down the z-axis
        var x = -this.options.lightPos.x;
        var y = -this.options.lightPos.y;
        var z = -this.options.lightPos.z;
        // start by looking down from the Z direction
        var radius = Math.sqrt(x * x + y * y + z * z);
        var elevationAngle = Math.acos(z / radius);
        var rotationAngle = Math.atan2(y, x);
        // first reset things so that we're looking down the z-axis
        this.arrow.clearTransforms();
        this.arrow.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0.0, 0.55, 0.0]));
        this.arrow.rotX(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_17__["toRad"])(90));
        // rotate to match the light source
        this.arrow.rotY(-elevationAngle);
        this.arrow.rotZ(-rotationAngle);
        this.arrowOptions.view = view.clone();
        this.setOptions(this.arrowOptions);
        this.arrow.draw();
    };
    return Renderer;
}());



/***/ }),

/***/ "./src/Apps/Viewer/TextureRenderer.ts":
/*!********************************************!*\
  !*** ./src/Apps/Viewer/TextureRenderer.ts ***!
  \********************************************/
/*! exports provided: TextureRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureRenderer", function() { return TextureRenderer; });
/* harmony import */ var _shaders_TextureRendererVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/TextureRendererVertex.glsl */ "./src/shaders/TextureRendererVertex.glsl");
/* harmony import */ var _shaders_TextureRendererFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/TextureRendererFragment.glsl */ "./src/shaders/TextureRendererFragment.glsl");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _gl_glBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../gl/glBuffer */ "./src/gl/glBuffer.ts");




/**
 * Class that does the work of building the Path Traced texture
 */
var TextureRenderer = /** @class */ (function () {
    function TextureRenderer(glCtx) {
        this.gl = null;
        this.vertices = [
            -1, -1,
            -1, +1,
            +1, -1,
            +1, +1
        ];
        this.gl = glCtx;
        var gl = this.gl;
        // create shader
        this.program = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_2__["glProgram"](gl, _shaders_TextureRendererVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_TextureRendererFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        // create vertex buffer - the block we'll draw our rendered texture on
        this.vertexBuffer = new _gl_glBuffer__WEBPACK_IMPORTED_MODULE_3__["glBuffer"](gl, this.program, 'vertex');
        this.vertexBuffer.upload(this.vertices);
    }
    TextureRenderer.prototype.render = function (texture, width, height) {
        var gl = this.gl;
        gl.viewport((gl.canvas.width - width) / 2, (gl.canvas.height - height) / 2, width, height);
        this.program.use();
        texture.bind();
        this.vertexBuffer.bind(2);
        // display the main screen
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };
    return TextureRenderer;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ValuePlanes.ts":
/*!****************************************!*\
  !*** ./src/Apps/Viewer/ValuePlanes.ts ***!
  \****************************************/
/*! exports provided: DEFAULT_THRESHOLD1, DEFAULT_THRESHOLD2, ValuePlanes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_THRESHOLD1", function() { return DEFAULT_THRESHOLD1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_THRESHOLD2", function() { return DEFAULT_THRESHOLD2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanes", function() { return ValuePlanes; });
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");

var DEFAULT_THRESHOLD1 = 40;
var DEFAULT_THRESHOLD2 = 70;
/**
 * Keeps track of 3 values in the light based on threshold angles
 * for the planes (stored in degrees) and the light range (highlight
 * to shadow colors).
 */
var ValuePlanes = /** @class */ (function () {
    function ValuePlanes(valueRange) {
        this._threshold1 = DEFAULT_THRESHOLD1;
        this._threshold2 = DEFAULT_THRESHOLD2;
        this.valueRange = valueRange;
        this.computeColors();
    }
    Object.defineProperty(ValuePlanes.prototype, "threshold1", {
        get: function () {
            return this._threshold1;
        },
        set: function (angleInDeg) {
            this._threshold1 = angleInDeg;
            this._threshold2 = Math.max(this._threshold2, angleInDeg);
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "threshold2", {
        get: function () {
            return this._threshold2;
        },
        set: function (angleInDeg) {
            this._threshold2 = angleInDeg;
            this._threshold1 = Math.min(this._threshold1, angleInDeg);
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "highlight", {
        get: function () {
            return this.valueRange.maxIntensity;
        },
        set: function (val) {
            this.valueRange.maxIntensity = val;
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "shadow", {
        get: function () {
            return this.valueRange.ambientIntensity;
        },
        set: function (val) {
            this.valueRange.ambientIntensity = val;
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "lightLight", {
        get: function () {
            return this._lightLight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "midLight", {
        get: function () {
            return this._midLight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "darkLight", {
        get: function () {
            return this._darkLight;
        },
        enumerable: false,
        configurable: true
    });
    ValuePlanes.prototype.colorAt = function (deg) {
        deg = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["clamp"])(deg, 0, 90);
        return Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["mix"])(this.shadow, this.highlight - this.valueRange.specularIntensity, Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(deg)));
    };
    ValuePlanes.prototype.computeColors = function () {
        this._lightLight = this.colorAt(0.5 * this.threshold1);
        this._midLight = this.colorAt(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["mix"])(this.threshold1, this.threshold2, 0.5));
        this._darkLight = this.colorAt((this.threshold2 + 90) / 2);
    };
    return ValuePlanes;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ValuePlanesCtrl.ts":
/*!********************************************!*\
  !*** ./src/Apps/Viewer/ValuePlanesCtrl.ts ***!
  \********************************************/
/*! exports provided: ValuePlanesCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanesCtrl", function() { return ValuePlanesCtrl; });
/* harmony import */ var _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shaders/ViewerVertex.glsl */ "./src/shaders/ViewerVertex.glsl");
/* harmony import */ var _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shaders/ViewerFragment.glsl */ "./src/shaders/ViewerFragment.glsl");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _gl_glProgram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../gl/glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _glObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glObject */ "./src/Apps/Viewer/glObject.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");















var BALL_RADIUS = 0.875;
var BALL_CENTER = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-0.6, -0.6, 0]);
var CTRL_SIZE = 150;
var NOMINAL_DISPLAY_SIZE = 150;
var NOMINAL_KNOB_LENGTH = 25;
var NOMINAL_KNOB_RADIUS = 10;
var ValuePlanesCtrl = /** @class */ (function () {
    function ValuePlanesCtrl(parent, provider, onThreshold1Change, onThreshold2Change) {
        var _this = this;
        this.mouseOffset = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]();
        this.hit = 0;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["isMobile"]) {
            CTRL_SIZE = 300;
        }
        this.provider = provider;
        this.onThreshold1Change = onThreshold1Change;
        this.onThreshold2Change = onThreshold2Change;
        var canvas = document.createElement('canvas');
        canvas.id = 'ValuePlanesCanvas';
        canvas.width = CTRL_SIZE;
        canvas.height = CTRL_SIZE;
        parent.appendChild(canvas);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl');
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.overlay = document.createElement('canvas');
        this.overlay.id = 'ValuePlanesOverlayCanvas';
        this.overlay.width = CTRL_SIZE;
        this.overlay.height = CTRL_SIZE;
        parent.appendChild(this.overlay);
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_4__["PointerEventHandler"](this.overlay);
        this.handler.onDown = function (pos) { return _this.onDown(pos); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        var gl = this.gl;
        gl.enable(gl.DEPTH_TEST);
        this.program = new _gl_glProgram__WEBPACK_IMPORTED_MODULE_3__["glProgram"](gl, _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        var tBall = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_7__["TriangleObjBuilder"]('Ball');
        tBall.addSphere(50, BALL_RADIUS, BALL_CENTER);
        tBall.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_8__["NormalType"].Smooth);
        this.ball = new _glObject__WEBPACK_IMPORTED_MODULE_5__["glObject"](gl, tBall, this.program);
        var tArrow = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_7__["TriangleObjBuilder"]('Light Arrow');
        tArrow.addArrow();
        this.arrow = new _glObject__WEBPACK_IMPORTED_MODULE_5__["glObject"](gl, tArrow, this.program);
        this.draw();
    }
    ValuePlanesCtrl.prototype.onDown = function (pos) {
        this.hitTest(pos);
    };
    ValuePlanesCtrl.prototype.hitTest = function (pos) {
        var d1 = this.p1.distance(pos);
        var d2 = this.p2.distance(pos);
        var HIT_RADIUS = NOMINAL_KNOB_RADIUS * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        if (d1 < HIT_RADIUS && d1 <= d2) {
            this.hit = 1;
            this.mouseOffset = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([this.p1.x - pos.x, this.p1.y - pos.y]);
        }
        else if (d2 < HIT_RADIUS && d2 <= d1) {
            this.hit = 2;
            this.mouseOffset = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([this.p2.x - pos.x, this.p2.y - pos.y]);
        }
        else {
            this.hit = 0;
        }
    };
    ValuePlanesCtrl.prototype.onDrag = function (pos, delta) {
        if (this.hit > 0) {
            var hitPt = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([pos.x + this.mouseOffset.x, pos.y + this.mouseOffset.y]);
            hitPt.x = Math.max(hitPt.x, this.ballCenter.x);
            hitPt.y = Math.min(hitPt.y, this.ballCenter.y);
            var radius = this.ballCenter.distance(hitPt);
            var angle = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["clamp"])(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toDeg"])(Math.asin((hitPt.x - this.ballCenter.x) / radius)), 0, 90);
            if (this.hit == 1) {
                this.provider.threshold1 = angle;
                this.onThreshold1Change(angle);
            }
            else {
                this.provider.threshold2 = angle;
                this.onThreshold2Change(angle);
            }
            this.draw();
        }
    };
    ValuePlanesCtrl.prototype.toGLColor = function (val) {
        return new _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"]([val, val, val]);
    };
    ValuePlanesCtrl.prototype.setStdUniforms = function () {
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_10__["glUniform"](this.gl, this.program);
        uni.set('view', _Util3D_Mat__WEBPACK_IMPORTED_MODULE_11__["Mat4"].identity);
        uni.set('projection', _Util3D_Mat__WEBPACK_IMPORTED_MODULE_11__["Mat4"].ortho);
        uni.set('uEye', new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 1]));
        uni.set('uOrthographic', true);
        uni.set('uDiffuseIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard.diffuseIntensity);
        uni.set('uAmbientIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard.shadow);
        uni.set('uSpecularIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard.specularIntensity);
        uni.set('uLightIntensity', 1.0);
        uni.set('uFalloff', 0);
        uni.set('uWhiteColor', _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"].modelWhite);
        uni.set('uBlackColor', _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"].modelBlack);
        var contourColors = [
            this.toGLColor(this.provider.lightLight),
            this.toGLColor(this.provider.midLight),
            this.toGLColor(this.provider.darkLight),
        ];
        uni.seti('uNumContours', contourColors.length);
        for (var i = 0; i < contourColors.length; i++) {
            uni.set('uContourColors[' + i + ']', contourColors[i]);
        }
        uni.set('uContourAngles[0]', this.provider.threshold1);
        uni.set('uContourAngles[1]', this.provider.threshold2);
        uni.set('uContourAngles[2]', 90);
        return uni;
    };
    ValuePlanesCtrl.prototype.draw = function () {
        this.drawBall();
        this.drawOverlay();
    };
    ValuePlanesCtrl.prototype.drawBall = function () {
        var gl = this.gl;
        gl.clear(gl.COLOR_BUFFER_BIT);
        var uni = this.setStdUniforms();
        // always render with bands
        uni.seti('uRenderMode', _Renderer__WEBPACK_IMPORTED_MODULE_13__["RenderMode"].ContourPlanes);
        // shoot the light straight down
        uni.set('uLightPos', new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 1, 0]));
        // don't cast shadows
        uni.set('uUseShadows', false);
        // render the ball
        this.ball.draw();
        // draw the arrow
        uni.set('uLightPos', new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-1, -0.5, 0.5]));
        uni.seti('uRenderMode', _Renderer__WEBPACK_IMPORTED_MODULE_13__["RenderMode"].Normal);
        // first reset things so that we're looking down the z-axis
        this.arrow.clearTransforms();
        this.arrow.scale(1.25);
        this.arrow.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([BALL_CENTER.x, BALL_CENTER.y + BALL_RADIUS + 0.1, 0.0]));
        uni.set('uWhiteColor', new _gl_glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"]([1.0, 1.0, 0.5]));
        uni.set('uBlackColor', _Util_htmlColor__WEBPACK_IMPORTED_MODULE_14__["htmlColor"].black.toGlColor());
        uni.set('uAmbientIntensity', 0.4);
        uni.set('uDiffuseIntensity', 0.6);
        this.arrow.draw();
    };
    ValuePlanesCtrl.prototype.drawOverlay = function () {
        var ctx = this.overlay.getContext('2d');
        this.ballCenter = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([
            CTRL_SIZE * (1 + BALL_CENTER.x) / 2,
            CTRL_SIZE * (1 - BALL_CENTER.y) / 2
        ]);
        ctx.clearRect(0, 0, CTRL_SIZE, CTRL_SIZE);
        ctx.fillStyle = 'limegreen';
        ctx.strokeStyle = 'black';
        var KNOB_LENGTH = NOMINAL_KNOB_LENGTH * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        var KNOB_RADIUS = NOMINAL_KNOB_RADIUS * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        var r = CTRL_SIZE * BALL_RADIUS / 2;
        var s1 = this.getPt(this.ballCenter, this.provider.threshold1, r);
        this.p1 = this.getPt(this.ballCenter, this.provider.threshold1, r + KNOB_LENGTH);
        var s2 = this.getPt(this.ballCenter, this.provider.threshold2, r);
        this.p2 = this.getPt(this.ballCenter, this.provider.threshold2, r + KNOB_LENGTH);
        ctx.lineWidth = (1 / 150) * CTRL_SIZE;
        ctx.beginPath();
        ctx.moveTo(s1.x, s1.y);
        ctx.lineTo(this.p1.x, this.p1.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.p1.x, this.p1.y, KNOB_RADIUS, 0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(360));
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(s2.x, s2.y);
        ctx.lineTo(this.p2.x, this.p2.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.p2.x, this.p2.y, KNOB_RADIUS, 0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(360));
        ctx.fill();
        ctx.stroke();
    };
    ValuePlanesCtrl.prototype.getPt = function (center, threshold, radius) {
        var oy = radius * Math.sin(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(90 - threshold));
        var ox = radius * Math.cos(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_6__["toRad"])(90 - threshold));
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([center.x + ox, center.y - oy]);
    };
    return ValuePlanesCtrl;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ValuePlanesPanel.ts":
/*!*********************************************!*\
  !*** ./src/Apps/Viewer/ValuePlanesPanel.ts ***!
  \*********************************************/
/*! exports provided: ValuePlanesPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanesPanel", function() { return ValuePlanesPanel; });
/* harmony import */ var _GUI_Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../GUI/Panel */ "./src/GUI/Panel.ts");
/* harmony import */ var _ValuePlanes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ValuePlanes */ "./src/Apps/Viewer/ValuePlanes.ts");
/* harmony import */ var _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../GUI/Slider */ "./src/GUI/Slider.ts");
/* harmony import */ var _ValuePlanesCtrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ValuePlanesCtrl */ "./src/Apps/Viewer/ValuePlanesCtrl.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ValuePlanesPanel = /** @class */ (function (_super) {
    __extends(ValuePlanesPanel, _super);
    function ValuePlanesPanel(parent, id, valueRange) {
        var _this = _super.call(this, parent, id) || this;
        _this.valuePlanes = new _ValuePlanes__WEBPACK_IMPORTED_MODULE_1__["ValuePlanes"](valueRange);
        var div = document.createElement('div');
        div.className = 'SlidersDiv';
        _this.div.appendChild(div);
        _this.createCtrlsElements(div);
        _this.valuePlanesCtrl = new _ValuePlanesCtrl__WEBPACK_IMPORTED_MODULE_3__["ValuePlanesCtrl"](_this.div, _this.valuePlanes, function (value) {
            _this.updateSliders();
            if (_this.onChange) {
                _this.onChange(_this);
            }
        }, function (value) {
            _this.updateSliders();
            if (_this.onChange) {
                _this.onChange(_this);
            }
        });
        return _this;
    }
    ValuePlanesPanel.prototype.createCtrlsElements = function (parent) {
        var _this = this;
        this.highlightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'Highlight',
            label: 'Highlight',
            min: 0,
            max: 1,
            value: this.valuePlanes.highlight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            oninput: function () {
                _this.valuePlanes.highlight = _this.highlightSlider.value;
                _this.updateSliders();
                _this.valuePlanesCtrl.draw();
                if (_this.onChange) {
                    _this.onChange(_this);
                }
            },
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.lightLightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'LightLight',
            label: 'Light Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.lightLight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.lightLightSlider.range.disabled = true;
        this.midLightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'MidLight',
            label: 'Mid Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.midLight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.midLightSlider.range.disabled = true;
        this.darkLightSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'DarkLight',
            label: 'Dark Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.darkLight,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.darkLightSlider.range.disabled = true;
        this.shadowSlider = new _GUI_Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'Shadow',
            label: 'Shadow',
            min: 0,
            max: 1,
            value: this.valuePlanes.shadow,
            colors: [_gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelBlack.toHtmlColor(), _gl_glColor__WEBPACK_IMPORTED_MODULE_5__["glColor3"].modelWhite.toHtmlColor()],
            oninput: function () {
                _this.valuePlanes.shadow = _this.shadowSlider.value;
                _this.updateSliders();
                _this.valuePlanesCtrl.draw();
                if (_this.onChange) {
                    _this.onChange(_this);
                }
            },
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
    };
    ValuePlanesPanel.prototype.updateSliders = function () {
        this.highlightSlider.value = this.valuePlanes.highlight;
        this.lightLightSlider.value = this.valuePlanes.lightLight;
        this.midLightSlider.value = this.valuePlanes.midLight;
        this.darkLightSlider.value = this.valuePlanes.darkLight;
        this.shadowSlider.value = this.valuePlanes.shadow;
    };
    ValuePlanesPanel.prototype.toRenderer = function (renderer) {
        renderer.options.contours = [
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.lightLight, this.valuePlanes.threshold1),
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.midLight, this.valuePlanes.threshold2),
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.darkLight, 90)
        ];
        renderer.options.valueRange = new _ValueRange__WEBPACK_IMPORTED_MODULE_4__["ValueRange"](this.valuePlanes.highlight, this.valuePlanes.shadow, this.valuePlanes.highlight - this.valuePlanes.lightLight);
    };
    return ValuePlanesPanel;
}(_GUI_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/Apps/Viewer/ValueRange.ts":
/*!***************************************!*\
  !*** ./src/Apps/Viewer/ValueRange.ts ***!
  \***************************************/
/*! exports provided: ValueRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueRange", function() { return ValueRange; });
/**
 * Keeps track of a value range - highlight to shadow color. A minimum
 * differential is kept between the two when one is changed
 */
var ValueRange = /** @class */ (function () {
    function ValueRange(maxIntensity, ambientIntensity, specularIntensity) {
        this._maxIntensity = maxIntensity;
        this._ambientIntensity = ambientIntensity;
        this._specularIntensity = specularIntensity;
    }
    Object.defineProperty(ValueRange, "Standard", {
        get: function () {
            return new ValueRange(1.0, 0.2, 0.1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange, "EmphasizeHighlights", {
        get: function () {
            return new ValueRange(1.0, 0.2, 0.75);
        },
        enumerable: false,
        configurable: true
    });
    ValueRange.prototype.clone = function () {
        return new ValueRange(this.maxIntensity, this.ambientIntensity, this.specularIntensity);
    };
    Object.defineProperty(ValueRange.prototype, "specularIntensity", {
        get: function () {
            return this._specularIntensity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "maxIntensity", {
        get: function () {
            return this._maxIntensity;
        },
        set: function (val) {
            this._maxIntensity = Math.min(Math.max(val, this._specularIntensity), 1.0);
            this._ambientIntensity = Math.min(this._ambientIntensity, this._maxIntensity - this._specularIntensity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "ambientIntensity", {
        get: function () {
            return this._ambientIntensity;
        },
        set: function (val) {
            this.shadow = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "shadow", {
        get: function () {
            return this._ambientIntensity;
        },
        set: function (val) {
            this._ambientIntensity = Math.max(Math.min(val, 1 - this._specularIntensity), 0);
            this._maxIntensity = Math.max(this._maxIntensity, this._ambientIntensity + this._specularIntensity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "diffuseIntensity", {
        get: function () {
            return this.maxIntensity - this._ambientIntensity - this._specularIntensity;
        },
        enumerable: false,
        configurable: true
    });
    return ValueRange;
}());



/***/ }),

/***/ "./src/Apps/Viewer/ViewerApp.ts":
/*!**************************************!*\
  !*** ./src/Apps/Viewer/ViewerApp.ts ***!
  \**************************************/
/*! exports provided: ViewerApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewerApp", function() { return ViewerApp; });
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Renderer */ "./src/Apps/Viewer/Renderer.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gl/glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../GUI/OverlayCanvas */ "./src/GUI/OverlayCanvas.ts");
/* harmony import */ var _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../GUI/PointerEventHandler */ "./src/GUI/PointerEventHandler.ts");
/* harmony import */ var _PerspectivePanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PerspectivePanel */ "./src/Apps/Viewer/PerspectivePanel.ts");
/* harmony import */ var _ValuePlanesPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ValuePlanesPanel */ "./src/Apps/Viewer/ValuePlanesPanel.ts");
/* harmony import */ var _Util_hsvColor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Util/hsvColor */ "./src/Util/hsvColor.ts");
/* harmony import */ var _Util_FPS__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Util/FPS */ "./src/Util/FPS.ts");
/* harmony import */ var _ModelLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ModelLoader */ "./src/Apps/Viewer/ModelLoader.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Util3D/TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ValueRange */ "./src/Apps/Viewer/ValueRange.ts");
/* harmony import */ var _ModelsMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ModelsMenu */ "./src/Apps/Viewer/ModelsMenu.ts");
/* harmony import */ var _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../Util3D/TriangleObjBuilder */ "./src/Util3D/TriangleObjBuilder.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
















var PointerMode;
(function (PointerMode) {
    PointerMode[PointerMode["View"] = 0] = "View";
    PointerMode[PointerMode["Light"] = 1] = "Light";
})(PointerMode || (PointerMode = {}));
var COLOR_CONTOURS = [
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 0.20, 0.20]), 10),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 0.55, 0.25]), 20),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 0.81, 0.25]), 30),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([1.00, 1.00, 0.00]), 40),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.30, 1.00, 0.10]), 50),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.25, 0.90, 0.90]), 60),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.50, 0.50, 1.00]), 70),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.20, 0.20, 1.00]), 80),
    new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Contour"](new _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([0.30, 0.11, 0.40]), 90),
];
var ViewerApp = /** @class */ (function () {
    function ViewerApp(query) {
        this.gl = null;
        this.pointerMode = PointerMode.View;
        this.rotateLightWithObject = false;
        this.dirty = true;
        this.animate = false;
        this.fps = new _Util_FPS__WEBPACK_IMPORTED_MODULE_7__["FPS"]();
        this.loader = new _ModelLoader__WEBPACK_IMPORTED_MODULE_8__["ModelLoader"]();
        this.query = query;
    }
    ViewerApp.prototype.create = function (div) {
        div.id = 'ViewerApp';
        var viewContainer = document.createElement('div');
        viewContainer.id = 'ViewContainer';
        viewContainer.className = 'Container';
        div.appendChild(viewContainer);
        this.createViewElements(viewContainer);
        this.createPerspectivePanel(div);
        this.createValuePlanesPanel(div);
        this.updateSize();
        this.loadModel(this.query);
    };
    ViewerApp.prototype.delete = function () {
        cancelAnimationFrame(this.animationFrame);
        this.perspectivePanel.delete();
        this.valuePlanesPanel.delete();
    };
    ViewerApp.prototype.createViewElements = function (parent) {
        var _this = this;
        var canvas = document.createElement('canvas');
        canvas.id = 'MainCanvas';
        parent.appendChild(canvas);
        var style = getComputedStyle(canvas);
        this.baseBackgroundColor = _Util_hsvColor__WEBPACK_IMPORTED_MODULE_6__["hsvColor"].fromHtmlColor(_Util_htmlColor__WEBPACK_IMPORTED_MODULE_9__["htmlColor"].fromCss(style.backgroundColor));
        this.overlay = new _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_2__["OverlayCanvas"](parent);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl', { alpha: false });
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_0__["Renderer"](this.gl);
        this.renderer.showMiniView = false;
        this.handler = new _GUI_PointerEventHandler__WEBPACK_IMPORTED_MODULE_3__["PointerEventHandler"](canvas);
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        this.handler.onDown = function () {
            _this.animate = false;
            _this.overlay.clear();
        };
        this.handler.onClick = function (pos) { return _this.onClick(pos); };
        this.handler.onDblClick = function () {
            _this.animate = true;
            _this.fps = new _Util_FPS__WEBPACK_IMPORTED_MODULE_7__["FPS"]();
            return false;
        };
        this.handler.onScale = function (scale, change) { return _this.onScale(scale, change); };
        this.handler.onRotate = function (angle, delta) { return _this.onRotate(angle, delta); };
        this.handler.onTranslate = function (delta) { return _this.onTranslate(delta); };
        document.onkeydown = function (event) {
            var angle = 90;
            if (event.ctrlKey) {
                angle = 1;
            }
            switch (event.keyCode) {
                case 37: // left
                    _this.rotateObjects(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(angle), 0);
                    _this.dirty = true;
                    break;
                case 38: // up
                    _this.rotateObjects(0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(angle));
                    _this.dirty = true;
                    break;
                case 39: // right
                    _this.rotateObjects(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(-angle), 0);
                    _this.dirty = true;
                    break;
                case 40: // down
                    _this.rotateObjects(0, Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(-angle));
                    _this.dirty = true;
                    break;
            }
        };
        document.onkeypress = function (event) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (event.key) {
                    case 'a':
                        this.renderer.obj.applyXForm();
                        this.dirty = true;
                        break;
                    case 'd':
                        this.renderer.showShadowMap = !this.renderer.showShadowMap;
                        this.dirty = true;
                        break;
                    case 'g':
                        this.renderer.showGrid = !this.renderer.showGrid;
                        this.dirty = true;
                        break;
                    case 'h':
                        this.renderer.options.showHighlights = !this.renderer.options.showHighlights;
                        this.dirty = true;
                        break;
                    case 'i':
                        alert(this.renderer.tObj.name + '\n' +
                            'Num Triangles: ' + this.renderer.tObj.numTriangles.toLocaleString() + '\n' +
                            'Num Vertices: ' + this.renderer.tObj.numVertices.toLocaleString() + '\n');
                        break;
                    case 'l':
                        if (this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point) {
                            this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Directional;
                        }
                        else {
                            this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point;
                        }
                        this.dirty = true;
                        break;
                    case 'o':
                        this.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__["NormalType"].Smooth);
                        break;
                    case 'p':
                        this.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__["NormalType"].Flat);
                        break;
                    case 'r':
                        this.renderer.tObj.reverse();
                        this.renderer.obj.uploadTriangles();
                        this.dirty = true;
                        break;
                    case 's':
                        this.save();
                        break;
                    case 't':
                        this.dirty = true;
                        break;
                    case 'v':
                        this.renderer.options.camera.useOrthographic = !this.renderer.options.camera.useOrthographic;
                        this.dirty = true;
                        break;
                }
                return [2 /*return*/];
            });
        }); };
        window.addEventListener('resize', function () {
            _this.updateSize();
            _this.dirty = true;
        });
    };
    ViewerApp.prototype.createPerspectivePanel = function (div) {
        var _this = this;
        this.perspectivePanel = new _PerspectivePanel__WEBPACK_IMPORTED_MODULE_4__["PerspectivePanel"](div, 'PerspectivePanel', this.renderer.options.camera);
        this.perspectivePanel.onShow = function (panel) {
            _this.valuePlanesPanel.visible = false;
            _this.updateSize();
            _this.dirty = true;
        };
        this.perspectivePanel.onHide = function () {
            _this.updateSize();
            _this.pointerMode = PointerMode.View;
            _this.dirty = true;
        };
        this.perspectivePanel.onChange = function () {
            _this.dirty = true;
        };
    };
    ViewerApp.prototype.createValuePlanesPanel = function (div) {
        var _this = this;
        this.valuePlanesPanel = new _ValuePlanesPanel__WEBPACK_IMPORTED_MODULE_5__["ValuePlanesPanel"](div, 'ValuePlanesPanel', this.renderer.options.valueRange);
        this.valuePlanesPanel.onShow = function (panel) {
            _this.perspectivePanel.visible = false;
            _this.updateSize();
            _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes;
            _this.valuePlanesPanel.toRenderer(_this.renderer);
            _this.dirty = true;
        };
        this.valuePlanesPanel.onHide = function () {
            _this.updateSize();
            _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
            _this.renderer.options.valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_13__["ValueRange"].Standard;
            _this.dirty = true;
        };
        this.valuePlanesPanel.onChange = function () {
            _this.valuePlanesPanel.toRenderer(_this.renderer);
            _this.dirty = true;
        };
    };
    ViewerApp.prototype.buildMenu = function (menubar) {
        var _this = this;
        Object(_ModelsMenu__WEBPACK_IMPORTED_MODULE_14__["createModelsMenu"])(menubar, function (file) { return _this.loadModel(file); });
        var subMenu;
        subMenu = menubar.addSubMenu('Tools', 'Tools');
        var contoursSubMenu = subMenu.addSubMenu('Color Contours');
        contoursSubMenu.addRadiobutton({
            label: 'None',
            group: 'ContourGroup',
            checked: function () {
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes ||
                    _this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourValues) {
                    return false;
                }
                else {
                    return true;
                }
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        contoursSubMenu.addRadiobutton({
            label: 'Planes',
            group: 'ContourGroup',
            checked: function () {
                return (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes && _this.valuePlanesPanel.visible === false);
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.contours = COLOR_CONTOURS;
                _this.renderer.options.renderMode = button.checked ? _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourPlanes : _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        contoursSubMenu.addRadiobutton({
            label: 'Values',
            group: 'ContourGroup',
            checked: function () {
                return (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourValues && _this.valuePlanesPanel.visible === false);
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.contours = COLOR_CONTOURS;
                _this.renderer.options.renderMode = button.checked ? _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].ContourValues : _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        var highlightSubMenu = subMenu.addSubMenu('Highlights');
        highlightSubMenu.addRadiobutton({
            label: 'Show',
            group: 'HighlightsGroup',
            checked: function () { return _this.renderer.options.showHighlights && _this.renderer.renderModeCanToggleHighlights(); },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = true;
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights) {
                    _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                }
                _this.dirty = true;
            }
        });
        highlightSubMenu.addRadiobutton({
            label: 'Hide',
            group: 'HighlightsGroup',
            checked: function () { return !_this.renderer.options.showHighlights && _this.renderer.renderModeCanToggleHighlights(); },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = false;
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights) {
                    _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                }
                _this.dirty = true;
            }
        });
        highlightSubMenu.addRadiobutton({
            label: 'Emphasize',
            group: 'HighlightsGroup',
            checked: function () { return _this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights; },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = true;
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].EmphasizeHighlights;
                _this.dirty = true;
            }
        });
        highlightSubMenu.addSlider({
            label: 'Shininess',
            min: 1,
            max: 50,
            value: this.renderer.options.shininess,
            oninput: function (slider) {
                _this.renderer.options.shininess = slider.value;
                _this.dirty = true;
            },
        });
        var shadowsSubMenu = subMenu.addSubMenu('Shadows');
        shadowsSubMenu.addRadiobutton({
            label: 'Normal',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Highlight Terminator',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightTerminator; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightTerminator;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Highlight Shadow',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightShadow; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].HighlightShadow;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Light and Shadow Only',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].LightAndShadow; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_0__["RenderMode"].LightAndShadow;
                _this.dirty = true;
            }
        });
        subMenu.addItem('Perspective...', function () {
            _this.perspectivePanel.visible = true;
        });
        subMenu.addItem('Value Planes...', function () {
            _this.valuePlanesPanel.visible = true;
        });
        var lightSubMenu = subMenu.addSubMenu('Light');
        lightSubMenu.addRadiobutton({
            label: 'Directional Light',
            group: 'LightTypeGroup',
            checked: function () { return _this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Directional; },
            oncheck: function (button) {
                _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Directional;
                _this.dirty = true;
            }
        });
        lightSubMenu.addRadiobutton({
            label: 'Point Light',
            group: 'LightTypeGroup',
            checked: function () { return _this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point; },
            oncheck: function (button) {
                _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_0__["LightType"].Point;
                _this.dirty = true;
            }
        });
        lightSubMenu.addSlider({
            label: 'Falloff',
            min: 0,
            max: 0.9,
            value: this.renderer.options.falloff,
            oninput: function (slider) {
                _this.renderer.options.falloff = slider.value;
                _this.dirty = true;
            },
        });
        lightSubMenu.addSlider({
            label: 'Intensity',
            min: 0.5,
            max: 1.5,
            value: this.renderer.options.lightIntensity,
            oninput: function (slider) {
                _this.renderer.options.lightIntensity = slider.value;
                _this.dirty = true;
            },
        });
        lightSubMenu.addSlider({
            label: 'Ambient Intensity',
            min: 0.0,
            max: 0.4,
            value: this.renderer.options.valueRange.ambientIntensity,
            oninput: function (slider) {
                _this.renderer.options.valueRange.ambientIntensity = slider.value;
                var range = 0.6;
                var baseVal = _this.baseBackgroundColor.v;
                var newVal = (baseVal - range / 2) + range * slider.valueAsPercent;
                var newColor = new _Util_hsvColor__WEBPACK_IMPORTED_MODULE_6__["hsvColor"]([_this.baseBackgroundColor.h, _this.baseBackgroundColor.s, newVal]);
                _this.gl.canvas.style.backgroundColor = newColor.toHtmlColor().toCss();
                _this.dirty = true;
            },
        });
        subMenu = menubar.addSubMenu('Options', 'Options');
        var resetSubMenu = subMenu.addSubMenu('Reset');
        resetSubMenu.addItem('All', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].All);
            _this.dirty = true;
        });
        resetSubMenu.addItem('Lights', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].Lights);
            _this.dirty = true;
        });
        resetSubMenu.addItem('View', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].View);
            _this.dirty = true;
        });
        resetSubMenu.addItem('Rendering', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_0__["Reset"].Rendering);
            _this.dirty = true;
        });
        var floorSubMenu = subMenu.addSubMenu('Floor');
        floorSubMenu.addCheckbox({
            label: 'Show Floor',
            checked: function () { return _this.renderer.showFloor; },
            oncheck: function (checkbox) {
                _this.renderer.showFloor = checkbox.checked;
                _this.dirty = true;
            }
        });
        floorSubMenu.addCheckbox({
            label: 'Show Grid',
            checked: function () { return _this.renderer.showGrid; },
            oncheck: function (checkbox) {
                _this.renderer.showGrid = checkbox.checked;
                _this.dirty = true;
            }
        });
        subMenu.addItem('Reverse Object', function () {
            _this.renderer.tObj.reverse();
            _this.renderer.obj.uploadTriangles();
            _this.dirty = true;
        });
        var rotateSubMenu = subMenu.addSubMenu('Rotation');
        rotateSubMenu.addCheckbox({
            label: 'Keep the light pointing at the same spot on the model',
            checked: function () { return _this.rotateLightWithObject; },
            oncheck: function (checkbox) {
                _this.rotateLightWithObject = checkbox.checked;
            }
        });
        rotateSubMenu.addCheckbox({
            label: 'Rotate model independent of the floor',
            checked: function () { return _this.renderer.lockFloor; },
            oncheck: function (checkbox) {
                _this.renderer.lockFloor = checkbox.checked;
            }
        });
    };
    ViewerApp.prototype.optimize = function (normalType) {
        var obj = this.renderer.obj;
        var oldNumVertices = obj.tObj.numVertices;
        obj.optimize(normalType);
        var newNumVertices = obj.tObj.numVertices;
        //let msg = 'Optimized .OBJ content copied to clipboard\n\n';
        var msg = 'Optimized .OBJ content\n\n';
        msg += 'Num Triangles: ' + obj.tObj.numTriangles + '\n';
        msg += 'Num Vertices: ' + oldNumVertices + ' to ' + newNumVertices + ', ' + (100 * newNumVertices / oldNumVertices).toFixed() + ' %\n';
        alert(msg);
        //let str = obj.tObj.toObjString(6);
        //navigator.clipboard.writeText(str).then(() => { alert(msg) });
        this.dirty = true;
    };
    ViewerApp.prototype.updateSize = function () {
        var gl = this.gl;
        var width = window.innerWidth;
        var height = window.innerHeight;
        var menubarHeight = document.getElementById('Menubar').clientHeight;
        var panelHeight = 0;
        if (this.perspectivePanel.visible) {
            panelHeight = this.perspectivePanel.div.clientHeight;
        }
        else if (this.valuePlanesPanel.visible) {
            panelHeight = this.valuePlanesPanel.div.clientHeight;
        }
        gl.canvas.width = width;
        gl.canvas.height = height - menubarHeight - panelHeight;
        this.overlay.width = gl.canvas.width;
        this.overlay.height = gl.canvas.height;
    };
    ViewerApp.prototype.loadModel = function (query) {
        var _this = this;
        // if nothing was specified, load an interesting model
        if (!query) {
            var num = Math.round(0.5 + 16 * Math.random());
            query = 'Pose_0' + num + '.blob';
        }
        var lc = query.toLowerCase();
        if (lc.endsWith('.obj') || lc.endsWith('.blob')) {
            var statusFunc = function (status) {
                _this.overlay.clear();
                _this.overlay.fillText(status);
            };
            this.loader.loadModelFile(query, statusFunc)
                .then(function (tObj) {
                _this.perspectivePanel.visible = false;
                _this.valuePlanesPanel.visible = false;
                _this.renderer.setModel(tObj);
                _this.perspectivePanel.setModel(tObj);
                _this.loader.orient(_this.renderer.obj);
                if (query.startsWith('Head') || query.startsWith('Teapot') || query.startsWith('Male_02')) {
                    _this.renderer.options.useCulling = false;
                }
                _this.animate = false;
                _this.dirty = true;
                _this.pointerMode = PointerMode.View;
                if (!_this.animationFrame) {
                    _this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
                }
                /*
                let box = BoundingBox.infinite;
                box.max.x = 62.1;
                this.trim(tObj, box);
 
                this.loader.loadModelFile('SubTool3.blob', statusFunc).then((tObj2) => {
                   tObj.combine(tObj2);
                   return tObj;
                }).then(() => {
                   this.renderer.setModel(tObj);
 
                   this.dirty = true;
                   requestAnimationFrame(() => this.tick());
                });
                */
            });
        }
        else if (lc === 'sphere') {
            var tObj = new _Util3D_TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_15__["TriangleObjBuilder"]();
            tObj.addSphere(100, 1, new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec3"]([0, 0, 0]));
            tObj.optimize(_Util3D_TriangleObj__WEBPACK_IMPORTED_MODULE_12__["NormalType"].Smooth);
            this.renderer.setModel(tObj);
            this.perspectivePanel.setModel(tObj);
            this.animate = false;
            this.dirty = true;
            this.pointerMode = PointerMode.View;
            if (!this.animationFrame) {
                this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
            }
        }
        else {
            // TODO multi line error messages not supported
            this.overlay.clear();
            this.overlay.fillText('Unknown Model:' + query);
        }
    };
    ViewerApp.prototype.toggleMode = function () {
        switch (this.pointerMode) {
            case PointerMode.View:
                this.pointerMode = PointerMode.Light;
                this.renderer.ballColor = this.renderer.yellow;
                break;
            case PointerMode.Light:
                this.pointerMode = PointerMode.View;
                this.renderer.ballColor = _gl_glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"].modelWhite;
                break;
        }
        this.dirty = true;
    };
    ViewerApp.prototype.rotateLight = function (xRad, yRad) {
        this.renderer.rotateLight(xRad, yRad);
        this.dirty = true;
    };
    ViewerApp.prototype.rotateObjects = function (xRad, yRad) {
        // get the light vector with model transformation undone
        var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
        vec = this.renderer.obj.model.inverse().multV(vec);
        if (this.renderer.lockFloor) {
            // rotate in all directions if we're just rotating the object in space
            this.renderer.rotX(yRad);
            this.renderer.rotY(xRad);
            if (this.rotateLightWithObject) {
                // apply the changes to the light
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.options.lightPos = vec.xyz;
            }
        }
        else {
            // if the floor moves with the object, then up-down movement tilts the
            // whole scene while left-right movement only spins the model
            this.renderer.rotX(yRad);
            if (this.rotateLightWithObject) {
                this.renderer.preRotY(xRad);
                vec = this.renderer.obj.model.multV(vec);
            }
            else {
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.preRotY(xRad);
            }
            // apply the changes to the light
            this.renderer.options.lightPos = vec.xyz;
        }
    };
    ViewerApp.prototype.onDrag = function (pos, delta) {
        this.dirty = true;
        if (this.pointerMode === PointerMode.View) {
            this.rotateObjects(-delta.x * 0.01, -delta.y * 0.01);
        }
        else if (this.pointerMode === PointerMode.Light) {
            this.rotateLight(-delta.x * 0.01, -delta.y * 0.01);
        }
    };
    /**
     * Processes a click/touch event at the designated coordinates.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @returns true if a hit on one of the views occurs.
     */
    ViewerApp.prototype.onClick = function (pos) {
        var canvasWidth = this.gl.canvas.width;
        var canvasHeight = this.gl.canvas.height;
        var clipSpace = this.renderer.options.camera.getClipSpace(this.gl);
        var miniWidth = this.renderer.miniSize * (2 / clipSpace.width) * canvasWidth;
        var miniHeight = this.renderer.miniSize * (2 / clipSpace.height) * canvasHeight;
        if (pos.x < miniWidth && pos.y < miniHeight) {
            this.toggleMode();
            return true;
        }
        // not handled
        return false;
    };
    ViewerApp.prototype.onScale = function (scale, change) {
        this.renderer.options.camera.zoom(change);
        this.dirty = true;
    };
    ViewerApp.prototype.onRotate = function (angle, delta) {
        // get the light vector with model transformation undone
        var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
        vec = this.renderer.obj.model.inverse().multV(vec);
        this.renderer.rotZ(delta);
        // apply the updated transform 
        if (this.rotateLightWithObject) {
            vec = this.renderer.obj.model.multV(vec);
            this.renderer.options.lightPos = vec.xyz;
        }
        this.dirty = true;
    };
    ViewerApp.prototype.onTranslate = function (delta) {
        // TODO how can this scaling be detected from javascript?
        var factor = 1;
        if (_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["isMobile"]) {
            factor = 2;
        }
        var clipSpace = this.renderer.options.camera.getClipSpace(this.gl);
        this.renderer.options.camera.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec2"]([
            factor * clipSpace.width * delta.x / this.gl.canvas.width,
            factor * clipSpace.height * delta.y / this.gl.canvas.height
        ]));
        this.dirty = true;
    };
    ViewerApp.prototype.tick = function () {
        var _this = this;
        this.fps.tick();
        if (this.dirty) {
            this.renderer.render();
            if (this.perspectivePanel.visible) {
                // synchronize the rotation matrices
                this.perspectivePanel.render(this.renderer.obj.model.clone());
            }
            this.dirty = false;
        }
        if (this.animate) {
            if (this.loader.loading === false) {
                this.overlay.clear();
                this.overlay.fillText(this.fps.rate.toFixed() + ' fps ' + this.fps.ms.toFixed(1) + ' ms', _GUI_OverlayCanvas__WEBPACK_IMPORTED_MODULE_2__["TextLocation"].BottomLeft);
            }
            // get the light vector with model transformation undone
            var vec = _Util3D_Vec__WEBPACK_IMPORTED_MODULE_10__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
            vec = this.renderer.obj.model.inverse().multV(vec);
            // animate
            this.renderer.preRotY(Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_11__["toRad"])(-1));
            // apply the updated transform 
            if (this.rotateLightWithObject) {
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.options.lightPos = vec.xyz;
            }
            this.dirty = true;
        }
        requestAnimationFrame(function () { return _this.tick(); });
    };
    ViewerApp.prototype.save = function () {
        var tObj = this.renderer.tObj;
        var name = tObj.name.split('.')[0] + '.blob';
        tObj.name = name;
        saveAs(tObj.toBlob(), name);
    };
    return ViewerApp;
}());



/***/ }),

/***/ "./src/Apps/Viewer/glObject.ts":
/*!*************************************!*\
  !*** ./src/Apps/Viewer/glObject.ts ***!
  \*************************************/
/*! exports provided: glObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glObject", function() { return glObject; });
/* harmony import */ var _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gl/glAttributeBuffer */ "./src/gl/glAttributeBuffer.ts");
/* harmony import */ var _gl_glIndexBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gl/glIndexBuffer */ "./src/gl/glIndexBuffer.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Util3D/Mat */ "./src/Util3D/Mat.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _gl_glUniform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gl/glUniform */ "./src/gl/glUniform.ts");





var glObject = /** @class */ (function () {
    function glObject(glCtx, tObj, program) {
        this.gl = null;
        // this matrix normals the object so that all object are centered
        // about the origin with diagonal length of 2 units
        this.normalize = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        // this is the standard "model" matrix
        this.model = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.gl = glCtx;
        var gl = this.gl;
        var ext = gl.getExtension('OES_element_index_uint');
        this.tObj = tObj;
        this.program = program;
        this.createBuffers();
        this.uploadTriangles();
    }
    Object.defineProperty(glObject.prototype, "name", {
        get: function () {
            return this.tObj.name;
        },
        enumerable: false,
        configurable: true
    });
    /*
    public getBoundingPts(): BoundingPts {
       //return this.tObj.getBoundingPts();
       let pts = this.tObj.getBoundingPts();
       let p = new Profiler();
       //let bp = pts.multM(this.normalize.multM(this.model));
       //let bp = pts.multM(this.model.multM(this.normalize));
       let bp = pts.multM(this.normalize).multM(this.model);
       //p.log('mult');
       return bp;
    }
    */
    glObject.prototype.getBoundingBox = function () {
        return this.tObj.box.multM(this.normalize);
    };
    glObject.prototype.autoSize = function (center, size) {
        var objCenter = this.tObj.center;
        this.normalize = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.normalize.translate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec3"]([center.x - objCenter.x, center.y - objCenter.y, center.z - objCenter.z]));
        this.normalize.scale(size / this.tObj.diagonal);
    };
    glObject.prototype.createBuffers = function () {
        var gl = this.gl;
        // create buffers (and associated attributes)
        this.vertexBuffer = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__["glAttributeBuffer"](gl, this.program, 'aVertex');
        this.normalBuffer = new _gl_glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__["glAttributeBuffer"](gl, this.program, 'aNormal');
        this.indexBuffer = new _gl_glIndexBuffer__WEBPACK_IMPORTED_MODULE_1__["glIndexBuffer"](gl);
    };
    glObject.prototype.delete = function () {
        this.vertexBuffer.delete();
        this.normalBuffer.delete();
        this.indexBuffer.delete();
    };
    glObject.prototype.rebuildBuffers = function () {
        this.delete();
        this.createBuffers();
        this.uploadTriangles();
    };
    glObject.prototype.rotX = function (angle) {
        this.model.rotX(angle);
    };
    glObject.prototype.rotY = function (angle) {
        this.model.rotY(angle);
    };
    glObject.prototype.rotZ = function (angle) {
        this.model.rotZ(angle);
    };
    glObject.prototype.preRotX = function (angle) {
        this.model.preRotX(angle);
    };
    glObject.prototype.preRotY = function (angle) {
        this.model.preRotY(angle);
    };
    glObject.prototype.preRotZ = function (angle) {
        this.model.preRotZ(angle);
    };
    glObject.prototype.scale = function (scale) {
        this.model.scale(scale);
    };
    glObject.prototype.translate = function (offset) {
        this.model.translate(offset);
    };
    glObject.prototype.clearTransforms = function () {
        this.model = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
    };
    glObject.prototype.uploadTriangles = function () {
        this.vertexBuffer.upload(this.tObj.vertices);
        this.normalBuffer.upload(this.tObj.normals);
        this.indexBuffer.upload(this.tObj.indices);
    };
    glObject.prototype.draw = function () {
        var gl = this.gl;
        var uni = new _gl_glUniform__WEBPACK_IMPORTED_MODULE_4__["glUniform"](gl, this.program);
        uni.set('model', this.model.multM(this.normalize));
        this.vertexBuffer.bind();
        this.indexBuffer.bind();
        this.normalBuffer.bind();
        gl.drawElements(gl.TRIANGLES, 3 * this.tObj.numTriangles, gl.UNSIGNED_INT, 0);
    };
    glObject.prototype.optimize = function (normalType) {
        this.tObj.optimize(normalType);
        this.rebuildBuffers();
    };
    glObject.prototype.applyToVecs = function (normals) {
        var vecs = normals ? this.tObj.normals : this.tObj.vertices;
        // if we're updating normals, ignore translation by setting w=0
        var vec = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_3__["Vec4"]([0, 0, 0, normals ? 0 : 1]);
        var xForm = this.model.multM(this.normalize);
        for (var i = 0; i < vecs.length / 3; i++) {
            vec.x = vecs[3 * i + 0];
            vec.y = vecs[3 * i + 1];
            vec.z = vecs[3 * i + 2];
            vec = xForm.multV(vec);
            if (normals) {
                vec = vec.normalize();
            }
            vecs[3 * i + 0] = vec.x;
            vecs[3 * i + 1] = vec.y;
            vecs[3 * i + 2] = vec.z;
        }
    };
    glObject.prototype.applyXForm = function () {
        this.applyToVecs(false);
        this.applyToVecs(true);
        this.normalize = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.model = _Util3D_Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].identity;
        this.tObj.findBounds();
        this.rebuildBuffers();
    };
    return glObject;
}());



/***/ }),

/***/ "./src/GUI/Checkbox.ts":
/*!*****************************!*\
  !*** ./src/GUI/Checkbox.ts ***!
  \*****************************/
/*! exports provided: Checkbox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Checkbox", function() { return Checkbox; });
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");

var Checkbox = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Checkbox(parent, setup) {
        var _this = this;
        var _a;
        if (typeof setup.checked === 'function') {
            this.getState = setup.checked;
        }
        var div = document.createElement('div');
        div.id = setup.id;
        div.className = 'CheckboxDiv';
        parent.appendChild(div);
        var label = document.createElement('label');
        label.id = setup.id + 'Label';
        label.className = 'CheckboxLabel';
        label.innerText = (_a = setup.label) !== null && _a !== void 0 ? _a : '';
        div.appendChild(label);
        this.box = document.createElement('input');
        this.box.className = 'Checkbox';
        this.box.type = 'checkbox';
        this.box.id = setup.id + 'Checkbox';
        this.box.checked = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["getBooleanValue"])(setup.checked);
        this.box.onchange = function () {
            if (setup.oncheck) {
                setup.oncheck(_this);
            }
        };
        label.appendChild(this.box);
        var mark = document.createElement('span');
        mark.className = 'Checkmark';
        mark.id = setup.id + 'Checkmark';
        label.appendChild(mark);
    }
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: function () {
            return this.box.checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "enabled", {
        get: function () {
            return !this.box.disabled;
        },
        set: function (value) {
            this.box.disabled = !value;
        },
        enumerable: false,
        configurable: true
    });
    Checkbox.prototype.refresh = function () {
        if (this.getState) {
            this.box.checked = this.getState();
        }
    };
    return Checkbox;
}());



/***/ }),

/***/ "./src/GUI/ColorRange.ts":
/*!*******************************!*\
  !*** ./src/GUI/ColorRange.ts ***!
  \*******************************/
/*! exports provided: ColorRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorRange", function() { return ColorRange; });
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/htmlColor */ "./src/Util/htmlColor.ts");

/**
 * Interpolates and array of colors
 */
var ColorRange = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param colors The colors to interpolate
     */
    function ColorRange(colors) {
        this.colors = colors;
    }
    /**
     * Gets an interpolated color.
     *
     * @param value A value between 0 and 1.
     */
    ColorRange.prototype.get = function (value) {
        if (value < 0) {
            return this.colors[0];
        }
        else if (value >= 1) {
            return this.colors[this.colors.length - 1];
        }
        else {
            var index = Math.floor((this.colors.length - 1) * value);
            var partial = (this.colors.length - 1) * value - index;
            var r = Math.round(this.colors[index].r + partial * (this.colors[index + 1].r - this.colors[index].r));
            var g = Math.round(this.colors[index].g + partial * (this.colors[index + 1].g - this.colors[index].g));
            var b = Math.round(this.colors[index].b + partial * (this.colors[index + 1].b - this.colors[index].b));
            return new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([r, g, b]);
        }
    };
    return ColorRange;
}());



/***/ }),

/***/ "./src/GUI/ListBox.ts":
/*!****************************!*\
  !*** ./src/GUI/ListBox.ts ***!
  \****************************/
/*! exports provided: ListBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBox", function() { return ListBox; });
var STYLE_LIST_BOX_ITEM_SELECTED = 'ListBoxItemSelected';
var ListBox = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function ListBox(parent, setup) {
        this.items = [];
        this.box = document.createElement('div');
        this.box.id = setup.id;
        this.box.className = 'ListBox';
        parent.appendChild(this.box);
    }
    Object.defineProperty(ListBox.prototype, "selected", {
        get: function () {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item.div.classList.contains(STYLE_LIST_BOX_ITEM_SELECTED)) {
                    return item.userData;
                }
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListBox.prototype, "enabled", {
        get: function () {
            alert('Not Implemented Yet: ListBox.enabled');
            return false;
        },
        set: function (value) {
            alert('Not Implemented Yet: ListBox.enabled');
        },
        enumerable: false,
        configurable: true
    });
    ListBox.prototype.addItem = function (label, userData, id) {
        var _this = this;
        var oldSelected = this.selected;
        var item = document.createElement('div');
        item.id = id !== null && id !== void 0 ? id : undefined;
        item.className = 'ListBoxItem';
        item.innerText = label;
        this.box.appendChild(item);
        item.onclick = function () {
            var oldSelected = _this.selected;
            for (var i = 0; i < _this.items.length; i++) {
                _this.items[i].div.classList.remove(STYLE_LIST_BOX_ITEM_SELECTED);
            }
            item.classList.toggle(STYLE_LIST_BOX_ITEM_SELECTED);
            if (oldSelected !== _this.selected) {
                if (_this.onSelectedChanged) {
                    _this.onSelectedChanged();
                }
            }
        };
        this.items.push({
            div: item,
            userData: userData,
        });
        if (this.selected === null) {
            item.classList.add(STYLE_LIST_BOX_ITEM_SELECTED);
        }
        if (oldSelected !== this.selected) {
            if (this.onSelectedChanged) {
                this.onSelectedChanged();
            }
        }
    };
    ListBox.prototype.clear = function () {
        var oldSelected = this.selected;
        this.box.innerHTML = '';
        this.items = [];
        if (oldSelected !== this.selected) {
            if (this.onSelectedChanged) {
                this.onSelectedChanged();
            }
        }
    };
    ListBox.prototype.refresh = function () {
    };
    return ListBox;
}());



/***/ }),

/***/ "./src/GUI/Menu.ts":
/*!*************************!*\
  !*** ./src/GUI/Menu.ts ***!
  \*************************/
/*! exports provided: Menubar, SubMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Menubar", function() { return Menubar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubMenu", function() { return SubMenu; });
/* harmony import */ var _Slider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Slider */ "./src/GUI/Slider.ts");
/* harmony import */ var _Checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Checkbox */ "./src/GUI/Checkbox.ts");
/* harmony import */ var _Radiobutton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Radiobutton */ "./src/GUI/Radiobutton.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var MenuLocation;
(function (MenuLocation) {
    MenuLocation[MenuLocation["Below"] = 0] = "Below";
    MenuLocation[MenuLocation["Right"] = 1] = "Right";
})(MenuLocation || (MenuLocation = {}));
/**
 * Common base classes for things that are menus - menubar, pulldown menu, etc
 */
var Menu = /** @class */ (function () {
    function Menu(parent, id, className) {
        var _this = this;
        this.children = [];
        this.ctrls = [];
        this.parent = parent;
        this.div = document.createElement('div');
        this.div.id = id;
        this.div.className = className;
        if (parent) {
            parent.div.appendChild(this.div);
        }
        if (!parent) {
            // if this is the root menu, add a global click handler for closing menus
            window.addEventListener('mousedown', function () {
                if (!_this.isMenuItem(event.target)) {
                    _this.hideDown();
                }
            });
            window.addEventListener('touchstart', function (event) {
                if (!_this.isMenuItem(event.target)) {
                    _this.hideDown();
                }
            });
        }
    }
    Menu.prototype.isMenuItem = function (element) {
        while (element) {
            if (element.className === 'MenuItem') {
                return true;
            }
            element = element.parentElement;
        }
        return false;
    };
    Menu.prototype.show = function () {
        this.ctrls.forEach(function (ctrl) { return ctrl.refresh(); });
        if (this.div.classList.contains('MenuShow') === false) {
            this.div.classList.add('MenuShow');
        }
    };
    Menu.prototype.hide = function () {
        if (this.div.classList.contains('MenuShow')) {
            this.div.classList.remove('MenuShow');
        }
    };
    Menu.prototype.hideUp = function () {
        var menu = this;
        while (menu.parent) {
            menu.hide();
            menu = menu.parent;
        }
    };
    Menu.prototype.hideDown = function () {
        this.children.forEach(function (child) {
            child.hide();
            child.hideDown();
        });
    };
    Menu.prototype.internalAddSubMenu = function (innerHtml, id, location) {
        var _this = this;
        var item = document.createElement('div');
        item.id = id + 'MenuItem';
        item.className = 'MenuItem';
        item.innerHTML = innerHtml;
        item.onclick = function () {
            _this.showSubMenu(item, subMenu, location);
        };
        this.div.appendChild(item);
        var subMenu = new SubMenu(this, id);
        this.children.push(subMenu);
        return subMenu;
    };
    Menu.prototype.showSubMenu = function (menuItem, subMenu, location) {
        // position the menu off screen so that we can query it's height when
        // we make it visible. Then position it properly
        subMenu.div.style.left = -500 + 'px';
        subMenu.div.style.top = 0 + 'px';
        // hide sibling menus that are open
        this.hideDown();
        // show the desired submenu
        subMenu.show();
        // position the new menu
        var bodyRect = document.body.getBoundingClientRect();
        var menuItemRect = menuItem.getBoundingClientRect();
        var subMenuRect = subMenu.div.getBoundingClientRect();
        if (location === MenuLocation.Below) {
            subMenu.div.style.left = menuItemRect.left + 'px';
            subMenu.div.style.top = menuItemRect.bottom + 'px';
        }
        else if (location === MenuLocation.Right) {
            var left = menuItemRect.left + 0.5 * menuItemRect.width;
            if (left + subMenuRect.width > bodyRect.width) {
                left = menuItemRect.left - subMenuRect.width;
            }
            subMenu.div.style.left = left + 'px';
            var top_1 = menuItemRect.top;
            if (top_1 + subMenuRect.height > bodyRect.height) {
                top_1 = bodyRect.height - subMenuRect.height;
            }
            subMenu.div.style.top = top_1 + 'px';
        }
    };
    Menu.prototype.addItem = function (text, callback, options) {
        var _this = this;
        // create a div for this item
        var item = document.createElement('div');
        item.className = 'MenuItem';
        item.innerText = text;
        item.onclick = function (event) {
            // hide open menus in our hierarchy
            if (!(options && options.closeOnClick == false)) {
                _this.hideUp();
            }
            // fire the event
            callback(item);
        };
        this.div.appendChild(item);
        item.onmouseenter = function () {
            _this.hideDown();
        };
        return item;
    };
    Menu.prototype.addSlider = function (setup) {
        var div = this.addItem(setup.label, function () { }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Slider__WEBPACK_IMPORTED_MODULE_0__["Slider"](div, {
            id: setup.id,
            label: '',
            min: setup.min,
            max: setup.max,
            value: setup.value,
            oninput: setup.oninput,
        });
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addCheckbox = function (setup) {
        var div = this.addItem('', function () { }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Checkbox__WEBPACK_IMPORTED_MODULE_1__["Checkbox"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addRadiobutton = function (setup) {
        var div = this.addItem('', function () { }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Radiobutton__WEBPACK_IMPORTED_MODULE_2__["Radiobutton"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    return Menu;
}());
/**
 * Horizontal menubar across the top of the screen
 */
var Menubar = /** @class */ (function (_super) {
    __extends(Menubar, _super);
    function Menubar(parent) {
        var _this = _super.call(this, null, 'Menubar', 'Menubar') || this;
        parent.appendChild(_this.div);
        return _this;
    }
    Menubar.prototype.addSubMenu = function (text, id) {
        return this.internalAddSubMenu(text, id !== null && id !== void 0 ? id : (text + 'Menu'), MenuLocation.Below);
    };
    return Menubar;
}(Menu));

/**
 * A child menu of a menu, i.e. the item that appears when you click on something in the menubar
 */
var SubMenu = /** @class */ (function (_super) {
    __extends(SubMenu, _super);
    function SubMenu(parent, id) {
        return _super.call(this, parent, id + 'Menu', 'Menu') || this;
    }
    SubMenu.prototype.addSubMenu = function (text, id) {
        var _this = this;
        if (!id) {
            id = text.replace(/\s+/g, '');
        }
        var spanId = id + 'Span';
        var subMenu = this.internalAddSubMenu(text + '<span id="' + spanId + '" style="float:right">></span>', id, MenuLocation.Right);
        var span = document.getElementById(spanId);
        var div = span.parentElement;
        div.onmouseenter = function () {
            if (_Util_Globals__WEBPACK_IMPORTED_MODULE_3__["isMobile"] === false) {
                // TODO this event is triggering on a touchscreen laptop when we don't want it to.
                _this.hideDown();
                _this.showSubMenu(div, subMenu, MenuLocation.Right);
            }
        };
        return subMenu;
    };
    return SubMenu;
}(Menu));



/***/ }),

/***/ "./src/GUI/OverlayCanvas.ts":
/*!**********************************!*\
  !*** ./src/GUI/OverlayCanvas.ts ***!
  \**********************************/
/*! exports provided: TextLocation, OverlayCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextLocation", function() { return TextLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayCanvas", function() { return OverlayCanvas; });
var TextLocation;
(function (TextLocation) {
    TextLocation[TextLocation["Center"] = 0] = "Center";
    TextLocation[TextLocation["TopLeft"] = 1] = "TopLeft";
    TextLocation[TextLocation["TopRight"] = 2] = "TopRight";
    TextLocation[TextLocation["BottomLeft"] = 3] = "BottomLeft";
    TextLocation[TextLocation["BottomRight"] = 4] = "BottomRight";
})(TextLocation || (TextLocation = {}));
var OverlayCanvas = /** @class */ (function () {
    function OverlayCanvas(parent, id) {
        this.canvas = document.createElement('canvas');
        this.canvas.id = id;
        this.canvas.className = 'Overlay';
        parent.appendChild(this.canvas);
        var dummy = document.createElement('div');
        parent.appendChild(dummy);
        dummy.className = 'Overlay';
        this.largeFont = getComputedStyle(dummy).font;
        dummy.className = 'OverlayAnnotation';
        this.smallFont = getComputedStyle(dummy).font;
        parent.removeChild(dummy);
    }
    Object.defineProperty(OverlayCanvas.prototype, "height", {
        get: function () {
            return this.canvas.height;
        },
        set: function (value) {
            this.canvas.height = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OverlayCanvas.prototype, "width", {
        get: function () {
            return this.canvas.width;
        },
        set: function (value) {
            this.canvas.width = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OverlayCanvas.prototype, "context", {
        get: function () {
            return this.canvas.getContext('2d');
        },
        enumerable: false,
        configurable: true
    });
    OverlayCanvas.prototype.clear = function () {
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.width, this.height);
    };
    OverlayCanvas.prototype.fillText = function (msg, location) {
        if (location === void 0) { location = TextLocation.Center; }
        var ctx = this.canvas.getContext('2d');
        var style = getComputedStyle(this.canvas);
        ctx.fillStyle = style.color;
        var x;
        var y;
        switch (location) {
            case TextLocation.Center:
                ctx.font = this.largeFont;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                x = this.width / 2;
                y = this.height / 2;
                break;
            case TextLocation.BottomLeft:
                ctx.font = this.smallFont;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'bottom';
                x = 0;
                y = this.height;
                break;
            case TextLocation.BottomRight:
                ctx.font = this.smallFont;
                ctx.textAlign = 'right';
                ctx.textBaseline = 'bottom';
                x = this.width;
                y = this.height;
                break;
            case TextLocation.TopLeft:
                ctx.font = this.smallFont;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'top';
                x = 0;
                y = 0;
                break;
            case TextLocation.TopRight:
                ctx.font = this.smallFont;
                ctx.textAlign = 'right';
                ctx.textBaseline = 'top';
                x = this.width;
                y = 0;
                break;
        }
        ctx.fillText(msg, x, y);
    };
    return OverlayCanvas;
}());



/***/ }),

/***/ "./src/GUI/Panel.ts":
/*!**************************!*\
  !*** ./src/GUI/Panel.ts ***!
  \**************************/
/*! exports provided: Panel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Panel", function() { return Panel; });
var Panel = /** @class */ (function () {
    function Panel(parent, id) {
        var _this = this;
        this.div = document.createElement('div');
        this.div.id = id;
        this.div.className = 'Panel';
        this.div.classList.add('Container');
        parent.appendChild(this.div);
        var exitButton = document.createElement('div');
        exitButton.id = 'ExitButton';
        exitButton.className = 'DivButton';
        exitButton.innerText = 'X';
        exitButton.onclick = function () {
            _this.visible = false;
        };
        this.div.appendChild(exitButton);
    }
    Panel.prototype.show = function (value) {
    };
    Object.defineProperty(Panel.prototype, "visible", {
        get: function () {
            return getComputedStyle(this.div).display === 'block';
        },
        set: function (value) {
            if (value !== this.visible) {
                this.div.style.display = value ? 'block' : 'none';
                // let derived classes know
                this.show(value);
                if (value) {
                    if (this.onShow) {
                        this.onShow(this);
                    }
                }
                else {
                    if (this.onHide) {
                        this.onHide(this);
                    }
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Panel.prototype.delete = function () {
        // override this function in derived classes if needed
    };
    return Panel;
}());



/***/ }),

/***/ "./src/GUI/PointerEventHandler.ts":
/*!****************************************!*\
  !*** ./src/GUI/PointerEventHandler.ts ***!
  \****************************************/
/*! exports provided: PointerEventHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointerEventHandler", function() { return PointerEventHandler; });
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util3D/Vec */ "./src/Util3D/Vec.ts");

var DBL_CLICK_TIME = 300; // ms
/**
 * Utility class for managing touch/mouse events over a html element
 */
var PointerEventHandler = /** @class */ (function () {
    function PointerEventHandler(element) {
        var _this = this;
        this.mouseDown = false;
        this.ctrlKey = false;
        this.primaryTouchId = -1;
        this.secondaryTouchId = -1;
        this.element = element;
        // element.ontouch isn't supported on desktop devices so use addEventListener instead
        element.addEventListener('touchstart', function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            // if this is the first touch
            if (event.touches.length === 1) {
                // record the primary touch id
                _this.primaryTouchId = event.touches[0].identifier;
                // send out onDown() and potentially onDblClick() events
                var pos = _this.getPos(event.touches[0]);
                var time = Date.now();
                if (time - _this.lastTouchTime < DBL_CLICK_TIME) {
                    _this.ourDblClick(pos);
                }
                else {
                    _this.ourOnDown(pos);
                }
                _this.lastTouchTime = time;
            }
            // if this is the second touch
            else if (event.touches.length === 2 && _this.primaryTouchId >= 0) {
                // record the secondary touch id. It will always be the second element when
                // there are only two elements
                _this.secondaryTouchId = event.touches[1].identifier;
                // set values for gestures
                var distance = _this.computeTouchDistance(event);
                _this.initialTouchDistance = distance;
                _this.lastTouchDistance = distance;
                _this.lastTouchAngle = _this.computeTouchAngle(event);
                _this.lastTouchCenter = _this.computeTouchCenter(event);
            }
        });
        element.addEventListener('touchmove', function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            // if the initial two touches are active
            if (_this.primaryTouchId >= 0 && _this.secondaryTouchId >= 0) {
                // send out gesture events
                var distance = _this.computeTouchDistance(event);
                var scale = distance / _this.initialTouchDistance;
                var change = distance / _this.lastTouchDistance;
                _this.ourOnScale(scale, change);
                _this.lastTouchDistance = distance;
                var angle = _this.computeTouchAngle(event);
                _this.ourOnRotate(angle, angle - _this.lastTouchAngle);
                _this.lastTouchAngle = angle;
                var center = _this.computeTouchCenter(event);
                // reverse Y values so the bottom is zero instead of the top
                var delta = [center.x - _this.lastTouchCenter.x, _this.lastTouchCenter.y - center.y];
                _this.ourOnTranslate(new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"](delta));
                _this.lastTouchCenter = center;
            }
            // if only the initial touch is active
            else if (_this.primaryTouchId >= 0) {
                // send out the drag event
                if (_this.mouseDown) {
                    var touch = _this.getTouch(event, _this.primaryTouchId);
                    var pos = _this.getPos(touch);
                    _this.ourOnDrag(pos);
                }
            }
        });
        element.addEventListener('touchend', function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            if (_this.secondaryTouchId >= 0) {
                if (_this.getTouch(event, _this.secondaryTouchId) === null) {
                    _this.secondaryTouchId = -1;
                    // if we lifted the second finger, but not the first, go back
                    // to the drag gesture, but adjust the rememberd position to
                    // be the current one so that things don't jump
                    var touch = _this.getTouch(event, _this.primaryTouchId);
                    if (touch) {
                        _this.lastPos = _this.getPos(touch);
                    }
                }
            }
            if (_this.primaryTouchId >= 0) {
                if (_this.getTouch(event, _this.primaryTouchId) === null) {
                    _this.primaryTouchId = -1;
                    _this.ourOnUp();
                }
            }
            if (_this.secondaryTouchId === -1 || _this.primaryTouchId === -1) {
                _this.initialTouchDistance = -1;
                _this.lastTouchDistance = -1;
                _this.lastTouchAngle = -1;
                _this.lastTouchCenter = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([-1, -1]);
            }
        });
        element.onmousedown = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([event.layerX, event.layerY]);
            _this.ourOnDown(pos);
            // disable selection because dragging is used for rotating the camera and moving objects
            return false;
        };
        element.onmousemove = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([event.layerX, event.layerY]);
            if (_this.mouseDown) {
                _this.ourOnDrag(pos);
            }
        };
        element.onmouseup = function (event) {
            _this.ctrlKey = event.ctrlKey;
            _this.ourOnUp();
        };
        element.onmouseleave = function (event) {
            _this.mouseDown = false;
        };
        element.ondblclick = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([event.layerX, event.layerY]);
            _this.ourDblClick(pos);
        };
    }
    PointerEventHandler.prototype.getTouch = function (event, id) {
        for (var i = 0; i < event.touches.length; i++) {
            var touch = event.touches[i];
            if (touch.identifier === id) {
                return touch;
            }
        }
        // no match was found
        return null;
    };
    PointerEventHandler.prototype.getPos = function (touch) {
        var rect = this.element.getBoundingClientRect();
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([touch.clientX - rect.x, touch.clientY - rect.y]);
    };
    PointerEventHandler.prototype.getTouches = function (event) {
        if (this.primaryTouchId < 0 || this.secondaryTouchId < 0) {
            throw Error('Two touches expected');
        }
        return {
            primaryTouch: this.getTouch(event, this.primaryTouchId),
            secondaryTouch: this.getTouch(event, this.secondaryTouchId),
        };
    };
    PointerEventHandler.prototype.computeTouchDistance = function (event) {
        var touches = this.getTouches(event);
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    };
    PointerEventHandler.prototype.computeTouchAngle = function (event) {
        var touches = this.getTouches(event);
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return Math.atan2(y2 - y1, x2 - x1);
    };
    PointerEventHandler.prototype.computeTouchCenter = function (event) {
        var touches = this.getTouches(event);
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([(x1 + x2) / 2, (y1 + y2) / 2]);
    };
    PointerEventHandler.prototype.ourOnDown = function (pos) {
        // check for a click handler
        if (this.onClick && this.onClick(pos.clone())) {
            return;
        }
        // if not handled by a click hander, send the onDown event
        else {
            this.mouseDown = true;
            this.lastPos = pos.clone();
            if (this.onDown) {
                this.onDown(pos.clone());
            }
        }
    };
    PointerEventHandler.prototype.ourOnUp = function () {
        this.mouseDown = false;
        if (this.onUp) {
            this.onUp();
        }
    };
    PointerEventHandler.prototype.ourOnDrag = function (pos) {
        if (this.onDrag) {
            var delta = new _Util3D_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([pos.x - this.lastPos.x, pos.y - this.lastPos.y]);
            this.onDrag(pos.clone(), delta);
        }
        this.lastPos = pos.clone();
    };
    PointerEventHandler.prototype.ourDblClick = function (pos) {
        if (this.onDblClick) {
            this.onDblClick(pos);
        }
    };
    PointerEventHandler.prototype.ourOnScale = function (scale, change) {
        if (this.onScale) {
            this.onScale(scale, change);
        }
    };
    PointerEventHandler.prototype.ourOnRotate = function (angle, delta) {
        if (this.onRotate) {
            this.onRotate(angle, delta);
        }
    };
    PointerEventHandler.prototype.ourOnTranslate = function (delta) {
        if (this.onTranslate) {
            this.onTranslate(delta);
        }
    };
    return PointerEventHandler;
}());



/***/ }),

/***/ "./src/GUI/Radiobutton.ts":
/*!********************************!*\
  !*** ./src/GUI/Radiobutton.ts ***!
  \********************************/
/*! exports provided: Radiobutton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Radiobutton", function() { return Radiobutton; });
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");

var Radiobutton = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Radiobutton(parent, setup) {
        var _this = this;
        var _a, _b;
        var id = (_a = setup.id) !== null && _a !== void 0 ? _a : 'Radiobutton';
        if (typeof setup.checked === 'function') {
            this.getState = setup.checked;
        }
        var div = document.createElement('div');
        div.id = id;
        div.className = 'RadiobuttonDiv';
        parent.appendChild(div);
        var label = document.createElement('label');
        label.id = id + 'Label';
        label.className = 'RadiobuttonLabel';
        label.innerText = (_b = setup.label) !== null && _b !== void 0 ? _b : '';
        div.appendChild(label);
        this.box = document.createElement('input');
        this.box.className = 'Radiobutton';
        this.box.type = 'radio';
        this.box.name = setup.group;
        this.box.id = id + 'Radiobutton';
        this.box.checked = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_0__["getBooleanValue"])(setup.checked);
        this.box.onchange = function () {
            if (_this.box.checked) {
                if (setup.oncheck) {
                    setup.oncheck(_this);
                }
            }
            else {
                if (setup.onuncheck) {
                    setup.onuncheck(_this);
                }
            }
        };
        label.appendChild(this.box);
        var mark = document.createElement('span');
        mark.className = 'RadioCheckmark';
        mark.id = id + 'RadioCheckmark';
        label.appendChild(mark);
    }
    Object.defineProperty(Radiobutton.prototype, "checked", {
        get: function () {
            return this.box.checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Radiobutton.prototype, "enabled", {
        get: function () {
            return !this.box.disabled;
        },
        set: function (value) {
            this.box.disabled = !value;
        },
        enumerable: false,
        configurable: true
    });
    Radiobutton.prototype.check = function (value) {
        if (value === void 0) { value = true; }
        this.box.checked = value;
    };
    Radiobutton.prototype.refresh = function () {
        if (this.getState) {
            this.box.checked = this.getState();
        }
    };
    return Radiobutton;
}());



/***/ }),

/***/ "./src/GUI/Slider.ts":
/*!***************************!*\
  !*** ./src/GUI/Slider.ts ***!
  \***************************/
/*! exports provided: Slider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return Slider; });
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _ColorRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ColorRange */ "./src/GUI/ColorRange.ts");
/* harmony import */ var _Util_htmlColorWithAlpha__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Util/htmlColorWithAlpha */ "./src/Util/htmlColorWithAlpha.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gl/glColor */ "./src/gl/glColor.ts");




var RangeMapper = /** @class */ (function () {
    function RangeMapper(realMin, realMax) {
        this.sliderMin = 0;
        this.sliderMax = 1000;
        this.realMin = realMin;
        this.realMax = realMax;
    }
    Object.defineProperty(RangeMapper.prototype, "realRange", {
        get: function () {
            return this.realMax - this.realMin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeMapper.prototype, "sliderRange", {
        get: function () {
            return this.sliderMax - this.sliderMin;
        },
        enumerable: false,
        configurable: true
    });
    RangeMapper.prototype.sliderToReal = function (sliderValue) {
        return this.realMin + ((sliderValue - this.sliderMin) / this.sliderRange) * this.realRange;
    };
    RangeMapper.prototype.realToSlider = function (realValue) {
        return this.sliderMin + ((realValue - this.realMin) / this.realRange) * this.sliderRange;
    };
    return RangeMapper;
}());
/**
 * Class representing a slider composed of a label, input range, color span and value span
 */
var Slider = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Slider(parent, setup) {
        var _this = this;
        var _a, _b;
        var id = (_a = setup.id) !== null && _a !== void 0 ? _a : 'Slider';
        this._getText = setup.getText;
        var div = document.createElement('div');
        div.id = id;
        div.className = 'SliderDiv';
        parent.appendChild(div);
        this._label = document.createElement('label');
        this._label.id = id + 'Label';
        this._label.className = 'SliderLabel';
        this._label.innerText = (_b = setup.label) !== null && _b !== void 0 ? _b : '';
        div.appendChild(this._label);
        this._rangeMapper = new RangeMapper(setup.min, setup.max);
        this._range = document.createElement('input');
        this._range.type = 'range';
        this._range.id = id + 'Range';
        this._range.className = 'SliderRange';
        this._range.min = this._rangeMapper.sliderMin.toString();
        this._range.max = this._rangeMapper.sliderMax.toString();
        this._range.value = this._rangeMapper.realToSlider(setup.value).toString();
        this._range.addEventListener('input', function () {
            _this.updateSpanColor();
            _this.updateSpanText();
        });
        this._label.htmlFor = this._range.id;
        div.appendChild(this._range);
        if (setup.colors) {
            this._colorSpan = document.createElement('span');
            this._colorSpan.id = id + 'ColorSpan';
            this._colorSpan.className = 'SliderColorSpan';
            div.appendChild(this._colorSpan);
            // set the initial color.
            this.colors = setup.colors;
        }
        this._valueSpan = document.createElement('span');
        this._valueSpan.id = id + 'ValueSpan';
        this._valueSpan.className = 'SliderValueSpan';
        //      this._valueSpan.innerText = setup.value.toString();
        div.appendChild(this._valueSpan);
        // set the initial span text
        this.updateSpanText();
        if (setup.oninput) {
            this._range.oninput = function () { return setup.oninput(_this); };
        }
    }
    Object.defineProperty(Slider.prototype, "enabled", {
        get: function () {
            return !this._range.disabled;
        },
        set: function (value) {
            this._range.disabled = !value;
            if (value) {
                this._label.classList.remove('disabled');
                this._valueSpan.classList.remove('disabled');
                this._range.classList.remove('disabled');
            }
            else {
                this._label.classList.add('disabled');
                this._valueSpan.classList.add('disabled');
                this._range.classList.add('disabled');
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the span color to the currently selected color.
     */
    Slider.prototype.updateSpanColor = function () {
        if (this._colors) {
            var val = (this.value - this.min) / (this.max - this.min);
            var color = _Util_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].fromColor(this._colors.get(val));
            this._colorSpan.style.backgroundColor = color.toHex();
        }
    };
    /**
  * Sets the span color to the currently selected color.
  */
    Slider.prototype.updateSpanText = function () {
        if (this._getText) {
            this._valueSpan.innerText = this._getText(this);
        }
    };
    Object.defineProperty(Slider.prototype, "range", {
        /**
         * Gets the html range object
         *
         * @returns The html range object.
         */
        get: function () {
            return this._range;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "value", {
        /**
         * Gets the current slider value
         *
         * @returns the current slider value
         */
        get: function () {
            return this._rangeMapper.sliderToReal(this._range.valueAsNumber);
        },
        /**
         * Sets the value of the slider (and associated content)
         *
         * @param val the desired slider value
         */
        set: function (val) {
            this._range.valueAsNumber = this._rangeMapper.realToSlider(val);
            this.updateSpanColor();
            this.updateSpanText();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "valueAsPercent", {
        /**
         * Gets the value of the slider as a percent [0-1] of the range
         *
         * @returns the value of the slider as a percent
         */
        get: function () {
            return this.value / (this.max - this.min);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "min", {
        /**
         * Gets the min slider value.
         *
         * @returns The min slider value.
         */
        get: function () {
            return this._rangeMapper.realMin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "max", {
        /**
         * Gets the max slider value.
         *
         * @returns The max slider value.
         */
        get: function () {
            return this._rangeMapper.realMax;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "colors", {
        /**
         * Sets the color for the slider
         */
        set: function (colors) {
            // store the colors
            this._colors = new _ColorRange__WEBPACK_IMPORTED_MODULE_1__["ColorRange"](colors);
            // build the gradient style for the range object
            var gradientStr = '90deg';
            for (var i = 0; i < colors.length; i++) {
                gradientStr += ', ' + colors[i].toCss();
            }
            this._range.style.background = 'linear-gradient(' + gradientStr + ')';
            // update the span color too
            this.updateSpanColor();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "htmlColor", {
        /**
         * Gets the current color as an htmlColor object.
         *
         * @returns The current color.
         */
        get: function () {
            if (this._colors) {
                var val = (this.value - this.min) / (this.max - this.min);
                return this._colors.get(val);
            }
            else {
                return _Util_htmlColorWithAlpha__WEBPACK_IMPORTED_MODULE_2__["htmlColorWithAlpha"].transparent;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "glColor", {
        /**
         * Gets the current color as a glColor object.
         *
         * @returns The current color.
         */
        get: function () {
            if (this._colors) {
                var val = (this.value - this.min) / (this.max - this.min);
                return this._colors.get(val).toGlColor();
            }
            else {
                return new _gl_glColor__WEBPACK_IMPORTED_MODULE_3__["glColor3"]([0, 0, 0]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Slider.prototype.refresh = function () {
        // TODO implement
    };
    return Slider;
}());



/***/ }),

/***/ "./src/Launcher.ts":
/*!*************************!*\
  !*** ./src/Launcher.ts ***!
  \*************************/
/*! exports provided: Launcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Launcher", function() { return Launcher; });
/* harmony import */ var _GUI_Menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GUI/Menu */ "./src/GUI/Menu.ts");
/* harmony import */ var _Apps_PathTracer_PathTracerApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Apps/PathTracer/PathTracerApp */ "./src/Apps/PathTracer/PathTracerApp.ts");
/* harmony import */ var _Apps_Viewer_ViewerApp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Apps/Viewer/ViewerApp */ "./src/Apps/Viewer/ViewerApp.ts");
/* harmony import */ var _Apps_Squint_SquintApp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Apps/Squint/SquintApp */ "./src/Apps/Squint/SquintApp.ts");




var AppType;
(function (AppType) {
    AppType[AppType["ArtistsBall"] = 0] = "ArtistsBall";
    AppType[AppType["Viewer"] = 1] = "Viewer";
    AppType[AppType["Squint"] = 2] = "Squint";
})(AppType || (AppType = {}));
var Launcher = /** @class */ (function () {
    function Launcher() {
        this.launch(AppType.Viewer);
    }
    Launcher.prototype.launch = function (type) {
        if (this.app) {
            this.app.delete();
            this.app = null;
        }
        // clear out old content
        document.body.innerHTML = '';
        // create the main div
        this.div = document.createElement('div');
        document.body.appendChild(this.div);
        this.buildMenu();
        var query;
        if (window.location.search) {
            query = window.location.search.substr(1);
        }
        if (window.location.search.indexOf('squint') >= 0) {
            type = AppType.Squint;
        }
        switch (type) {
            case AppType.ArtistsBall:
                document.title = 'Artist\'s Tools: Artist\'s Ball';
                this.app = new _Apps_PathTracer_PathTracerApp__WEBPACK_IMPORTED_MODULE_1__["PathTracerApp"](query);
                break;
            case AppType.Viewer:
                document.title = 'Artist\'s Tools: Viewer';
                this.app = new _Apps_Viewer_ViewerApp__WEBPACK_IMPORTED_MODULE_2__["ViewerApp"](query);
                break;
            case AppType.Squint:
                document.title = 'Squint';
                this.app = new _Apps_Squint_SquintApp__WEBPACK_IMPORTED_MODULE_3__["SquintApp"]();
                break;
        }
        this.app.create(this.div);
        this.app.buildMenu(this.menubar);
    };
    Launcher.prototype.buildMenu = function () {
        var _this = this;
        var subMenu;
        this.menubar = new _GUI_Menu__WEBPACK_IMPORTED_MODULE_0__["Menubar"](this.div);
        subMenu = this.menubar.addSubMenu('Apps', 'Apps');
        subMenu.addItem('3D Viewer', function () { return _this.launch(AppType.Viewer); });
        subMenu.addItem('Squint', function () { return _this.launch(AppType.Squint); });
        subMenu.addItem('Artist\'s Ball', function () { return _this.launch(AppType.ArtistsBall); });
    };
    return Launcher;
}());



/***/ }),

/***/ "./src/Util/Averager.ts":
/*!******************************!*\
  !*** ./src/Util/Averager.ts ***!
  \******************************/
/*! exports provided: Averager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Averager", function() { return Averager; });
var Averager = /** @class */ (function () {
    function Averager(maxSamples) {
        if (maxSamples === void 0) { maxSamples = 5; }
        this.values = [];
        this.maxSamples = maxSamples;
    }
    Object.defineProperty(Averager.prototype, "numSamples", {
        get: function () {
            return this.values.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Averager.prototype, "maxSamples", {
        get: function () {
            return this._maxSamples;
        },
        set: function (value) {
            this._maxSamples = value;
            this.trimIfNeeded();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Averager.prototype, "average", {
        get: function () {
            var total = 0;
            var numValues = this.values.length;
            if (numValues === 0) {
                return Number.NaN;
            }
            else {
                for (var i = 0; i < numValues; i++) {
                    total += this.values[i];
                }
                return total / numValues;
            }
        },
        enumerable: false,
        configurable: true
    });
    Averager.prototype.push = function (value) {
        this.values.push(value);
        this.trimIfNeeded();
    };
    Averager.prototype.trimIfNeeded = function () {
        if (this.values.length > this.maxSamples) {
            var start = this.values.length - this.maxSamples;
            this.values = this.values.slice(start);
        }
    };
    Averager.prototype.clear = function () {
        this.values = [];
    };
    return Averager;
}());



/***/ }),

/***/ "./src/Util/BlobFile.ts":
/*!******************************!*\
  !*** ./src/Util/BlobFile.ts ***!
  \******************************/
/*! exports provided: BlobFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobFile", function() { return BlobFile; });
/* harmony import */ var _BlobShim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BlobShim */ "./src/Util/BlobShim.ts");
/* harmony import */ var _BlobShim__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_BlobShim__WEBPACK_IMPORTED_MODULE_0__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/**
 * Internal class for slicing up Blobs
 */
var BlobSlicer = /** @class */ (function () {
    /**
     * @param blob The Blob to be sliced
     */
    function BlobSlicer(blob) {
        // The start byte value for the next slice
        this.start = 0;
        this.blob = blob;
    }
    /**
     * Gets the next slice.
     *
     * @param len The length of the slice.
     * @returns The sliced Blob.
     */
    BlobSlicer.prototype.next = function (len) {
        var b = this.blob.slice(this.start, this.start + len);
        this.start += len;
        return b;
    };
    /**
     * Slices the Blob and returns it as an ArrayBuffer.
     *
     * @param len The length of the slice.
     * @returns An ArrayBuffer promise.
     */
    BlobSlicer.prototype.nextArrayBuffer = function (len) {
        return this.next(len).arrayBuffer();
    };
    /**
     * Slices the Blob and returns it as an Int32Array
     *
     * @param len The length of the slice.
     * @returns An Int32Array promise.
     */
    BlobSlicer.prototype.nextInt32Array = function (len) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Int32Array.bind;
                        return [4 /*yield*/, this.nextArrayBuffer(len)];
                    case 1: return [2 /*return*/, new (_a.apply(Int32Array, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    /**
     * Slices the Blob and returns it as a string
     *
     * @param len The length of the slice.
     * @returns A string promise.
     */
    BlobSlicer.prototype.nextString = function (len) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.next(len).text()];
            });
        });
    };
    return BlobSlicer;
}());
/**
 * Manages creation and extraction of a self describing Blob. Data
 * is stored as:
 *
 * [numEntries] - The number entries in the file. 4 byte Int32
 * [sizes] - Sizes of all the entries, including the info object
 * [info] - User supplied data as a JSON string
 * [entry 1] - First user entry
 * [entry 2] - Second user entry
 * [...]
 */
var BlobFile = /** @class */ (function () {
    /**
     * @param info The information header to be stored with the Blob
     * @param parts The data contents of the Blob
     */
    function BlobFile(info, parts) {
        this.parts = [];
        this.info = info;
        this.parts = parts;
    }
    /**
     * Converts a raw Blob object into a BlobFile
     *
     * @param blob The Blob to process.
     * @return A BlobFile promise.
     */
    BlobFile.extract = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var blobSlicer, numEntries, sizes, jsonInfo, parts, i, size;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blobSlicer = new BlobSlicer(blob);
                        return [4 /*yield*/, blobSlicer.nextInt32Array(4)];
                    case 1:
                        numEntries = (_a.sent())[0];
                        return [4 /*yield*/, blobSlicer.nextInt32Array(4 * (numEntries + 1))];
                    case 2:
                        sizes = _a.sent();
                        return [4 /*yield*/, blobSlicer.nextString(sizes[0])];
                    case 3:
                        jsonInfo = _a.sent();
                        parts = [];
                        for (i = 0; i < numEntries; i++) {
                            size = sizes[i + 1];
                            parts.push(blobSlicer.next(size));
                        }
                        return [2 /*return*/, new BlobFile(JSON.parse(jsonInfo), parts)];
                }
            });
        });
    };
    /**
     * Create a BlobFile Blob
     *
     * @param info The information header to be stored with the Blob
     * @param parts The data contents of the Blob
     */
    BlobFile.createBlob = function (info, parts) {
        var jsonInfo = JSON.stringify(info);
        // Build the array of sizes
        var sizes = [jsonInfo.length];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (part instanceof Int32Array) {
                sizes.push(4 * part.length);
            }
            else if (part instanceof Float32Array) {
                sizes.push(4 * part.length);
            }
            else if (part instanceof String) {
                sizes.push(part.length);
            }
            else {
                var msg = 'Unsupported Blob Part Type: ' + typeof part;
                console.error(msg);
                throw new Error(msg);
            }
        }
        // assemble the blob parts
        var allParts = [];
        allParts.push(new Int32Array([parts.length]));
        allParts.push(new Int32Array(sizes));
        allParts.push(jsonInfo);
        allParts.push.apply(allParts, parts);
        // create the blob
        return new Blob(allParts);
    };
    return BlobFile;
}());



/***/ }),

/***/ "./src/Util/BlobShim.ts":
/*!******************************!*\
  !*** ./src/Util/BlobShim.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

// needed for Safari
if (!Blob.prototype.arrayBuffer) {
    Blob.prototype.arrayBuffer = function () {
        var _this = this;
        // read the Blob the old fashioned way
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            // register event handlers
            reader.onloadend = function () {
                resolve(reader.result);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
            // start the read
            reader.readAsArrayBuffer(_this);
        });
    };
}
// needed for Safari
if (!Blob.prototype.text) {
    // read the Blob the old fashioned way
    Blob.prototype.text = function () {
        var _this = this;
        // read the Blob the old fashioned way
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            // register event handlers
            reader.onloadend = function () {
                // decode into a string
                var txt = new TextDecoder("utf-8").decode(reader.result);
                resolve(txt);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
            // start the read
            reader.readAsArrayBuffer(_this);
        });
    };
}


/***/ }),

/***/ "./src/Util/Color.ts":
/*!***************************!*\
  !*** ./src/Util/Color.ts ***!
  \***************************/
/*! exports provided: Color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/**
 * Class for representing color values. Values may be on a 0-1 or 0-255 scale.
 */
var Color = /** @class */ (function () {
    /**
     * @param color RGB values to store in this object
     */
    function Color(color) {
        this.r = color[0];
        this.g = color[1];
        this.b = color[2];
        if (color.length === 4) {
            this.a = color[3];
        }
    }
    return Color;
}());



/***/ }),

/***/ "./src/Util/ConsoleCapture.ts":
/*!************************************!*\
  !*** ./src/Util/ConsoleCapture.ts ***!
  \************************************/
/*! exports provided: ConsoleCapture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleCapture", function() { return ConsoleCapture; });
var ConsoleCapture = /** @class */ (function () {
    function ConsoleCapture(id, numCols) {
        var _this = this;
        if (id === void 0) { id = 'Console'; }
        if (numCols === void 0) { numCols = 150; }
        this.textArea = document.createElement('textarea');
        this.textArea.id = id;
        this.textArea.cols = numCols;
        document.body.appendChild(this.textArea);
        // TODO update these all to take the correct arguments for console functions
        var oldLog = console.log;
        console.log = function (msg) {
            _this.append(msg);
            oldLog(msg);
        };
        var oldTrace = console.trace;
        console.trace = function (msg) {
            _this.append('TRACE ' + msg);
            oldTrace(msg);
        };
        var oldInfo = console.info;
        console.info = function (msg) {
            _this.append('INFO ' + msg);
            oldInfo(msg);
        };
        var oldWarn = console.warn;
        console.warn = function (msg) {
            _this.append('WARN ' + msg);
            oldWarn(msg);
        };
        var oldError = console.error;
        console.error = function (msg) {
            _this.append('ERROR ' + msg);
            oldError(msg);
        };
        var oldClear = console.clear;
        console.clear = function () {
            _this.textArea.textContent = '';
            oldClear();
        };
        var oldOnError = window.onerror;
        window.onerror = function (event, source, lineno, colno, error) {
            var stackTrace = error && error instanceof Error ? '\n' + error.stack : '';
            var msg = event + '\n' + source + ' line:' + lineno + ', col:' + colno + stackTrace;
            alert(msg);
            _this.append(msg);
        };
    }
    Object.defineProperty(ConsoleCapture.prototype, "show", {
        get: function () {
            return getComputedStyle(this.textArea).display === 'block';
        },
        set: function (flag) {
            this.textArea.style.display = flag ? 'block' : 'none';
        },
        enumerable: false,
        configurable: true
    });
    ConsoleCapture.prototype.append = function (msg) {
        var fullmsg = this.textArea.value;
        fullmsg = msg + '\n\n' + fullmsg;
        fullmsg = fullmsg.substr(0, 1024 * 1024);
        this.textArea.value = fullmsg;
    };
    ConsoleCapture.prototype.setEdges = function (left, right, top, bottom) {
        this.textArea.style.left = left + 'px';
        this.textArea.style.right = right + 'px';
        this.textArea.style.top = top + 'px';
        this.textArea.style.bottom = bottom + 'px';
    };
    return ConsoleCapture;
}());



/***/ }),

/***/ "./src/Util/FPS.ts":
/*!*************************!*\
  !*** ./src/Util/FPS.ts ***!
  \*************************/
/*! exports provided: FPS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FPS", function() { return FPS; });
var FPS = /** @class */ (function () {
    function FPS() {
        this.ticks = [];
    }
    Object.defineProperty(FPS.prototype, "spanMs", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return (this.ticks[this.ticks.length - 1] - this.ticks[0]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FPS.prototype, "ms", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return this.spanMs / this.ticks.length;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FPS.prototype, "rate", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return 1000 / this.ms;
            }
        },
        enumerable: false,
        configurable: true
    });
    FPS.prototype.tick = function () {
        this.ticks.push(window.performance.now());
        // trim off the size as long as there are at least 20 entries and the
        // time span between all entries is at least 1 second
        while (this.ticks.length > 20 && this.spanMs > 2000) {
            this.ticks.shift();
        }
    };
    return FPS;
}());



/***/ }),

/***/ "./src/Util/Globals.ts":
/*!*****************************!*\
  !*** ./src/Util/Globals.ts ***!
  \*****************************/
/*! exports provided: isMobile, clamp, toDeg, toRad, mix, toCss, toSizeStr, toTimeStr, getBooleanValue, iOS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return isMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toDeg", function() { return toDeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRad", function() { return toRad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toCss", function() { return toCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSizeStr", function() { return toSizeStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toTimeStr", function() { return toTimeStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBooleanValue", function() { return getBooleanValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iOS", function() { return iOS; });
var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
function clamp(value, min, max) {
    if (value < min) {
        return min;
    }
    else if (value > max) {
        return max;
    }
    else {
        return value;
    }
}
function toDeg(rad) {
    return (180 / Math.PI) * rad;
}
function toRad(deg) {
    return (Math.PI / 180) * deg;
}
function mix(v1, v2, mix) {
    return v1 + clamp(mix, 0, 1) * (v2 - v1);
}
function toCss(r, g, b, a) {
    return 'rgb(' + r + ',' + g + ',' + b + (a === undefined ? '' : ',' + a) + ')';
}
function toSizeStr(val) {
    if (val < 1024) {
        return val + ' bytes';
    }
    else if (val < 1024 * 1024) {
        return (val / 1024).toFixed(1) + ' kb';
    }
    else {
        return (val / (1024 * 1024)).toFixed(1) + ' mb';
    }
}
function toTimeStr(val) {
    if (val < 1000) {
        return val.toFixed(0) + ' ms';
    }
    else {
        return (val / 1000).toFixed(1) + ' s';
    }
}
function getBooleanValue(value) {
    if (typeof value === 'boolean') {
        return value;
    }
    else if (typeof value === 'function') {
        return value();
    }
    else {
        return false;
    }
}
function iOS() {
    return [
        'iPad Simulator',
        'iPhone Simulator',
        'iPod Simulator',
        'iPad',
        'iPhone',
        'iPod'
    ].includes(navigator.platform)
        // iPad on iOS 13 detection
        || (navigator.userAgent.includes("Mac") && "ontouchend" in document);
}


/***/ }),

/***/ "./src/Util/Profiler.ts":
/*!******************************!*\
  !*** ./src/Util/Profiler.ts ***!
  \******************************/
/*! exports provided: Profiler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Profiler", function() { return Profiler; });
/* harmony import */ var _Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Stopwatch */ "./src/Util/Stopwatch.ts");

/**
 * Utility class for logging timing messages for profile code
 */
var Profiler = /** @class */ (function () {
    function Profiler() {
        this.sw = new _Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"]();
    }
    Object.defineProperty(Profiler.prototype, "elapsedMs", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return this.sw.elapsedMs;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Prints a message to console of the elapsed time
     *
     * @param msg The message to print with the time
     */
    Profiler.prototype.log = function (msg) {
        console.log(msg + ' ' + this.elapsedMs.toFixed(1) + ' ms');
        this.sw.restart();
    };
    return Profiler;
}());



/***/ }),

/***/ "./src/Util/Stopwatch.ts":
/*!*******************************!*\
  !*** ./src/Util/Stopwatch.ts ***!
  \*******************************/
/*! exports provided: Stopwatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stopwatch", function() { return Stopwatch; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Util/Globals.ts");

/**
 * Utility class for tracking time
 */
var Stopwatch = /** @class */ (function () {
    function Stopwatch() {
        this.startTime = performance.now();
    }
    Object.defineProperty(Stopwatch.prototype, "elapsedStr", {
        /**
         * The elapsed time in as a string
         */
        get: function () {
            return Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toTimeStr"])(this.elapsedMs);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "elapsedMs", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return (performance.now() - this.startTime);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "elapsedS", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return this.elapsedMs / 1000;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resets elapsed time to 0
     */
    Stopwatch.prototype.restart = function () {
        this.startTime = performance.now();
    };
    return Stopwatch;
}());



/***/ }),

/***/ "./src/Util/hsvColor.ts":
/*!******************************!*\
  !*** ./src/Util/hsvColor.ts ***!
  \******************************/
/*! exports provided: hsvColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsvColor", function() { return hsvColor; });
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gl/glColor */ "./src/gl/glColor.ts");

/**
 * Class for representing color values. Values are on a 0-1 scale.
 */
var hsvColor = /** @class */ (function () {
    /**
     * @param color HSV values to store in this object
     */
    function hsvColor(color) {
        this.h = color[0];
        this.s = color[1];
        this.v = color[2];
    }
    /**
     * Creates an hsvColor object from an htmlColor object.
     *
     * @param color The htmlColor object.
     * @returns The hsvColor object.
     */
    hsvColor.fromHtmlColor = function (color) {
        var r = color.r;
        var g = color.g;
        var b = color.b;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var d = max - min;
        var h;
        var s = (max === 0 ? 0 : d / max);
        var v = max / 255;
        switch (max) {
            case min:
                h = 0;
                break;
            case r:
                h = (g - b) + d * (g < b ? 6 : 0);
                h /= 6 * d;
                break;
            case g:
                h = (b - r) + d * 2;
                h /= 6 * d;
                break;
            case b:
                h = (r - g) + d * 4;
                h /= 6 * d;
                break;
        }
        return new hsvColor([h, s, v]);
    };
    /**
     * Creates an hsvColor object from a glColor object.
     *
     * @param color The glColor object.
     * @returns The hsvColor object.
     */
    hsvColor.fromGlColor = function (color) {
        return hsvColor.fromHtmlColor(color.toHtmlColor());
    };
    /**
     * Creates a glColor object from this object.
     *
     * @returns The glColor object.
     */
    hsvColor.prototype.toGlColor = function () {
        var r, g, b, i, f, p, q, t;
        i = Math.floor(this.h * 6);
        f = this.h * 6 - i;
        p = this.v * (1 - this.s);
        q = this.v * (1 - f * this.s);
        t = this.v * (1 - (1 - f) * this.s);
        switch (i % 6) {
            case 0:
                r = this.v, g = t, b = p;
                break;
            case 1:
                r = q, g = this.v, b = p;
                break;
            case 2:
                r = p, g = this.v, b = t;
                break;
            case 3:
                r = p, g = q, b = this.v;
                break;
            case 4:
                r = t, g = p, b = this.v;
                break;
            case 5:
                r = this.v, g = p, b = q;
                break;
        }
        return new _gl_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([r, g, b]);
    };
    /**
     * Creates an htmlColor object from this object.
     *
     * @returns The glColor object.
     */
    hsvColor.prototype.toHtmlColor = function () {
        return this.toGlColor().toHtmlColor();
    };
    return hsvColor;
}());



/***/ }),

/***/ "./src/Util/htmlColor.ts":
/*!*******************************!*\
  !*** ./src/Util/htmlColor.ts ***!
  \*******************************/
/*! exports provided: htmlColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlColor", function() { return htmlColor; });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ "./src/Util/Color.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _gl_glColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gl/glColor */ "./src/gl/glColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Color class that requires RGB values to be between 0 and 255
 */
var htmlColor = /** @class */ (function (_super) {
    __extends(htmlColor, _super);
    /**
     * @param color An RGB color array
     */
    function htmlColor(color) {
        var _this = this;
        if (color.length != 3) {
            throw new Error("Invalid color array length (expected 3 elements)");
        }
        if (color[0] < 0 || color[0] > 255) {
            throw new Error("Invalid color 'r' value (expected [0-255])");
        }
        if (color[1] < 0 || color[1] > 255) {
            throw new Error("Invalid color 'g' value (expected [0-255])");
        }
        if (color[2] < 0 || color[2] > 255) {
            throw new Error("Invalid color 'b' value (expected [0-255])");
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    /**
     * Converts a value to a hex string
     *
     * @param c The numeric value
     * @returns The hex string
     */
    htmlColor.prototype.componentToHex = function (c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    };
    /**
     * Converts this object to a hex string (e.g. #0f0f0f).
     *
     * @returns A hex string.
     */
    htmlColor.prototype.toHex = function () {
        var rHex = this.componentToHex(this.r);
        var gHex = this.componentToHex(this.g);
        var bHex = this.componentToHex(this.b);
        return "#" + rHex + gHex + bHex;
    };
    /**
     * Converts this object to a css string (e.g. 'rgb(128,228,32)').
     *
     * @returns A css string.
     */
    htmlColor.prototype.toCss = function () {
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["toCss"])(this.r, this.g, this.b);
    };
    /**
     * Converts a css style string (e.g. 'rgb(24,36,83)') to a color
     *
     * @param css The css string.
     * @returns The color.
     */
    htmlColor.fromCss = function (css) {
        var regex = /\d+/g;
        var vals = css.match(regex).slice(0, 3);
        return new htmlColor([parseInt(vals[0]), parseInt(vals[1]), parseInt(vals[2])]);
    };
    /**
     * Creates an htmlColor object from a hex string
     *
     * @param hex The hex string
     * @returns The htmlColor object
     */
    htmlColor.fromHex = function (hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (result) {
            var r = parseInt(result[1], 16);
            var g = parseInt(result[2], 16);
            var b = parseInt(result[3], 16);
            return new htmlColor([r, g, b]);
        }
        else {
            return null;
        }
    };
    /**
     * Creates an htmlColor object using values in a Color object.
     *
     * @param color A generic Color object.
     */
    htmlColor.fromColor = function (color) {
        var r = htmlColor.clamp(color.r);
        var g = htmlColor.clamp(color.g);
        var b = htmlColor.clamp(color.b);
        return new htmlColor([r, g, b]);
    };
    /**
     * Rounds a number to a whole number and clamps it between 0 and 255.
     *
     * @param val The value.
     * @returns The rounded & clamped value
     */
    htmlColor.clamp = function (val) {
        val = Math.round(val);
        if (val < 0) {
            return 0;
        }
        else if (val > 255) {
            return 255;
        }
        else {
            return val;
        }
    };
    /**
     * Converts this color to an equivalent gray-scale color
     *
     * @returns The gray-scale color.
     */
    htmlColor.prototype.toGray = function () {
        var rgb = Math.round((this.r + this.g + this.b) / 3);
        return new htmlColor([rgb, rgb, rgb]);
    };
    /**
     * Converts this object to a WebGL color object (0-1 based)
     *
     * @returns A glColor object.
     */
    htmlColor.prototype.toGlColor = function () {
        return new _gl_glColor__WEBPACK_IMPORTED_MODULE_2__["glColor3"]([this.r / 255, this.g / 255, this.b / 255]);
    };
    htmlColor.white = new htmlColor([255, 255, 255]);
    htmlColor.black = new htmlColor([0, 0, 0]);
    htmlColor.red = new htmlColor([255, 0, 0]);
    htmlColor.green = new htmlColor([0, 255, 0]);
    htmlColor.blue = new htmlColor([0, 0, 255]);
    htmlColor.orange = new htmlColor([255, 165, 0]);
    return htmlColor;
}(_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));



/***/ }),

/***/ "./src/Util/htmlColorWithAlpha.ts":
/*!****************************************!*\
  !*** ./src/Util/htmlColorWithAlpha.ts ***!
  \****************************************/
/*! exports provided: htmlColorWithAlpha */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlColorWithAlpha", function() { return htmlColorWithAlpha; });
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmlColor */ "./src/Util/htmlColor.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Globals */ "./src/Util/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * An html color with a transparency value
 */
var htmlColorWithAlpha = /** @class */ (function (_super) {
    __extends(htmlColorWithAlpha, _super);
    /**
     * @param color An RGBA color array
     */
    function htmlColorWithAlpha(color) {
        var _this = _super.call(this, [color[0], color[1], color[2]]) || this;
        /** The transparency (alpha) value */
        _this.a = 255;
        if (color.length != 4) {
            throw new Error("Invalid color array length (expected 4 elements)");
        }
        if (color[4] < 0 || color[4] > 255) {
            throw new Error("Invalid color 'a' value (expected [0-255])");
        }
        _this.a = color[3];
        return _this;
    }
    /**
     * Converts this object to a css string (e.g. 'rgb(128,228,32,255)').
     *
     * @returns A css string.
     */
    htmlColorWithAlpha.prototype.toCss = function () {
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["toCss"])(this.r, this.g, this.b, this.a);
    };
    htmlColorWithAlpha.transparent = new htmlColorWithAlpha([0, 0, 0, 0]);
    return htmlColorWithAlpha;
}(_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]));



/***/ }),

/***/ "./src/Util3D/BoundingBox.ts":
/*!***********************************!*\
  !*** ./src/Util3D/BoundingBox.ts ***!
  \***********************************/
/*! exports provided: BoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingBox", function() { return BoundingBox; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");

var BoundingBox = /** @class */ (function () {
    function BoundingBox(min, max) {
        if (min === void 0) { min = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE]); }
        if (max === void 0) { max = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]); }
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(BoundingBox.prototype, "width", {
        get: function () {
            return this.max.x - this.min.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "height", {
        get: function () {
            return this.max.y - this.min.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "depth", {
        get: function () {
            return this.max.z - this.min.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "diagonal", {
        get: function () {
            var w = this.width;
            var h = this.height;
            var d = this.depth;
            return Math.sqrt(w * w + h * h + d * d);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "center", {
        get: function () {
            return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
                (this.min.x + this.max.x) / 2,
                (this.min.y + this.max.y) / 2,
                (this.min.z + this.max.z) / 2,
            ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "corners", {
        get: function () {
            var corners = [];
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.min.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.min.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.max.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.max.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.min.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.min.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.max.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.max.y, this.max.z]));
            return corners;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox, "infinite", {
        get: function () {
            var MAX = Number.POSITIVE_INFINITY;
            var MIN = Number.NEGATIVE_INFINITY;
            return new BoundingBox(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MIN, MIN, MIN]), new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MAX, MAX, MAX]));
        },
        enumerable: false,
        configurable: true
    });
    BoundingBox.prototype.inside = function (vec) {
        if (vec.x >= this.min.x && vec.x <= this.max.x &&
            vec.y >= this.min.y && vec.y <= this.max.y &&
            vec.z >= this.min.z && vec.z <= this.max.z) {
            return true;
        }
        else {
            return false;
        }
    };
    BoundingBox.prototype.toString = function (digits) {
        return '[' + this.min.toString(digits) + ']' +
            '[' + this.max.toString(digits) + ']';
    };
    BoundingBox.prototype.update = function (v) {
        if (isNaN(v.x) || isNaN(v.y) || isNaN(v.z)) {
            //console.log('----------------------------------------------NaN');
            return;
        }
        this.min.x = Math.min(this.min.x, v.x);
        this.min.y = Math.min(this.min.y, v.y);
        this.min.z = Math.min(this.min.z, v.z);
        this.max.x = Math.max(this.max.x, v.x);
        this.max.y = Math.max(this.max.y, v.y);
        this.max.z = Math.max(this.max.z, v.z);
    };
    BoundingBox.prototype.merge = function (other) {
        this.min.x = Math.min(this.min.x, other.min.x);
        this.min.y = Math.min(this.min.y, other.min.y);
        this.min.z = Math.min(this.min.z, other.min.z);
        this.max.x = Math.max(this.max.x, other.max.x);
        this.max.y = Math.max(this.max.y, other.max.y);
        this.max.z = Math.max(this.max.z, other.max.z);
    };
    BoundingBox.prototype.multM = function (mat) {
        var ret = new BoundingBox();
        var v1 = mat.multV(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"]([this.min.x, this.min.y, this.min.z, 1]));
        var v2 = mat.multV(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"]([this.max.x, this.max.y, this.max.z, 1]));
        ret.min.x = Math.min(v1.x, v2.x);
        ret.min.y = Math.min(v1.y, v2.y);
        ret.min.z = Math.min(v1.z, v2.z);
        ret.max.x = Math.max(v1.x, v2.x);
        ret.max.y = Math.max(v1.y, v2.y);
        ret.max.z = Math.max(v1.z, v2.z);
        return ret;
    };
    return BoundingBox;
}());



/***/ }),

/***/ "./src/Util3D/BoundingPts.ts":
/*!***********************************!*\
  !*** ./src/Util3D/BoundingPts.ts ***!
  \***********************************/
/*! exports provided: BoundingPts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingPts", function() { return BoundingPts; });
/**
 * A set of points used to define the bounding edges of an object. All points are
 * enclosed in the object
 */
var BoundingPts = /** @class */ (function () {
    function BoundingPts(pts) {
        this.pts = pts;
    }
    BoundingPts.prototype.get = function (i) {
        return this.pts[i];
    };
    BoundingPts.prototype.distToPoint = function (pt) {
        var ret = {
            min: Number.MAX_VALUE,
            max: -Number.MAX_VALUE,
        };
        this.pts.forEach(function (pt2) {
            var x = pt2.x - pt.x;
            var y = pt2.y - pt.y;
            var z = pt2.z - pt.z;
            var d = x * x + y * y + z * z;
            ret.min = Math.min(d, ret.min);
            ret.max = Math.max(d, ret.max);
        });
        // don't bother getting the square root of every calculation, just the min and max
        ret.min = Math.sqrt(ret.min);
        ret.max = Math.sqrt(ret.max);
        return ret;
    };
    BoundingPts.prototype.distToPlane = function (plane) {
        var ret = {
            min: Number.MAX_VALUE,
            max: -Number.MAX_VALUE,
        };
        this.pts.forEach(function (pt) {
            var d = plane.distToPt(pt);
            ret.min = Math.min(d, ret.min);
            ret.max = Math.max(d, ret.max);
        });
        return ret;
    };
    return BoundingPts;
}());



/***/ }),

/***/ "./src/Util3D/IndexedTriangle.ts":
/*!***************************************!*\
  !*** ./src/Util3D/IndexedTriangle.ts ***!
  \***************************************/
/*! exports provided: IndexedTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedTriangle", function() { return IndexedTriangle; });
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/Util3D/IndexedVec3.ts");

/**
 * Minimalist wrapper around a WebGL triangle element
 */
var IndexedTriangle = /** @class */ (function () {
    function IndexedTriangle(vertices, normals, i1, i2, i3) {
        this.v1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i1);
        this.v2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i2);
        this.v3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i3);
        this.n1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i1);
        this.n2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i2);
        this.n3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i3);
        this.i1 = i1;
        this.i2 = i2;
        this.i3 = i3;
    }
    Object.defineProperty(IndexedTriangle.prototype, "minX", {
        get: function () {
            return Math.min(this.v1.x, this.v2.x, this.v3.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "minY", {
        get: function () {
            return Math.min(this.v1.y, this.v2.y, this.v3.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "minZ", {
        get: function () {
            return Math.min(this.v1.z, this.v2.z, this.v3.z);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxX", {
        get: function () {
            return Math.max(this.v1.x, this.v2.x, this.v3.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxY", {
        get: function () {
            return Math.max(this.v1.y, this.v2.y, this.v3.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxZ", {
        get: function () {
            return Math.max(this.v1.z, this.v2.z, this.v3.z);
        },
        enumerable: false,
        configurable: true
    });
    IndexedTriangle.prototype.computeNormal = function () {
        var v1 = this.v1.toVec3();
        var v2 = this.v2.toVec3();
        var v3 = this.v3.toVec3();
        var a = v2.subtract(v1);
        var b = v3.subtract(v2);
        return a.cross(b).normalize();
    };
    return IndexedTriangle;
}());



/***/ }),

/***/ "./src/Util3D/IndexedVec3.ts":
/*!***********************************!*\
  !*** ./src/Util3D/IndexedVec3.ts ***!
  \***********************************/
/*! exports provided: IndexedVec3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedVec3", function() { return IndexedVec3; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");

var IndexedVec3 = /** @class */ (function () {
    function IndexedVec3(values, index) {
        this.values = values;
        this.index = index;
    }
    Object.defineProperty(IndexedVec3.prototype, "x", {
        get: function () {
            return this.values[3 * this.index + 0];
        },
        set: function (val) {
            this.values[3 * this.index + 0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedVec3.prototype, "y", {
        get: function () {
            return this.values[3 * this.index + 1];
        },
        set: function (val) {
            this.values[3 * this.index + 1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedVec3.prototype, "z", {
        get: function () {
            return this.values[3 * this.index + 2];
        },
        set: function (val) {
            this.values[3 * this.index + 2] = val;
        },
        enumerable: false,
        configurable: true
    });
    IndexedVec3.prototype.toVec3 = function () {
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.x, this.y, this.z]);
    };
    return IndexedVec3;
}());



/***/ }),

/***/ "./src/Util3D/Mat.ts":
/*!***************************!*\
  !*** ./src/Util3D/Mat.ts ***!
  \***************************/
/*! exports provided: Mat4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mat4", function() { return Mat4; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

/**
 * An x-y-z-w matrix for use in WebGL applications.
 */
var Mat4 = /** @class */ (function () {
    /**
     * @param values If supplied, the initial matrix values. If not supplied, the matrix is
     * initialized as an identity matrix.
     */
    function Mat4(values) {
        if (values) {
            this.values = __spreadArrays(values);
        }
        else {
            this.values = [
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ];
        }
    }
    Object.defineProperty(Mat4.prototype, "scaleFactors", {
        get: function () {
            var sX = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            var sY = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            var sZ = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([sX, sY, sZ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mat4, "identity", {
        /**
         * Get's an identity matrix. Same as creating a new matrix, but syntactically
         * shows what is happening.
         *
         * @returns A new idenity matrix.
         */
        get: function () {
            return new Mat4();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mat4, "ortho", {
        /**
         * Creates an orthographic matrix in the WebGL coordinate system (positive z towards you)
         *
         * @return A new orthographic matrix
         */
        get: function () {
            return Mat4.makeOrtho(-1, 1, -1, 1, 1, -1);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the matrix.
     *
     * @returns A copy of the matrix.
     */
    Mat4.prototype.clone = function () {
        return new Mat4(this.values);
    };
    /**
     * Gets a value in the matrix.
     *
     * @param row The row index.
     * @param col The column index.
     * @returns The matrix value.
     */
    Mat4.prototype.get = function (row, col) {
        return this.values[4 * row + col];
    };
    /**
     * Sets a value in the matrix.
     *
     * @param row The row index.
     * @param col The column index.
     * @param val The value.
     */
    Mat4.prototype.set = function (row, col, val) {
        this.values[4 * row + col] = val;
    };
    /**
     * Multiplies this matrix against a vector and returns the result.
     *
     * @param vec The vector.
     * @return The result of the multiplication.
     */
    Mat4.prototype.multV = function (vec) {
        var vals = [];
        for (var row = 0; row < 4; row++) {
            var sum = 0;
            for (var col = 0; col < 4; col++) {
                sum += this.values[row * 4 + col] * vec.values[col];
            }
            vals.push(sum);
        }
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"](vals);
    };
    /**
     * Transforms a 3d vec by this matrix.
     *
     * @param vec A 3d vec.
     * @param w The value to use for w. 0 = ignore translation. 1 = include.
     * @returns The new 3d vec.
     */
    Mat4.prototype.multVec3 = function (vec, w) {
        if (w === void 0) { w = 1; }
        return this.multV(vec.toVec4(w)).xyz;
    };
    /**
     * Multiplies this matrix against another matrix and returns the result.
     *
     * @param other The matrix.
     * @return The result of the multiplication.
     */
    Mat4.prototype.multM = function (other) {
        var result = new Mat4();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                var sum = 0;
                for (var i = 0; i < 4; i++) {
                    sum += this.get(row, i) * other.get(i, col);
                }
                result.set(row, col, sum);
            }
        }
        return result;
    };
    /**
     * Inverts this matrix and returns the result.
     *
     * @returns The inverse of this.
     */
    Mat4.prototype.inverse = function () {
        var result = new Mat4();
        var a00 = this.values[0], a01 = this.values[1], a02 = this.values[2], a03 = this.values[3];
        var a10 = this.values[4], a11 = this.values[5], a12 = this.values[6], a13 = this.values[7];
        var a20 = this.values[8], a21 = this.values[9], a22 = this.values[10], a23 = this.values[11];
        var a30 = this.values[12], a31 = this.values[13], a32 = this.values[14], a33 = this.values[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32;
        // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        result.values[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        result.values[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        result.values[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        result.values[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        result.values[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        result.values[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        result.values[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        result.values[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        result.values[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        result.values[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        result.values[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        result.values[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        result.values[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        result.values[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        result.values[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        result.values[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return result;
    };
    /**
     * Transposes this matrix and returns the result as a new matrix.
     *
     * @returns The transposed matrix.
     */
    Mat4.prototype.transpose = function () {
        var result = new Mat4();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                result.set(row, col, this.get(col, row));
            }
        }
        return result;
    };
    /**
     * Creates a matrix that contains a scale operation.
     *
     * @param scale The scale factor
     * @returns The transformation matrix.
     */
    Mat4.fromScale = function (scale) {
        return new Mat4([
            scale, 0, 0, 0,
            0, scale, 0, 0,
            0, 0, scale, 0,
            0, 0, 0, 1
        ]);
    };
    /**
     * Creates a matrix that contains a translation operation.
     *
     * @param vec The translations.
     * @returns The transformation matrix.
     */
    Mat4.fromTranslation = function (v) {
        return new Mat4([
            1, 0, 0, v.x,
            0, 1, 0, v.y,
            0, 0, 1, v.z,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotX = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            1, 0, 0, 0,
            0, c, s, 0,
            0, -s, c, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotY = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            c, 0, -s, 0,
            0, 1, 0, 0,
            s, 0, c, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotZ = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            c, s, 0, 0,
            -s, c, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.prototype.rotX = function (angle) {
        this.values = Mat4.fromRotX(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.rotY = function (angle) {
        this.values = Mat4.fromRotY(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.rotZ = function (angle) {
        this.values = Mat4.fromRotZ(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.preRotX = function (angle) {
        this.values = this.multM(Mat4.fromRotX(angle)).values;
        return this;
    };
    Mat4.prototype.preRotY = function (angle) {
        this.values = this.multM(Mat4.fromRotY(angle)).values;
        return this;
    };
    Mat4.prototype.preRotZ = function (angle) {
        this.values = this.multM(Mat4.fromRotZ(angle)).values;
        return this;
    };
    Mat4.prototype.translate = function (offset) {
        this.values = Mat4.fromTranslation(offset).multM(this).values;
        return this;
    };
    Mat4.prototype.scale = function (scale) {
        this.values = Mat4.fromScale(scale).multM(this).values;
        return this;
    };
    /**
     * Creates a viewing matrix. See gluLookAt.
     *
     * @param eye The eye position.
     * @param center The point of interest.
     * @param up The up vector.
     * @returns The viewing matrix.
     */
    Mat4.makeLookAt = function (eye, center, up) {
        var a = eye.subtract(center).normalize();
        var b = up.cross(a).normalize();
        var c = a.cross(b).normalize();
        var m = new Mat4([
            b.x, b.y, b.z, 0,
            c.x, c.y, c.z, 0,
            a.x, a.y, a.z, 0,
            0, 0, 0, 1
        ]);
        var t = new Mat4([
            1, 0, 0, -eye.x,
            0, 1, 0, -eye.y,
            0, 0, 1, -eye.z,
            0, 0, 0, 1
        ]);
        var result = m.multM(t);
        return result;
    };
    /**
     * Creates a perspective matrix. See gluPerspective.
     *
     * @param fovy Field of view (in degrees).
     * @param aspect View aspect ratio.
     * @param znear Near clipping plane.
     * @param zfar Far clipping plane.
     */
    Mat4.makePerspective = function (fovy, aspect, znear, zfar) {
        var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
        var ymin = -ymax;
        var xmin = ymin * aspect;
        var xmax = ymax * aspect;
        return Mat4.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
    };
    /**
     * Creates a perspective matrix. See gluFrustum.
     *
     * @param left The left clipping plane.
     * @param right The right clipping plane.
     * @param bottom The bottom clipping plane.
     * @param top The top clipping plane.
     * @param znear The near clipping plane.
     * @param zfar The far clipping plane.
     * @returns the perspective matrix.
     */
    Mat4.makeFrustum = function (left, right, bottom, top, znear, zfar) {
        var X = 2 * znear / (right - left);
        var Y = 2 * znear / (top - bottom);
        var A = (right + left) / (right - left);
        var B = (top + bottom) / (top - bottom);
        var C = -(zfar + znear) / (zfar - znear);
        var D = -2 * zfar * znear / (zfar - znear);
        return new Mat4([
            X, 0, A, 0,
            0, Y, B, 0,
            0, 0, C, D,
            0, 0, -1, 0
        ]);
    };
    /**
     * Creates a perspective matrix. See gluOrtho.
     *
     * @param left The left clipping plane.
     * @param right The right clipping plane.
     * @param bottom The bottom clipping plane.
     * @param top The top clipping plane.
     * @param znear The near clipping plane.
     * @param zfar The far clipping plane.
     * @returns the perspective matrix.
     */
    Mat4.makeOrtho = function (left, right, bottom, top, near, far) {
        return new Mat4([
            2 / (right - left), 0, 0, (right + left) / (right - left),
            0, 2 / (top - bottom), 0, (top + bottom) / (top - bottom),
            0, 0, 2 / (far - near), (far + near) / (far - near),
            0, 0, 0, 1
        ]);
    };
    Mat4.prototype.log = function (msg, digits) {
        if (digits === void 0) { digits = 2; }
        console.log(msg);
        for (var r = 0; r < 4; r++) {
            var line = "";
            for (var c = 0; c < 4; c++) {
                line += this.get(r, c).toFixed(digits) + ' ';
            }
            console.log(line);
        }
        console.log();
    };
    return Mat4;
}());



/***/ }),

/***/ "./src/Util3D/SphericalCoord.ts":
/*!**************************************!*\
  !*** ./src/Util3D/SphericalCoord.ts ***!
  \**************************************/
/*! exports provided: SphericalCoord */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalCoord", function() { return SphericalCoord; });
/**
 * Spherical coordinates based on the WebGL viewing system: x=left-right, y=up-down, z=near-far
 */
var SphericalCoord = /** @class */ (function () {
    /**
     * @param radius
     * @param elevationAngle
     * @param rotationAngle
     */
    function SphericalCoord(radius, elevationAngle, rotationAngle) {
        /**
         * The distance from the origin to the point
         */
        this.radius = 0;
        /**
         * The elevation from the floor to the point. 0 and 180 are on the
         * floor. 90 points up.
         */
        this.elevationAngle = 0;
        /**
         * The angle, when looking down from the top, to the point. 0 points right.
         */
        this.rotationAngle = 0;
        this.radius = radius;
        this.elevationAngle = elevationAngle;
        this.rotationAngle = rotationAngle;
    }
    /**
     * Creates a spherical coordinate from a cartesian point
     *
     * @param pos The cartesian point.
     * @returns The spherical coordinate.
     */
    SphericalCoord.fromXYZ = function (pos) {
        var x = pos[0];
        var y = pos[1];
        var z = pos[2];
        var radius = Math.sqrt(x * x + y * y + z * z);
        var rotationAngle = (180 / Math.PI) * Math.atan2(z, x);
        var elevationAngle = (180 / Math.PI) * Math.asin(y / radius);
        return new SphericalCoord(radius, elevationAngle, rotationAngle);
    };
    /**
     * Converts this spherical coordinate to a cartesian coordinate.
     *
     * @returns The cartesian coordinate.
     */
    SphericalCoord.prototype.toXYZ = function () {
        var floorRadius = this.radius * Math.cos((Math.PI / 180) * this.elevationAngle);
        var x = floorRadius * Math.cos((Math.PI / 180) * this.rotationAngle);
        var y = this.radius * Math.sin((Math.PI / 180) * this.elevationAngle);
        var z = floorRadius * Math.sin((Math.PI / 180) * this.rotationAngle);
        return [x, y, z];
    };
    return SphericalCoord;
}());



/***/ }),

/***/ "./src/Util3D/TriangleObj.ts":
/*!***********************************!*\
  !*** ./src/Util3D/TriangleObj.ts ***!
  \***********************************/
/*! exports provided: NormalType, TriangleObjData, TriangleObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalType", function() { return NormalType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjData", function() { return TriangleObjData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObj", function() { return TriangleObj; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _BoundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BoundingBox */ "./src/Util3D/BoundingBox.ts");
/* harmony import */ var _BoundingPts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BoundingPts */ "./src/Util3D/BoundingPts.ts");
/* harmony import */ var _IndexedTriangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IndexedTriangle */ "./src/Util3D/IndexedTriangle.ts");
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/Util3D/IndexedVec3.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Util/Profiler */ "./src/Util/Profiler.ts");
/* harmony import */ var _Util_BlobFile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Util/BlobFile */ "./src/Util/BlobFile.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};








var NormalType;
(function (NormalType) {
    NormalType[NormalType["Smooth"] = 0] = "Smooth";
    NormalType[NormalType["Flat"] = 1] = "Flat";
})(NormalType || (NormalType = {}));
var TriangleObjData = /** @class */ (function () {
    function TriangleObjData() {
    }
    return TriangleObjData;
}());

/**
 * Base class for representing an object from a bunch of triangles.
 */
var TriangleObj = /** @class */ (function () {
    function TriangleObj(name) {
        this.vertices = [];
        this.normals = [];
        this.indices = [];
        this.box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"]();
        this.name = name;
    }
    Object.defineProperty(TriangleObj.prototype, "numVertices", {
        get: function () {
            return this.vertices.length / 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "numTriangles", {
        get: function () {
            return this.indices.length / 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "width", {
        get: function () {
            return this.box.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "height", {
        get: function () {
            return this.box.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "depth", {
        get: function () {
            return this.box.depth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "diagonal", {
        get: function () {
            return this.box.diagonal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "center", {
        get: function () {
            return this.box.center;
        },
        enumerable: false,
        configurable: true
    });
    TriangleObj.prototype.getTriangle = function (index) {
        var i1 = this.indices[3 * index + 0];
        var i2 = this.indices[3 * index + 1];
        var i3 = this.indices[3 * index + 2];
        return new _IndexedTriangle__WEBPACK_IMPORTED_MODULE_3__["IndexedTriangle"](this.vertices, this.normals, i1, i2, i3);
    };
    TriangleObj.prototype.pushQuad = function (v1, v2, v3, v4) {
        this.pushTriangle(v1, v2, v3);
        this.pushTriangle(v2, v4, v3);
    };
    TriangleObj.prototype.pushTriangle = function (v1, v2, v3) {
        var _a, _b, _c;
        // add indices
        var i1 = this.numVertices;
        var i2 = i1 + 1;
        var i3 = i1 + 2;
        this.indices.push(i1, i2, i3);
        // add vertices
        this.vertices.push(v1.x, v1.y, v1.z, v2.x, v2.y, v2.z, v3.x, v3.y, v3.z);
        this.box.update(v1);
        this.box.update(v2);
        this.box.update(v3);
        // add normals
        var tri = new _IndexedTriangle__WEBPACK_IMPORTED_MODULE_3__["IndexedTriangle"](this.vertices, this.normals, i1, i2, i3);
        var normal = tri.computeNormal();
        (_a = this.normals).push.apply(_a, normal.values);
        (_b = this.normals).push.apply(_b, normal.values);
        (_c = this.normals).push.apply(_c, normal.values);
    };
    TriangleObj.prototype.computeNormals = function (type) {
        var _a;
        if (type === NormalType.Smooth) {
            var multiNormVertices = [];
            for (var i = 0; i < this.numVertices; i++) {
                multiNormVertices.push(new MultiNormVertex());
            }
            // store the normals with each vertex - we'll later average these
            for (var i = 0; i < this.numTriangles; i++) {
                var tri = this.getTriangle(i);
                var n = tri.computeNormal();
                multiNormVertices[tri.i1].push(n);
                multiNormVertices[tri.i2].push(n);
                multiNormVertices[tri.i3].push(n);
            }
            // populate the normals array
            this.normals = [];
            for (var i = 0; i < multiNormVertices.length; i++) {
                (_a = this.normals).push.apply(_a, multiNormVertices[i].normal.values);
            }
        }
        else {
            // to go this way we need to have a unique vector and normal for each triangle
            // corner. Blow away the old stuff and rebuild
            var oldIndices = this.indices;
            var oldVertices = this.vertices;
            // reset everything
            this.vertices = [];
            this.normals = [];
            this.indices = [];
            // rebuild
            for (var i = 0; i < oldIndices.length / 3; i++) {
                var v1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 0]);
                var v2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 1]);
                var v3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 2]);
                this.pushTriangle(v1, v2, v3);
            }
        }
    };
    TriangleObj.prototype.x = function (i) {
        return this.vertices[3 * i + 0];
    };
    TriangleObj.prototype.y = function (i) {
        return this.vertices[3 * i + 1];
    };
    TriangleObj.prototype.z = function (i) {
        return this.vertices[3 * i + 2];
    };
    TriangleObj.prototype.findBounds = function () {
        console.log('finding bounds');
        var box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"]();
        for (var i = 0; i < this.numTriangles; i++) {
            var tri = this.getTriangle(i);
            box.update(tri.v1);
            box.update(tri.v2);
            box.update(tri.v3);
        }
        this.box = box;
    };
    /**
     * Breaks the object into evenly spaced volumes. The number of volumes is automatically
     * determined based on the number of triangles.
     */
    TriangleObj.prototype.getBoundingPts = function () {
        if (this.boundingPts) {
            return this.boundingPts;
        }
        var numSteps = 15;
        var boxes = [];
        for (var i = 0; i < Math.pow(numSteps, 3); i++) {
            boxes.push(new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"]());
        }
        var v = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]();
        for (var i = 0; i < this.numVertices; i++) {
            v.x = this.vertices[3 * i + 0];
            v.y = this.vertices[3 * i + 1];
            v.z = this.vertices[3 * i + 2];
            var x = Math.floor(numSteps * (v.x - this.box.min.x) / (this.box.width));
            var y = Math.floor(numSteps * (v.y - this.box.min.y) / (this.box.height));
            var z = Math.floor(numSteps * (v.z - this.box.min.z) / (this.box.depth));
            x = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(x, 0, numSteps - 1);
            y = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(y, 0, numSteps - 1);
            z = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_5__["clamp"])(z, 0, numSteps - 1);
            var index = x + y * numSteps + z * numSteps * numSteps;
            boxes[index].update(v);
        }
        var boxMap = new Map();
        var boxCount = 0;
        for (var x = 0; x < numSteps; x++) {
            for (var y = 0; y < numSteps; y++) {
                var first = void 0;
                var last = void 0;
                for (var z = 0; z < numSteps; z++) {
                    var index = x + y * numSteps + z * numSteps * numSteps;
                    var box = boxes[index];
                    if (box.min.x === Number.MAX_VALUE) {
                        continue;
                    }
                    boxCount++;
                    if (!first) {
                        first = { index: index, box: box };
                    }
                    last = { index: index, box: box };
                }
                if (first && boxMap.has(first.index) === false) {
                    boxMap.set(first.index, first.box);
                }
                if (last && boxMap.has(last.index) === false) {
                    boxMap.set(last.index, last.box);
                }
            }
        }
        var pts = [];
        boxes.forEach(function (box) {
            if (box.min.x !== Number.MAX_VALUE) {
                pts.push.apply(pts, box.corners);
            }
        });
        this.boundingPts = new _BoundingPts__WEBPACK_IMPORTED_MODULE_2__["BoundingPts"](pts);
        return this.boundingPts;
    };
    /**
     * Creates a string in the for .OBJ file format
     *
     * @returns the string
     */
    TriangleObj.prototype.toObjString = function (digits) {
        if (digits === void 0) { digits = 8; }
        var str = '';
        str += '# Vertices: ' + this.vertices.length + '\n';
        str += '# Triangles: ' + this.numTriangles + '\n';
        str += '\n';
        for (var i = 0; i < this.numVertices; i++) {
            var v = this.vertices;
            str += 'v ' + v[3 * i + 0].toPrecision(digits) + ' ' + v[3 * i + 1].toPrecision(digits) + ' ' + v[3 * i + 2].toPrecision(digits) + '\n';
        }
        for (var i = 0; i < this.numVertices; i++) {
            var n = this.normals;
            str += 'vn ' + n[3 * i + 0].toPrecision(digits) + ' ' + n[3 * i + 1].toPrecision(digits) + ' ' + n[3 * i + 2].toPrecision(digits) + '\n';
        }
        for (var i = 0; i < this.numTriangles; i++) {
            var t = this.getTriangle(i);
            str += 'f ' +
                (t.i1 + 1) + '//' + (t.i1 + 1) + ' ' +
                (t.i2 + 1) + '//' + (t.i2 + 1) + ' ' +
                (t.i3 + 1) + '//' + (t.i3 + 1) + '\n';
        }
        return str;
    };
    TriangleObj.prototype.optimize = function (normalType) {
        if (normalType === NormalType.Smooth) {
            var vertexToIndexMap = new Map();
            var indexToIndexMap = new Map();
            // first generate a unique set of vertices
            var uniqueVertices = [];
            for (var i = 0; i < this.numVertices; i++) {
                var oldVertex = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](this.vertices, i);
                var key = this.vertices[3 * i + 0].toFixed(4) + ' ' + this.vertices[3 * i + 1].toFixed(4) + ' ' + this.vertices[3 * i + 2].toFixed(4);
                var oldIndex = i + 1;
                var newIndex = void 0;
                if (vertexToIndexMap.has(key)) {
                    // just map the old index to the existing entry
                    newIndex = vertexToIndexMap.get(key);
                }
                else {
                    // create a new entry
                    newIndex = uniqueVertices.length + 1;
                    vertexToIndexMap.set(key, newIndex);
                    uniqueVertices.push(oldVertex);
                }
                // store the translation
                indexToIndexMap.set(oldIndex, newIndex);
            }
            // reset all the vertices
            this.vertices = [];
            for (var i = 0; i < uniqueVertices.length; i++) {
                this.vertices.push(uniqueVertices[i].x);
                this.vertices.push(uniqueVertices[i].y);
                this.vertices.push(uniqueVertices[i].z);
            }
            // remap all indices
            for (var i = 0; i < this.indices.length; i++) {
                var oldIndex = this.indices[i];
                this.indices[i] = indexToIndexMap.get(oldIndex + 1) - 1;
            }
        }
        else {
            // nothing to do for flat normals. New vertices and normals are created in 
            // computeNormals() below if needed
        }
        this.computeNormals(normalType);
    };
    TriangleObj.prototype.trim = function (box) {
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__["Profiler"]();
        var indices = [];
        for (var i = 0; i < this.numTriangles; i++) {
            var tri = this.getTriangle(i);
            if (box.inside(tri.v1) && box.inside(tri.v2) && box.inside(tri.v3)) {
                indices.push(tri.i1);
                indices.push(tri.i2);
                indices.push(tri.i3);
            }
        }
        console.log('trimmed ' + (this.indices.length - indices.length) + ' triangles');
        this.indices = indices;
        this.findBounds();
        p.log('Trim Complete');
    };
    TriangleObj.prototype.mirror = function (x, add) {
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__["Profiler"]();
        if (add) {
            // duplicate vertices
            var numVertices = this.numVertices;
            for (var i = 0; i < numVertices; i++) {
                this.vertices[3 * i + 0] -= x;
                ;
                this.vertices.push(-this.vertices[3 * i + 0]);
                this.vertices.push(this.vertices[3 * i + 1]);
                this.vertices.push(this.vertices[3 * i + 2]);
                this.normals.push(-this.normals[3 * i + 0]);
                this.normals.push(this.normals[3 * i + 1]);
                this.normals.push(this.normals[3 * i + 2]);
            }
            var numIndices = this.indices.length;
            var startIndex = numVertices;
            for (var i = 0; i < numIndices; i++) {
                this.indices.push(startIndex + this.indices[i]);
            }
        }
        else {
            // reflect vertices
            var numVertices = this.numVertices;
            for (var i = 0; i < numVertices; i++) {
                this.vertices[3 * i + 0] = x + (x - this.vertices[3 * i + 0]);
                this.normals[3 * i + 0] = -this.normals[3 * i + 0];
            }
        }
        this.findBounds();
        p.log('Mirror Complete');
    };
    TriangleObj.prototype.reverse = function () {
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_6__["Profiler"]();
        // reflect vertices
        var x = this.center.x;
        for (var i = 0; i < this.numVertices; i++) {
            this.vertices[3 * i + 0] = x + (x - this.vertices[3 * i + 0]);
            this.normals[3 * i + 0] = -this.normals[3 * i + 0];
        }
        // reorder triangles to preserve front-back facing
        for (var i = 0; i < this.numTriangles; i++) {
            var i1 = this.indices[3 * i + 0];
            var i2 = this.indices[3 * i + 1];
            this.indices[3 * i + 0] = i2;
            this.indices[3 * i + 1] = i1;
        }
        p.log('Reverse Complete');
    };
    TriangleObj.prototype.combine = function (tObj) {
        // save the value for the first index of the combined objects
        var startIndex = this.numVertices;
        // add the other vertices and normals to ours
        for (var i = 0; i < tObj.vertices.length; i++) {
            this.vertices.push(tObj.vertices[i]);
            this.normals.push(tObj.normals[i]);
        }
        // add the other indices, but offset them properly
        for (var i = 0; i < tObj.indices.length; i++) {
            this.indices.push(startIndex + tObj.indices[i]);
        }
        // merge the bounding boxes
        this.box.merge(tObj.box);
    };
    TriangleObj.prototype.toData = function () {
        var data = new TriangleObjData;
        data.name = this.name;
        data.vertices = new Float32Array(this.vertices);
        data.normals = new Float32Array(this.normals);
        data.indices = new Int32Array(this.indices);
        data.boxMin = this.box.min.clone();
        data.boxMax = this.box.max.clone();
        return data;
    };
    TriangleObj.fromData = function (data) {
        var tObj = new TriangleObj();
        tObj.name = data.name;
        tObj.vertices = Array.from(data.vertices);
        tObj.normals = Array.from(data.normals);
        tObj.indices = Array.from(data.indices);
        tObj.box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_1__["BoundingBox"](new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](data.boxMin.values), new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](data.boxMax.values));
        return tObj;
    };
    TriangleObj.prototype.toBlob = function () {
        // create a description
        var info = {
            FileType: 'Binary OBJ',
            Version: '1.0',
            Name: this.name,
            Source: this.source,
        };
        // get the raw data
        var data = this.toData();
        // break it into parts
        var parts = [];
        parts.push(data.vertices);
        parts.push(data.normals);
        parts.push(data.indices);
        parts.push(new Float32Array(data.boxMin.values));
        parts.push(new Float32Array(data.boxMax.values));
        // create the Blob
        return _Util_BlobFile__WEBPACK_IMPORTED_MODULE_7__["BlobFile"].createBlob(info, parts);
    };
    TriangleObj.fromBlob = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TriangleObj.blobToData(blob)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, TriangleObj.fromData(data)];
                }
            });
        });
    };
    TriangleObj.blobToData = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var data, bFile, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            return __generator(this, function (_s) {
                switch (_s.label) {
                    case 0:
                        data = new TriangleObjData();
                        return [4 /*yield*/, _Util_BlobFile__WEBPACK_IMPORTED_MODULE_7__["BlobFile"].extract(blob)];
                    case 1:
                        bFile = _s.sent();
                        data.name = bFile.info.Name;
                        data.source = bFile.info.Source;
                        _a = data;
                        _b = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[0].arrayBuffer()];
                    case 2:
                        _a.vertices = new (_b.apply(Float32Array, [void 0, _s.sent()]))();
                        _c = data;
                        _d = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[1].arrayBuffer()];
                    case 3:
                        _c.normals = new (_d.apply(Float32Array, [void 0, _s.sent()]))();
                        _e = data;
                        _f = Int32Array.bind;
                        return [4 /*yield*/, bFile.parts[2].arrayBuffer()];
                    case 4:
                        _e.indices = new (_f.apply(Int32Array, [void 0, _s.sent()]))();
                        _g = data;
                        _h = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].bind;
                        _k = (_j = Array).from;
                        _l = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[3].arrayBuffer()];
                    case 5:
                        _g.boxMin = new (_h.apply(_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"], [void 0, _k.apply(_j, [new (_l.apply(Float32Array, [void 0, _s.sent()]))()])]))();
                        _m = data;
                        _o = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].bind;
                        _q = (_p = Array).from;
                        _r = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[4].arrayBuffer()];
                    case 6:
                        _m.boxMax = new (_o.apply(_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"], [void 0, _q.apply(_p, [new (_r.apply(Float32Array, [void 0, _s.sent()]))()])]))();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return TriangleObj;
}());

/**
 * Class used to compute normals for vertices that join multiple faces
 */
var MultiNormVertex = /** @class */ (function () {
    function MultiNormVertex() {
        this.normals = [];
    }
    /**
     * Stores a normal for this vertex
     *
     * @param normal Stores a normal for the vertex
     */
    MultiNormVertex.prototype.push = function (normal) {
        this.normals.push(normal);
    };
    Object.defineProperty(MultiNormVertex.prototype, "normal", {
        /**
         * Computes the normal by averaging all the individual normals associated with the vertex
         */
        get: function () {
            var n = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]();
            for (var i = 0; i < this.normals.length; i++) {
                n.x += this.normals[i].x;
                n.y += this.normals[i].y;
                n.z += this.normals[i].z;
            }
            n.x /= this.normals.length;
            n.y /= this.normals.length;
            n.z /= this.normals.length;
            return n;
        },
        enumerable: false,
        configurable: true
    });
    return MultiNormVertex;
}());


/***/ }),

/***/ "./src/Util3D/TriangleObjBuilder.ts":
/*!******************************************!*\
  !*** ./src/Util3D/TriangleObjBuilder.ts ***!
  \******************************************/
/*! exports provided: TriangleObjBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjBuilder", function() { return TriangleObjBuilder; });
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Util3D/Vec.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TriangleObjBuilder = /** @class */ (function (_super) {
    __extends(TriangleObjBuilder, _super);
    function TriangleObjBuilder(name) {
        return _super.call(this, name) || this;
    }
    // TODO pass in args for construction
    TriangleObjBuilder.prototype.addArrow = function () {
        var NUM_STEPS = 30;
        var TOTAL_LENGTH = 0.4;
        var ARROW_RADIUS = 0.15;
        var ARROW_LENGTH = 1.5 * ARROW_RADIUS;
        var SHAFT_RADIUS = 0.5 * ARROW_RADIUS;
        var TIP = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        var TIP_BASE = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, ARROW_LENGTH, 0]);
        // build the arrow head
        for (var i = 0; i < NUM_STEPS; i++) {
            var x1 = ARROW_RADIUS * Math.sin(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var y1 = ARROW_LENGTH;
            var z1 = ARROW_RADIUS * Math.cos(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var x2 = ARROW_RADIUS * Math.sin((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var y2 = ARROW_LENGTH;
            var z2 = ARROW_RADIUS * Math.cos((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, y1, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, y2, z2]);
            this.pushTriangle(TIP, p2, p1);
            this.pushTriangle(TIP_BASE, p1, p2);
        }
        // build the arrow shaft
        var END = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, TOTAL_LENGTH, 0]);
        for (var i = 0; i < NUM_STEPS; i++) {
            var x1 = SHAFT_RADIUS * Math.sin(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var z1 = SHAFT_RADIUS * Math.cos(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var x2 = SHAFT_RADIUS * Math.sin((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var z2 = SHAFT_RADIUS * Math.cos((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, ARROW_LENGTH, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, ARROW_LENGTH, z2]);
            var p3 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, TOTAL_LENGTH, z1]);
            var p4 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, TOTAL_LENGTH, z2]);
            this.pushTriangle(p1, p2, p4);
            this.pushTriangle(p1, p4, p3);
            this.pushTriangle(END, p3, p4);
        }
    };
    TriangleObjBuilder.prototype.addSphere = function (numSteps, radius, center) {
        // create an array of vertices
        var vertices = [];
        for (var i = 0; i < numSteps; i++) {
            if (i === 0) {
                vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x, center.y + radius, center.z]));
            }
            else if (i === numSteps - 1) {
                vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x, center.y - radius, center.z]));
            }
            else {
                var y = radius * Math.cos(i / (numSteps - 1) * Math.PI);
                var r = radius * Math.sin(i / (numSteps - 1) * Math.PI);
                var offset = i % 2 ? 0 : ((2 * Math.PI) / numSteps) * 0.5;
                for (var j = 0; j < numSteps; j++) {
                    vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([
                        center.x + r * Math.sin((j / numSteps) * 2 * Math.PI - offset),
                        center.y + y,
                        center.z + r * Math.cos((j / numSteps) * 2 * Math.PI - offset),
                    ]));
                }
            }
        }
        // connect the vertices
        var first = 0;
        var last = vertices.length - 1;
        for (var i = 0; i < numSteps - 1; i++) {
            for (var j = 0; j < numSteps; j++) {
                if (i === 0) {
                    var i1 = first;
                    var i2 = j + 1;
                    var i3 = j === (numSteps - 1) ? 1 : i2 + 1;
                    this.pushTriangle(vertices[i1], vertices[i2], vertices[i3]);
                }
                else if (i === numSteps - 2) {
                    var startIndex = last - numSteps;
                    var i1 = last;
                    var i2 = startIndex + j;
                    var i3 = j === (numSteps - 1) ? startIndex : i2 + 1;
                    this.pushTriangle(vertices[i1], vertices[i3], vertices[i2]);
                }
                else {
                    var startA = 1 + (i - 1) * numSteps;
                    var startB = 1 + i * numSteps;
                    var i1 = startA + j;
                    var i2 = (j === (numSteps - 1)) ? startA : i1 + 1;
                    var i3 = startB + j;
                    var i4 = (j === (numSteps - 1)) ? startB : i3 + 1;
                    if (i % 2) {
                        this.pushTriangle(vertices[i1], vertices[i4], vertices[i2]);
                        this.pushTriangle(vertices[i1], vertices[i3], vertices[i4]);
                    }
                    else {
                        this.pushTriangle(vertices[i1], vertices[i3], vertices[i2]);
                        this.pushTriangle(vertices[i2], vertices[i3], vertices[i4]);
                    }
                }
            }
        }
    };
    TriangleObjBuilder.prototype.addCube = function (size, center) {
        var v1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y - size / 2, center.z - size / 2]);
        var v2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y - size / 2, center.z + size / 2]);
        var v3 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y + size / 2, center.z - size / 2]);
        var v4 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y + size / 2, center.z + size / 2]);
        var v5 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y - size / 2, center.z - size / 2]);
        var v6 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y - size / 2, center.z + size / 2]);
        var v7 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y + size / 2, center.z - size / 2]);
        var v8 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y + size / 2, center.z + size / 2]);
        this.pushQuad(v1, v2, v3, v4);
        this.pushQuad(v5, v7, v6, v8);
        this.pushQuad(v1, v5, v2, v6);
        this.pushQuad(v3, v4, v7, v8);
        this.pushQuad(v1, v3, v5, v7);
        this.pushQuad(v2, v6, v4, v8);
    };
    TriangleObjBuilder.prototype.addDisk = function (numSteps, radius, center) {
        for (var i = 0; i <= numSteps; i++) {
            var x1 = center.x + radius * Math.sin((i / numSteps) * 2 * Math.PI);
            var y1 = center.y;
            var z1 = center.z + radius * Math.cos((i / numSteps) * 2 * Math.PI);
            var x2 = center.x + radius * Math.sin(((i + 1) / numSteps) * 2 * Math.PI);
            var y2 = center.y;
            var z2 = center.z + radius * Math.cos(((i + 1) / numSteps) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, y1, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, y2, z2]);
            this.pushTriangle(center, p1, p2);
        }
    };
    return TriangleObjBuilder;
}(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["TriangleObj"]));



/***/ }),

/***/ "./src/Util3D/TriangleObjFile.ts":
/*!***************************************!*\
  !*** ./src/Util3D/TriangleObjFile.ts ***!
  \***************************************/
/*! exports provided: TriangleObjFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjFile", function() { return TriangleObjFile; });
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TriangleObj */ "./src/Util3D/TriangleObj.ts");
/* harmony import */ var _Util_Profiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Util/Profiler */ "./src/Util/Profiler.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Class that loads a .obj file and creates triangles for it
 */
var TriangleObjFile = /** @class */ (function (_super) {
    __extends(TriangleObjFile, _super);
    function TriangleObjFile(name, src, updateStatus) {
        var _this = _super.call(this, name) || this;
        // record the status function. If one is not supplied, create one that does nothing
        if (!updateStatus) {
            updateStatus = function (status) { };
        }
        _this.parse(src, updateStatus);
        return _this;
    }
    TriangleObjFile.prototype.parseFace = function (line) {
        var ret = {
            iV: [],
            iN: [],
        };
        var tokens = line.match(/\S+/g);
        var numVals = tokens.length - 1;
        for (var i = 0; i < numVals; i++) {
            var vals = tokens[i + 1].split('/');
            ret.iV.push(parseInt(vals[0]) - 1);
            if (vals.length === 3) {
                ret.iN.push(parseInt(vals[2]) - 1);
            }
        }
        return ret;
    };
    TriangleObjFile.prototype.parse = function (src, updateStatus) {
        updateStatus('Processing');
        var t = Date.now();
        var p2 = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_1__["Profiler"]();
        var p = new _Util_Profiler__WEBPACK_IMPORTED_MODULE_1__["Profiler"]();
        var lines = src.split('\n');
        p.log('split');
        var vertices = [];
        var normals = [];
        var vIndices = [];
        var nIndices = [];
        var match = true;
        var containsNormals = true;
        for (var i = 0; i < lines.length; i++) {
            // report progress every 50 ms
            if (Date.now() - t > 50) {
                updateStatus('Processing: ' + (100 * i / lines.length).toFixed() + '%');
                t = Date.now();
            }
            var line = lines[i];
            if (line.startsWith('v ')) {
                var tokens = line.match(/\S+/g);
                vertices.push(parseFloat(tokens[1]));
                vertices.push(parseFloat(tokens[2]));
                vertices.push(parseFloat(tokens[3]));
            }
            else if (line.startsWith('vn ')) {
                var tokens = line.match(/\S+/g);
                normals.push(parseFloat(tokens[1]));
                normals.push(parseFloat(tokens[2]));
                normals.push(parseFloat(tokens[3]));
            }
            else if (line.startsWith('f ')) {
                var ret = this.parseFace(line);
                if (containsNormals) {
                    if (ret.iV.length !== ret.iN.length) {
                        containsNormals = false;
                        console.warn('Normals not specified in file. Flat normals will be computed.');
                    }
                    else if (match) {
                        for (var i_1 = 0; i_1 < ret.iV.length; i_1++) {
                            if (ret.iV[i_1] != ret.iN[i_1]) {
                                console.warn('Vertices and normals don\'t match. Content will be re-indexed');
                                match = false;
                                break;
                            }
                        }
                    }
                }
                if (ret.iV.length === 4) {
                    vIndices.push(ret.iV[0], ret.iV[1], ret.iV[2]);
                    vIndices.push(ret.iV[0], ret.iV[2], ret.iV[3]);
                    if (containsNormals) {
                        nIndices.push(ret.iN[0], ret.iN[1], ret.iN[2]);
                        nIndices.push(ret.iN[0], ret.iN[2], ret.iN[3]);
                    }
                }
                else {
                    vIndices.push(ret.iV[0], ret.iV[1], ret.iV[2]);
                    if (containsNormals) {
                        nIndices.push(ret.iN[0], ret.iN[1], ret.iN[2]);
                    }
                }
            }
        }
        p.log('parse');
        if (match) {
            this.vertices = vertices;
            this.indices = vIndices;
            if (containsNormals) {
                this.normals = normals;
            }
        }
        else {
            this.vertices = [];
            this.normals = [];
            this.indices = [];
            for (var i = 0; i < vIndices.length; i++) {
                this.vertices.push(vertices[3 * vIndices[i] + 0]);
                this.vertices.push(vertices[3 * vIndices[i] + 1]);
                this.vertices.push(vertices[3 * vIndices[i] + 2]);
                this.normals.push(normals[3 * nIndices[i] + 0]);
                this.normals.push(normals[3 * nIndices[i] + 1]);
                this.normals.push(normals[3 * nIndices[i] + 2]);
                this.indices.push(i);
            }
            p.log('reindex');
        }
        if (containsNormals === false) {
            this.computeNormals(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["NormalType"].Flat);
            p.log('compute normals');
        }
        this.findBounds();
        p.log('findBounds');
        p2.log('Total');
        updateStatus('Processing: 100%');
        console.log('Vertices: ' + this.vertices.length);
        console.log('Normals: ' + this.normals.length);
        console.log('Triangles: ' + this.numTriangles);
    };
    return TriangleObjFile;
}(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["TriangleObj"]));



/***/ }),

/***/ "./src/Util3D/Vec.ts":
/*!***************************!*\
  !*** ./src/Util3D/Vec.ts ***!
  \***************************/
/*! exports provided: Vec2, Vec3, Vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec2", function() { return Vec2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec3", function() { return Vec3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec4", function() { return Vec4; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * Vector class for use with WebGL applications.
 */
var Vec = /** @class */ (function () {
    /**
     * @param valuesOrSize If a array, the values for the vector. If a number, the size of the vector.
     */
    function Vec(valuesOrSize) {
        if (valuesOrSize instanceof Array) {
            this.values = __spreadArrays(valuesOrSize);
        }
        else {
            this.values = new Array(valuesOrSize);
            for (var i = 0; i < valuesOrSize; i++) {
                this.values[i] = 0;
            }
        }
    }
    /**
     * Computes the magnitude of the vector.
     *
     * @return The vector magnitude.
     */
    Vec.prototype.magnitude = function () {
        var sum = 0;
        for (var i = 0; i < this.values.length; i++) {
            sum += this.values[i] * this.values[i];
        }
        return Math.sqrt(sum);
    };
    return Vec;
}());
/**
 * An x-y vector.
 */
var Vec2 = /** @class */ (function (_super) {
    __extends(Vec2, _super);
    /**
     * @param vals If supplied, the initial values for the vector
     */
    function Vec2(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 2) || this;
        }
        return _this;
    }
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec2.prototype.clone = function () {
        return new Vec2(this.values);
    };
    Object.defineProperty(Vec2.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec2.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Computes the distance to another point
     *
     * @param other The other point
     * @returns The distance between this point and the other point
     */
    Vec2.prototype.distance = function (other) {
        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));
    };
    return Vec2;
}(Vec));

/**
 * An x-y-z vector.
 */
var Vec3 = /** @class */ (function (_super) {
    __extends(Vec3, _super);
    /**
     * @param vals If supplied, the initial values for the vector
     */
    function Vec3(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 3) || this;
        }
        return _this;
    }
    Object.defineProperty(Vec3, "origin", {
        get: function () {
            return new Vec3([0, 0, 0]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "z", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[2];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[2] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "xy", {
        /**
         * Gets the x-y components as a 2d vec
         *
         * @return the Vec3
         */
        get: function () {
            return new Vec2([this.x, this.y]);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec3.prototype.clone = function () {
        return new Vec3(this.values);
    };
    /**
     * Creates a string representation of the vector
     *
     * @param digits The number of decimal places to display. This value is passed to toFixed().
     * @param divider The string to separate each number.
     * @returns A string representation.
     */
    Vec3.prototype.toString = function (digits, divider) {
        if (digits === void 0) { digits = 2; }
        if (divider === void 0) { divider = ','; }
        return this.x.toFixed(digits) + divider + this.y.toFixed(digits) + divider + this.z.toFixed(digits);
    };
    /**
     * Returns a normalized version of this vector.
     *
     * @returns The resulting normalized vector.
     */
    Vec3.prototype.normalize = function () {
        var mag = this.magnitude();
        if (mag === 0) {
            return new Vec3();
        }
        else {
            return this.mult(1 / mag);
        }
    };
    /**
     * Multiplies members by a value and returns the new vector
     *
     * @param value The multiplication value.
     */
    Vec3.prototype.mult = function (value) {
        return new Vec3([
            this.x * value,
            this.y * value,
            this.z * value,
        ]);
    };
    /**
     * Returns the vector pointing in the opposite direction.
     *
     * @returns The negated vector.
     */
    Vec3.prototype.negate = function () {
        return new Vec3([-this.x, -this.y, -this.z]);
    };
    /**
     * Subtracts values from this vector.
     *
     * @param vec The vector to subtract.
     * @returns The computed vector.
     */
    Vec3.prototype.subtract = function (vec) {
        return new Vec3([
            this.values[0] - vec.values[0],
            this.values[1] - vec.values[1],
            this.values[2] - vec.values[2]
        ]);
    };
    /**
     * Adds values from this vector.
     *
     * @param vec The vector to add.
     * @returns The computed vector.
     */
    Vec3.prototype.add = function (vec) {
        return new Vec3([
            this.values[0] + vec.values[0],
            this.values[1] + vec.values[1],
            this.values[2] + vec.values[2]
        ]);
    };
    /**
     * Computes the cross product of this vector and another vector.
     *
     * @param other The other vector.
     */
    Vec3.prototype.cross = function (other) {
        var A = this.values;
        var B = other.values;
        return new Vec3([
            A[1] * B[2] - A[2] * B[1],
            A[2] * B[0] - A[0] * B[2],
            A[0] * B[1] - A[1] * B[0]
        ]);
    };
    /**
     * Computes the distance from this point to a specified point.
     *
     * @param pt The point.
     * @returns The distance to the point.
     */
    Vec3.prototype.distToPoint = function (pt) {
        return this.subtract(pt).magnitude();
    };
    /**
     * Builds a Vec4 from this Vec3
     *
     * @param w The w component of the new vector.
     * @returns The new vector.
     */
    Vec3.prototype.toVec4 = function (w) {
        return new Vec4([this.x, this.y, this.z, w]);
    };
    return Vec3;
}(Vec));

/**
 * An x-y-z-w vector.
 */
var Vec4 = /** @class */ (function (_super) {
    __extends(Vec4, _super);
    /**
     * @param vals If supplied, the initial values for the vector.
     */
    function Vec4(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 4) || this;
        }
        return _this;
    }
    Object.defineProperty(Vec4.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "z", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[2];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[2] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "w", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[3];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[3] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "xyz", {
        /**
         * Gets the x-y-z components as a 3d vec
         *
         * @return the Vec3
         */
        get: function () {
            return new Vec3([this.x, this.y, this.z]);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec4.prototype.clone = function () {
        return new Vec4(this.values);
    };
    /**
     * Returns an x-y-z vector where each element is computed by dividing this vectors
     * elements by the w value.
     *
     * @returns An x-y-z vector.
     */
    Vec4.prototype.divideByW = function () {
        var w = this.values[3];
        return new Vec3([
            this.values[0] / w,
            this.values[1] / w,
            this.values[2] / w
        ]);
    };
    /**
     * Normalizes this vector, and stores and returns the result.
     *
     * @returns The resulting normalized vector.
     */
    Vec4.prototype.normalize = function () {
        var mag = this.magnitude();
        var ret = this.clone();
        if (mag !== 0) {
            for (var i = 0; i < this.values.length; i++) {
                ret.values[i] /= mag;
            }
        }
        return ret;
    };
    /**
     * Creates a Vec4 from a Vec3 object
     *
     * @param vec The Vec3 object
     * @param w The w value for the Vec4
     */
    Vec4.fromVec3 = function (vec, w) {
        return new Vec4([vec.x, vec.y, vec.z, 1]);
    };
    return Vec4;
}(Vec));



/***/ }),

/***/ "./src/gl/glAttributeBuffer.ts":
/*!*************************************!*\
  !*** ./src/gl/glAttributeBuffer.ts ***!
  \*************************************/
/*! exports provided: glAttributeBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glAttributeBuffer", function() { return glAttributeBuffer; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");

/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glAttributeBuffer = /** @class */ (function () {
    function glAttributeBuffer(glCtx, program, attributeName) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.buffer = gl.createBuffer();
        this.attributeLocation = gl.getAttribLocation(program, attributeName);
    }
    glAttributeBuffer.prototype.delete = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
        this.attributeLocation = undefined;
    };
    glAttributeBuffer.prototype.upload = function (values) {
        var gl = this.gl;
        this.bind();
        if (values instanceof Float32Array) {
            gl.bufferData(gl.ARRAY_BUFFER, values, gl.STATIC_DRAW);
        }
        else {
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(values), gl.STATIC_DRAW);
        }
    };
    glAttributeBuffer.prototype.bind = function (size) {
        if (size === void 0) { size = 3; }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.enableVertexAttribArray(this.attributeLocation);
        gl.vertexAttribPointer(this.attributeLocation, size, // size
        gl.FLOAT, // type
        false, // normalized
        0, // stride
        0 // offset
        );
    };
    return glAttributeBuffer;
}());



/***/ }),

/***/ "./src/gl/glBuffer.ts":
/*!****************************!*\
  !*** ./src/gl/glBuffer.ts ***!
  \****************************/
/*! exports provided: glBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glBuffer", function() { return glBuffer; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");

/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glBuffer = /** @class */ (function () {
    function glBuffer(glCtx, program, attributeName) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.buffer = gl.createBuffer();
        this.attributeLocation = gl.getAttribLocation(program, attributeName);
    }
    glBuffer.prototype.delete = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
        this.attributeLocation = undefined;
    };
    glBuffer.prototype.upload = function (vertices) {
        var gl = this.gl;
        this.bind();
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    };
    glBuffer.prototype.bind = function (size) {
        if (size === void 0) { size = 3; }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.enableVertexAttribArray(this.attributeLocation);
        gl.vertexAttribPointer(this.attributeLocation, size, // size - 2,3 or 4 values per vertex
        gl.FLOAT, // type
        false, // normalized
        0, // stride
        0 // offset
        );
    };
    return glBuffer;
}());



/***/ }),

/***/ "./src/gl/glColor.ts":
/*!***************************!*\
  !*** ./src/gl/glColor.ts ***!
  \***************************/
/*! exports provided: glColor3, glColor4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColor3", function() { return glColor3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColor4", function() { return glColor4; });
/* harmony import */ var _Util_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Util/Color */ "./src/Util/Color.ts");
/* harmony import */ var _Util_Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Util/Globals */ "./src/Util/Globals.ts");
/* harmony import */ var _Util_htmlColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Util/htmlColor */ "./src/Util/htmlColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Color class that requires RGB values to be between 0 and 1
 */
var glColor3 = /** @class */ (function (_super) {
    __extends(glColor3, _super);
    /**
     * @param color An RGB color array
     */
    function glColor3(color) {
        var _this = this;
        if (color.length != 3) {
            throw new Error("Invalid color array length (expected 3 elements)");
        }
        if (color[0] < 0 || color[0] > 1) {
            throw new Error("Invalid color 'r' value (expected [0-1])");
        }
        if (color[1] < 0 || color[1] > 1) {
            throw new Error("Invalid color 'g' value (expected [0-1])");
        }
        if (color[2] < 0 || color[2] > 1) {
            throw new Error("Invalid color 'b' value (expected [0-1])");
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    /**
     * Creates an glColor object using values in a Color object.
     *
     * @param color A generic Color object.
     */
    glColor3.fromColor = function (color) {
        var r = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(color.r, 0, 1);
        var g = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(color.g, 0, 1);
        var b = Object(_Util_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(color.b, 0, 1);
        return new glColor3([r, g, b]);
    };
    /**
     * Returns the lighter of two colors
     *
     * @param c1 The first color.
     * @param c2 The second color.
     * @returns The lightest color.
     */
    glColor3.lightest = function (c1, c2) {
        // TODO: use luminosity instead?
        if (c1.r + c1.g + c1.b > c2.r + c2.g + c2.b) {
            return c1;
        }
        else {
            return c2;
        }
    };
    /**
     * Returns the darker of two colors
     *
     * @param c1 The first color.
     * @param c2 The second color.
     * @returns The darkest color.
     */
    glColor3.darkest = function (c1, c2) {
        // TODO: use luminosity instead?
        if (c1.r + c1.g + c1.b < c2.r + c2.g + c2.b) {
            return c1;
        }
        else {
            return c2;
        }
    };
    /**
     * Converts this object to an html color object (0-255 based).
     *
     * @returns An htmlColor object.
     */
    glColor3.prototype.toHtmlColor = function () {
        var r = Math.round(255 * this.r);
        var g = Math.round(255 * this.g);
        var b = Math.round(255 * this.b);
        return new _Util_htmlColor__WEBPACK_IMPORTED_MODULE_2__["htmlColor"]([r, g, b]);
    };
    glColor3.modelWhite = new glColor3([255 / 255, 250 / 255, 242 / 255]);
    glColor3.modelBlack = new glColor3([0, 0, 0]);
    return glColor3;
}(_Util_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));

/**
 * Color class that requires RGBA values to be between 0 and 1
 */
var glColor4 = /** @class */ (function (_super) {
    __extends(glColor4, _super);
    /**
     * @param color An RGB color array
     */
    function glColor4(color) {
        var _this = this;
        if (color.length != 4) {
            throw new Error("Invalid color array length (expected 4 elements)");
        }
        if (color[0] < 0 || color[0] > 1) {
            throw new Error("Invalid color 'r' value (expected [0-1])");
        }
        if (color[1] < 0 || color[1] > 1) {
            throw new Error("Invalid color 'g' value (expected [0-1])");
        }
        if (color[2] < 0 || color[2] > 1) {
            throw new Error("Invalid color 'b' value (expected [0-1])");
        }
        if (color[3] < 0 || color[3] > 1) {
            throw new Error("Invalid color 'a' value (expected [0-1])");
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    return glColor4;
}(_Util_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));



/***/ }),

/***/ "./src/gl/glColorWithTemperature.ts":
/*!******************************************!*\
  !*** ./src/gl/glColorWithTemperature.ts ***!
  \******************************************/
/*! exports provided: glColorWithTemperature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColorWithTemperature", function() { return glColorWithTemperature; });
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glColor */ "./src/gl/glColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Class that adds temperature to a Color object
 */
var glColorWithTemperature = /** @class */ (function (_super) {
    __extends(glColorWithTemperature, _super);
    /**
     * @param color An RGB color array
     * @param temperature Temperature in Kelvin
     */
    function glColorWithTemperature(color, temperature) {
        var _this = _super.call(this, color) || this;
        _this._temperature = temperature;
        return _this;
    }
    Object.defineProperty(glColorWithTemperature.prototype, "temperature", {
        /**
         * Gets the temperature in Kelvin
         */
        get: function () {
            return this._temperature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "daylight", {
        get: function () {
            return this.create(6000);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "minTemperature", {
        /**
         * Gets the minimum supported temperature.
         *
         * @returns temperature value in Kelvin.
         */
        get: function () {
            return this.colors[0].temperature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "maxTemperature", {
        /**
         * Gets the maximum supported temperature.
         *
         * @returns temperature value in Kelvin.
         */
        get: function () {
            return this.colors[this.colors.length - 1].temperature;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets a Color matching the specified temperature.
     *
     * @returns temperature value in Kelvin.
     */
    glColorWithTemperature.create = function (temperature) {
        if (temperature <= this.minTemperature) {
            return this.colors[0];
        }
        else if (temperature >= this.maxTemperature) {
            return this.colors[this.colors.length - 1];
        }
        else {
            for (var i = 0; i < this.colors.length - 1; i++) {
                var color1 = this.colors[i];
                var color2 = this.colors[i + 1];
                if (temperature >= color1.temperature && temperature <= color2.temperature) {
                    var ratio = (temperature - color1.temperature) / (color2.temperature - color1.temperature);
                    var r = color1.r + ratio * (color2.r - color1.r);
                    var g = color1.g + ratio * (color2.g - color1.g);
                    var b = color1.b + ratio * (color2.b - color1.b);
                    return new glColorWithTemperature([r, g, b], temperature);
                }
            }
            // shouldn't get here, but if we do, return the last color
            return this.colors[this.colors.length - 1];
        }
    };
    /**
     * Known color values. For other requests the class will return interpolated values
     */
    glColorWithTemperature.colors = [
        new glColorWithTemperature([255 / 255, 147 / 255, 41 / 255], 1900),
        new glColorWithTemperature([255 / 255, 197 / 255, 143 / 255], 2600),
        new glColorWithTemperature([255 / 255, 214 / 255, 170 / 255], 2850),
        new glColorWithTemperature([255 / 255, 241 / 255, 224 / 255], 3200),
        new glColorWithTemperature([255 / 255, 250 / 255, 244 / 255], 5200),
        new glColorWithTemperature([255 / 255, 255 / 255, 251 / 255], 5400),
        new glColorWithTemperature([255 / 255, 255 / 255, 255 / 255], 6000),
        new glColorWithTemperature([201 / 255, 226 / 255, 255 / 255], 7000),
        new glColorWithTemperature([64 / 255, 156 / 255, 255 / 255], 20000),
    ];
    return glColorWithTemperature;
}(_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]));



/***/ }),

/***/ "./src/gl/glFrameBuffer.ts":
/*!*********************************!*\
  !*** ./src/gl/glFrameBuffer.ts ***!
  \*********************************/
/*! exports provided: glFrameBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glFrameBuffer", function() { return glFrameBuffer; });
/* harmony import */ var _glTexture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glTexture */ "./src/gl/glTexture.ts");

/**
 * Lightweight WebGL wrapper for a framebuffer
 */
var glFrameBuffer = /** @class */ (function () {
    /**
     * Create a frame buffer
     *
     * @param glCtx The WebGL context
     * @param width The width (in pixels) of the rendering (must be power of 2)
     * @param height The height (in pixels) of the rendering (must be power of 2)
     */
    function glFrameBuffer(glCtx, width, height) {
        this.gl = null;
        this.gl = glCtx;
        this.width = width;
        this.height = height;
        var gl = this.gl;
        this.frameBuffer = gl.createFramebuffer();
    }
    Object.defineProperty(glFrameBuffer.prototype, "size", {
        /**
         * Gets the larger of the width or height
         */
        get: function () {
            return Math.max(this.width, this.height);
        },
        enumerable: false,
        configurable: true
    });
    glFrameBuffer.prototype.delete = function () {
        var gl = this.gl;
        if (this.frameBuffer) {
            gl.deleteFramebuffer(this.frameBuffer);
            this.frameBuffer = null;
        }
    };
    glFrameBuffer.prototype.get = function () {
        return this.frameBuffer;
    };
    glFrameBuffer.prototype.bind = function () {
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
    };
    glFrameBuffer.prototype.createTexture = function (style) {
        return new _glTexture__WEBPACK_IMPORTED_MODULE_0__["glTexture"](this.gl, this.width, this.height, style);
    };
    glFrameBuffer.prototype.attachTexture = function (attachment, texture) {
        if (texture instanceof _glTexture__WEBPACK_IMPORTED_MODULE_0__["glTexture"]) {
            texture = texture.get();
        }
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);
    };
    glFrameBuffer.prototype.check = function () {
        var gl = this.gl;
        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status !== gl.FRAMEBUFFER_COMPLETE) {
            var msg = "The created frame buffer is invalid: " + status.toString();
            alert(msg);
            console.log(msg);
        }
    };
    return glFrameBuffer;
}());



/***/ }),

/***/ "./src/gl/glIndexBuffer.ts":
/*!*********************************!*\
  !*** ./src/gl/glIndexBuffer.ts ***!
  \*********************************/
/*! exports provided: glIndexBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glIndexBuffer", function() { return glIndexBuffer; });
/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glIndexBuffer = /** @class */ (function () {
    function glIndexBuffer(glCtx) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        this.buffer = gl.createBuffer();
    }
    glIndexBuffer.prototype.delete = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
    };
    glIndexBuffer.prototype.upload = function (values) {
        var gl = this.gl;
        this.bind();
        if (values instanceof Int32Array) {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, values, gl.STATIC_DRAW);
        }
        else {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int32Array(values), gl.STATIC_DRAW);
        }
    };
    glIndexBuffer.prototype.bind = function () {
        var gl = this.gl;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
    };
    return glIndexBuffer;
}());



/***/ }),

/***/ "./src/gl/glProgram.ts":
/*!*****************************!*\
  !*** ./src/gl/glProgram.ts ***!
  \*****************************/
/*! exports provided: glProgram */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glProgram", function() { return glProgram; });
/**
 * Utility wrapper for compiling WebGL shader programs
 */
var glProgram = /** @class */ (function () {
    /**
     * Compiles and links vertex and fragment shaders into a program
     *
     * @param gl The WebGL context
     * @param vertexSource Vertex shader source
     * @param fragmentSource Fragment shader source
     * @returns the program id
     * @throws if the compilation fails
     */
    function glProgram(gl, vertexSource, fragmentSource) {
        this.gl = gl;
        this.compile(vertexSource, fragmentSource);
    }
    /**
     * Gets the underlying WebGLProgram
     *
     * @return the WebGLProgram
     */
    glProgram.prototype.get = function () {
        return this.program;
    };
    /**
     * Calls useProgram() for this program
     */
    glProgram.prototype.use = function () {
        var gl = this.gl;
        gl.useProgram(this.program);
    };
    /**
     * Compiles a shader program
     *
     * @param gl The WebGL context
     * @param source The source code
     * @param type The shader type
     * @throws if the compilation fails
     */
    glProgram.prototype.compileShader = function (source, type) {
        var gl = this.gl;
        var shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.log(source);
            var err = gl.getShaderInfoLog(shader);
            console.error(err);
            throw 'compile error: ' + err;
        }
        return shader;
    };
    glProgram.prototype.delete = function () {
        var gl = this.gl;
        gl.deleteProgram(this.program);
        this.program = null;
    };
    /**
     * Compiles and links vertex and fragment shaders into a program
     *
     * @param vertexSource Vertex shader source
     * @param fragmentSource Fragment shader source
     * @returns the program id
     * @throws if the compilation fails
     */
    glProgram.prototype.compile = function (vertexSource, fragmentSource) {
        var gl = this.gl;
        this.program = gl.createProgram();
        gl.attachShader(this.program, this.compileShader(vertexSource, gl.VERTEX_SHADER));
        gl.attachShader(this.program, this.compileShader(fragmentSource, gl.FRAGMENT_SHADER));
        gl.linkProgram(this.program);
        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
            var err = gl.getProgramInfoLog(this.program);
            console.error(err);
            throw 'link error: ' + err;
        }
    };
    return glProgram;
}());



/***/ }),

/***/ "./src/gl/glSpace.ts":
/*!***************************!*\
  !*** ./src/gl/glSpace.ts ***!
  \***************************/
/*! exports provided: glSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glSpace", function() { return glSpace; });
/**
 * Utility for holding a clip space. Can be used to hold the viewing space
 * or clip space.
 */
var glSpace = /** @class */ (function () {
    function glSpace(min, max) {
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(glSpace.prototype, "left", {
        get: function () {
            return this.min.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "right", {
        get: function () {
            return this.max.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "top", {
        get: function () {
            return this.max.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "bottom", {
        get: function () {
            return this.min.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "near", {
        get: function () {
            return this.min.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "far", {
        get: function () {
            return this.max.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "width", {
        get: function () {
            return Math.abs(this.max.x - this.min.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "height", {
        get: function () {
            return Math.abs(this.max.y - this.min.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "depth", {
        get: function () {
            return Math.abs(this.max.z - this.min.z);
        },
        enumerable: false,
        configurable: true
    });
    return glSpace;
}());



/***/ }),

/***/ "./src/gl/glTexture.ts":
/*!*****************************!*\
  !*** ./src/gl/glTexture.ts ***!
  \*****************************/
/*! exports provided: glTextureStyle, glTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glTextureStyle", function() { return glTextureStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glTexture", function() { return glTexture; });
var glTextureStyle;
(function (glTextureStyle) {
    glTextureStyle[glTextureStyle["Color"] = 0] = "Color";
    glTextureStyle[glTextureStyle["Depth"] = 1] = "Depth";
    glTextureStyle[glTextureStyle["Float"] = 2] = "Float";
})(glTextureStyle || (glTextureStyle = {}));
/**
 * Lightweight WebGL wrapper for a texture
 */
var glTexture = /** @class */ (function () {
    /**
     * Create a frame buffer for rendering into texture objects.
     *
     * @param glCtx The WebGL context
     * @param width The width (in pixels) of the rendering (must be power of 2)
     * @param height The height (in pixels) of the rendering (must be power of 2)
     */
    function glTexture(glCtx, width, height, style) {
        this.gl = null;
        this.gl = glCtx;
        this.width = width;
        this.height = height;
        switch (style) {
            case glTextureStyle.Color:
                this.createColor(width, height);
                break;
            case glTextureStyle.Depth:
                this.createDepth(width, height);
                break;
            case glTextureStyle.Float:
                this.createFloat(width, height);
                break;
        }
    }
    glTexture.prototype.delete = function () {
        var gl = this.gl;
        if (this.texture) {
            gl.deleteTexture(this.texture);
            this.texture = null;
        }
    };
    glTexture.prototype.createColor = function (width, height) {
        var gl = this.gl;
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        gl.RGBA, // internal format
        width, // width
        height, // height
        0, // border
        gl.RGBA, // format
        gl.UNSIGNED_BYTE, // type
        null // pixels
        );
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    glTexture.prototype.createDepth = function (width, height) {
        var gl = this.gl;
        var depth_texture_extension = gl.getExtension('WEBGL_depth_texture');
        if (!depth_texture_extension) {
            alert('This WebGL program requires the use of the WEBGL_depth_texture extension.');
            return;
        }
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        gl.DEPTH_COMPONENT, // internal format
        width, // width
        height, // height
        0, // border
        gl.DEPTH_COMPONENT, // format
        gl.UNSIGNED_INT, // type
        null // pixels
        );
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    glTexture.prototype.createFloat = function (width, height) {
        var gl = this.gl;
        var internalFormat;
        var format;
        var type;
        // create textures
        if (gl instanceof WebGLRenderingContext) {
            var ext = gl.getExtension('OES_texture_half_float');
            if (ext) {
                // Thanks Apple. Always got to do things a little differently
                internalFormat = gl.RGBA;
                format = gl.RGBA;
                type = ext.HALF_FLOAT_OES;
            }
            else {
                // No floating point textures? really fall back to unsigned bytes
                internalFormat = gl.RGBA;
                format = gl.RGBA;
                type = gl.UNSIGNED_BYTE;
            }
        }
        // Typescript doesn't let you do an 'else if' here and when WebGL2 is
        // not supported, we get an exception, so thus the try-catch
        // see: https://stackoverflow.com/questions/45381122/typescript-type-narrowed-to-never-with-instanceof-in-an-if-else-statement
        try {
            if (gl instanceof WebGL2RenderingContext) {
                gl.getExtension('EXT_color_buffer_float');
                internalFormat = gl.RGBA32F;
                format = gl.RGBA;
                type = gl.FLOAT;
            }
        }
        catch (error) {
        }
        // create two textures. One we display and one we draw to
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        internalFormat, // internal format
        width, // width
        height, // height
        0, // border
        format, // format
        type, // type
        null // pixels
        );
        gl.bindTexture(gl.TEXTURE_2D, null);
    };
    glTexture.prototype.get = function () {
        return this.texture;
    };
    glTexture.prototype.bind = function () {
        var gl = this.gl;
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
    };
    return glTexture;
}());



/***/ }),

/***/ "./src/gl/glUniform.ts":
/*!*****************************!*\
  !*** ./src/gl/glUniform.ts ***!
  \*****************************/
/*! exports provided: glUniform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glUniform", function() { return glUniform; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");
/* harmony import */ var _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Util3D/Vec */ "./src/Util3D/Vec.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glColor */ "./src/gl/glColor.ts");
/* harmony import */ var _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Util3D/Mat */ "./src/Util3D/Mat.ts");




/**
 * Utility class for setting uniform values in a shader
 */
var glUniform = /** @class */ (function () {
    /**
     * Creates an object for setting values and calls gl.useProgram
     *
     * @param glCtx The WebGL context
     * @param program The program associated with the uniform values
     */
    function glUniform(glCtx, program) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.program = program;
        gl.useProgram(program);
    }
    /**
     * Sets a uniform value
     *
     * @param name The variable name
     * @param value The value
     * @param int If true and the value is a number, it is treated as an integer
     */
    glUniform.prototype.set = function (name, value, int) {
        if (int === void 0) { int = false; }
        var gl = this.gl;
        var loc = gl.getUniformLocation(this.program, name);
        if (loc) {
            if (value instanceof _Util3D_Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]) {
                gl.uniform3fv(loc, new Float32Array(value.values));
            }
            else if (value instanceof _glColor__WEBPACK_IMPORTED_MODULE_2__["glColor3"]) {
                gl.uniform3fv(loc, new Float32Array([value.r, value.g, value.b]));
            }
            else if (value instanceof _glColor__WEBPACK_IMPORTED_MODULE_2__["glColor4"]) {
                gl.uniform4fv(loc, new Float32Array([value.r, value.g, value.b, value.a]));
            }
            else if (value instanceof _Util3D_Mat__WEBPACK_IMPORTED_MODULE_3__["Mat4"]) {
                gl.uniformMatrix4fv(loc, false, new Float32Array(value.transpose().values));
            }
            else if (value instanceof Boolean || typeof (value) === 'boolean') {
                gl.uniform1i(loc, value ? 1.0 : 0.0);
            }
            else if (name === "uMode") {
                gl.uniform1i(loc, value);
            }
            else {
                if (int) {
                    gl.uniform1i(loc, value);
                }
                else {
                    gl.uniform1f(loc, value);
                }
            }
        }
    };
    /**
     * Sets an integer uniform value (same as set(name, value, true))
     *
     * @param name The variable name
     * @param value The value
     */
    glUniform.prototype.seti = function (name, value) {
        this.set(name, value, true);
    };
    /**
     * Sets all values for variables stored as members of an object
     *
     * @param uniforms The object with member values
     */
    glUniform.prototype.setAll = function (uniforms) {
        for (var name in uniforms) {
            var value = uniforms[name];
            this.set(name, value);
        }
    };
    return glUniform;
}());



/***/ }),

/***/ "./src/gl/glUniformBlock.ts":
/*!**********************************!*\
  !*** ./src/gl/glUniformBlock.ts ***!
  \**********************************/
/*! exports provided: glUniformBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glUniformBlock", function() { return glUniformBlock; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/gl/glProgram.ts");

var glUniformBlock = /** @class */ (function () {
    function glUniformBlock(glCtx, program, blockName, blockBinding) {
        this.gl2 = null;
        this.gl2 = glCtx;
        var gl2 = this.gl2;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.blockLocation = gl2.getUniformBlockIndex(program, blockName);
        gl2.uniformBlockBinding(program, this.blockLocation, blockBinding);
        this.blockBuffer = gl2.createBuffer();
        gl2.bindBufferBase(gl2.UNIFORM_BUFFER, blockBinding, this.blockBuffer);
    }
    glUniformBlock.prototype.delete = function () {
        var gl2 = this.gl2;
        gl2.deleteBuffer(this.blockBuffer);
    };
    glUniformBlock.prototype.upload = function (data) {
        var gl2 = this.gl2;
        gl2.bindBuffer(gl2.UNIFORM_BUFFER, this.blockBuffer);
        gl2.bufferData(gl2.UNIFORM_BUFFER, data, gl2.STATIC_DRAW);
        gl2.bindBuffer(gl2.UNIFORM_BUFFER, null);
    };
    return glUniformBlock;
}());



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/styles.css */ "./src/styles/styles.css");
/* harmony import */ var _styles_styles_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_styles_styles_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Launcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Launcher */ "./src/Launcher.ts");


window.onload = function () {
    var app = new _Launcher__WEBPACK_IMPORTED_MODULE_1__["Launcher"]();
};


/***/ }),

/***/ "./src/shaders/PathTracerToScreenFragment.glsl":
/*!*****************************************************!*\
  !*** ./src/shaders/PathTracerToScreenFragment.glsl ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\r\nvarying vec2 texCoord;\r\nuniform sampler2D uTexture;\r\nuniform int uMode;\r\nuniform float uMaxChroma;\r\n\r\nuniform vec3 uHighlightColor;\r\nuniform vec3 uLightLightColor;\r\nuniform vec3 uMidLightColor;\r\nuniform vec3 uDarkLightColor;\r\n\r\nuniform vec3 uShadowColor;\r\nuniform vec3 uReflectedLightColor;\r\nuniform vec3 uDarkAccentColor;\r\n\r\nuniform float uShadowAlpha;\r\nuniform float uLightAlpha;\r\n\r\n#define MODE_SCIENCE 0\r\n#define MODE_VALUE 1\r\n#define MODE_CHROMA 2\r\n#define MODE_BANDS 3\r\n\r\nvec4 white = vec4(1.0, 1.0, 1.0, 1.0);\r\nvec4 red = vec4(1.0, 0.0, 0.0, 1.0);\r\nvec4 orange = vec4(1.0, 0.65, 0.0, 1.0);\r\nvec4 yellow = vec4(1.0, 1.0, 0.0, 1.0);\r\nvec4 green = vec4(0.0, 1.0, 0.0, 1.0);\r\nvec4 cyan = vec4(0.0, 1.0, 1.0, 1.0);\r\nvec4 blue = vec4(0.0, 0.0, 1.0, 1.0);\r\nvec4 black = vec4(0.0, 0.0, 0.0, 1.0);\r\n#define NUM_COLORS 6\r\nvec4 colors[NUM_COLORS];\r\n\r\nvec4 value2Color(float value)\r\n{\r\n   float span = 1.0 / float(NUM_COLORS - 1);\r\n   value *= float(NUM_COLORS - 1);\r\n   if (value < 0.0)\r\n   {\r\n      return colors[0];\r\n   }\r\n   else if (value < 1.0)\r\n   {\r\n      return colors[0] + value * (colors[1] - colors[0]);\r\n   }\r\n   else if (value < 2.0)\r\n   {\r\n      return colors[1] + (value - 1.0) * (colors[2] - colors[1]);\r\n   }\r\n   else if (value < 3.0)\r\n   {\r\n      return colors[2] + (value - 2.0) * (colors[3] - colors[2]);\r\n   }\r\n   else if (value < 4.0)\r\n   {\r\n      return colors[3] + (value - 3.0) * (colors[4] - colors[3]);\r\n   }\r\n   else if (value < 5.0)\r\n   {\r\n      return colors[4] + (value - 4.0) * (colors[5] - colors[4]);\r\n   }\r\n   /*\r\n   else if (value < 6.0)\r\n   {\r\n      return colors[5] + (value - 5.0) * (colors[6] - colors[5]);\r\n   }\r\n   */\r\n   else\r\n   {\r\n      return colors[NUM_COLORS - 1];\r\n   }\r\n}\r\n\r\nfloat toGray(vec4 c)\r\n{\r\n   // lots of ways to convert RGB to gray scale.\r\n\r\n   // simple averaging method\r\n   // return (c.r + c.g + c.b) / 3.0;\r\n\r\n   // relative perceptual values\r\n   // return 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\r\n\r\n   // luminosity measure\r\n   float gamma = 2.2;\r\n   float y = 0.2126 * pow(c.r, gamma) + 0.7152 * pow(c.g, gamma) + .0722 * pow(c.b, gamma);\r\n   float l = 116.0 * pow(y, 1.0 / 3.0) - 16.0;\r\n   return l / 100.0;\r\n}\r\n\r\nvec4 renderAsValue()\r\n{\r\n   vec4 color = texture2D(uTexture, texCoord);\r\n   float rgb = toGray(color);\r\n   return vec4(rgb, rgb, rgb, 1.0);\r\n}\r\n\r\nvec4 renderAsChroma()\r\n{\r\n   vec4 color = texture2D(uTexture, texCoord);\r\n\r\n   // render the scale as a bar on the left\r\n   if (texCoord.x < 0.03)\r\n   {\r\n      return value2Color((texCoord.y - 0.1) / 0.9);\r\n   }\r\n   else\r\n   {\r\n      if (color.a >= uShadowAlpha)\r\n      {\r\n         float avg = (color.r + color.g + color.b) / 3.0;\r\n         float rgb = (abs(avg - color.r) + abs(avg - color.g) + abs(avg - color.b)) / (4.0 / 3.0);\r\n         return value2Color(rgb / uMaxChroma);\r\n      }\r\n      else\r\n      {\r\n         return vec4(0.0, 0.0, 0.0, 1.0);\r\n      }\r\n   }\r\n}\r\n\r\nfloat d2(vec3 c1, vec3 c2)\r\n{\r\n   // sum the squares of the differences\r\n   return pow(c1.r - c2.r, 2.0) + pow(c1.g - c2.g, 2.0) + pow(c1.b - c2.b, 2.0);\r\n}\r\n\r\nvec3 closest(vec3 color, vec3 light, vec3 mid, vec3 dark)\r\n{\r\n   float dlight = d2(color, light);\r\n   float dmid = d2(color, mid);\r\n   float ddark = d2(color, dark);\r\n\r\n   float dmin = min(dlight, min(dmid, ddark));\r\n   if (dmin == dlight)\r\n   {\r\n      return light;\r\n   }\r\n   else if (dmin == dmid)\r\n   {\r\n      return mid;\r\n   }\r\n   else\r\n   {\r\n      return dark;\r\n   }\r\n}\r\n\r\nvec4 renderAsBands()\r\n{\r\n   float size = 0.07;\r\n   float margin = (1.0 - 6.0 * size) / 2.0;\r\n   if (texCoord.x < size && texCoord.y > margin && texCoord.y < (1.0 - margin))\r\n   {\r\n      if (texCoord.y < (margin + 1.0 * size))\r\n      {\r\n         return vec4(uDarkAccentColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 2.0 * size))\r\n      {\r\n         return vec4(uShadowColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 3.0 * size))\r\n      {\r\n         return vec4(uDarkLightColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 4.0 * size))\r\n      {\r\n         return vec4(uMidLightColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 5.0 * size))\r\n      {\r\n         return vec4(uLightLightColor, 1.0);\r\n      }\r\n      else // if (texCoord.y < (margin + 7.0 * size))\r\n      {\r\n         return vec4(uHighlightColor, 1.0);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      vec4 color = texture2D(uTexture, texCoord);\r\n\r\n      // define the terminator as the point where things are 50% in shadow\r\n      float terminator = ((uShadowAlpha + uLightAlpha) / 2.0);\r\n      if (color.a > 1.0 && color.a <= terminator)\r\n      {\r\n         vec3 c = closest(color.rgb, uShadowColor, uReflectedLightColor, uDarkAccentColor);\r\n         return vec4(c, 1.0);\r\n      }\r\n      else if (color.a > terminator)\r\n      {\r\n         // only render the highlight where it's contribution is significant, i.e. greater\r\n         // than some threshold\r\n         const float SPECULAR_THRESHOLD = 0.1;\r\n         if (color.a > (uLightAlpha + SPECULAR_THRESHOLD))\r\n         {\r\n            return vec4(uHighlightColor, 1.0);\r\n         }\r\n         else\r\n         {\r\n            vec3 c = closest(color.rgb, uLightLightColor, uMidLightColor, uDarkLightColor);\r\n            return vec4(c, 1.0);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         return color;\r\n      }\r\n   }\r\n}\r\n\r\nvec4 renderAsScience()\r\n{\r\n   // just return the texture\r\n   return texture2D(uTexture, texCoord);\r\n}\r\n\r\nvoid main()\r\n{\r\n   colors[0] = black;\r\n   colors[1] = blue;\r\n   colors[2] = green;\r\n   colors[3] = yellow;\r\n   colors[4] = orange;\r\n   colors[5] = red;\r\n\r\n   if (uMode == MODE_VALUE)\r\n   {\r\n      gl_FragColor = renderAsValue();\r\n   }\r\n   else if (uMode == MODE_CHROMA)\r\n   {\r\n      gl_FragColor = renderAsChroma();\r\n   }\r\n   else if (uMode == MODE_BANDS)\r\n   {\r\n      gl_FragColor = renderAsBands();\r\n   }\r\n   else\r\n   {\r\n      gl_FragColor = renderAsScience();\r\n   }\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/PathTracerToScreenVertex.glsl":
/*!***************************************************!*\
  !*** ./src/shaders/PathTracerToScreenVertex.glsl ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("attribute vec3 vertex;\r\nvarying vec2 texCoord;\r\nuniform float uScale;\r\nuniform float uXOffset;\r\nuniform float uYOffset;\r\n\r\nvoid main()\r\n{\r\n   texCoord = vertex.xy * 0.5 + 0.5;\r\n\r\n   gl_Position = vec4(uScale * vertex.x + uXOffset, uScale * vertex.y + uYOffset, 0.0, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/PathTracerToTextureFragment.glsl":
/*!******************************************************!*\
  !*** ./src/shaders/PathTracerToTextureFragment.glsl ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<VERSION>\r\n\r\n#define NOTHING\r\n\r\n#ifdef USE_TRIANGLES\r\n#define ES300\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n#ifdef ES300\r\nin vec3 initialRay;\r\n#else\r\nvarying vec3 initialRay;\r\n#endif\r\n\r\nuniform vec3 uEye;\r\nuniform float uTextureSize;\r\nuniform float uRandom;\r\nuniform sampler2D uTexture;\r\nuniform vec3 uLightPos;\r\nuniform float uLightIntensity;\r\nuniform vec3 uLightColor;\r\nuniform float uAmbientLightIntensity;\r\nuniform vec3 uObjColor;\r\nuniform float uBallRadius;\r\nuniform float uSample;\r\nuniform float uLightAlpha;\r\nuniform float uShadowAlpha;\r\n\r\n#ifdef ES300\r\nout vec4 fragColor;\r\n#else\r\n#define fragColor gl_FragColor\r\n#define texture texture2D\r\n#endif\r\n\r\nconst int MAX_BOUNCES = 10;\r\nconst float EPSILON = 0.000001;\r\nconst float OFFSET = 0.0001;\r\nconst float INFINITY = 10000.0;\r\nconst float LIGHT_SIZE = 0.1;\r\n#define BALL_CENTER vec3(0, uBallRadius, 0)\r\nconst vec3 DOME_CENTER = vec3(0, 0, 0);\r\nconst float DOME_RADIUS = 8.0;\r\nconst float VAL = 0.8;\r\nconst vec3 DOME_COLOR = vec3(VAL, VAL, VAL);\r\nconst vec3 FLOOR_COLOR = vec3(VAL, VAL, VAL);\r\nconst vec3 AMBIENT_COLOR = vec3(1.0, 1.0, 1.0);\r\nconst int NUM_LIGHTS = 6;\r\nconst float HEIGHT = 5.0;\r\nconst float RADIUS = 4.0;\r\nconst float PI = 3.14159265;\r\n\r\nstruct Light\r\n{\r\n   float intensity;\r\n   float size;\r\n   vec3 pos;\r\n   vec3 color;\r\n};\r\n\r\n Light Lights[NUM_LIGHTS];\r\n\r\n#ifdef USE_TRIANGLES\r\nstruct Triangle\r\n{\r\n   vec3 p0;\r\n   vec3 p1;\r\n   vec3 p2;\r\n};\r\n\r\nstruct Volume\r\n{\r\n   int startIndex;\r\n   int numTriangles;\r\n   vec3 boxMin;\r\n   vec3 boxMax;\r\n};\r\n\r\n// The following line is replaced with code generated in JavaScript\r\nconst int NUM_VERTICES = <NUM_VERTICES>;\r\nconst int NUM_VOLUMES = <NUM_VOLUMES>;\r\nconst int NUM_TRIANGLES = <NUM_TRIANGLES>;\r\n\r\nlayout(std140) uniform MyVerticesBlock { vec3 vertices[NUM_VERTICES]; };\r\n\r\nstruct ITriangle\r\n{\r\n   int i0;\r\n   int i1;\r\n   int i2;\r\n};\r\n\r\nlayout(std140) uniform MyTrianglesBlock { ITriangle triangles[NUM_TRIANGLES]; };\r\nTriangle getTriangle(int index)\r\n{\r\n   ITriangle tri = triangles[index];\r\n   vec3 p0 = vertices[tri.i0];\r\n   vec3 p1 = vertices[tri.i1];\r\n   vec3 p2 = vertices[tri.i2];\r\n   return Triangle(p0, p1, p2);\r\n}\r\n\r\n// The central object being rendered\r\nstruct Object\r\n{\r\n   Volume volumes[NUM_VOLUMES];\r\n   vec3 boxMin;\r\n   vec3 boxMax;\r\n};\r\n\r\nuniform Object object;\r\n\r\nbool intersectBox(const vec3 origin, const vec3 ray, const vec3 boxMin, const vec3 boxMax)\r\n{\r\n   vec3 rayInv = 1.0 / ray;\r\n   vec3 tbot = rayInv * (boxMin - origin);\r\n   vec3 ttop = rayInv * (boxMax - origin);\r\n   vec3 tmin = min(ttop, tbot);\r\n   vec3 tmax = max(ttop, tbot);\r\n   vec2 t = max(tmin.xx, tmin.yz);\r\n   float t0 = max(t.x, t.y);\r\n   t = min(tmax.xx, tmax.yz);\r\n   float t1 = min(t.x, t.y);\r\n   return t1 > max(t0, 0.0);\r\n}\r\n\r\nbool intersectVol(const vec3 origin, const vec3 ray, Volume vol)\r\n{\r\n   if (vol.numTriangles == 0)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   return intersectBox(origin, ray, vol.boxMin, vol.boxMax);\r\n}\r\n\r\nbool intersectObj(const vec3 origin, const vec3 ray, Object object)\r\n{\r\n   return intersectBox(origin, ray, object.boxMin, object.boxMax);\r\n}\r\n\r\n// Möller–Trumbore ray-triangle intersection algorithm\r\n// source: http://bit.ly/2MxnPMG\r\nfloat intersectTriangle(vec3 origin, vec3 ray, Triangle tri)\r\n{\r\n   vec3 edge1, edge2, h, s, q;\r\n   float a, f, u, v;\r\n   edge1 = tri.p1 - tri.p0;\r\n   edge2 = tri.p2 - tri.p0;\r\n\r\n   h = cross(ray, edge2);\r\n   a = dot(edge1, h);\r\n   if (abs(a) < EPSILON)\r\n      return INFINITY;\r\n\r\n   f = 1.0 / a;\r\n   s = origin - tri.p0;\r\n   u = f * dot(s, h);\r\n   if (u < 0.0 || u > 1.0)\r\n      return INFINITY;\r\n\r\n   q = cross(s, edge1);\r\n   v = f * dot(ray, q);\r\n   if (v < 0.0 || (u + v) > 1.0)\r\n      return INFINITY;\r\n\r\n   // At this stage we can compute t to find out where the intersection point is on the line.\r\n   float t = f * dot(edge2, q);\r\n   if (t <= EPSILON) // this means that there is a line intersection but not a ray intersection.\r\n      return INFINITY;\r\n\r\n   return t; // ray intersection\r\n}\r\n\r\nvec3 normalForTriangle(vec3 origin, vec3 hit, int tIndex)\r\n{\r\n   Triangle tri = getTriangle(tIndex);\r\n   vec3 normal = cross(tri.p1 - tri.p0, tri.p2 - tri.p0);\r\n   normal = normalize(normal);\r\n   if (dot(normal, origin - hit) > 0.0)\r\n   {\r\n      return normal;\r\n   }\r\n   else\r\n   {\r\n      return -normal;\r\n   }\r\n}\r\n#endif\r\n\r\nfloat intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius)\r\n{\r\n   vec3 toSphere = origin - sphereCenter;\r\n   float a = dot(ray, ray);\r\n   float b = 2.0 * dot(toSphere, ray);\r\n   float c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\r\n   float discriminant = b * b - 4.0 * a * c;\r\n   if (discriminant > 0.0)\r\n   {\r\n      float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\r\n      float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\r\n      if (t1 > 0.0)\r\n      {\r\n         return t1;\r\n      }\r\n      else if (t2 > 0.0)\r\n      {\r\n         return t2;\r\n      }\r\n   }\r\n   return INFINITY;\r\n}\r\n\r\nvec3 normalForSphere(vec3 hit, vec3 sphereCenter, float sphereRadius)\r\n{\r\n   return (hit - sphereCenter) / sphereRadius;\r\n}\r\n\r\nfloat random(vec3 scale, float seed)\r\n{\r\n   return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n}\r\n\r\nvec3 cosineWeightedDirection(float seed, vec3 normal)\r\n{\r\n   float u = random(vec3(12.9898, 78.233, 151.7182), seed);\r\n   float v = random(vec3(63.7264, 10.873, 623.6736), seed);\r\n   float r = sqrt(u);\r\n   float angle = 6.283185307179586 * v;\r\n   // compute basis from normal\r\n   vec3 sdir, tdir;\r\n   if (abs(normal.x) < .5)\r\n   {\r\n      sdir = cross(normal, vec3(1, 0, 0));\r\n   }\r\n   else\r\n   {\r\n      sdir = cross(normal, vec3(0, 1, 0));\r\n   }\r\n   tdir = cross(normal, sdir);\r\n   return r * cos(angle) * sdir + r * sin(angle) * tdir + sqrt(1. - u) * normal;\r\n}\r\n\r\nvec3 uniformlyRandomDirection(float seed)\r\n{\r\n   float u = random(vec3(12.9898, 78.233, 151.7182), seed);\r\n   float v = random(vec3(63.7264, 10.873, 623.6736), seed);\r\n   float z = 1.0 - 2.0 * u;\r\n   float r = sqrt(1.0 - z * z);\r\n   float angle = 6.283185307179586 * v;\r\n   return vec3(r * cos(angle), r * sin(angle), z);\r\n}\r\n\r\nvec3 uniformlyRandomVector(float seed)\r\n{\r\n   return uniformlyRandomDirection(seed) * sqrt(random(vec3(36.7539, 50.3658, 306.2759), seed));\r\n}\r\n\r\nbool inShadow(vec3 origin, vec3 ray, float tLight)\r\n{\r\n   float tBall = intersectSphere(origin, ray, BALL_CENTER, uBallRadius);\r\n   if (tBall < tLight)\r\n   {\r\n      return true;\r\n   }\r\n\r\n#ifdef USE_TRIANGLES\r\n   if (intersectObj(origin, ray, object))\r\n   {\r\n      for (int i = 0; i < NUM_VOLUMES; i++)\r\n      {\r\n         Volume vol = object.volumes[i];\r\n         if (intersectVol(origin, ray, vol))\r\n         {\r\n            for (int i = vol.startIndex; i < (vol.startIndex + vol.numTriangles); i++)\r\n            {\r\n               Triangle tri = getTriangle(i);\r\n               if (intersectTriangle(origin, ray, tri) < tLight)\r\n               {\r\n                  return true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n#endif\r\n\r\n   return false;\r\n}\r\n\r\n// All components are in the range [0…1], including hue.\r\nvec4 rgb2hsv(vec4 c)\r\n{\r\n   vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n   vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n   vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n   float d = q.x - min(q.w, q.y);\r\n   float e = 1.0e-10;\r\n   return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x, c.a);\r\n}\r\n\r\n// All components are in the range[0…1], including hue.\r\nvec4 hsv2rgb(vec4 c)\r\n{\r\n   vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n   vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n   return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y), c.a);\r\n}\r\n\r\nvec4 shiftTemperature(vec4 rgb, float deg, float tintStrength)\r\n{\r\n   vec4 hsv = rgb2hsv(rgb);\r\n   hsv.x += deg / 360.0;\r\n   vec4 fullTintRgb = hsv2rgb(hsv);\r\n\r\n   return mix(rgb, fullTintRgb, tintStrength);\r\n}\r\n\r\n// TODO move to a common file\r\nfloat toGray(vec4 c)\r\n{\r\n   // lots of ways to convert RGB to gray scale.\r\n\r\n   // simple averaging method\r\n   // return (c.r + c.g + c.b) / 3.0;\r\n\r\n   // relative perceptual values\r\n   // return 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\r\n\r\n   // luminosity measure\r\n   float gamma = 2.2;\r\n   float y = 0.2126 * pow(c.r, gamma) + 0.7152 * pow(c.g, gamma) + .0722 * pow(c.b, gamma);\r\n   float l = 116.0 * pow(y, 1.0 / 3.0) - 16.0;\r\n   return l / 100.0;\r\n}\r\n\r\nvec4 calculateColor(vec3 origin, vec3 ray)\r\n{\r\n   vec3 accumulatedColor = vec3(0.0);\r\n   vec3 colorMask = vec3(1.0);\r\n   vec3 eye = origin;\r\n   bool objHit = false;\r\n   bool objShadow = false;\r\n   float specularContribution = 0.0;\r\n\r\n   // main raytracing loop\r\n   for (int bounce = 0; bounce < MAX_BOUNCES; bounce++)\r\n   {\r\n      // compute the intersection with everything\r\n      float tBall = intersectSphere(origin, ray, BALL_CENTER, uBallRadius);\r\n      vec3 surfaceColor = vec3(0.5, 0.5, 0.5);\r\n\r\n      float tObj = INFINITY;\r\n      int tIndex;\r\n#ifdef USE_TRIANGLES\r\n      if (intersectObj(origin, ray, object))\r\n      {\r\n         for (int i = 0; i < NUM_VOLUMES; i++)\r\n         {\r\n            Volume vol = object.volumes[i];\r\n            if (intersectVol(origin, ray, vol))\r\n            {\r\n               for (int i = vol.startIndex; i < (vol.startIndex + vol.numTriangles); i++)\r\n               {\r\n                  Triangle tri = getTriangle(i);\r\n                  float tTri = min(tObj, intersectTriangle(origin, ray, tri));\r\n                  if (tTri < tObj)\r\n                  {\r\n                     tObj = tTri;\r\n                     tIndex = i;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n#endif\r\n\r\n      // if the first ray hits the light, return the light color. This\r\n      // simulates displaying the light\r\n      if (bounce == 0)\r\n      {\r\n         for (int i = 0; i < NUM_LIGHTS; i++)\r\n         {\r\n            float tLight = intersectSphere(origin, ray, Lights[i].pos, Lights[i].size);\r\n            if (tLight < tBall && tLight < tObj)\r\n            {\r\n               return vec4(Lights[i].intensity * Lights[i].color, 1.0);\r\n            }\r\n         }\r\n      }\r\n\r\n      // find the closest intersection\r\n      float tDome = intersectSphere(origin, ray, DOME_CENTER, DOME_RADIUS);\r\n      float tFloor = INFINITY;\r\n\r\n      // check for intersection with the ground\r\n      if (ray.y < 0.0)\r\n      {\r\n         // distance to floor = num unit vectors required to reach the floor\r\n         tFloor = -origin.y / ray.y;\r\n      }\r\n\r\n      // find the closest hit\r\n      float t = min(min(tDome, tFloor), min(tBall, tObj));\r\n\r\n      // info about hit\r\n      vec3 hit = origin + ray * t;\r\n      vec3 normal;\r\n\r\n      // calculate the normal\r\n      if (t == tFloor)\r\n      {\r\n         surfaceColor = FLOOR_COLOR;\r\n         normal = vec3(0.0, 1.0, 0.0);\r\n      }\r\n      else if (t == tBall)\r\n      {\r\n         surfaceColor = vec3(uObjColor);\r\n         normal = normalForSphere(hit, BALL_CENTER, uBallRadius);\r\n\r\n         if (bounce == 0)\r\n         {\r\n            objHit = true;\r\n         }\r\n      }\r\n#ifdef USE_TRIANGLES\r\n      else if (t == tObj)\r\n      {\r\n         surfaceColor = uObjColor;\r\n         normal = normalForTriangle(origin, hit, tIndex);\r\n\r\n         if (bounce == 0)\r\n         {\r\n            objHit = true;\r\n         }\r\n      }\r\n#endif\r\n      else if (t == tDome)\r\n      {\r\n         surfaceColor = DOME_COLOR;\r\n         normal = -normalForSphere(hit, DOME_CENTER, DOME_RADIUS);\r\n      }\r\n      else\r\n      {\r\n         break;\r\n      }\r\n\r\n      colorMask *= surfaceColor;\r\n\r\n      if (length(colorMask) < 0.01)\r\n      {\r\n         break;\r\n      }\r\n\r\n      for (int i = 0; i < NUM_LIGHTS; i++)\r\n      {\r\n         // compute diffuse lighting contribution\r\n         vec3 toLight = Lights[i].pos - hit;\r\n         vec3 toLightN = normalize(toLight);\r\n\r\n         // trace a shadow ray to the light\r\n         if (inShadow(hit + normal * OFFSET, toLightN, length(toLight)) == false)\r\n         {\r\n            // diffuse component\r\n            float diffuse = max(0.0, dot(toLightN, normal));\r\n\r\n            // specular component\r\n            vec3 toEye = eye - hit;\r\n            vec3 n2l = toLightN;\r\n            vec3 n2e = normalize(toEye);\r\n            vec3 bisector = (n2l + n2e) / length(n2l + n2e);\r\n            float specularCoefficient = 0.5;\r\n            float shininess = 100.0;\r\n            float specular = specularCoefficient * pow(max(0.0, dot(bisector, normal)), shininess);\r\n\r\n            // apply light fall off as distance squares. Use a min value for the\r\n            // light size otherwise falloff is too rapid\r\n            float radius = max(0.75, Lights[i].size);\r\n            float dist = max(1.0, (length(toLight) - radius) / radius);\r\n            float lightIntensity = Lights[i].intensity / (dist * dist);\r\n\r\n            accumulatedColor += colorMask * Lights[i].color * lightIntensity * diffuse;\r\n\r\n            // TODO define a color mask for specular reflection\r\n            //            accumulatedColor += mix(surfaceColor, Lights[i].color, 0.8) *\r\n            //            lightIntensity * specular;\r\n            accumulatedColor +=\r\n                (length(surfaceColor) * Lights[i].color) * lightIntensity * specular;\r\n\r\n            if (bounce == 0 && i == 0)\r\n            {\r\n               specularContribution += lightIntensity * specular;\r\n            }\r\n         }\r\n         else if (bounce == 0 && i == 0)\r\n         {\r\n            objShadow = true;\r\n         }\r\n      }\r\n\r\n      // calculate next origin\r\n      ray = cosineWeightedDirection(uRandom + float(bounce), normal);\r\n\r\n      origin = hit;\r\n   }\r\n\r\n   float alpha = 1.0;\r\n   if (objHit)\r\n   {\r\n      if (objShadow)\r\n      {\r\n         alpha = uShadowAlpha;\r\n      }\r\n      else\r\n      {\r\n         alpha = uLightAlpha;\r\n      }\r\n      alpha += clamp(specularContribution, 0.0, 1.0);\r\n   }\r\n\r\n   vec4 scienceColor = vec4(clamp(accumulatedColor, 0.0, 1.0), alpha);\r\n   return scienceColor;\r\n   /*\r\n   if (objHit)\r\n   {\r\n      return vec4(toArtist(scienceColor).rgb, alpha);\r\n   }\r\n   else\r\n   {\r\n      return scienceColor;\r\n   }\r\n   */\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec3 rand = uniformlyRandomVector(uRandom) * LIGHT_SIZE;\r\n\r\n   Lights[0].intensity = uLightIntensity;\r\n   Lights[0].size = LIGHT_SIZE;\r\n   Lights[0].pos = uLightPos + rand;\r\n   Lights[0].color = uLightColor;\r\n\r\n   for (int i = 1; i < NUM_LIGHTS; i++)\r\n   {\r\n      float x = RADIUS * sin(2.0 * PI * float(i) / (float(NUM_LIGHTS) - 1.0)) + rand.x;\r\n      float y = HEIGHT + rand.y;\r\n      float z = RADIUS * cos(2.0 * PI * float(i) / (float(NUM_LIGHTS) - 1.0)) + rand.z;\r\n\r\n      Lights[i].intensity = uAmbientLightIntensity;\r\n      Lights[i].size = 2.0 * LIGHT_SIZE;\r\n      Lights[i].pos = vec3(x, y, z);\r\n      Lights[i].color = AMBIENT_COLOR;\r\n   }\r\n\r\n   // merge the new color into the existing texture\r\n   vec4 textureColor = texture(uTexture, gl_FragCoord.xy / uTextureSize);\r\n   vec4 newColor = calculateColor(uEye, initialRay);\r\n   float weight = (uSample / (1.0 + uSample));\r\n   fragColor = mix(newColor, textureColor, weight);\r\n}");

/***/ }),

/***/ "./src/shaders/PathTracerToTextureVertex.glsl":
/*!****************************************************!*\
  !*** ./src/shaders/PathTracerToTextureVertex.glsl ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<VERSION>\r\n\r\n#define NOTHING\r\n#ifdef USE_TRIANGLES\r\n#define ES300\r\n#endif\r\n\r\nprecision highp float;\r\nuniform vec3 uEye, uRay00, uRay01, uRay10, uRay11;\r\n\r\n#ifdef ES300\r\nin vec3 vertex;\r\nout vec3 initialRay;\r\n#else\r\nattribute vec3 vertex;\r\nvarying vec3 initialRay;\r\n#endif \r\n\r\nvoid main()\r\n{\r\n   vec2 percent = vertex.xy * 0.5 + 0.5;\r\n   initialRay = mix(mix(uRay00, uRay01, percent.y), mix(uRay10, uRay11, percent.y), percent.x);\r\n   gl_Position = vec4(vertex, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/TextureRendererFragment.glsl":
/*!**************************************************!*\
  !*** ./src/shaders/TextureRendererFragment.glsl ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nprecision highp float;\r\nvarying vec2 texCoord;\r\nuniform sampler2D uTexture;\r\n\r\nvoid main() { gl_FragColor = texture2D(uTexture, texCoord); }\r\n");

/***/ }),

/***/ "./src/shaders/TextureRendererVertex.glsl":
/*!************************************************!*\
  !*** ./src/shaders/TextureRendererVertex.glsl ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nattribute vec2 vertex;\r\nvarying vec2 texCoord;\r\n\r\nvoid main()\r\n{\r\n   texCoord = vertex.xy * 0.5 + 0.5;\r\n\r\n   gl_Position = vec4(vertex.xy, 0.0, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/ViewerFragment.glsl":
/*!*****************************************!*\
  !*** ./src/shaders/ViewerFragment.glsl ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\r\n\r\n// interpolated values from the vertex shader\r\nvarying vec3 vNormal;\r\nvarying vec3 vVertex;\r\nvarying vec3 vShadowVertex;\r\nvarying vec3 vModelVertex;\r\n\r\nuniform mat4 model;\r\nuniform vec3 uEye;\r\nuniform bool uOrthographic;\r\n\r\n#define NORMAL 0\r\n#define CONTOUR_PLANES 1\r\n#define CONTOUR_VALUES 2\r\n#define LIGHT_AND_SHADOW 3\r\n#define HIGHLIGHT_TERMINATOR 4\r\n#define HIGHLIGHT_SHADOW 5\r\n#define EMPHASIZE_HIGHLIGHTS 6\r\n\r\nuniform int uRenderMode;\r\n\r\n// these are value between 0-1\r\nuniform float uDiffuseIntensity;\r\nuniform float uAmbientIntensity;\r\nuniform float uSpecularIntensity;\r\n\r\n// the colors we use to represent our lightest and darkest values\r\nuniform vec3 uWhiteColor;\r\nuniform vec3 uBlackColor;\r\n\r\nuniform vec3 uLightPos;\r\nuniform bool uPointLight;\r\nuniform float uFalloff;\r\nuniform float uLightIntensity;\r\nuniform float uLightIntensityAtSource;\r\n\r\nuniform bool uUseShadows;\r\nuniform sampler2D uShadowTexture;\r\n\r\nuniform vec3 uFloorCenter;\r\nuniform float uFloorRadius;\r\nuniform bool uRenderingFloor;\r\nuniform bool uShowGrid;\r\n#define MAX_CONTOURS 9\r\nuniform int uNumContours;\r\nuniform vec3 uContourColors[9];\r\nuniform float uContourAngles[9];\r\nuniform bool uShowHighlights;\r\nuniform float uShininess;\r\n\r\n// For contour shading, the minimum specular contribution required to\r\n// show something as a highlight\r\nconst float SPECULAR_THRESHOLD = 0.06;\r\n\r\nbool uShowTerminator = true;\r\n\r\nbool in_shadow()\r\n{\r\n   if (uUseShadows == false)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   // The vertex location rendered from the light source is almost in Normalized\r\n   // Device Coordinates (NDC), but the perspective division has not been\r\n   // performed yet. Perform the perspective divide. The (x,y,z) vertex location\r\n   // components are now each in the range [-1.0,+1.0].\r\n   // vec3 vertex_relative_to_light = v_Vertex_relative_to_light.xyz / v_Vertex_relative_to_light.w;\r\n   vec3 vertex = vShadowVertex;\r\n\r\n   // Convert the the values from Normalized Device Coordinates (range [-1.0,+1.0])\r\n   // to the range [0.0,1.0]. This mapping is done by scaling\r\n   // the values by 0.5, which gives values in the range [-0.5,+0.5] and then\r\n   // shifting the values by +0.5.\r\n   vertex = vertex * 0.5 + 0.5;\r\n\r\n   // Get the z value of this fragment in relationship to the light source.\r\n   // This value was stored in the shadow map (depth buffer of the frame buffer)\r\n   // which was passed to the shader as a texture map.\r\n   // vec4 textureValue = texture2D(uShadowSampler, vertex.xy);\r\n\r\n   // The texture map contains a single depth value for each pixel. However,\r\n   // the texture2D sampler always returns a color from a texture. For a\r\n   // gl.DEPTH_COMPONENT texture, the color contains the depth value in\r\n   // each of the color components. If the value was d, then the color returned\r\n   // is (d,d,d,1). This is a \"color\" (depth) value between [0.0,+1.0].\r\n   float shadowmap_distance = texture2D(uShadowTexture, vertex.xy).r;\r\n\r\n   // Test the distance between this fragment and the light source as\r\n   // calculated using the shadowmap transformation (vertex_relative_to_light.z) and\r\n   // the smallest distance between the closest fragment to the light source\r\n   // for this location, as stored in the shadowmap. When the closest\r\n   // distance to the light source was saved in the shadowmap, some\r\n   // precision was lost. Therefore we need a small tolerance factor to\r\n   // compensate for the lost precision.\r\n   float tol = 0.001;\r\n   if (vertex.z <= shadowmap_distance + tol)\r\n   {\r\n      // This surface receives full light because it is the closest surface\r\n      // to the light.\r\n      return false;\r\n   }\r\n   else\r\n   {\r\n      // This surface is in a shadow because there is a closer surface to\r\n      // the light source.\r\n      return true;\r\n   }\r\n}\r\n\r\nvec4 val2Color(float val) { return vec4(mix(uBlackColor, uWhiteColor, val), 1.0); }\r\n\r\nvec4 val2ContourColor(float val)\r\n{\r\n   val = clamp(val, 0.0, 1.0);\r\n   for (int i = 0; i < MAX_CONTOURS; i++)\r\n   {\r\n      float max = (float(i) + 1.0) / float(uNumContours);\r\n      if (val <= max)\r\n      {\r\n         return vec4(uContourColors[(MAX_CONTOURS - 1) - i], 1.0);\r\n      }\r\n   }\r\n}\r\n\r\nfloat getDiffuse(vec3 normal, vec3 toLight)\r\n{\r\n   float vDot = clamp(dot(normal, toLight), 0.0, 1.0);\r\n   float diffuse = uDiffuseIntensity * vDot;\r\n   return diffuse;\r\n}\r\n\r\nfloat getSpecular(vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = 0.0;\r\n\r\n   if (uShowHighlights)\r\n   {\r\n      vec3 reflection = normalize(2.0 * dot(normal, toLight) * normal - toLight);\r\n      float cosAngle = clamp(dot(reflection, toEye), 0.0, 1.0); // clamp to avoid values > 90 deg\r\n      specular = uSpecularIntensity * (uShininess / 15.0) * pow(cosAngle, uShininess);\r\n   }\r\n\r\n   return specular;\r\n}\r\n\r\nfloat getDistancePtToPlane(vec3 pt, vec3 plane)\r\n{\r\n   float a = plane.x;\r\n   float b = plane.y;\r\n   float c = plane.z;\r\n   float d = -(a * a + b * b + c * c);\r\n\r\n   return -(a * pt.x + b * pt.y + c * pt.z + d) / sqrt(a * a + b * b + c * c);\r\n}\r\n\r\nfloat getLightDistance(vec3 lightPos)\r\n{\r\n   if (uPointLight)\r\n   {\r\n      return length(lightPos - vVertex);\r\n   }\r\n   else\r\n   {\r\n      return getDistancePtToPlane(vVertex, lightPos);\r\n   }\r\n}\r\n\r\nfloat getValueFromLight(vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float diffuse = getDiffuse(normal, toLight);\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n\r\n   float falloff = 1.0;\r\n   if (uFalloff > 0.0)\r\n   {\r\n      float vDot = dot(normal, toLight);\r\n\r\n      float vDistance = getLightDistance(uLightPos);\r\n      falloff = uLightIntensityAtSource / (vDistance * vDistance);\r\n\r\n      // the light only shines one way\r\n      if (vDistance < 0.0)\r\n      {\r\n         diffuse = 0.0;\r\n         specular = 0.0;\r\n      }\r\n   }\r\n\r\n   return uAmbientIntensity + uLightIntensity * falloff * (diffuse + specular);\r\n}\r\n\r\nvec4 getContourPlaneColor(float vDot, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n   if (specular > SPECULAR_THRESHOLD)\r\n   {\r\n      return val2Color(uAmbientIntensity + uDiffuseIntensity + uSpecularIntensity);\r\n   }\r\n\r\n   float angle = (180.0 / 3.1415926) * acos(vDot);\r\n   if (angle > 90.0)\r\n   {\r\n      return val2Color(uAmbientIntensity);\r\n   }\r\n   else\r\n   {\r\n      for (int i = 0; i < MAX_CONTOURS; i++)\r\n      {\r\n         if (i < uNumContours)\r\n         {\r\n            if (angle < uContourAngles[i])\r\n            {\r\n               return vec4(uContourColors[i], 1.0);\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\nvec4 getContourValueColor(float vDot, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n   if (specular > SPECULAR_THRESHOLD)\r\n   {\r\n      return vec4(1.0, 1.0, 1.0, 1.0);\r\n   }\r\n\r\n   float val = getValueFromLight(normal, toLight, toEye);\r\n   return val2ContourColor(val);\r\n}\r\n\r\nfloat round(float val) { return floor(val + 0.5); }\r\n\r\nfloat getFloorGridAdjustment(float dist)\r\n{\r\n   float thickness = 0.001;\r\n   float alias = 0.005;\r\n\r\n   if (dist < (thickness + alias))\r\n   {\r\n      if (dist < thickness)\r\n      {\r\n         return 0.5;\r\n      }\r\n      else\r\n      {\r\n         return 0.5 * (1.0 + (dist - thickness) / alias);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      return 1.0;\r\n   }\r\n}\r\n\r\nvec4 getFloorColor(bool inShadow, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   vec4 fragColor;\r\n\r\n   // gradiate out the background from half transparent to full transparency\r\n   vec3 center = (model * vec4(uFloorCenter, 1.0)).xyz;\r\n   float dist = length(center - vVertex);\r\n   float a = 0.5 * (1.0 - dist / uFloorRadius);\r\n\r\n   float gridFactor = 1.0;\r\n   if (uShowGrid)\r\n   {\r\n      float circle = getFloorGridAdjustment(abs(dist - round(dist)));\r\n      float x = getFloorGridAdjustment(abs(vModelVertex.x - round(vModelVertex.x)));\r\n      float z = getFloorGridAdjustment(abs(vModelVertex.z - round(vModelVertex.z)));\r\n\r\n      gridFactor = min(circle, min(x, z));\r\n   }\r\n\r\n   float val = 0.0;\r\n   if (inShadow)\r\n   {\r\n      val = uAmbientIntensity;\r\n   }\r\n   else\r\n   {\r\n      val = getValueFromLight(normal, toLight, toEye);\r\n   }\r\n\r\n   fragColor = val2Color(gridFactor * val);\r\n   fragColor.a = a;\r\n\r\n   return fragColor;\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec3 toLight;\r\n   if (uPointLight)\r\n   {\r\n      toLight = normalize(uLightPos - vVertex);\r\n   }\r\n   else\r\n   {\r\n      toLight = normalize(uLightPos);\r\n   }\r\n\r\n   bool inShadow = in_shadow();\r\n\r\n   vec3 toEye;\r\n   if (uOrthographic)\r\n   {\r\n      toEye = vec3(0.0, 0.0, 1.0);\r\n   }\r\n   else\r\n   {\r\n      toEye = normalize(uEye - vVertex);\r\n   }\r\n\r\n   vec3 normal = normalize(vNormal); // vNormal is interpolated and nolonger normal\r\n\r\n   // swap normals for back facing triangles\r\n   if (dot(normal, toEye) < 0.0)\r\n   {\r\n      normal = -normal;\r\n   }\r\n\r\n   // compute diffuse contribution = cos of angle between the vectors (dot product)\r\n   float vDot = dot(normal, toLight);\r\n\r\n   vec4 fragColor;\r\n   if (uRenderingFloor)\r\n   {\r\n      fragColor = getFloorColor(inShadow, normal, toLight, toEye);\r\n   }\r\n   else\r\n   {\r\n      if (uRenderMode == CONTOUR_PLANES)\r\n      {\r\n         if (inShadow)\r\n         {\r\n            fragColor = val2Color(uAmbientIntensity);\r\n         }\r\n         else\r\n         {\r\n            fragColor = getContourPlaneColor(vDot, normal, toLight, toEye);\r\n         }\r\n      }\r\n      else if (uRenderMode == CONTOUR_VALUES)\r\n      {\r\n         if (inShadow)\r\n         {\r\n            fragColor = val2ContourColor(uAmbientIntensity);\r\n         }\r\n         else\r\n         {\r\n            fragColor = getContourValueColor(vDot, normal, toLight, toEye);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         vec4 highlightColor = vec4(0.0, 0.7, 0.7, 1.0);\r\n\r\n         if (inShadow)\r\n         {\r\n            if (uRenderMode == HIGHLIGHT_SHADOW)\r\n            {\r\n               fragColor = highlightColor;\r\n            }\r\n            else if (uRenderMode == LIGHT_AND_SHADOW)\r\n            {\r\n               fragColor = val2Color(uAmbientIntensity);\r\n            }\r\n            else\r\n            {\r\n               // when in shadow, apply slight shading as if the light\r\n               // were coming from the eye.\r\n               vec3 toShadowLight = vec3(0.0, 0.0, 1.0);\r\n               float val = getValueFromLight(normal, toShadowLight, toEye) / 20.0;\r\n               fragColor = val2Color(uAmbientIntensity + val);\r\n            }\r\n         }\r\n         else\r\n         {\r\n            if (uRenderMode == LIGHT_AND_SHADOW)\r\n            {\r\n               fragColor = val2Color(uAmbientIntensity + 0.75 * uDiffuseIntensity);\r\n               vec4 shadowColor = val2Color(uAmbientIntensity);\r\n\r\n               float vDot = dot(normal, toLight);\r\n               float angle = (180.0 / 3.1415926) * acos(vDot);\r\n               float range = 8.0; // degrees\r\n               float percentTerminator = clamp((angle - (90.0 - range)) / (range / 2.0), 0.0, 1.0);\r\n               fragColor = mix(fragColor, shadowColor, percentTerminator);\r\n            }\r\n            else if (uRenderMode == HIGHLIGHT_SHADOW || uRenderMode == HIGHLIGHT_TERMINATOR)\r\n            {\r\n               // fade highlighting from terminator through the shadow\r\n               float val = getValueFromLight(normal, toLight, toEye);\r\n               fragColor = val2Color(val);\r\n\r\n               float vDot = dot(normal, toLight);\r\n               float angle = (180.0 / 3.1415926) * acos(vDot);\r\n               float range = 8.0; // degrees\r\n               float percentTerminator;\r\n\r\n               if (uRenderMode == HIGHLIGHT_SHADOW)\r\n               {\r\n                  percentTerminator = clamp((angle - (90.0 - range)) / (range), 0.0, 1.0);\r\n               }\r\n               else\r\n               {\r\n                  if (angle > 90.0)\r\n                  {\r\n                     range = 2.0;\r\n                     percentTerminator = clamp(1.0 - (angle - 90.0) / range, 0.0, 1.0);\r\n                  }\r\n                  else\r\n                  {\r\n                     percentTerminator = clamp((angle - (90.0 - range)) / (range), 0.0, 1.0);\r\n                  }\r\n               }\r\n               fragColor = mix(fragColor, highlightColor, percentTerminator);\r\n            }\r\n            else\r\n            {\r\n               float val = getValueFromLight(normal, toLight, toEye);\r\n               fragColor = val2Color(val);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   gl_FragColor = fragColor;\r\n}");

/***/ }),

/***/ "./src/shaders/ViewerVertex.glsl":
/*!***************************************!*\
  !*** ./src/shaders/ViewerVertex.glsl ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("attribute vec3 aVertex;\r\nattribute vec3 aNormal;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 lightView;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec3 vVertex;\r\nvarying vec3 vShadowVertex;\r\nvarying vec3 vModelVertex;\r\n\r\nvoid main()\r\n{\r\n   gl_Position = projection * view * model * vec4(aVertex, 1.0);\r\n   vNormal = (model * vec4(aNormal, 0.0)).xyz;\r\n   vVertex = (model * vec4(aVertex, 1.0)).xyz;\r\n   vShadowVertex = (lightView * model * vec4(aVertex, 1.0)).xyz;\r\n   vModelVertex = aVertex;\r\n}");

/***/ }),

/***/ "./src/styles/styles.css":
/*!*******************************!*\
  !*** ./src/styles/styles.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9DaGVja2JveC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9MaXN0Qm94LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL01lbnUuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvUGF0aFRyYWNlckFwcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9SYWRpb2J1dHRvbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9TbGlkZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvU3F1aW50QXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL1RhYnMuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvVmlld2VyQXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnRjcGVlcmNvbm5lY3Rpb24tc2hpbS9ydGNwZWVyY29ubmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2RwL3NkcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jaHJvbWUvY2hyb21lX3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jaHJvbWUvZ2V0ZGlzcGxheW1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2dldHVzZXJtZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2NvbW1vbl9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9lZGdlX3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2ZpbHRlcmljZXNlcnZlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2dldGRpc3BsYXltZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2VkZ2UvZ2V0dXNlcm1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9maXJlZm94X3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9maXJlZm94L2dldGRpc3BsYXltZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZ2V0dXNlcm1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvc2FmYXJpL3NhZmFyaV9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvVmlld2VyL0xvYWRlcldvcmtlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9QYXRoVHJhY2VyL0NvbG9yQW5hbHl6ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvUGF0aFRyYWNlci9QYXRoVHJhY2VyQXBwLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1BhdGhUcmFjZXIvUGF0aFRyYWNlck9iai50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9QYXRoVHJhY2VyL1BhdGhUcmFjZXJSZW5kZXJlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9QYXRoVHJhY2VyL1ZvbHVtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9TcXVpbnQvU2VydmVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9TcXVpbnQvU3F1aW50LnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1NxdWludC9TcXVpbnRBcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvU3F1aW50L1N0YXJ0RGlhbG9nLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1NxdWludC9VcGxvYWRSYXRlVHJhY2tlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9TcXVpbnQvVXBsb2FkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvU3F1aW50L1ZlcnNpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvU3F1aW50L1ZpZGVvLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9DYW1lcmEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvVmlld2VyL01vZGVsTG9hZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9Nb2RlbHNNZW51LnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9QZXJzcGVjdGl2ZUN0cmwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvVmlld2VyL1BlcnNwZWN0aXZlUGFuZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvVmlld2VyL1BsYW5lLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9SZW5kZXJlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9WaWV3ZXIvVGV4dHVyZVJlbmRlcmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9WYWx1ZVBsYW5lcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwcy9WaWV3ZXIvVmFsdWVQbGFuZXNDdHJsLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9WYWx1ZVBsYW5lc1BhbmVsLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9WYWx1ZVJhbmdlLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHBzL1ZpZXdlci9WaWV3ZXJBcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcHMvVmlld2VyL2dsT2JqZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy9HVUkvQ2hlY2tib3gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dVSS9Db2xvclJhbmdlLnRzIiwid2VicGFjazovLy8uL3NyYy9HVUkvTGlzdEJveC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR1VJL01lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dVSS9PdmVybGF5Q2FudmFzLnRzIiwid2VicGFjazovLy8uL3NyYy9HVUkvUGFuZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dVSS9Qb2ludGVyRXZlbnRIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9HVUkvUmFkaW9idXR0b24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dVSS9TbGlkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xhdW5jaGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL0F2ZXJhZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL0Jsb2JGaWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL0Jsb2JTaGltLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL0NvbG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL0NvbnNvbGVDYXB0dXJlLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL0ZQUy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbC9HbG9iYWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL1Byb2ZpbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsL1N0b3B3YXRjaC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbC9oc3ZDb2xvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbC9odG1sQ29sb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWwvaHRtbENvbG9yV2l0aEFscGhhLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsM0QvQm91bmRpbmdCb3gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWwzRC9Cb3VuZGluZ1B0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbDNEL0luZGV4ZWRUcmlhbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbDNEL0luZGV4ZWRWZWMzLnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsM0QvTWF0LnRzIiwid2VicGFjazovLy8uL3NyYy9VdGlsM0QvU3BoZXJpY2FsQ29vcmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1V0aWwzRC9UcmlhbmdsZU9iai50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbDNEL1RyaWFuZ2xlT2JqQnVpbGRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbDNEL1RyaWFuZ2xlT2JqRmlsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVXRpbDNEL1ZlYy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2wvZ2xBdHRyaWJ1dGVCdWZmZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsL2dsQnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9nbC9nbENvbG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9nbC9nbENvbG9yV2l0aFRlbXBlcmF0dXJlLnRzIiwid2VicGFjazovLy8uL3NyYy9nbC9nbEZyYW1lQnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9nbC9nbEluZGV4QnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9nbC9nbFByb2dyYW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsL2dsU3BhY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsL2dsVGV4dHVyZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2wvZ2xVbmlmb3JtLnRzIiwid2VicGFjazovLy8uL3NyYy9nbC9nbFVuaWZvcm1CbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYWRlcnMvUGF0aFRyYWNlclRvU2NyZWVuRnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9QYXRoVHJhY2VyVG9TY3JlZW5WZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9QYXRoVHJhY2VyVG9UZXh0dXJlRnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9QYXRoVHJhY2VyVG9UZXh0dXJlVmVydGV4Lmdsc2wiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYWRlcnMvVGV4dHVyZVJlbmRlcmVyRnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9UZXh0dXJlUmVuZGVyZXJWZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9WaWV3ZXJGcmFnbWVudC5nbHNsIiwid2VicGFjazovLy8uL3NyYy9zaGFkZXJzL1ZpZXdlclZlcnRleC5nbHNsIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvc3R5bGVzLmNzcz9lNDViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtR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QUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsOEJBQThCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQ0FBZ0M7QUFDM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHVCQUF1Qiw0QkFBNEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EseUJBQXlCLDRCQUE0QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOzs7Ozs7Ozs7Ozs7O0FDaDBEQTtBQUNhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CO0FBQ3BCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsa0JBQWtCLE9BQU87QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlC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OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxREFBaUI7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxpRUFBNkI7QUFDakM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFEQUFpQjtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVEQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFX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R0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxHQUFHLElBQUksK0RBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUUvQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDOUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUNoQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM5RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM5RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBRTlELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUM1QyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDNUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQzVDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUM1QyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDNUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQzlDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNJLHdDQUFnQixHQUF2QjtRQUNHLElBQUksUUFBUSxDQUFDO1FBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLEVBQUU7WUFDOUIsUUFBUSxHQUFHLENBQUMsQ0FBQztTQUNmO2FBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEVBQUU7WUFDdkMsUUFBUSxHQUFHLENBQUMsQ0FBQztTQUNmO2FBQ0k7WUFDRixRQUFRLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSw4Q0FBTSxFQUFFLENBQUMsQ0FBQztTQUNsQztRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN0RixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2RixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN0RixDQUFDLEdBQUcsMkRBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM5QixDQUFDLEdBQUcsMkRBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM5QixDQUFDLEdBQUcsMkRBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsR0FBRyxDQUFDLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QjtJQUNKLENBQUM7SUFDSixvQkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDekZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQStFO0FBQ0k7QUFDRjtBQUNJO0FBQ3pDO0FBQ0U7QUFDZTtBQUNOO0FBQ1E7QUFDaEI7QUFDZ0I7QUFDZjtBQUNTO0FBQ1g7QUFFQztBQUNDO0FBQ0Q7QUFDUDtBQUNVO0FBRWxEOztHQUVHO0FBQ0gsSUFBWSxVQUtYO0FBTEQsV0FBWSxVQUFVO0lBQ25CLCtDQUFVO0lBQ1YsNkNBQVM7SUFDVCwrQ0FBVTtJQUNWLDZDQUFTO0FBQ1osQ0FBQyxFQUxXLFVBQVUsS0FBVixVQUFVLFFBS3JCO0FBRUQ7SUFBQTtRQUNHLFdBQU0sR0FBRyxHQUFHLENBQUM7UUFDYixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ2YsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNmLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixlQUFVLEdBQUcsR0FBRyxDQUFDO1FBVWpCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBRXBCLG9CQUFlLEdBQUcsR0FBRyxDQUFDO1FBQ3RCLGdCQUFXLEdBQUcsSUFBSSxvREFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVDLGNBQVMsR0FBRyxJQUFJLGdEQUFJLENBQUMsSUFBSSxxRUFBYyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM3RCwyQkFBc0IsR0FBRyxHQUFHLENBQUM7UUFDN0IsY0FBUyxHQUFHLElBQUksb0RBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxnQkFBVyxHQUFHLEdBQUcsQ0FBQztRQUNsQixTQUFJLEdBQUcsSUFBSSxnREFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLGlCQUFZLEdBQUcsR0FBRyxDQUFDO1FBQ25CLFlBQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDeEIsV0FBTSxHQUFHLElBQUksZ0RBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixXQUFNLEdBQUcsSUFBSSxnREFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLFdBQU0sR0FBRyxJQUFJLGdEQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsV0FBTSxHQUFHLElBQUksZ0RBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixZQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFBRCxlQUFDO0FBQUQsQ0FBQztBQUVEOztHQUVHO0FBQ0g7SUE2QkcsNEJBQ0csS0FBcUQ7UUE1QmhELE9BQUUsR0FBbUQsSUFBSSxDQUFDO1FBVzNELGFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBRXpCLGFBQVEsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQzdCLGVBQVUsR0FBRztZQUNsQixVQUFVLENBQUMsTUFBTTtZQUNqQixVQUFVLENBQUMsS0FBSztZQUNoQixVQUFVLENBQUMsS0FBSztTQUNsQixDQUFDO1FBRU0sYUFBUSxHQUFHO1lBQ2hCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNSLENBQUM7UUFNQyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRWpCLG1FQUFtRTtRQUNuRSxJQUFJLHVEQUFRLEVBQUU7WUFDWCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7U0FDbkM7YUFDSTtZQUNGLG9DQUFvQztZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksNkRBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTlELHFCQUFxQjtRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksK0RBQWEsQ0FDakMsRUFBRSxFQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FDNUIsQ0FBQztRQUVGLHlEQUF5RDtRQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLDREQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUMzRTtRQUVELHlCQUF5QjtRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksdURBQVMsQ0FBQyxFQUFFLEVBQUUsOEVBQW9CLEVBQUUsZ0ZBQXNCLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSx3RUFBaUIsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sbUNBQU0sR0FBYixVQUFjLElBQWlCO1FBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLG1DQUFNLEdBQWI7UUFDRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtJQUNKLENBQUM7SUFFTywwQ0FBYSxHQUFyQixVQUFzQixJQUFrQjtRQUNyQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRWpCLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1NBQy9CO1FBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSSx3REFBUSxFQUFFLENBQUM7UUFDdkIsOEJBQThCO1FBQzlCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxFQUFFO1lBRWhDLElBQUksSUFBSSxHQUFHLElBQUksNkRBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVuQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSx1REFBUyxDQUNsQyxFQUFFLEVBQ0YsK0VBQXFCO2lCQUNqQixPQUFPLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDO2lCQUN2QyxPQUFPLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxFQUN2QyxpRkFBdUI7aUJBQ25CLE9BQU8sQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUM7aUJBQ3ZDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDO2lCQUNuQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDdEQsT0FBTyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDeEQsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDOUQsQ0FBQztZQUVGLDhCQUE4QjtZQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO2FBQ0k7WUFDRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSx1REFBUyxDQUNsQyxFQUFFLEVBQ0YsK0VBQXFCO2lCQUNqQixPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUM1QixpRkFBdUI7aUJBQ25CLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQzlCLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLHdFQUFpQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLDJDQUFjLEdBQXRCLFVBQXVCLElBQW1CO1FBRXZDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUE0QixDQUFDO1FBQzNDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFckIsMENBQTBDO1FBQzFDLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksa0VBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRTdGLGlEQUFpRDtRQUNqRCxJQUFJLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM1QyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQixZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxrRUFBYyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFOUYsaURBQWlEO1FBQ2pELElBQUksS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN0QixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN0QixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN0QixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDckI7U0FDSDtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTFCLCtDQUErQztRQUMvQyxJQUFJLEdBQUcsR0FBRyxJQUFJLHdEQUFTLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25ELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLENBQUMsR0FBRyxjQUFjLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xFLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlFLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLEdBQUcsVUFBVSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxVQUFVLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7U0FDckM7UUFDRCxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELHNCQUFXLDBDQUFVO2FBQXJCO1lBQ0csT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBRU0sb0NBQU8sR0FBZDtRQUNHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU8sc0NBQVMsR0FBakIsVUFBa0IsTUFBWSxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ2pELElBQUksR0FBRyxHQUFHLElBQUksZ0RBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTSwwQ0FBYSxHQUFwQixVQUFxQixtQkFBeUI7UUFFM0MsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUVqQix1REFBdUQ7UUFDdkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO1FBQzdELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUM3RCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixJQUFJLENBQUMsR0FBRyxJQUFJLGdEQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxNQUFNLEdBQUcsaURBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXpELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsZUFBZTtRQUNmLElBQUksR0FBRyxHQUFHLElBQUksd0RBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUIsb0JBQW9CO1FBQ3BCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDeEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXZDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFMUMsSUFBSSxFQUFFLEdBQUcsSUFBSSwyREFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6SSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFekQsRUFBRSxHQUFHLElBQUksMkRBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEksb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUV6RCxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFekMscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUFBLENBQUM7SUFFSywyQ0FBYyxHQUFyQjtRQUVHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFakIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckMsMEJBQTBCO1FBQzFCLElBQUksR0FBRyxHQUFHLElBQUksd0RBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDcEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2Qyw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQzNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMvRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQixFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0osQ0FBQztJQUVNLGlDQUFJLEdBQVgsVUFBWSxHQUFXO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUc7WUFDZixVQUFVLENBQUMsTUFBTTtZQUNqQixVQUFVLENBQUMsS0FBSztZQUNoQixVQUFVLENBQUMsS0FBSztTQUNsQixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1NBQ3BDO2FBQ0k7WUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDSix5QkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDN1dEO0FBQUE7QUFBQTtBQUF3QztBQUd4QyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxrQ0FBa0M7QUFFcEQ7O0dBRUc7QUFDSDtJQUFBO1FBQ0c7O1dBRUc7UUFDSSxjQUFTLEdBQXNCLEVBQUUsQ0FBQztRQUV6Qzs7V0FFRztRQUNJLFdBQU0sR0FBRyxJQUFJLGdEQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFMUM7O1dBRUc7UUFDSSxXQUFNLEdBQUcsSUFBSSxnREFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBaUJoRCxDQUFDO0lBZkU7Ozs7T0FJRztJQUNJLHFCQUFJLEdBQVgsVUFBWSxRQUF5QjtRQUVsQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0osYUFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDdENEO0FBQUE7QUFBQSxvREFBb0Q7QUFDcEQsd0RBQXdEO0FBQ2pELElBQU0sU0FBUyxHQUFHLDJDQUEyQztBQUVqRSxpREFBaUQ7QUFDakQsbUVBQW1FO0FBR25FLHVEQUF1RDtBQUN2RCw4Q0FBOEM7QUFDOUMsMENBQTBDO0FBQzFDLDREQUE0RDtBQUM1RCwwREFBMEQ7QUFFMUQscUVBQXFFO0FBQ3JFLGtFQUFrRTtBQUNsRSxrREFBa0Q7Ozs7Ozs7Ozs7Ozs7QUNqQnJEO0FBQUE7QUFBQTtBQUFBO0FBQW1EO0FBQ2Y7QUFrQnBDO0lBZUc7UUFBQSxpQkFnQkM7UUFmRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1lBQy9CLElBQUksS0FBSSxDQUFDLEVBQUUsSUFBSSxLQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO2dCQUNuRCxLQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2xCO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSDs7Ozs7Ozs7O1VBU0U7SUFDTCxDQUFDO0lBRUQsc0JBQVcsNkJBQVM7YUFBcEI7WUFDRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0QsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVywrQkFBVzthQUF0QjtZQUNHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQix3REFBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Z0JBQ3RFLE9BQU8sS0FBSyxDQUFDO2FBQ2Y7WUFFRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDOzs7T0FBQTtJQUVPLHNCQUFLLEdBQWIsVUFBYyxFQUFhO1FBQTNCLGlCQXFDQztRQW5DRSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUViLEVBQUUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBRWpCLEVBQUUsQ0FBQyxPQUFPLEdBQUcsVUFBQyxLQUFZO1lBQ3ZCLEtBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ2YsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNmLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEI7UUFDSixDQUFDLENBQUM7UUFFRixFQUFFLENBQUMsU0FBUyxHQUFHLFVBQUMsT0FBcUI7WUFDbEMsb0JBQW9CO1lBQ3BCLElBQUksT0FBTyxDQUFDLElBQUksWUFBWSxJQUFJLEVBQUU7Z0JBQy9CLElBQUksS0FBSSxDQUFDLE9BQU8sRUFBRTtvQkFDZixLQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDN0I7YUFDSDtpQkFDSSxJQUFJLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ3hDLElBQUk7b0JBQ0QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ25DLEtBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzNCO2dCQUNELE9BQU8sR0FBRyxFQUFFO29CQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsK0NBQStDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUM5RTthQUNIO1FBQ0osQ0FBQyxDQUFDO1FBRUYsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFDLEtBQWlCO1lBQzVCLEtBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ2YsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNmLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEI7UUFDSixDQUFDO0lBQ0osQ0FBQztJQUVNLHdCQUFPLEdBQWQsVUFBZSxHQUFXLEVBQUUsV0FBK0I7UUFBM0QsaUJBbURDO1FBbkQyQixxREFBK0I7UUFFeEQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBRWhDLElBQUksS0FBSSxDQUFDLFNBQVMsRUFBRTtnQkFDakIsTUFBTSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7Z0JBQ3RFLE9BQU87YUFDVDtZQUVELDhEQUE4RDtZQUM5RCxJQUFJLEVBQUUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU1QixFQUFFLENBQUMsTUFBTSxHQUFHO2dCQUNULHlCQUF5QjtnQkFDekIsRUFBRSxDQUFDLElBQUksQ0FDSixJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNaLE9BQU8sRUFBRSxPQUFPO29CQUNoQixXQUFXLEVBQUUsV0FBVztvQkFDeEIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTO29CQUM5QixRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7aUJBQzlCLENBQUMsQ0FDSixDQUFDO1lBQ0wsQ0FBQyxDQUFDO1lBRUYsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFDLEtBQUs7Z0JBQ2hCLE1BQU0sQ0FBQyw0QkFBNEIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELEVBQUUsQ0FBQyxPQUFPLEdBQUcsVUFBQyxLQUFZO2dCQUN2QixNQUFNLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUFDO1lBRUYsRUFBRSxDQUFDLFNBQVMsR0FBRyxVQUFDLFlBQVk7Z0JBQ3pCLElBQUk7b0JBQ0QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3hDLElBQUksR0FBRyxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTt3QkFDekMsS0FBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO3dCQUMzQixLQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUMzRCxPQUFPLEVBQUUsQ0FBQztxQkFDWjt5QkFDSTt3QkFDRix3REFBSyxDQUFDLGdDQUFnQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUN6RSxNQUFNLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLCtCQUErQixDQUFDLENBQUM7cUJBQ3ZFO2lCQUNIO2dCQUNELE9BQU8sR0FBRyxFQUFFO29CQUNULHdEQUFLLENBQUMsZ0NBQWdDLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM1RCxNQUFNLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLCtCQUErQixDQUFDLENBQUM7aUJBQ3ZFO1lBQ0osQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVNLHNCQUFLLEdBQVo7UUFDRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQix3REFBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7WUFDeEQsT0FBTztTQUNUO1FBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRU8sK0JBQWMsR0FBdEIsVUFBdUIsR0FBbUI7UUFDdkMsUUFBUSxHQUFHLENBQUMsT0FBTyxFQUFFO1lBQ2xCLEtBQUssZ0JBQWdCO2dCQUNsQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDO3dCQUNuQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7d0JBQ2QsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZO3FCQUNoQyxDQUFDLENBQUM7aUJBQ0w7Z0JBQUEsQ0FBQztnQkFDRixNQUFNO1lBRVQsS0FBSyxvQkFBb0I7Z0JBQ3RCLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO29CQUM1QixJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN2QztnQkFBQSxDQUFDO2dCQUNGLE1BQU07WUFFVCxLQUFLLGFBQWE7Z0JBQ2YsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO29CQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDbkM7Z0JBQ0QsTUFBTTtZQUVULEtBQUssU0FBUztnQkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM1RixNQUFNO1lBRVQ7Z0JBQ0csT0FBTyxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDMUYsTUFBTTtTQUVYO0lBQ0osQ0FBQztJQUVPLHFCQUFJLEdBQVosVUFBYSxHQUFtQjtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQix3REFBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7WUFDakQsT0FBTztTQUNUO1FBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSwwQkFBUyxHQUFoQixVQUFpQixJQUFVO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLHdEQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztZQUN0RCxPQUFPO1NBQ1Q7UUFFRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7YUFDSTtZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMscUNBQXFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM5RTtJQUNKLENBQUM7SUFFTSxpQ0FBZ0IsR0FBdkI7UUFDRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ1AsT0FBTyxFQUFFLG1CQUFtQjtTQUM5QixDQUFDLENBQUM7SUFDTixDQUFDO0lBRU0sOEJBQWEsR0FBcEIsVUFBcUIsSUFBWTtRQUFqQyxpQkFtQ0M7UUFsQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hDLElBQUksQ0FBQyxLQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxHQUFHLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQzlGLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsS0FBSSxDQUFDLElBQUksQ0FBQztnQkFDUCxPQUFPLEVBQUUsZUFBZTtnQkFDeEIsSUFBSSxFQUFFLElBQUk7YUFDWixDQUFDLENBQUM7WUFFSCxJQUFJLFlBQVksR0FBRztnQkFDaEIsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDbEMsQ0FBQztZQUNELEtBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2hELElBQUksVUFBVSxHQUFHO2dCQUNkLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzdCLENBQUM7WUFDRCxLQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztZQUU5QyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBQyxPQUFPO2dCQUM3QixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixLQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2dCQUNqQyxLQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDbkQsS0FBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ2pELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUM7WUFDRixLQUFJLENBQUMsb0JBQW9CLEdBQUcsVUFBQyxHQUFHO2dCQUM3QixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixLQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2dCQUNqQyxLQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDbkQsS0FBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ2pELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVNLDBCQUFTLEdBQWhCLFVBQWlCLFlBQW9CO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztTQUNoRTtRQUVELElBQUksQ0FBQyxJQUFJLENBQUM7WUFDUCxPQUFPLEVBQUUsV0FBVztZQUNwQixZQUFZLEVBQUUsWUFBWTtTQUM1QixDQUFDO0lBQ0wsQ0FBQztJQS9Qc0IsVUFBRyxHQUFHLGtEQUFTLENBQUM7SUFnUTFDLGFBQUM7Q0FBQTtBQWxRa0I7Ozs7Ozs7Ozs7Ozs7QUNuQm5CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBd0I7QUFFNEM7QUFDbEI7QUFDWjtBQUdtQztBQUdkO0FBQ2Y7QUFDUjtBQUNGO0FBQ0c7QUFFckM7SUFBQTtJQUVBLENBQUM7SUFEeUIsOEJBQWdCLEdBQUcsa0JBQWtCLENBQUM7SUFDaEUsb0JBQUM7Q0FBQTtBQUZ5QjtBQUV6QixDQUFDO0FBRUssU0FBUyxLQUFLLENBQUMsR0FBVztJQUM5QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLCtCQUErQjtBQUNsQyxDQUFDO0FBRUQ7SUFvQ0c7UUE5QlEsWUFBTyxHQUFxQjtZQUNqQyxLQUFLLEVBQUUsRUFBRTtZQUNULEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsQ0FBQztZQUNaLFVBQVUsRUFBRSxFQUFFO1lBQ2QsUUFBUSxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBRU0sZ0JBQVcsR0FBRyxJQUFJLDZDQUFHLEVBQUUsQ0FBQztRQVN4QixnQkFBVyxHQUFZLEVBQUUsQ0FBQztRQUUxQixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osWUFBTyxHQUFHLENBQUMsQ0FBQztRQUVaLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFFWixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUdqQixtQkFBYyxHQUFHLElBQUksbUVBQWMsRUFBRSxDQUFDO1FBSTNDLFFBQVEsQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsZ0RBQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4Qyx3QkFBd0I7UUFDeEIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSx5REFBRyxFQUFFLEVBQUU7WUFDUixHQUFHLElBQUksb0JBQW9CLENBQUM7U0FDOUI7UUFDRCxHQUFHLElBQUksZUFBZSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDN0MsR0FBRyxJQUFJLGNBQWMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVNLDBCQUFNLEdBQWIsVUFBYyxHQUFtQjtRQUFqQyxpQkF5REM7UUF2REUsR0FBRyxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLDhDQUFNLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFDLElBQUksSUFBSyxZQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFyQixDQUFxQixDQUFDO1FBRXRELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHO1lBQ25CLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUN6QyxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDcEIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QixLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFFaEMsSUFBSSxHQUFHLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQUMsR0FBRyxJQUFLLFlBQUssQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLEVBQXhCLENBQXdCLENBQUM7UUFFeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHdEQUFXLENBQy9CLEdBQUcsRUFDSCxJQUFJLENBQUMsTUFBTSxFQUNYLFVBQUMsWUFBWTtZQUNWLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsRUFDRCxVQUFDLFdBQVc7WUFDVCxLQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUMvQixLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FDSCxDQUFDO1FBRUYsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQztRQUNyQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUFDckUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsVUFBQyxHQUFHO1lBQ3RCLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLDRFQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxVQUFDLEtBQWEsRUFBRSxNQUFjLElBQUssWUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQTNCLENBQTJCLENBQUM7UUFDdEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBQyxLQUFXLElBQUssWUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQztRQUNwRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFDLEdBQVMsRUFBRSxLQUFXLElBQUssWUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQXZCLENBQXVCLENBQUM7UUFFMUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxjQUFNLFlBQUksQ0FBQyxRQUFRLEVBQUUsRUFBZixDQUFlLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFTSwwQkFBTSxHQUFiO0lBQ0EsQ0FBQztJQUVPLGdDQUFZLEdBQXBCO1FBQUEsaUJBWUM7UUFYRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxHQUFHLDhDQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUN2QyxJQUFJLENBQUMsVUFBQyxPQUFPO1lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9CLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxHQUFHO1lBQ1IsS0FBSyxDQUFDLDRCQUE0QixHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNoQyxLQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVPLGlDQUFhLEdBQXJCO1FBQUEsaUJBTUM7UUFMRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGtEQUFRLENBQ3pCLElBQUksQ0FBQyxNQUFNLEVBQ1gsY0FBTSxZQUFJLENBQUMsV0FBVyxFQUFFLEVBQWxCLENBQWtCLENBQzFCLENBQUM7SUFDTCxDQUFDO0lBQ08sZ0NBQVksR0FBcEI7UUFDRyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN2QjtJQUNKLENBQUM7SUFLTyxxQ0FBaUIsR0FBekIsVUFBMEIsSUFBYTtRQUNwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JDO0lBQ0osQ0FBQztJQUVNLDZCQUFTLEdBQWhCLFVBQWlCLE9BQWdCO1FBQWpDLGlCQWdJQztRQTlIRSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUNsQyxLQUFLLEVBQUUsWUFBWTtZQUNuQixHQUFHLEVBQUUsQ0FBQztZQUNOLEdBQUcsRUFBRSxHQUFHO1lBQ1IsS0FBSyxFQUFFLEdBQUc7WUFDVixPQUFPLEVBQUUsY0FBTSxZQUFJLENBQUMsT0FBTyxFQUFFLEVBQWQsQ0FBYztZQUM3QixPQUFPLEVBQUUsVUFBQyxNQUFNLElBQUssYUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUE3QixDQUE2QjtTQUNwRCxDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQ2hDLEtBQUssRUFBRSxVQUFVO1lBQ2pCLEdBQUcsRUFBRSxDQUFDO1lBQ04sR0FBRyxFQUFFLEdBQUc7WUFDUixLQUFLLEVBQUUsR0FBRztZQUNWLE9BQU8sRUFBRSxjQUFNLFlBQUksQ0FBQyxPQUFPLEVBQUUsRUFBZCxDQUFjO1lBQzdCLE9BQU8sRUFBRSxVQUFDLE1BQU0sSUFBSyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQTdCLENBQTZCO1NBQ3BELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUNoQyxLQUFLLEVBQUUsUUFBUTtZQUNmLEdBQUcsRUFBRSxDQUFDO1lBQ04sR0FBRyxFQUFFLEdBQUc7WUFDUixLQUFLLEVBQUUsR0FBRztZQUNWLE9BQU8sRUFBRSxjQUFNLFlBQUksQ0FBQyxPQUFPLEVBQUUsRUFBZCxDQUFjO1lBQzdCLE9BQU8sRUFBRSxVQUFDLE1BQU0sSUFBSyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQTdCLENBQTZCO1NBQ3BELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUM1QixLQUFLLEVBQUUsTUFBTTtZQUNiLEdBQUcsRUFBRSxDQUFDO1lBQ04sR0FBRyxFQUFFLEVBQUU7WUFDUCxLQUFLLEVBQUUsQ0FBQztZQUNSLE9BQU8sRUFBRSxjQUFNLFlBQUksQ0FBQyxPQUFPLEVBQUUsRUFBZCxDQUFjO1lBQzdCLE9BQU8sRUFBRSxVQUFDLE1BQU0sSUFBSyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBdkIsQ0FBdUI7U0FDOUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQzVCLEtBQUssRUFBRSxNQUFNO1lBQ2IsR0FBRyxFQUFFLEdBQUc7WUFDUixHQUFHLEVBQUUsQ0FBQztZQUNOLEtBQUssRUFBRSxDQUFDO1lBQ1IsT0FBTyxFQUFFLGNBQU0sWUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFkLENBQWM7WUFDN0IsT0FBTyxFQUFFLFVBQUMsTUFBTSxJQUFLLFFBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFyQyxDQUFxQztTQUM1RCxDQUFDLENBQUM7UUFTSCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUNyQiw0Q0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFDLFVBQVU7WUFFekIsSUFBSSxXQUFXLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FDeEM7Z0JBQ0csS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLEVBQUU7b0JBQ04sS0FBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7b0JBQzFCLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzFCLENBQUM7Z0JBQ0QsT0FBTyxFQUFFLFNBQVM7Z0JBQ2xCLEtBQUssRUFBRSxjQUFjO2FBQ3ZCLENBQUMsQ0FBQztZQUNOLElBQUksU0FBUyxFQUFFO2dCQUNaLEtBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO2dCQUMxQixTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ3BCO1lBRUQsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtZQUNoRCxJQUFJLEtBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUN2QixJQUFJLE1BQU0sR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLFNBQXdCLENBQUM7Z0JBQ2pELElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFO29CQUN4QixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7b0JBQzNDLElBQUksR0FBRyxHQUFHLHdCQUF3QixDQUFDO29CQUNuQyxLQUFLLElBQUksR0FBRyxJQUFJLFlBQVksRUFBRTt3QkFDM0IsSUFBSSxHQUFHLEtBQUssVUFBVSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7NEJBQzFDLFNBQVM7eUJBQ1g7d0JBQ0QsR0FBRyxJQUFJLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO3FCQUMzRDtvQkFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDdkQ7YUFDSDtRQUNKLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQztZQUNqQyxLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsR0FBRyxFQUFFLENBQUM7WUFDTixLQUFLLEVBQUUsR0FBRztZQUNWLE9BQU8sRUFBRSxVQUFDLE1BQU0sSUFBSyxRQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsR0FBRyxFQUFwQyxDQUFvQztTQUMzRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1lBQ3BDLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsR0FBRyxFQUFFLEdBQUc7WUFDUixHQUFHLEVBQUUsQ0FBQztZQUNOLEtBQUssRUFBRSxHQUFHO1lBQ1YsT0FBTyxFQUFFLFVBQUMsTUFBTSxJQUFLLFFBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLEVBQXBDLENBQW9DO1NBQzNELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFOUIsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoRCxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUN6QixLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDeEMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztZQUNyRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFTywrQkFBVyxHQUFuQixVQUFvQixHQUFXO1FBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN4QjthQUNJO1lBQ0YsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hCO0lBQ0osQ0FBQztJQUVPLHNDQUFrQixHQUExQixVQUEyQixZQUFvQyxFQUFFLElBQVk7UUFDMUUsSUFBSSxHQUFHLEdBQVMsWUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDMUIsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUMzQixHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFXLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFXLENBQUMsQ0FBQzthQUNsRztpQkFDSSxJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUU7Z0JBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNsQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ1IsR0FBRyxJQUFJLElBQUksQ0FBQztxQkFDZDtvQkFDRCxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEM7YUFDSDtpQkFDSTtnQkFDRixHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM3QjtTQUNIO2FBQ0k7WUFDRixHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2QsQ0FBQztJQUVPLDhCQUFVLEdBQWxCLFVBQW1CLElBQVU7UUFFMUIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNSLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFTyw0QkFBUSxHQUFoQixVQUFpQixJQUFVO1FBQTNCLGlCQVlDO1FBWEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxNQUFNLEdBQUc7WUFDVixLQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNmLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN6QixLQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbEIsQ0FBQztRQUNELEdBQUcsQ0FBQyxPQUFPLEdBQUcsVUFBQyxNQUFNO1lBQ2xCLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQ0QsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTyxrQ0FBYyxHQUF0QjtRQUFBLGlCQThEQztRQTVERSxJQUFJLFdBQWdCLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25FLFdBQVcsR0FBRztnQkFDWCxLQUFLLEVBQUU7b0JBQ0osS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUU7b0JBQzNCLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsSUFBSSxFQUFFO29CQUM1QixRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRO2lCQUNqQztnQkFDRCxLQUFLLEVBQUUsS0FBSzthQUNkLENBQUM7U0FDSjthQUNJO1lBQ0Ysb0RBQW9EO1lBQ3BELFdBQVcsR0FBRztnQkFDWCxLQUFLLEVBQUU7b0JBQ0osS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUU7b0JBQzNCLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsSUFBSSxFQUFFO2lCQUM5QjtnQkFDRCxLQUFLLEVBQUUsS0FBSzthQUNkLENBQUM7U0FDSjtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkYsU0FBUyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO2FBQzVDLElBQUksQ0FBQyxVQUFDLE1BQU07WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBQ2xELHFHQUFxRztZQUVyRyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7Z0JBQ2xCLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO2FBQ3pDO2lCQUNJO2dCQUNGLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUVuQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFO29CQUNuRCxLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2xGO2dCQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM5RSxLQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUV0RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUNwRCxLQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7Z0JBQzlCLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO3FCQUNiLElBQUksQ0FBQztvQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUN2QixLQUFJLENBQUMsZUFBZSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3ZFLENBQUMsQ0FBQztxQkFDRCxLQUFLLENBQUMsVUFBQyxHQUFHO29CQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ3hDLENBQUMsQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxLQUFJLENBQUMsUUFBUSxFQUFFO29CQUNqQixLQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQ3RCO2FBQ0g7UUFDSixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxNQUFNO1lBQ1gsS0FBSyxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNULENBQUM7SUFFTywrQkFBVyxHQUFuQixVQUFvQixNQUFlO1FBRWhDLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFbEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9CLElBQUksTUFBTSxFQUFFO1lBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUNuQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDeEI7YUFDSTtZQUNGLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1NBQ3BDO0lBQ0osQ0FBQztJQUVPLDhCQUFVLEdBQWxCO1FBQ0csSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDL0Isd0VBQXdFO1lBQ3hFLDBFQUEwRTtZQUMxRSw4REFBOEQ7WUFDOUQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUF3QixDQUFDO1lBQ2pELE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUF1QjtnQkFDaEQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDO1NBQ0w7SUFDSixDQUFDO0lBRU8sK0JBQVcsR0FBbkI7UUFBQSxpQkE4QkM7UUE1QkUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxFQUFFO1lBQzdCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN4RDtRQUVELElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUM3RCxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBRS9ELHdFQUF3RTtRQUN4RSxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpFLFNBQVM7UUFDVCxPQUFPLElBQUksT0FBTyxDQUFPLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDdEMsTUFBTSxDQUFDLE1BQU0sQ0FDVixVQUFDLElBQUk7Z0JBQ0YsbURBQW1EO2dCQUNuRCxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUVwQixPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUMsRUFDRCxZQUFZLEVBQ1osS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFTyw0QkFBUSxHQUFoQjtRQUNHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sbUNBQWUsR0FBdkIsVUFBd0IsVUFBa0IsRUFBRSxXQUFtQjtRQUM1RCxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO1lBQ2xELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxRSxJQUFJLFVBQVUsR0FBRyxXQUFXLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxHQUFHLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUMxRTtpQkFDSTtnQkFDRixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDM0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsU0FBUyxHQUFHLFVBQVUsR0FBRyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDekU7U0FDSDtJQUNKLENBQUM7SUFFTywrQkFBVyxHQUFuQjtRQUNHLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBRXBFLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDO1FBQ3JELElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO1FBRXZELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsYUFBYSxDQUFDO1FBRWhELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBSU8sMkJBQU8sR0FBZjtRQUVHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLE9BQU87U0FDVDtRQUVELElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3BDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3RDLElBQUksUUFBUSxHQUFHLFdBQVcsR0FBRyxZQUFZLENBQUM7UUFFMUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDOUIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDaEMsSUFBSSxLQUFLLEdBQUcsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUVqQyxJQUFJLEtBQWEsQ0FBQztRQUNsQixJQUFJLE1BQWMsQ0FBQztRQUVuQixJQUFJLFFBQVEsR0FBRyxLQUFLLEVBQUU7WUFDbkIsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQztZQUN4QyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUN6QjthQUNJO1lBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztZQUN0QyxNQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN6QjtRQUVEOzs7Ozs7Ozs7VUFTRTtRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXJELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNELEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDakMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQztRQUVuQyxHQUFHLENBQUMsTUFBTTtZQUNQLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxLQUFLO2dCQUM3QyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSztnQkFDekMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUs7Z0JBQ3pDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFFdEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTdDLElBQUksR0FBVyxDQUFDO1FBRWhCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7UUFDN0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyw4Q0FBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFaEMsSUFBSSxRQUFRLEdBQUcsc0RBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEMsR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBRXRDLEdBQUcsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQztRQUNqQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQixHQUFHLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXhELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQ3hDLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtnQkFDaEIsR0FBRyxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO2FBQ3JFO2lCQUNJO2dCQUNGLEdBQUcsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQzthQUNyRTtZQUNELEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0RDthQUNJO1lBQ0YsR0FBRyxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLFlBQVksR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsR0FBRyxHQUFHLCtEQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVPLDJCQUFPLEdBQWYsVUFBZ0IsS0FBYSxFQUFFLE1BQWM7UUFFMUMsOENBQThDO1FBRTlDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtZQUN0QixDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMzQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQztRQUV2QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVPLCtCQUFXLEdBQW5CLFVBQW9CLEtBQVc7UUFFNUIsaUJBQWlCO1FBQ2pCLGlCQUFpQjtRQUNqQixnQkFBZ0I7UUFDaEIsR0FBRztRQUVILElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFTywwQkFBTSxHQUFkLFVBQWUsR0FBUyxFQUFFLEtBQVc7UUFDbEMscURBQXFEO1FBQ3JELElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFDSixnQkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDdm9CRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTRDO0FBQ1I7QUFDUTtBQUs1QztJQXNDRyxxQkFDRyxNQUFzQixFQUN0QixNQUFjLEVBQ2QsYUFBaUMsRUFDakMsY0FBbUM7UUFKdEMsaUJBZ0pDO1FBMUlFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLFVBQUMsUUFBUSxJQUFLLFlBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQTVCLENBQTRCLENBQUM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUM7UUFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFFckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDO1FBQ2xELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXZDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUMsSUFBSSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxjQUFjLENBQUMsRUFBRSxHQUFHLGdCQUFnQixDQUFDO1FBQ3JDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFdEMsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxRQUFRLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUN6QixRQUFRLENBQUMsU0FBUyxHQUFHLFVBQVUsR0FBRyxnREFBTyxDQUFDLEtBQUssQ0FBQztRQUNoRCxjQUFjLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUM7UUFDL0MsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLHNCQUFzQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQztRQUN2RCxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztRQUNuRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2RSxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUM7UUFDbEMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEMsRUFBRTtRQUNGLHVCQUF1QjtRQUN2QixFQUFFO1FBQ0YsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxZQUFZLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV2QyxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLFVBQVUsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDO1FBQzdCLFVBQVUsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ2hDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUM7UUFDMUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksb0RBQU8sQ0FDM0IsWUFBWSxFQUFFO1lBQ2QsRUFBRSxFQUFFLGFBQWE7U0FDbkIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsR0FBRztZQUNsQyxZQUFZLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDaEUsQ0FBQztRQUVELElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7UUFDbEMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVwQyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELFlBQVksQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDO1FBQy9CLFlBQVksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQzlCLFlBQVksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFcEMsWUFBWSxDQUFDLE9BQU8sR0FBRztZQUNwQixLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLFlBQVksR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztZQUM3QyxLQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxFQUFFO1FBQ0YsV0FBVztRQUNYLEVBQUU7UUFDRixJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELFdBQVcsQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXRDLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDbkIsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdkIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUkvQixFQUFFO1FBQ0YsdUJBQXVCO1FBQ3ZCLEVBQUU7UUFDRixJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELFlBQVksQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXZDLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsVUFBVSxDQUFDLEVBQUUsR0FBRyxZQUFZLENBQUM7UUFDN0IsVUFBVSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDaEMsVUFBVSxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztRQUMxQyxZQUFZLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXJDLElBQUksY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsY0FBYyxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQztRQUNyQyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QyxZQUFZLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsU0FBUyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFDOUIsU0FBUyxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUM7UUFDcEMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV0QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNwQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQztRQUMzQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNoRCxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEdBQUc7WUFDN0IsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdFLENBQUMsQ0FBQztRQUVGLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNsRCxZQUFZLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXBDLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEQsWUFBWSxDQUFDLEVBQUUsR0FBRyxjQUFjLENBQUM7UUFDakMsWUFBWSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDOUIsWUFBWSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDN0IsU0FBUyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwQyxZQUFZLENBQUMsT0FBTyxHQUFHO1lBRXBCLEtBQUksQ0FBQyxjQUFjLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUM7SUFDSixDQUFDO0lBM0tELHNCQUFXLCtCQUFNO2FBQWpCO1lBQ0csT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxhQUFhLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDcEUsQ0FBQzthQUNELFVBQWtCLElBQWE7WUFDNUIsMkNBQTJDO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUM7UUFDeEUsQ0FBQzs7O09BTEE7SUFPRCxzQkFBVyxnQ0FBTzthQUFsQjtZQUNHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLENBQUM7YUFDRCxVQUFtQixJQUFhO1lBQzdCLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3hCLE9BQU87YUFDVDtZQUVELElBQUksSUFBSSxFQUFFO2dCQUNQLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDakI7aUJBQ0k7Z0JBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzthQUM1QztRQUNKLENBQUM7OztPQWRBO0lBa0tPLDZCQUFPLEdBQWY7UUFBQSxpQkFxQkM7UUFwQkUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUVqQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyw4Q0FBTSxDQUFDLEdBQUcsQ0FBQzthQUMzQixJQUFJLENBQUM7WUFDSCxLQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxVQUFDLFFBQW9CO2dCQUM5QyxLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hDLENBQUM7WUFDRCxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQzFDLEtBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztZQUNuRCxLQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUN0QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxHQUFHO1lBQ1IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsVUFBVSxDQUFDO2dCQUNSLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNsQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNULENBQUM7SUFFTyxtQ0FBYSxHQUFyQixVQUFzQixRQUFvQjtRQUV2QyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0osQ0FBQztJQUNKLGtCQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUM3TkQ7QUFBQTtBQUFBO0FBQUE7QUFBaUQ7QUFDRjtBQUUvQyxJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFFbkI7SUFBQTtRQUNXLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFDWCxnQkFBVyxHQUFHLENBQUMsQ0FBQztRQUNoQixxQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUF3QmhDLENBQUM7SUF0QkUsc0JBQVcsK0JBQVU7YUFBckI7WUFDRyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDM0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVywwQkFBSzthQUFoQjtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN0QixDQUFDOzs7T0FBQTtJQUVELHNCQUFXLG9DQUFlO2FBQTFCO1lBQ0csT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFFTSx1QkFBSyxHQUFaO1FBQ0csSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVNLDBCQUFRLEdBQWYsVUFBZ0IsS0FBYTtRQUMxQixJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBQ0osY0FBQztBQUFELENBQUM7QUFFRDs7O0dBR0c7QUFDSDtJQUFBO1FBRVcsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVuQixZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUN4QixzQkFBaUIsR0FBRyxJQUFJLHVEQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsYUFBUSxHQUFHLEtBQUssQ0FBQztJQTJGNUIsQ0FBQztJQXRGRSxzQkFBVyxvREFBcUI7UUFIaEM7O1dBRUc7YUFDSDtZQUNHLDhEQUE4RDtZQUM5RCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFO2dCQUMxQyxPQUFPLElBQUksR0FBRyxPQUFPLENBQUM7YUFDeEI7WUFFRCxvQ0FBb0M7WUFDcEMsSUFBSSxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO1lBQ3BELElBQUksYUFBYSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBRTFFLElBQUksTUFBTSxHQUFHLFlBQVksR0FBRyxhQUFhLENBQUM7WUFFMUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNoQixNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQzthQUN4QjtZQUVELHNDQUFzQztZQUN0QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDZDQUFjO2FBQXpCO1lBQ0csT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDO1FBQzVDLENBQUM7OztPQUFBO0lBS0Qsc0JBQVcsd0NBQVM7UUFIcEI7O1dBRUc7YUFDSDtZQUNHLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7Z0JBQzFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO2FBQ3hFO2lCQUNJO2dCQUNGLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQzthQUN4QztRQUNKLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSSx3Q0FBWSxHQUFuQjtRQUNHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNJLG1DQUFPLEdBQWQ7UUFFRyxnRkFBZ0Y7UUFDaEYsNENBQTRDO1FBQzVDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixpRkFBaUY7WUFDakYsSUFBSSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXZDLDRCQUE0QjtZQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQzFCO2FBQ0k7UUFDRixvRUFBb0U7UUFDcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsQ0FBQztZQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsSUFBSTtZQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sRUFDOUI7WUFDQyxvQ0FBb0M7WUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLG9DQUFRLEdBQWYsVUFBZ0IsTUFBYztRQUMzQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFZixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseURBQVMsRUFBRSxDQUFDO1NBQ3JDO0lBQ0osQ0FBQztJQUNKLHdCQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUN2SUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXFDO0FBQ2M7QUFFRjtBQUNPO0FBSXhEO0lBa0JHLGtCQUFtQixNQUFjLEVBQUUsWUFBK0I7UUFoQjFELGVBQVUsR0FBRyxJQUFJLDZDQUFHLEVBQUUsQ0FBQztRQUV2QixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUViLFVBQUssR0FBRyxJQUFJLHlEQUFTLEVBQUUsQ0FBQztRQUN4QixrQkFBYSxHQUFHLElBQUksb0VBQWlCLEVBQUUsQ0FBQztRQVc3QyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFFakMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFkRCxzQkFBVyx5QkFBRzthQUFkO1lBQ0csT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztRQUMvQixDQUFDOzs7T0FBQTtJQUVELHNCQUFXLCtCQUFTO2FBQXBCO1lBQ0csT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztRQUN2QyxDQUFDOzs7T0FBQTtJQVVNLHVCQUFJLEdBQVg7UUFDRyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDdkI7SUFDSixDQUFDO0lBRU8seUJBQU0sR0FBZCxVQUFlLEtBQVM7UUFBeEIsaUJBbUVDO1FBbkVjLGlDQUFTO1FBRXJCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU87U0FDVDtRQUNELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztZQUMvRCxPQUFPO1NBQ1Q7UUFDRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWixVQUFVLENBQUM7Z0JBQ1IsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDVixPQUFPO1NBQ1Q7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUNsQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixPQUFPO1NBQ1Q7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUU7WUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0UsT0FBTztTQUNUO2FBQ0k7WUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3ZCO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO1lBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDbEMscUJBQXFCLENBQUMsY0FBUSxLQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsT0FBTztTQUNUO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixJQUFJO1lBQ0QsSUFBSSxDQUFDLFlBQVksRUFBRTtpQkFDZixJQUFJLENBQUMsVUFBQyxJQUFVO2dCQUVkLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7b0JBQ3hCLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM1QixLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3ZDLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBRXZCLHFCQUFxQixDQUFDLGNBQVEsS0FBSSxDQUFDLE1BQU0sRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNqRDtZQUNKLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7Z0JBQ1YsSUFBSSxHQUFHLEtBQUssd0RBQWEsQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDekMsOERBQThEO29CQUM5RCxvQkFBb0I7b0JBQ3BCLEtBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO29CQUNsQixLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNsQixPQUFPO2lCQUNUO3FCQUNJO29CQUNGLHdEQUFLLENBQUMsb0NBQW9DLEdBQUcsR0FBRyxDQUFDLENBQUM7aUJBQ3BEO1lBQ0osQ0FBQyxDQUFDO2lCQUNELE9BQU8sQ0FBQztnQkFDTixLQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQztTQUNSO1FBQ0QsT0FBTyxHQUFHLEVBQUU7WUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLG1EQUFtRCxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNkO0lBQ0osQ0FBQztJQUNKLGVBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQzdHRDtBQUFBO0FBQUE7SUFBQTtJQUlBLENBQUM7SUFIZ0IsYUFBSyxHQUFHLENBQUMsQ0FBQztJQUNWLGFBQUssR0FBRyxDQUFDLENBQUM7SUFDVixhQUFLLEdBQUcsRUFBRSxDQUFDO0lBQzVCLGNBQUM7Q0FBQTtBQUptQjs7Ozs7Ozs7Ozs7OztBQ0FwQjtBQUFBO0FBQUE7QUFBb0M7QUFXcEM7SUFBQTtJQW1DQSxDQUFDO0lBakNnQixnQkFBVSxHQUF4QixVQUF5QixPQUErQztRQUNyRSxTQUFTLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFO2FBQ3JDLElBQUksQ0FBQyxVQUFDLE9BQU87WUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO29CQUMvQixLQUFLLEVBQUUsQ0FBQztvQkFDUixHQUFHLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2lCQUM3RDthQUNIO1lBQ0QsR0FBRyxHQUFHLEtBQUssR0FBRyxtQkFBbUIsR0FBRyxHQUFHLENBQUM7WUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUUxQyxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtvQkFFL0IsSUFBSSxNQUFNLEdBQUc7d0JBQ1YsS0FBSyxFQUFFLFNBQVMsR0FBRyxXQUFXLEVBQUU7d0JBQ2hDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtxQkFDM0I7b0JBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQztpQkFDakI7YUFDSDtRQUNKLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxVQUFDLEdBQUc7WUFDUix3REFBSyxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUNKLFlBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQzdDRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBOEM7QUFFTDtBQUNEO0FBQ0c7QUFDQTtBQUUzQyw4REFBOEQ7QUFDOUQsSUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDO0FBTzFCO0lBY0cseUJBQW1CLEdBQWE7UUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQWJELHNCQUFXLHFDQUFRO2FBQW5CO1lBQ0csdUNBQXVDO1lBQ3ZDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDckMsT0FBTyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkYsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyxzQ0FBUzthQUFwQjtZQUNHLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDckMsT0FBTyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekYsQ0FBQzs7O09BQUE7SUFLSixzQkFBQztBQUFELENBQUM7O0FBRUQ7SUFJRywyQkFBbUIsUUFBZ0IsRUFBRSxTQUFpQjtRQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDO0lBQ0osd0JBQUM7QUFBRCxDQUFDOztBQVdEO0lBU0csZ0JBQW1CLFFBQTBCOztRQVB0QyxRQUFHLEdBQUcsSUFBSSxnREFBSSxDQUFDLHFEQUFXLENBQUMsQ0FBQztRQUM1QixXQUFNLEdBQUcsZ0RBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUNmLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBSzVCLElBQUksUUFBUSxFQUFFO1lBQ1gsSUFBSSxDQUFDLFlBQVksU0FBRyxRQUFRLENBQUMsWUFBWSxtQ0FBSSxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQy9ELElBQUksQ0FBQyxHQUFHLFNBQUcsUUFBUSxDQUFDLEdBQUcsbUNBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNwQyxJQUFJLENBQUMsTUFBTSxTQUFHLFFBQVEsQ0FBQyxNQUFNLG1DQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDN0MsSUFBSSxDQUFDLFVBQVUsU0FBRyxRQUFRLENBQUMsVUFBVSxtQ0FBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3pELElBQUksQ0FBQyxlQUFlLFNBQUcsUUFBUSxDQUFDLGVBQWUsbUNBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUN4RSxJQUFJLENBQUMsR0FBRyxTQUFHLFFBQVEsQ0FBQyxHQUFHLG1DQUFJLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDdEM7SUFDSixDQUFDO0lBRU0sOEJBQWEsR0FBcEIsVUFBcUIsRUFBeUI7UUFFM0MsSUFBSSxVQUFnQixDQUFDO1FBQ3JCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEMsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3ZCLFVBQVUsR0FBRyxnREFBSSxDQUFDLFNBQVMsQ0FDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2IsQ0FBQztTQUNKO2FBQ0k7WUFDRixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ25CLElBQUksRUFBRSxHQUFHLElBQUksZ0RBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLEdBQUcsR0FBRyxnREFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVoRCxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRywyREFBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUQsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQ2YsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1lBQ2IsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3BDLFVBQVUsR0FBRyxnREFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDckIsQ0FBQztJQUVELEVBQUU7SUFDRixtREFBbUQ7SUFDbkQsRUFBRTtJQUNLLHFCQUFJLEdBQVgsVUFBWSxJQUFZO1FBQ3JCLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFTSwwQkFBUyxHQUFoQixVQUFpQixLQUFXO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksNkJBQVksR0FBbkIsVUFBb0IsRUFBeUI7UUFFMUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFNUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ1QsT0FBTyxJQUFJLG1EQUFPLENBQUMsSUFBSSxnREFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLGdEQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO2FBQ0k7WUFDRixPQUFPLElBQUksbURBQU8sQ0FBQyxJQUFJLGdEQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxnREFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BGO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksNkJBQVksR0FBbkIsVUFBb0IsRUFBeUI7UUFDMUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFL0MsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDN0MsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDL0MsSUFBSSxLQUFLLEdBQUcsV0FBVyxHQUFHLFlBQVksQ0FBQztRQUV2QyxJQUFJLFlBQVksQ0FBQztRQUNqQixJQUFJLGFBQWEsQ0FBQztRQUNsQixJQUFJLEtBQUssR0FBRyxLQUFLLEVBQUU7WUFDaEIsNkJBQTZCO1lBQzdCLGFBQWEsR0FBRyxZQUFZLENBQUM7WUFDN0IsWUFBWSxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUM7U0FDdEM7YUFDSTtZQUNGLDRCQUE0QjtZQUM1QixhQUFhLEdBQUcsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUNwQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1NBQzdCO1FBQ0QsYUFBYSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDakMsWUFBWSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFaEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxJQUFJLEdBQUcsR0FBRyxJQUFJLGdEQUFJLENBQUM7WUFDaEIsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxDQUFDLGFBQWEsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2hDLENBQUMsQ0FBQztRQUNILElBQUksR0FBRyxHQUFHLElBQUksZ0RBQUksQ0FBQztZQUNoQixZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxhQUFhLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQixDQUFDO1FBQ0YsT0FBTyxJQUFJLG1EQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDSixhQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUM1S0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsNkRBQTZEO0FBQzdELDBCQUEwQjtBQUMwRDtBQUN6QjtBQUNKO0FBR3ZEOztHQUVHO0FBQ0g7SUFBQTtRQUVXLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFnRjVCLENBQUM7SUEzRUUsc0JBQVcsZ0NBQU87UUFIbEI7O1dBRUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQU9EOzs7Ozs7T0FNRztJQUNJLG1DQUFhLEdBQXBCLFVBQXFCLElBQVksRUFBRSxZQUE0QjtRQUEvRCxpQkFzQ0M7UUFwQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFckIsT0FBTyxJQUFJLE9BQU8sQ0FBYyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBRTdDLHdDQUF3QztZQUN4QyxJQUFJLEtBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDeEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7YUFDMUI7WUFFRCxLQUFJLENBQUMsTUFBTSxHQUFHLElBQUksNkZBQVksRUFBRSxDQUFDO1lBQ2pDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN4QixLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxVQUFDLEVBQXVCO29CQUFyQixJQUFJO2dCQUU1QixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDM0IsK0RBQStEO29CQUMvRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxFQUFFO3dCQUM1QixZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ3JCO2lCQUNIO3FCQUNJO29CQUNGLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO29CQUV0QixJQUFJLElBQUksR0FBRywrREFBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFdEMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUVqQixLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUN4QixLQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztvQkFFeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoQjtZQUNKLENBQUMsQ0FBQztZQUVGLEtBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVNLDRCQUFNLEdBQWIsVUFBYyxLQUFlO1FBRTFCLGdEQUFnRDtRQUNoRCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsRCxRQUFRLElBQUksRUFBRTtZQUNYLEtBQUssTUFBTTtnQkFDUixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQywyREFBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsMkRBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQywyREFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLE1BQU07WUFFVCxLQUFLLFdBQVc7Z0JBQ2IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsMkRBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxNQUFNO1lBRVQ7Z0JBQ0csTUFBTTtTQUNYO0lBQ0osQ0FBQztJQUNKLGtCQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUM5RUQ7QUFBQTtBQUFBLElBQUksU0FBUyxHQUFrQztJQUM1QztRQUNHLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRTtZQUNoRCxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtZQUNuQyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUM1QyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUNwQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFO1lBQ2pELEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQzNDLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDakQsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDdEMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDeEMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDOUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUMvQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUNwQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMxQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFO1NBQ25EO0tBQ0g7SUFDRDtRQUNHLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLG1CQUFtQixFQUFFLFNBQVMsRUFBRTtZQUN0RCxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUU7WUFDekQsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDdEMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNwRCxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUU7WUFDaEUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUM5QyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMxQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ3BELEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRTtZQUNoRSxFQUFFLEtBQUssRUFBRSw4QkFBOEIsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUU7WUFDckUsRUFBRSxLQUFLLEVBQUUscUNBQXFDLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixFQUFFO1NBQ3RGO0tBQ0g7SUFDRDtRQUNHLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRTtZQUNoRCxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN6QyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN6QyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN6QyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN6QyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN4QyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUM1QyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMxQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMxQyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ25ELEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUN0RCxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDdEQsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1NBQ3hEO0tBQ0g7SUFDRDtRQUNHLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUU7WUFDNUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDekMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDM0MsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDM0MsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDM0MsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDM0MsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDM0MsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElB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QUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEQsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsMkRBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQywyREFBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsMkRBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFD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LENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU0sMkJBQUssR0FBWixVQUFhLEtBQWtCO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSwyQkFBSyxHQUFaLFVBQWEsR0FBUztRQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQzVCLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSx5Q0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSx5Q0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpDLE9BQU8sR0FBRyxDQUFDO0lBQ2QsQ0FBQztJQUNKLGtCQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUNsSEQ7QUFBQTtBQUFBOzs7R0FHRztBQUNIO0lBR0cscUJBQW1CLEdBQVc7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVNLHlCQUFHLEdBQVYsVUFBVyxDQUFTO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRU0saUNBQVcsR0FBbEIsVUFBbUIsRUFBUTtRQUN4QixJQUFJLEdBQUcsR0FBRztZQUNQLEdBQUcsRUFBRSxNQUFNLENBQUMsU0FBUztZQUNyQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUztTQUN4QjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBUztZQUN4QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILGtGQUFrRjtRQUNsRixHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0IsT0FBTyxHQUFHLENBQUM7SUFDZCxDQUFDO0lBRU0saUNBQVcsR0FBbEIsVUFBbUIsS0FBWTtRQUM1QixJQUFJLEdBQUcsR0FBRztZQUNQLEdBQUcsRUFBRSxNQUFNLENBQUMsU0FBUztZQUNyQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUztTQUN4QjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFBUTtZQUN2QixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDZCxDQUFDO0lBQ0osa0JBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQ3ZERDtBQUFBO0FBQUE7QUFBNEM7QUFHNUM7O0dBRUc7QUFDSDtJQVdHLHlCQUNHLFFBQWtCLEVBQ2xCLE9BQWlCLEVBQ2pCLEVBQVUsRUFDVixFQUFVLEVBQ1YsRUFBVTtRQUVWLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSx3REFBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksd0RBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLHdEQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSx3REFBVyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksd0RBQVcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLHdEQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsc0JBQUksaUNBQUk7YUFBUjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBQ0Qsc0JBQUksaUNBQUk7YUFBUjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBQ0Qsc0JBQUksaUNBQUk7YUFBUjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBRUQsc0JBQUksaUNBQUk7YUFBUjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBQ0Qsc0JBQUksaUNBQUk7YUFBUjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBQ0Qsc0JBQUksaUNBQUk7YUFBUjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBRU0sdUNBQWEsR0FBcEI7UUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUxQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDSixzQkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDaEVEO0FBQUE7QUFBQTtBQUFvQztBQUVwQztJQUtHLHFCQUFZLE1BQWdCLEVBQUUsS0FBYTtRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsc0JBQVcsMEJBQUM7YUFBWjtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDO2FBUUQsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3pDLENBQUM7OztPQVZBO0lBQ0Qsc0JBQVcsMEJBQUM7YUFBWjtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDO2FBUUQsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3pDLENBQUM7OztPQVZBO0lBQ0Qsc0JBQVcsMEJBQUM7YUFBWjtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDO2FBUUQsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3pDLENBQUM7OztPQVZBO0lBWU0sNEJBQU0sR0FBYjtRQUNHLE9BQU8sSUFBSSx5Q0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDSixrQkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25Da0M7QUFFbkM7O0dBRUc7QUFDSDtJQVdHOzs7T0FHRztJQUNILGNBQW1CLE1BQWlCO1FBQ2pDLElBQUksTUFBTSxFQUFFO1lBQ1QsSUFBSSxDQUFDLE1BQU0sa0JBQU8sTUFBTSxDQUFDLENBQUM7U0FDNUI7YUFDSTtZQUNGLElBQUksQ0FBQyxNQUFNLEdBQUc7Z0JBQ1gsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUFDLENBQUM7U0FDakI7SUFDSixDQUFDO0lBckJELHNCQUFXLDhCQUFZO2FBQXZCO1lBQ0csSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNsRixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUkseUNBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2xGLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSx5Q0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEYsT0FBTyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUF3QkQsc0JBQWtCLGdCQUFRO1FBTjFCOzs7OztXQUtHO2FBQ0g7WUFDRyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFPRCxzQkFBa0IsYUFBSztRQUx2Qjs7OztXQUlHO2FBQ0g7WUFDRyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDOzs7T0FBQTtJQUVEOzs7O09BSUc7SUFDSSxvQkFBSyxHQUFaO1FBQ0csT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLGtCQUFHLEdBQVYsVUFBVyxHQUFXLEVBQUUsR0FBVztRQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksa0JBQUcsR0FBVixVQUFXLEdBQVcsRUFBRSxHQUFXLEVBQUUsR0FBVztRQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLG9CQUFLLEdBQVosVUFBYSxHQUFTO1FBQ25CLElBQUksSUFBSSxHQUFhLEVBQUUsQ0FBQztRQUV4QixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQy9CLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztZQUNaLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQy9CLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0RDtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDakI7UUFDRCxPQUFPLElBQUkseUNBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksdUJBQVEsR0FBZixVQUFnQixHQUFTLEVBQUUsQ0FBYTtRQUFiLHlCQUFhO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLG9CQUFLLEdBQVosVUFBYSxLQUFXO1FBRXJCLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMvQixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUMvQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDekIsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUM5QztnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDNUI7U0FDSDtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksc0JBQU8sR0FBZDtRQUVHLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFeEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0YsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUvRixJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUVoQyw0QkFBNEI7UUFDNUIsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFFaEYsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDO1NBQ2Q7UUFDRCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUVoQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM5RCxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM5RCxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFFOUQsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSx3QkFBUyxHQUFoQjtRQUNHLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMvQixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzQztTQUNIO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ1csY0FBUyxHQUF2QixVQUF3QixLQUFhO1FBRWxDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDYixLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ2QsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNkLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7WUFDZCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQ1osQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7OztPQUtHO0lBQ1csb0JBQWUsR0FBN0IsVUFBOEIsQ0FBTztRQUVsQyxPQUFPLElBQUksSUFBSSxDQUFDO1lBQ2IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNaLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFYSxhQUFRLEdBQXRCLFVBQXVCLEtBQWE7UUFFakMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsT0FBTyxJQUFJLElBQUksQ0FBQztZQUNiLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1gsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNaLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFYSxhQUFRLEdBQXRCLFVBQXVCLEtBQWE7UUFFakMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsT0FBTyxJQUFJLElBQUksQ0FBQztZQUNiLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNYLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNaLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFYSxhQUFRLEdBQXRCLFVBQXVCLEtBQWE7UUFFakMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsT0FBTyxJQUFJLElBQUksQ0FBQztZQUNiLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDVixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDWCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNaLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFTSxtQkFBSSxHQUFYLFVBQVksS0FBYTtRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNmLENBQUM7SUFDTSxtQkFBSSxHQUFYLFVBQVksS0FBYTtRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNmLENBQUM7SUFDTSxtQkFBSSxHQUFYLFVBQVksS0FBYTtRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNmLENBQUM7SUFDTSxzQkFBTyxHQUFkLFVBQWUsS0FBYTtRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNmLENBQUM7SUFDTSxzQkFBTyxHQUFkLFVBQWUsS0FBYTtRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNmLENBQUM7SUFDTSxzQkFBTyxH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QUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLENBQUMsR0FBRywyREFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUMsR0FBRywyREFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUMsR0FBRywyREFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3ZELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBdUIsQ0FBQztRQUM1QyxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNoQyxJQUFJLEtBQUssU0FHUixDQUFDO2dCQUNGLElBQUksSUFBSSxTQUdQLENBQUM7Z0JBQ0YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDaEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUM7b0JBQ3ZELElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDdkIsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFO3dCQUNqQyxTQUFTO3FCQUNYO29CQUNELFFBQVEsRUFBRSxDQUFDO29CQUNYLElBQUksQ0FBQyxLQUFLLEVBQUU7d0JBQ1QsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7cUJBQ3JDO29CQUNELElBQUksR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO2lCQUNwQztnQkFFRCxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUU7b0JBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JDO2dCQUNELElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRTtvQkFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDbkM7YUFDSDtTQUNIO1FBRUQsSUFBSSxHQUFHLEdBQVcsRUFBRSxDQUFDO1FBQ3JCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQ2YsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNqQyxHQUFHLENBQUMsSUFBSSxPQUFSLEdBQUcsRUFBUyxHQUFHLENBQUMsT0FBTyxFQUFFO2FBQzNCO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksd0RBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxpQ0FBVyxHQUFsQixVQUFtQixNQUFVO1FBQVYsbUNBQVU7UUFFMUIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsR0FBRyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDcEQsR0FBRyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNsRCxHQUFHLElBQUksSUFBSSxDQUFDO1FBRVosS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN0QixHQUFHLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQzFJO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNyQixHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQzNJO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixHQUFHLElBQUksSUFBSTtnQkFDUixDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHO2dCQUNwQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHO2dCQUNwQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDM0M7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNkLENBQUM7SUFFTSw4QkFBUSxHQUFmLFVBQWdCLFVBQXNCO1FBRW5DLElBQUksVUFBVSxLQUFLLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFFbkMsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztZQUNqRCxJQUFJLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztZQUVoRCwwQ0FBMEM7WUFDMUMsSUFBSSxjQUFjLEdBQWtCLEVBQUUsQ0FBQztZQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFFeEMsSUFBSSxTQUFTLEdBQUcsSUFBSSx3REFBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RJLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLElBQUksUUFBUSxVQUFDO2dCQUNiLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUM1QiwrQ0FBK0M7b0JBQy9DLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3ZDO3FCQUNJO29CQUNGLHFCQUFxQjtvQkFDckIsUUFBUSxHQUFHLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNyQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUNwQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNqQztnQkFDRCx3QkFBd0I7Z0JBQ3hCLGVBQWUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQzFDO1lBRUQseUJBQXlCO1lBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1lBRUQsb0JBQW9CO1lBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUQ7U0FDSDthQUNJO1lBQ0YsMkVBQTJFO1lBQzNFLG1DQUFtQztTQUNyQztRQUVELElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLDBCQUFJLEdBQVgsVUFBWSxHQUFnQjtRQUN6QixJQUFJLENBQUMsR0FBRyxJQUFJLHVEQUFRLEVBQUUsQ0FBQztRQUN2QixJQUFJLE9BQU8sR0FBYSxFQUFFLENBQUM7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU5QixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0g7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sNEJBQU0sR0FBYixVQUFjLENBQVMsRUFBRSxHQUFZO1FBQ2xDLElBQUksQ0FBQyxHQUFHLElBQUksdURBQVEsRUFBRSxDQUFDO1FBRXZCLElBQUksR0FBRyxFQUFFO1lBQ04scUJBQXFCO1lBQ3JCLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFBQSxDQUFDO2dCQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3QztZQUVELElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ3JDLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztZQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xEO1NBQ0g7YUFDSTtZQUNGLG1CQUFtQjtZQUNuQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNyRDtTQUNIO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLENBQUMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sNkJBQU8sR0FBZDtRQUNHLElBQUksQ0FBQyxHQUFHLElBQUksdURBQVEsRUFBRSxDQUFDO1FBRXZCLG1CQUFtQjtRQUNuQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUVELGtEQUFrRDtRQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMvQjtRQUVELENBQUMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0sNkJBQU8sR0FBZCxVQUFlLElBQWlCO1FBRTdCLDZEQUE2RDtRQUM3RCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBRWxDLDZDQUE2QztRQUM3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQztRQUVELGtEQUFrRDtRQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsRDtRQUVELDJCQUEyQjtRQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLDRCQUFNLEdBQWI7UUFFRyxJQUFJLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25DLE9BQU8sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVhLG9CQUFRLEdBQXRCLFVBQXVCLElBQXFCO1FBRXpDLElBQUksSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSx3REFBVyxDQUFDLElBQUkseUNBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUkseUNBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdkYsT0FBTyxJQUFJLENBQUM7SUFDZixDQUFDO0lBRU0sNEJBQU0sR0FBYjtRQUVHLHVCQUF1QjtRQUN2QixJQUFJLElBQUksR0FBRztZQUNSLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3JCO1FBRUQsbUJBQW1CO1FBQ25CLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV6QixzQkFBc0I7UUFDdEIsSUFBSSxLQUFLLEdBQWUsRUFBRSxDQUFDO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRWpELGtCQUFrQjtRQUNsQixPQUFPLHVEQUFRLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRW1CLG9CQUFRLEdBQTVCLFVBQTZCLElBQVU7Ozs7OzRCQUV6QixxQkFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQzs7d0JBQXpDLElBQUksR0FBRyxTQUFrQzt3QkFDN0Msc0JBQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQzs7OztLQUNwQztJQUVtQixzQkFBVSxHQUE5QixVQUErQixJQUFVOzs7Ozs7d0JBRWxDLElBQUksR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO3dCQUNyQixxQkFBTSx1REFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7O3dCQUFwQyxLQUFLLEdBQUcsU0FBNEI7d0JBRXhDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7d0JBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7d0JBQ2hDLFNBQUk7NkJBQWdCLFlBQVk7d0JBQUMscUJBQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7O3dCQUFuRSxHQUFLLFFBQVEsR0FBRyxjQUFJLFlBQVksV0FBQyxTQUFrQyxLQUFDLENBQUM7d0JBQ3JFLFNBQUk7NkJBQWUsWUFBWTt3QkFBQyxxQkFBTSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7d0JBQWxFLEdBQUssT0FBTyxHQUFHLGNBQUksWUFBWSxXQUFDLFNBQWtDLEtBQUMsQ0FBQzt3QkFDcEUsU0FBSTs2QkFBZSxVQUFVO3dCQUFDLHFCQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFOzt3QkFBaEUsR0FBSyxPQUFPLEdBQUcsY0FBSSxVQUFVLFdBQUMsU0FBa0MsS0FBQyxDQUFDO3dCQUNsRSxTQUFJOzZCQUFjLHlDQUFJO3dCQUFDLGdCQUFLLEVBQUMsSUFBSTs2QkFBSyxZQUFZO3dCQUFDLHFCQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFOzt3QkFBckYsR0FBSyxNQUFNLEdBQUcsY0FBSSx5Q0FBSSxXQUFDLGNBQVcsY0FBSSxZQUFZLFdBQUMsU0FBa0MsS0FBQyxFQUFDLEtBQUMsQ0FBQzt3QkFDekYsU0FBSTs2QkFBYyx5Q0FBSTt3QkFBQyxnQkFBSyxFQUFDLElBQUk7NkJBQUssWUFBWTt3QkFBQyxxQkFBTSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7d0JBQXJGLEdBQUssTUFBTSxHQUFHLGNBQUkseUNBQUksV0FBQyxjQUFXLGNBQUksWUFBWSxXQUFDLFNBQWtDLEtBQUMsRUFBQyxLQUFDLENBQUM7d0JBRXpGLHNCQUFPLElBQUksRUFBQzs7OztLQUNkO0lBQ0osa0JBQUM7QUFBRCxDQUFDOztBQUdEOztHQUVHO0FBQ0g7SUFBQTtRQUNXLFlBQU8sR0FBVyxFQUFFLENBQUM7SUEyQmhDLENBQUM7SUF6QkU7Ozs7T0FJRztJQUNJLDhCQUFJLEdBQVgsVUFBWSxNQUFZO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFLRCxzQkFBVyxtQ0FBTTtRQUhqQjs7V0FFRzthQUNIO1lBQ0csSUFBSSxDQUFDLEdBQUcsSUFBSSx5Q0FBSSxFQUFFLENBQUM7WUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMzQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNCO1lBQ0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFFM0IsT0FBTyxDQUFDLENBQUM7UUFDWixDQUFDOzs7T0FBQTtJQUNKLHNCQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaGhCMkM7QUFDZjtBQUU3QjtJQUF3QyxzQ0FBVztJQUNoRCw0QkFBWSxJQUFhO2VBQ3RCLGtCQUFNLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxxQ0FBcUM7SUFDOUIscUNBQVEsR0FBZjtRQUNHLElBQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7UUFDekIsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQU0sWUFBWSxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUM7UUFDeEMsSUFBTSxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQztRQUN4QyxJQUFNLEdBQUcsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBTSxRQUFRLEdBQUcsSUFBSSx5Q0FBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhELHVCQUF1QjtRQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pDLElBQUksRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLElBQUksRUFBRSxHQUFHLFlBQVksQ0FBQztZQUN0QixJQUFJLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFFLElBQUksRUFBRSxHQUFHLFlBQVksQ0FBQztZQUN0QixJQUFJLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTFFLElBQUksRUFBRSxHQUFHLElBQUkseUNBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLEVBQUUsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN0QztRQUVELHdCQUF3QjtRQUN4QixJQUFNLEdBQUcsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxJQUFJLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFFLElBQUksRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFMUUsSUFBSSxFQUFFLEdBQUcsSUFBSSx5Q0FBSSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFDLElBQUksRUFBRSxHQUFHLElBQUkseUNBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLEVBQUUsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUMsSUFBSSxFQUFFLEdBQUcsSUFBSSx5Q0FBSSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0osQ0FBQztJQUVNLHNDQUFTLEdBQWhCLFVBQWlCLFFBQWdCLEVBQUUsTUFBYyxFQUFFLE1BQVk7UUFFNUQsOEJBQThCO1FBQzlCLElBQUksUUFBUSxHQUFXLEVBQUUsQ0FBQztRQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDVixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUkseUNBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuRTtpQkFDSSxJQUFJLENBQUMsS0FBSyxRQUFRLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUkseUNBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuRTtpQkFDSTtnQkFDRixJQUFJLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFFMUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFFaEMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLHlDQUFJLENBQUM7d0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDO3dCQUM5RCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUM7d0JBQ1osTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7cUJBQ2hFLENBQUMsQ0FBQyxDQUFDO2lCQUNOO2FBQ0g7U0FDSDtRQUVELHVCQUF1QjtRQUN2QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ1YsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNmLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDOUQ7cUJBQ0ksSUFBSSxDQUFDLEtBQUssUUFBUSxHQUFHLENBQUMsRUFBRTtvQkFDMUIsSUFBSSxVQUFVLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQztvQkFDakMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO29CQUNkLElBQUksRUFBRSxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUM7b0JBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzlEO3FCQUNJO29CQUNGLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7b0JBQ3BDLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO29CQUM5QixJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNwQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ2xELElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUM7b0JBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUNSLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzt3QkFDNUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO3FCQUM5RDt5QkFDSTt3QkFDRixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQzVELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDOUQ7aUJBQ0g7YUFDSDtTQUNIO0lBQ0osQ0FBQztJQUVELG9DQUFPLEdBQVAsVUFBUSxJQUFZLEVBQUUsTUFBWTtRQUUvQixJQUFJLEVBQUUsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsSUFBSSxFQUFFLEdBQUcsSUFBSSx5Q0FBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25GLElBQUksRUFBRSxHQUFHLElBQUkseUNBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRixJQUFJLEVBQUUsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsSUFBSSxFQUFFLEdBQUcsSUFBSSx5Q0FBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25GLElBQUksRUFBRSxHQUFHLElBQUkseUNBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRixJQUFJLEVBQUUsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsSUFBSSxFQUFFLEdBQUcsSUFBSSx5Q0FBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5GLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxvQ0FBTyxHQUFQLFVBQVEsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsTUFBWTtRQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTFFLElBQUksRUFBRSxHQUFHLElBQUkseUNBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLEVBQUUsR0FBRyxJQUFJLHlDQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0osQ0FBQztJQUNKLHlCQUFDO0FBQUQsQ0FBQyxDQXJKdUMsd0RBQVcsR0FxSmxEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEp1RDtBQUVaO0FBRTVDOztHQUVHO0FBQ0g7SUFBcUMsbUNBQVc7SUFFN0MseUJBQW1CLElBQVksRUFBRSxHQUFXLEVBQUUsWUFBNkI7UUFBM0UsWUFFRyxrQkFBTSxJQUFJLENBQUMsU0FRYjtRQU5FLG1GQUFtRjtRQUNuRixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2hCLFlBQVksR0FBRyxVQUFDLE1BQU0sSUFBTyxDQUFDLENBQUM7U0FDakM7UUFFRCxLQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQzs7SUFDakMsQ0FBQztJQUVPLG1DQUFTLEdBQWpCLFVBQWtCLElBQVk7UUFDM0IsSUFBSSxHQUFHLEdBQUc7WUFDUCxFQUFFLEVBQUUsRUFBYztZQUNsQixFQUFFLEVBQUUsRUFBYztTQUNwQjtRQUNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3JDO1NBQ0g7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNkLENBQUM7SUFFTywrQkFBSyxHQUFiLFVBQWMsR0FBVyxFQUFFLFlBQTRCO1FBRXBELFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFbkIsSUFBSSxFQUFFLEdBQUcsSUFBSSx1REFBUSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLEdBQUcsSUFBSSx1REFBUSxFQUFFLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWYsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzVCLElBQUksT0FBTyxHQUFhLEVBQUUsQ0FBQztRQUMzQixJQUFJLFFBQVEsR0FBYSxFQUFFLENBQUM7UUFDNUIsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzVCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFFM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsOEJBQThCO1lBQzlCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3RCLFlBQVksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDeEUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNqQjtZQUNELElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkM7aUJBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO2lCQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFL0IsSUFBSSxlQUFlLEVBQUU7b0JBQ2xCLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7d0JBQ2xDLGVBQWUsR0FBRyxLQUFLLENBQUM7d0JBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0RBQStELENBQUMsQ0FBQztxQkFDaEY7eUJBQ0ksSUFBSSxLQUFLLEVBQUU7d0JBQ2IsS0FBSyxJQUFJLEdBQUMsR0FBRyxDQUFDLEVBQUUsR0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEdBQUMsRUFBRSxFQUFFOzRCQUNyQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRTtnQ0FDekIsT0FBTyxDQUFDLElBQUksQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2dDQUM5RSxLQUFLLEdBQUcsS0FBSyxDQUFDO2dDQUNkLE1BQU07NkJBQ1I7eUJBQ0g7cUJBQ0g7aUJBQ0g7Z0JBRUQsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBRXRCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0MsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvQyxJQUFJLGVBQWUsRUFBRTt3QkFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMvQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2pEO2lCQUNIO3FCQUNJO29CQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0MsSUFBSSxlQUFlLEVBQUU7d0JBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDakQ7aUJBQ0g7YUFDSDtTQUNIO1FBRUQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVmLElBQUksS0FBSyxFQUFFO1lBQ1IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7WUFFeEIsSUFBSSxlQUFlLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2FBQ3pCO1NBQ0g7YUFDSTtZQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBRWxCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2QjtZQUNELENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkI7UUFFRCxJQUFJLGVBQWUsS0FBSyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyx1REFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEIsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0osc0JBQUM7QUFBRCxDQUFDLENBbEpvQyx3REFBVyxHQWtKL0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEpEOztHQUVHO0FBQ0g7SUFLRzs7T0FFRztJQUNILGFBQXNCLFlBQStCO1FBQ2xELElBQUksWUFBWSxZQUFZLEtBQUssRUFBRTtZQUNoQyxJQUFJLENBQUMsTUFBTSxrQkFBTyxZQUFZLENBQUMsQ0FBQztTQUNsQzthQUNJO1lBQ0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNyQjtTQUNIO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSSx1QkFBUyxHQUFoQjtRQUNHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDSixVQUFDO0FBQUQsQ0FBQztBQUVEOztHQUVHO0FBQ0g7SUFBMEIsd0JBQUc7SUFFMUI7O09BRUc7SUFDSCxjQUFtQixJQUFlO1FBQWxDLGlCQU9DO1FBTkUsSUFBSSxJQUFJLEVBQUU7WUFDUCwwQkFBTSxJQUFJLENBQUMsU0FBQztTQUNkO2FBQ0k7WUFDRiwwQkFBTSxDQUFDLENBQUMsU0FBQztTQUNYOztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksb0JBQUssR0FBWjtRQUNHLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFPRCxzQkFBVyxtQkFBQztRQUxaOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQ7Ozs7V0FJRzthQUNILFVBQWEsR0FBVztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixDQUFDOzs7T0FUQTtJQWdCRCxzQkFBVyxtQkFBQztRQUxaOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQ7Ozs7V0FJRzthQUNILFVBQWEsR0FBVztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixDQUFDOzs7T0FUQTtJQVdEOzs7OztPQUtHO0lBQ0ksdUJBQVEsR0FBZixVQUFnQixLQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFDSixXQUFDO0FBQUQsQ0FBQyxDQXBFeUIsR0FBRyxHQW9FNUI7O0FBRUQ7O0dBRUc7QUFDSDtJQUEwQix3QkFBRztJQU0xQjs7T0FFRztJQUNILGNBQW1CLElBQWU7UUFBbEMsaUJBT0M7UUFORSxJQUFJLElBQUksRUFBRTtZQUNQLDBCQUFNLElBQUksQ0FBQyxTQUFDO1NBQ2Q7YUFDSTtZQUNGLDBCQUFNLENBQUMsQ0FBQyxTQUFDO1NBQ1g7O0lBQ0osQ0FBQztJQWRELHNCQUFrQixjQUFNO2FBQXhCO1lBQ0csT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixDQUFDOzs7T0FBQTtJQW1CRCxzQkFBVyxtQkFBQztRQUxaOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQ7Ozs7V0FJRzthQUNILFVBQWEsR0FBVztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixDQUFDOzs7T0FUQTtJQWdCRCxzQkFBVyxtQkFBQztRQUxaOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQ7Ozs7V0FJRzthQUNILFVBQWEsR0FBVztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixDQUFDOzs7T0FUQTtJQWdCRCxzQkFBVyxtQkFBQztRQUxaOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQ7Ozs7V0FJRzthQUNILFVBQWEsR0FBVztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixDQUFDOzs7T0FUQTtJQWdCRCxzQkFBVyxvQkFBRTtRQUxiOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRUQ7Ozs7T0FJRztJQUNJLG9CQUFLLEdBQVo7UUFDRyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksdUJBQVEsR0FBZixVQUFnQixNQUFrQixFQUFFLE9BQWE7UUFBakMsbUNBQWtCO1FBQUUsdUNBQWE7UUFDOUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksd0JBQVMsR0FBaEI7UUFDRyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0IsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO1lBQ1osT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQ3BCO2FBQ0k7WUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQzVCO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxtQkFBSSxHQUFYLFVBQVksS0FBYTtRQUN0QixPQUFPLElBQUksSUFBSSxDQUFDO1lBQ2IsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLO1lBQ2QsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLO1lBQ2QsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLO1NBQ2hCLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRDs7OztPQUlHO0lBQ0kscUJBQU0sR0FBYjtRQUNHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksdUJBQVEsR0FBZixVQUFnQixHQUFTO1FBQ3RCLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNoQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxrQkFBRyxHQUFWLFVBQVcsR0FBUztRQUNqQixPQUFPLElBQUksSUFBSSxDQUFDO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxvQkFBSyxHQUFaLFVBQWEsS0FBVztRQUNyQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDckIsT0FBTyxJQUFJLElBQUksQ0FBQztZQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNCLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLDBCQUFXLEdBQWxCLFVBQW1CLEVBQVE7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLHFCQUFNLEdBQWIsVUFBYyxDQUFTO1FBQ3BCLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDSixXQUFDO0FBQUQsQ0FBQyxDQXhNeUIsR0FBRyxHQXdNNUI7O0FBRUQ7O0dBRUc7QUFDSDtJQUEwQix3QkFBRztJQUUxQjs7T0FFRztJQUNILGNBQW1CLElBQWU7UUFBbEMsaUJBT0M7UUFORSxJQUFJLElBQUksRUFBRTtZQUNQLDBCQUFNLElBQUksQ0FBQyxTQUFDO1NBQ2Q7YUFDSTtZQUNGLDBCQUFNLENBQUMsQ0FBQyxTQUFDO1NBQ1g7O0lBQ0osQ0FBQztJQU9ELHNCQUFXLG1CQUFDO1FBTFo7Ozs7V0FJRzthQUNIO1lBQ0csT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRDs7OztXQUlHO2FBQ0gsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLENBQUM7OztPQVRBO0lBZ0JELHNCQUFXLG1CQUFDO1FBTFo7Ozs7V0FJRzthQUNIO1lBQ0csT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRDs7OztXQUlHO2FBQ0gsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLENBQUM7OztPQVRBO0lBZ0JELHNCQUFXLG1CQUFDO1FBTFo7Ozs7V0FJRzthQUNIO1lBQ0csT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRDs7OztXQUlHO2FBQ0gsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLENBQUM7OztPQVRBO0lBZ0JELHNCQUFXLG1CQUFDO1FBTFo7Ozs7V0FJRzthQUNIO1lBQ0csT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRDs7OztXQUlHO2FBQ0gsVUFBYSxHQUFXO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLENBQUM7OztPQVRBO0lBZ0JELHNCQUFXLHFCQUFHO1FBTGQ7Ozs7V0FJRzthQUNIO1lBQ0csT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDOzs7T0FBQTtJQUVEOzs7O09BSUc7SUFDSSxvQkFBSyxHQUFaO1FBQ0csT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksd0JBQVMsR0FBaEI7UUFDRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUNwQixDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLHdCQUFTLEdBQWhCO1FBQ0csSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO2FBQ3ZCO1NBQ0g7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNXLGFBQVEsR0FBdEIsVUFBdUIsR0FBUyxFQUFFLENBQVM7UUFDeEMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNKLFdBQUM7QUFBRCxDQUFDLENBakp5QixHQUFHLEdBaUo1Qjs7Ozs7Ozs7Ozs7Ozs7QUNwZEQ7QUFBQTtBQUFBO0FBQXdDO0FBRXhDOztHQUVHO0FBQ0g7SUFLRywyQkFDRyxLQUFxRCxFQUNyRCxPQUFpQyxFQUNqQyxhQUFxQjtRQVBoQixPQUFFLEdBQW1ELElBQUksQ0FBQztRQVMvRCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRWpCLElBQUksT0FBTyxZQUFZLG9EQUFTLEVBQUU7WUFDL0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMxQjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFTSxrQ0FBTSxHQUFiO1FBQ0csSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUM7SUFDdEMsQ0FBQztJQUVNLGtDQUFNLEdBQWIsVUFBYyxNQUErQjtRQUMxQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVaLElBQUksTUFBTSxZQUFZLFlBQVksRUFBRTtZQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN6RDthQUNJO1lBQ0YsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMzRTtJQUVKLENBQUM7SUFFTSxnQ0FBSSxHQUFYLFVBQVksSUFBUTtRQUFSLCtCQUFRO1FBQ2pCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbkQsRUFBRSxDQUFDLG1CQUFtQixDQUNuQixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksRUFBYyxPQUFPO1FBQ3pCLEVBQUUsQ0FBQyxLQUFLLEVBQVUsT0FBTztRQUN6QixLQUFLLEVBQWEsYUFBYTtRQUMvQixDQUFDLEVBQWlCLFNBQVM7UUFDM0IsQ0FBQyxDQUFpQixTQUFTO1NBQzdCLENBQUM7SUFDTCxDQUFDO0lBQ0osd0JBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQzFERDtBQUFBO0FBQUE7QUFBd0M7QUFFeEM7O0dBRUc7QUFDSDtJQUtHLGtCQUNHLEtBQXFELEVBQ3JELE9BQWlDLEVBQ2pDLGFBQXFCO1FBUGhCLE9BQUUsR0FBbUQsSUFBSSxDQUFDO1FBUy9ELElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFakIsSUFBSSxPQUFPLFlBQVksb0RBQVMsRUFBRTtZQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzFCO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVNLHlCQUFNLEdBQWI7UUFDRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztJQUN0QyxDQUFDO0lBRU0seUJBQU0sR0FBYixVQUFjLFFBQWtCO1FBQzdCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU0sdUJBQUksR0FBWCxVQUFZLElBQVE7UUFBUiwrQkFBUTtRQUNqQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ25ELEVBQUUsQ0FBQyxtQkFBbUIsQ0FDbkIsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixJQUFJLEVBQWMsb0NBQW9DO1FBQ3RELEVBQUUsQ0FBQyxLQUFLLEVBQVUsT0FBTztRQUN6QixLQUFLLEVBQWEsYUFBYTtRQUMvQixDQUFDLEVBQWlCLFNBQVM7UUFDM0IsQ0FBQyxDQUFpQixTQUFTO1NBQzdCLENBQUM7SUFDTCxDQUFDO0lBQ0osZUFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25EcUM7QUFDRTtBQUNNO0FBRTlDOztHQUVHO0FBQ0g7SUFBOEIsNEJBQUs7SUFLaEM7O09BRUc7SUFDSCxrQkFBbUIsS0FBZTtRQUFsQyxpQkFnQkM7UUFkRSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN0RTtRQUNELElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM5RDtRQUNELElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM5RDtRQUNELElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM5RDtRQUVELDBCQUFNLEtBQUssQ0FBQyxTQUFDOztJQUNoQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNXLGtCQUFTLEdBQXZCLFVBQXdCLEtBQVk7UUFDakMsSUFBSSxDQUFDLEdBQUcsMkRBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsR0FBRywyREFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxHQUFHLDJEQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ1csaUJBQVEsR0FBdEIsVUFBdUIsRUFBWSxFQUFFLEVBQVk7UUFDOUMsZ0NBQWdDO1FBQ2hDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxFQUFFLENBQUM7U0FDWjthQUNJO1lBQ0YsT0FBTyxFQUFFLENBQUM7U0FDWjtJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDVyxnQkFBTyxHQUFyQixVQUFzQixFQUFZLEVBQUUsRUFBWTtRQUM3QyxnQ0FBZ0M7UUFDaEMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRTtZQUMxQyxPQUFPLEVBQUUsQ0FBQztTQUNaO2FBQ0k7WUFDRixPQUFPLEVBQUUsQ0FBQztTQUNaO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSSw4QkFBVyxHQUFsQjtRQUNHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sSUFBSSx5REFBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFoRmUsbUJBQVUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3RCxtQkFBVSxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBZ0Z4RCxlQUFDO0NBQUEsQ0FuRjZCLGlEQUFLLEdBbUZsQztBQW5Gb0I7QUFzRnJCOztHQUVHO0FBQ0g7SUFBOEIsNEJBQUs7SUFFaEM7O09BRUc7SUFDSCxrQkFBbUIsS0FBZTtRQUFsQyxpQkFtQkM7UUFqQkUsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdEU7UUFDRCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDOUQ7UUFFRCwwQkFBTSxLQUFLLENBQUMsU0FBQzs7SUFDaEIsQ0FBQztJQUNKLGVBQUM7QUFBRCxDQUFDLENBekI2QixpREFBSyxHQXlCbEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pIb0M7QUFFckM7O0dBRUc7QUFDSDtJQUE0QywwQ0FBUTtJQWFqRDs7O09BR0c7SUFDSCxnQ0FBb0IsS0FBZSxFQUFFLFdBQW1CO1FBQXhELFlBQ0csa0JBQU0sS0FBSyxDQUFDLFNBRWQ7UUFERSxLQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQzs7SUFDbkMsQ0FBQztJQVhELHNCQUFXLCtDQUFXO1FBSHRCOztXQUVHO2FBQ0g7WUFDRyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUEwQkQsc0JBQWtCLGtDQUFRO2FBQTFCO1lBQ0csT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBT0Qsc0JBQWtCLHdDQUFjO1FBTGhDOzs7O1dBSUc7YUFDSDtZQUNHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDckMsQ0FBQzs7O09BQUE7SUFPRCxzQkFBa0Isd0NBQWM7UUFMaEM7Ozs7V0FJRzthQUNIO1lBQ0csT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUMxRCxDQUFDOzs7T0FBQTtJQUVEOzs7O09BSUc7SUFDVyw2QkFBTSxHQUFwQixVQUFxQixXQUFtQjtRQUVyQyxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4QjthQUNJLElBQUksV0FBVyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzdDO2FBQ0k7WUFDRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsSUFBSSxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtvQkFDekUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBRTNGLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pELElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pELElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pELE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7aUJBQzVEO2FBQ0g7WUFFRCwwREFBMEQ7WUFDMUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzdDO0lBQ0osQ0FBQztJQW5FRDs7T0FFRztJQUNZLDZCQUFNLEdBQTZCO1FBQy9DLElBQUksc0JBQXNCLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQztRQUNsRSxJQUFJLHNCQUFzQixDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUM7UUFDbkUsSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDO1FBQ25FLElBQUksc0JBQXNCLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQztRQUNuRSxJQUFJLHNCQUFzQixDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUM7UUFDbkUsSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDO1FBQ25FLElBQUksc0JBQXNCLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQztRQUNuRSxJQUFJLHNCQUFzQixDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUM7UUFDbkUsSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDO0tBQ3JFLENBQUM7SUF1REwsNkJBQUM7Q0FBQSxDQTFGMkMsaURBQVEsR0EwRm5EO0FBMUZrQzs7Ozs7Ozs7Ozs7OztBQ0xuQztBQUFBO0FBQUE7QUFBd0Q7QUFFeEQ7O0dBRUc7QUFDSDtJQWNHOzs7Ozs7T0FNRztJQUNILHVCQUNHLEtBQXFELEVBQ3JELEtBQWEsRUFDYixNQUFjO1FBdEJULE9BQUUsR0FBbUQsSUFBSSxDQUFDO1FBeUIvRCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQXZCRCxzQkFBVywrQkFBSTtRQUhmOztXQUVHO2FBQ0g7WUFDRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7SUF1Qk0sOEJBQU0sR0FBYjtRQUNHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFakIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ25CLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDMUI7SUFDSixDQUFDO0lBRU0sMkJBQUcsR0FBVjtRQUNHLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMzQixDQUFDO0lBRU0sNEJBQUksR0FBWDtRQUNHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU0scUNBQWEsR0FBcEIsVUFBcUIsS0FBcUI7UUFDdkMsT0FBTyxJQUFJLG9EQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLHFDQUFhLEdBQXBCLFVBQXFCLFVBQWtCLEVBQUUsT0FBaUM7UUFFdkUsSUFBSSxPQUFPLFlBQVksb0RBQVMsRUFBRTtZQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzFCO1FBRUQsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNqQixFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELEVBQUUsQ0FBQyxvQkFBb0IsQ0FDcEIsRUFBRSxDQUFDLFdBQVcsRUFDZCxVQUFVLEVBQ1YsRUFBRSxDQUFDLFVBQVUsRUFDYixPQUFPLEVBQ1AsQ0FBQyxDQUNILENBQUM7SUFDTCxDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RCxJQUFJLE1BQU0sS0FBSyxFQUFFLENBQUMsb0JBQW9CLEVBQUU7WUFDckMsSUFBSSxHQUFHLEdBQUcsdUNBQXVDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkI7SUFDSixDQUFDO0lBQ0osb0JBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQ3ZGRDtBQUFBO0FBQUE7O0dBRUc7QUFDSDtJQUlHLHVCQUFtQixLQUFxRDtRQUhoRSxPQUFFLEdBQW1ELElBQUksQ0FBQztRQUkvRCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRWpCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTSw4QkFBTSxHQUFiO1FBQ0csSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7SUFFTSw4QkFBTSxHQUFiLFVBQWMsTUFBNkI7UUFDeEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7WUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNqRTthQUNJO1lBQ0YsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2pGO0lBRUosQ0FBQztJQUVNLDRCQUFJLEdBQVg7UUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0osb0JBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQ3JDRDtBQUFBO0FBQUE7O0dBRUc7QUFDSDtJQUtHOzs7Ozs7OztPQVFHO0lBQ0gsbUJBQW1CLEVBQWtELEVBQ2xFLFlBQW9CLEVBQ3BCLGNBQXNCO1FBRXRCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSx1QkFBRyxHQUFWO1FBQ0csT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRztJQUNJLHVCQUFHLEdBQVY7UUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ssaUNBQWEsR0FBckIsVUFDRyxNQUFjLEVBQ2QsSUFBWTtRQUVaLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFakIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQUVNLDBCQUFNLEdBQWI7UUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ssMkJBQU8sR0FBZixVQUNHLFlBQW9CLEVBQ3BCLGNBQXNCO1FBR3RCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUN0RixFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUM7U0FDN0I7SUFDSixDQUFDO0lBQ0osZ0JBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQ2hHRDtBQUFBO0FBQUE7OztHQUdHO0FBQ0g7SUFxQ0csaUJBQW1CLEdBQVMsRUFBRSxHQUFTO1FBQ3BDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQXBDRCxzQkFBVyx5QkFBSTthQUFmO1lBQ0csT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUNELHNCQUFXLDBCQUFLO2FBQWhCO1lBQ0csT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUVELHNCQUFXLHdCQUFHO2FBQWQ7WUFDRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBQ0Qsc0JBQVcsMkJBQU07YUFBakI7WUFDRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBRUQsc0JBQVcseUJBQUk7YUFBZjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBVyx3QkFBRzthQUFkO1lBQ0csT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDBCQUFLO2FBQWhCO1lBQ0csT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVywyQkFBTTthQUFqQjtZQUNHLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsMEJBQUs7YUFBaEI7WUFDRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTtJQU1KLGNBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQy9DRDtBQUFBO0FBQUE7QUFBQSxJQUFZLGNBSVg7QUFKRCxXQUFZLGNBQWM7SUFDdkIscURBQUs7SUFDTCxxREFBSztJQUNMLHFEQUFLO0FBQ1IsQ0FBQyxFQUpXLGNBQWMsS0FBZCxjQUFjLFFBSXpCO0FBRUQ7O0dBRUc7QUFDSDtJQU9HOzs7Ozs7T0FNRztJQUNILG1CQUNHLEtBQXFELEVBQ3JELEtBQWEsRUFDYixNQUFjLEVBQ2QsS0FBcUI7UUFoQmhCLE9BQUUsR0FBbUQsSUFBSSxDQUFDO1FBbUIvRCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixRQUFRLEtBQUssRUFBRTtZQUNaLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNoQyxNQUFNO1lBRVQsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ2hDLE1BQU07WUFFVCxLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDaEMsTUFBTTtTQUNYO0lBQ0osQ0FBQztJQUVNLDBCQUFNLEdBQWI7UUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRWpCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNmLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO0lBQ0osQ0FBQztJQUVPLCtCQUFXLEdBQW5CLFVBQW9CLEtBQWEsRUFBRSxNQUFjO1FBRTlDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QyxFQUFFLENBQUMsVUFBVSxDQUNWLEVBQUUsQ0FBQyxVQUFVLEVBQVcsU0FBUztRQUNqQyxDQUFDLEVBQXVCLFFBQVE7UUFDaEMsRUFBRSxDQUFDLElBQUksRUFBaUIsa0JBQWtCO1FBQzFDLEtBQUssRUFBbUIsUUFBUTtRQUNoQyxNQUFNLEVBQWtCLFNBQVM7UUFDakMsQ0FBQyxFQUF1QixTQUFTO1FBQ2pDLEVBQUUsQ0FBQyxJQUFJLEVBQWlCLFNBQVM7UUFDakMsRUFBRSxDQUFDLGFBQWEsRUFBUSxPQUFPO1FBQy9CLElBQUksQ0FBb0IsU0FBUztTQUNuQyxDQUFDO1FBRUYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU8sK0JBQVcsR0FBbkIsVUFBb0IsS0FBYSxFQUFFLE1BQWM7UUFDOUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUVqQixJQUFJLHVCQUF1QixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDM0IsS0FBSyxDQUFDLDJFQUEyRSxDQUFDLENBQUM7WUFDbkYsT0FBTztTQUNUO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QyxFQUFFLENBQUMsVUFBVSxDQUNWLEVBQUUsQ0FBQyxVQUFVLEVBQVcsU0FBUztRQUNqQyxDQUFDLEVBQXVCLFFBQVE7UUFDaEMsRUFBRSxDQUFDLGVBQWUsRUFBTSxrQkFBa0I7UUFDMUMsS0FBSyxFQUFtQixRQUFRO1FBQ2hDLE1BQU0sRUFBa0IsU0FBUztRQUNqQyxDQUFDLEVBQXVCLFNBQVM7UUFDakMsRUFBRSxDQUFDLGVBQWUsRUFBTSxTQUFTO1FBQ2pDLEVBQUUsQ0FBQyxZQUFZLEVBQVMsT0FBTztRQUMvQixJQUFJLENBQW9CLFNBQVM7U0FDbkMsQ0FBQztRQUVGLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVPLCtCQUFXLEdBQW5CLFVBQW9CLEtBQWEsRUFBRSxNQUFjO1FBQzlDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFakIsSUFBSSxjQUFzQixDQUFDO1FBQzNCLElBQUksTUFBYyxDQUFDO1FBQ25CLElBQUksSUFBWSxDQUFDO1FBRWpCLGtCQUFrQjtRQUNsQixJQUFJLEVBQUUsWUFBWSxxQkFBcUIsRUFBRTtZQUN0QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDcEQsSUFBSSxHQUFHLEVBQUU7Z0JBQ04sNkRBQTZEO2dCQUM3RCxjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDekIsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pCLElBQUksR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDO2FBQzVCO2lCQUNJO2dCQUNGLGlFQUFpRTtnQkFDakUsY0FBYyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7Z0JBQ3pCLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO2dCQUNqQixJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQzthQUMxQjtTQUNIO1FBRUQscUVBQXFFO1FBQ3JFLDREQUE0RDtRQUM1RCw4SEFBOEg7UUFDOUgsSUFBSTtZQUNELElBQUksRUFBRSxZQUFZLHNCQUFzQixFQUFFO2dCQUN2QyxFQUFFLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLENBQUM7Z0JBQzFDLGNBQWMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQUM1QixNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDakIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLO2FBQ2pCO1NBQ0g7UUFDRCxPQUFPLEtBQUssRUFBRTtTQUNiO1FBRUQseURBQXlEO1FBQ3pELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ2xDLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkUsRUFBRSxDQUFDLFVBQVUsQ0FDVixFQUFFLENBQUMsVUFBVSxFQUFXLFNBQVM7UUFDakMsQ0FBQyxFQUF1QixRQUFRO1FBQ2hDLGNBQWMsRUFBVSxrQkFBa0I7UUFDMUMsS0FBSyxFQUFtQixRQUFRO1FBQ2hDLE1BQU0sRUFBa0IsU0FBUztRQUNqQyxDQUFDLEVBQXVCLFNBQVM7UUFDakMsTUFBTSxFQUFrQixTQUFTO1FBQ2pDLElBQUksRUFBb0IsT0FBTztRQUMvQixJQUFJLENBQW9CLFNBQVM7U0FDbkMsQ0FBQztRQUNGLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sdUJBQUcsR0FBVjtRQUNHLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN2QixDQUFDO0lBRU0sd0JBQUksR0FBWDtRQUNHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0osZ0JBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7OztBQ3BMRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBd0M7QUFDSDtBQUNVO0FBQ1Y7QUFFckM7O0dBRUc7QUFDSDtJQU9HOzs7OztPQUtHO0lBQ0gsbUJBQ0csS0FBcUQsRUFDckQsT0FBaUM7UUFiNUIsT0FBRSxHQUFtRCxJQUFJLENBQUM7UUFlL0QsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUVqQixJQUFJLE9BQU8sWUFBWSxvREFBUyxFQUFFO1lBQy9CLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDMUI7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSx1QkFBRyxHQUFWLFVBQ0csSUFBWSxFQUNaLEtBQTJELEVBQzNELEdBQW9CO1FBQXBCLGlDQUFvQjtRQUdwQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBRWpCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksR0FBRyxFQUFFO1lBQ04sSUFBSSxLQUFLLFlBQVksZ0RBQUksRUFBRTtnQkFDeEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDckQ7aUJBQ0ksSUFBSSxLQUFLLFlBQVksaURBQVEsRUFBRTtnQkFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNwRTtpQkFDSSxJQUFJLEtBQUssWUFBWSxpREFBUSxFQUFFO2dCQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDN0U7aUJBQ0ksSUFBSSxLQUFLLFlBQVksZ0RBQUksRUFBRTtnQkFDN0IsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDOUU7aUJBQ0ksSUFBSSxLQUFLLFlBQVksT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hFLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QztpQkFDSSxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQ3hCLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzNCO2lCQUNJO2dCQUNGLElBQUksR0FBRyxFQUFFO29CQUNOLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUMzQjtxQkFDSTtvQkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDM0I7YUFDSDtTQUNIO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksd0JBQUksR0FBWCxVQUFZLElBQVksRUFBRSxLQUFhO1FBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLDBCQUFNLEdBQWIsVUFBYyxRQUFhO1FBRXhCLEtBQUssSUFBSSxJQUFJLElBQUksUUFBUSxFQUFFO1lBQ3hCLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN4QjtJQUNKLENBQUM7SUFDSixnQkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDeEdEO0FBQUE7QUFBQTtBQUF3QztBQUV4QztJQUtHLHdCQUNHLEtBQTZCLEVBQzdCLE9BQWlDLEVBQ2pDLFNBQWlCLEVBQ2pCLFlBQW9CO1FBUmYsUUFBRyxHQUEyQixJQUFJLENBQUM7UUFXeEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDakIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUVuQixJQUFJLE9BQU8sWUFBWSxvREFBUyxFQUFFO1lBQy9CLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDMUI7UUFFRCxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDbEUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0csSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNuQixHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLElBQStCO1FBRW5DLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbkIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRCxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNKLHFCQUFDO0FBQUQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUN4Q0Q7QUFBQTtBQUFBO0FBQUE7QUFBNkI7QUFDUztBQUV0QyxNQUFNLENBQUMsTUFBTSxHQUFHO0lBRWIsSUFBSSxHQUFHLEdBQUcsSUFBSSxrREFBUSxFQUFFLENBQUM7QUFDNUIsQ0FBQzs7Ozs7Ozs7Ozs7OztBQ05EO0FBQWUsc0ZBQXVCLDBCQUEwQiwrQkFBK0Isc0JBQXNCLDZCQUE2QixxQ0FBcUMsa0NBQWtDLGdDQUFnQyxpQ0FBaUMsa0NBQWtDLHNDQUFzQyxrQ0FBa0MsbUNBQW1DLDhCQUE4QixxSkFBcUosd0NBQXdDLDRDQUE0QywyQ0FBMkMsMENBQTBDLHlDQUF5Qyx5Q0FBeUMsMENBQTBDLG9EQUFvRCwwQ0FBMEMsZ0RBQWdELHNDQUFzQywrQkFBK0IsMkJBQTJCLFFBQVEsb0NBQW9DLDZEQUE2RCxRQUFRLG9DQUFvQyxxRUFBcUUsUUFBUSxvQ0FBb0MscUVBQXFFLFFBQVEsb0NBQW9DLHFFQUFxRSxRQUFRLG9DQUFvQyxxRUFBcUUsUUFBUSw2Q0FBNkMscUVBQXFFLFFBQVEsNEJBQTRCLHdDQUF3QyxRQUFRLEtBQUssaUNBQWlDLGtJQUFrSSw2RkFBNkYseURBQXlELCtGQUErRixrREFBa0Qsd0JBQXdCLEtBQUssaUNBQWlDLGtEQUFrRCxpQ0FBaUMsdUNBQXVDLEtBQUssa0NBQWtDLGtEQUFrRCx3RkFBd0YsdURBQXVELFFBQVEsbUJBQW1CLGlEQUFpRCw2REFBNkQsc0dBQXNHLGtEQUFrRCxXQUFXLHlCQUF5Qiw2Q0FBNkMsV0FBVyxRQUFRLEtBQUssdUNBQXVDLGdJQUFnSSxLQUFLLHNFQUFzRSx1Q0FBdUMsbUNBQW1DLHFDQUFxQyxzREFBc0Qsa0NBQWtDLHVCQUF1QixRQUFRLHFDQUFxQyxxQkFBcUIsUUFBUSxtQkFBbUIsc0JBQXNCLFFBQVEsS0FBSyxpQ0FBaUMseUJBQXlCLCtDQUErQywyRkFBMkYsNERBQTRELGdEQUFnRCxXQUFXLGlFQUFpRSw0Q0FBNEMsV0FBVyxpRUFBaUUsK0NBQStDLFdBQVcsaUVBQWlFLDhDQUE4QyxXQUFXLGlFQUFpRSxnREFBZ0QsV0FBVyxvRUFBb0UsK0NBQStDLFdBQVcsUUFBUSxtQkFBbUIscURBQXFELG9KQUFvSixnRUFBZ0UsK0ZBQStGLGlDQUFpQyxXQUFXLG1EQUFtRCxtTEFBbUwsNEVBQTRFLGtEQUFrRCxjQUFjLCtCQUErQiwrRkFBK0Ysb0NBQW9DLGNBQWMsV0FBVyx5QkFBeUIsMEJBQTBCLFdBQVcsUUFBUSxLQUFLLG1DQUFtQyw2RUFBNkUsS0FBSyx3QkFBd0IseUJBQXlCLHdCQUF3Qix5QkFBeUIsMEJBQTBCLDBCQUEwQix1QkFBdUIsMkNBQTJDLHlDQUF5QyxRQUFRLDZDQUE2QywwQ0FBMEMsUUFBUSw0Q0FBNEMseUNBQXlDLFFBQVEsbUJBQW1CLDJDQUEyQyxRQUFRLEtBQUssSzs7Ozs7Ozs7Ozs7O0FDQS92TTtBQUFlLHNGQUF1QiwwQkFBMEIseUJBQXlCLDJCQUEyQiwyQkFBMkIsd0JBQXdCLHdDQUF3QyxvR0FBb0csS0FBSyxLOzs7Ozs7Ozs7Ozs7QUNBeFQ7QUFBZSxxTEFBc0gsMkNBQTJDLHFDQUFxQyxvQ0FBb0MsK0JBQStCLDBCQUEwQiwrQkFBK0IsMkJBQTJCLGtDQUFrQyw2QkFBNkIseUNBQXlDLDJCQUEyQiw4QkFBOEIsMEJBQTBCLDhCQUE4QiwrQkFBK0IsMkNBQTJDLHFIQUFxSCxtQ0FBbUMsZ0NBQWdDLG1DQUFtQyxpQ0FBaUMsMEZBQTBGLGtDQUFrQywwQkFBMEIsZ0RBQWdELGlEQUFpRCxtREFBbUQsNkJBQTZCLDZCQUE2Qiw2QkFBNkIsZ0NBQWdDLHlCQUF5Qix1QkFBdUIsa0JBQWtCLGdCQUFnQixrQkFBa0IsTUFBTSxrQ0FBa0Msb0RBQW9ELGVBQWUsZUFBZSxlQUFlLE1BQU0sMEJBQTBCLHNCQUFzQix3QkFBd0IsbUJBQW1CLG1CQUFtQixNQUFNLHVIQUF1SCwwQ0FBMEMsOENBQThDLGdEQUFnRCw2QkFBNkIsR0FBRyw2QkFBNkIsY0FBYyxjQUFjLGNBQWMsTUFBTSxpREFBaUQsb0NBQW9DLEdBQUcsd0NBQXdDLHdDQUF3QyxrQ0FBa0Msa0NBQWtDLGtDQUFrQyxtQ0FBbUMsS0FBSyxrRUFBa0UsbUNBQW1DLG1CQUFtQixtQkFBbUIsTUFBTSw4QkFBOEIsdUdBQXVHLCtCQUErQiw4Q0FBOEMsOENBQThDLG1DQUFtQyxtQ0FBbUMsc0NBQXNDLGdDQUFnQyxpQ0FBaUMsZ0NBQWdDLGdDQUFnQyxLQUFLLDZFQUE2RSx5Q0FBeUMsdUJBQXVCLFFBQVEsb0VBQW9FLEtBQUssZ0ZBQWdGLHNFQUFzRSxLQUFLLHVLQUF1SyxrQ0FBa0Msd0JBQXdCLCtCQUErQiwrQkFBK0IsaUNBQWlDLHlCQUF5QixzREFBc0QsdUJBQXVCLDJCQUEyQix5QkFBeUIsd0RBQXdELCtCQUErQiwyQkFBMkIsOERBQThELHdJQUF3SSw4SEFBOEgsb0JBQW9CLHlCQUF5QixzRUFBc0UsMENBQTBDLDZEQUE2RCxrQ0FBa0MsbURBQW1ELHdCQUF3QixRQUFRLG1CQUFtQix5QkFBeUIsUUFBUSxLQUFLLDBHQUEwRyw2Q0FBNkMsK0JBQStCLDBDQUEwQyx1RUFBdUUsZ0RBQWdELHNDQUFzQywyREFBMkQsMkRBQTJELGtDQUFrQyx1QkFBdUIsV0FBVyx1Q0FBdUMsdUJBQXVCLFdBQVcsUUFBUSx1QkFBdUIsS0FBSyxrRkFBa0Ysa0RBQWtELEtBQUssaURBQWlELGtGQUFrRixLQUFLLGtFQUFrRSwrREFBK0QsK0RBQStELHlCQUF5QiwyQ0FBMkMsMERBQTBELHNDQUFzQyw4Q0FBOEMsUUFBUSxtQkFBbUIsOENBQThDLFFBQVEsa0NBQWtDLG9GQUFvRixLQUFLLHNEQUFzRCwrREFBK0QsK0RBQStELCtCQUErQixtQ0FBbUMsMkNBQTJDLHNEQUFzRCxLQUFLLG1EQUFtRCxvR0FBb0csS0FBSywrREFBK0QsNEVBQTRFLGtDQUFrQyxzQkFBc0IsUUFBUSxpRkFBaUYseUJBQXlCLGlCQUFpQixnQkFBZ0IsNENBQTRDLDhEQUE4RCw0Q0FBNEMseUNBQXlDLHNCQUFzQixpREFBaUQsd0ZBQXdGLGtDQUFrQyxvQkFBb0IsaUJBQWlCLGNBQWMsV0FBVyxRQUFRLGtDQUFrQyxLQUFLLDZGQUE2Rix1REFBdUQsd0VBQXdFLHdFQUF3RSx5Q0FBeUMseUJBQXlCLG9GQUFvRixLQUFLLDRGQUE0RixxREFBcUQsd0RBQXdELDJFQUEyRSxLQUFLLDJFQUEyRSwrQkFBK0IsNEJBQTRCLHVDQUF1QyxzREFBc0QsS0FBSyxrRUFBa0Usa0lBQWtJLDZGQUE2Rix5REFBeUQsK0ZBQStGLGtEQUFrRCx3QkFBd0IsS0FBSyx1REFBdUQseUNBQXlDLGtDQUFrQyx5QkFBeUIsMkJBQTJCLDhCQUE4Qix3Q0FBd0MsNkRBQTZELHNCQUFzQixrQkFBa0Isb0lBQW9JLGtEQUFrRCxvQ0FBb0MscUJBQXFCLG1GQUFtRiw0QkFBNEIsaUJBQWlCLG1CQUFtQiwrQ0FBK0Msb0VBQW9FLCtDQUErQyx5Q0FBeUMseUJBQXlCLG9EQUFvRCxrRkFBa0YsNkRBQTZELHFDQUFxQyxvQ0FBb0MsdUJBQXVCLG9CQUFvQixpQkFBaUIsY0FBYyxXQUFXLHdLQUF3Syw0QkFBNEIsZ0JBQWdCLG1CQUFtQiwyRkFBMkYscUVBQXFFLDJFQUEyRSxpQkFBaUIsY0FBYyxXQUFXLDZIQUE2SCxrQ0FBa0MsNEZBQTRGLHdIQUF3SCxXQUFXLG1HQUFtRyxxRUFBcUUsc0JBQXNCLDBFQUEwRSx3Q0FBd0MsMENBQTBDLFdBQVcseUNBQXlDLDRDQUE0QyxxRUFBcUUsK0NBQStDLDhCQUE4QixjQUFjLFdBQVcsZ0VBQWdFLHNDQUFzQyw2REFBNkQsK0NBQStDLDhCQUE4QixjQUFjLFdBQVcsbURBQW1ELHVDQUF1QyxzRUFBc0UsV0FBVyx5QkFBeUIsbUJBQW1CLFdBQVcsd0NBQXdDLHNEQUFzRCxtQkFBbUIsV0FBVyw2QkFBNkIsZ0JBQWdCLGdCQUFnQixxR0FBcUcsZ0RBQWdELHNKQUFzSixvR0FBb0csZ0ZBQWdGLG9DQUFvQyw0Q0FBNEMsZ0VBQWdFLGdEQUFnRCx3Q0FBd0MsdUdBQXVHLDZNQUE2TSwyRUFBMkUsMkVBQTJFLCtGQUErRiwwTkFBME4sNEhBQTRILCtEQUErRCxxRUFBcUUsaUJBQWlCLGNBQWMsMERBQTBELGlDQUFpQyxjQUFjLFdBQVcsK0dBQStHLDJCQUEyQixRQUFRLDZCQUE2QiwwQkFBMEIsbUNBQW1DLGtDQUFrQyxXQUFXLHlCQUF5QixpQ0FBaUMsV0FBVyx5REFBeUQsUUFBUSw4RUFBOEUsMkJBQTJCLG1DQUFtQyx5REFBeUQsUUFBUSxtQkFBbUIsOEJBQThCLFFBQVEsY0FBYyx3QkFBd0IsK0RBQStELGlEQUFpRCxtQ0FBbUMsd0NBQXdDLHFDQUFxQywwQkFBMEIsZ0JBQWdCLGFBQWEsMkZBQTJGLG9DQUFvQywyRkFBMkYsMkRBQTJELDRDQUE0Qyx3Q0FBd0MsMENBQTBDLFFBQVEsd0lBQXdJLHdEQUF3RCxrREFBa0QsdURBQXVELEtBQUssQzs7Ozs7Ozs7Ozs7O0FDQWx4ZjtBQUFlLGlMQUFrSCxzREFBc0QsdUNBQXVDLHdCQUF3QixtQ0FBbUMsNEJBQTRCLG1DQUFtQyw0Q0FBNEMsbUdBQW1HLHVDQUF1QyxLQUFLLEs7Ozs7Ozs7Ozs7OztBQ0FuaEI7QUFBZSwwRkFBMkIsMEJBQTBCLCtCQUErQixxQkFBcUIsOENBQThDLEVBQUUsSzs7Ozs7Ozs7Ozs7O0FDQXhLO0FBQWUsMEZBQTJCLDBCQUEwQix3QkFBd0Isd0NBQXdDLG1EQUFtRCxLQUFLLEs7Ozs7Ozs7Ozs7OztBQ0E1TDtBQUFlLHNGQUF1Qiw4RUFBOEUseUJBQXlCLCtCQUErQiw4QkFBOEIsMkJBQTJCLHNCQUFzQiwrQkFBK0IsZ1BBQWdQLDBFQUEwRSxvQ0FBb0MscUNBQXFDLHNHQUFzRyw2QkFBNkIsK0JBQStCLDZCQUE2QiwyQkFBMkIsa0NBQWtDLDBDQUEwQyxpQ0FBaUMscUNBQXFDLGtDQUFrQywrQkFBK0IsaUNBQWlDLDJCQUEyQix1REFBdUQsbUNBQW1DLG9DQUFvQyxpQ0FBaUMsNkJBQTZCLDJKQUEySixvQ0FBb0MsNkJBQTZCLHdDQUF3Qyx1QkFBdUIsUUFBUSw0WkFBNFosbUNBQW1DLHNUQUFzVCxvU0FBb1Msb2RBQW9kLHFoQkFBcWhCLHdEQUF3RCxnSUFBZ0ksUUFBUSxtQkFBbUIsaUlBQWlJLFFBQVEsS0FBSyxtQ0FBbUMsc0RBQXNELEVBQUUsNkNBQTZDLGtDQUFrQyxzQkFBc0Isa0JBQWtCLGFBQWEsNkRBQTZELG9DQUFvQyxzRUFBc0UsV0FBVyxRQUFRLEtBQUssd0RBQXdELDBEQUEwRCxnREFBZ0Qsc0JBQXNCLEtBQUsscUVBQXFFLDRCQUE0Qix1Q0FBdUMscUZBQXFGLG1FQUFtRSw0SEFBNEgsUUFBUSwyQkFBMkIsS0FBSyw0REFBNEQseUJBQXlCLHlCQUF5Qix5QkFBeUIsMENBQTBDLHNGQUFzRixLQUFLLGtEQUFrRCwrQkFBK0IsNENBQTRDLFFBQVEsbUJBQW1CLHlEQUF5RCxRQUFRLEtBQUssMkVBQTJFLG1EQUFtRCw0REFBNEQsK0JBQStCLGtDQUFrQyw0Q0FBNEMsNERBQTRELHNFQUFzRSx1RkFBdUYsMkJBQTJCLDRCQUE0QixXQUFXLFFBQVEsdUZBQXVGLEtBQUsseUZBQXlGLDREQUE0RCxpREFBaUQsdUZBQXVGLFFBQVEsMERBQTBELGdDQUFnQyw4Q0FBOEMsUUFBUSxtQkFBbUIseUJBQXlCLGtCQUFrQixnQkFBZ0IsZ0RBQWdELCtEQUErRCx1REFBdUQsaUJBQWlCLGNBQWMsV0FBVyxRQUFRLEtBQUsseUZBQXlGLDREQUE0RCxpREFBaUQsMENBQTBDLFFBQVEsaUVBQWlFLG9DQUFvQyxLQUFLLGdDQUFnQyx5QkFBeUIsRUFBRSxxREFBcUQsK0JBQStCLDJCQUEyQixrREFBa0QsMENBQTBDLHdCQUF3QixXQUFXLHlCQUF5Qiw2REFBNkQsV0FBVyxRQUFRLG1CQUFtQixxQkFBcUIsUUFBUSxLQUFLLHFGQUFxRixzQkFBc0IsK0lBQStJLDZDQUE2QyxtREFBbUQsa0NBQWtDLDZCQUE2Qix5RUFBeUUsd0ZBQXdGLHdGQUF3RixrREFBa0QsUUFBUSwyQkFBMkIsNEJBQTRCLGtDQUFrQyxRQUFRLG1CQUFtQiwwREFBMEQsUUFBUSxtREFBbUQsdUJBQXVCLDRCQUE0QixLQUFLLHdCQUF3QixvQkFBb0IsK0JBQStCLG1EQUFtRCxRQUFRLG1CQUFtQix5Q0FBeUMsUUFBUSx1Q0FBdUMsc0JBQXNCLGlDQUFpQyxzQ0FBc0MsUUFBUSxtQkFBbUIsNENBQTRDLFFBQVEsNENBQTRDLCtJQUErSSwyQkFBMkIsUUFBUSxvSUFBb0ksMEJBQTBCLG1DQUFtQyxzRUFBc0UsUUFBUSxtQkFBbUIsdURBQXVELHdDQUF3Qyx5REFBeUQsY0FBYywrQkFBK0IsK0VBQStFLGNBQWMsV0FBVyw0REFBNEQsd0NBQXdDLGdFQUFnRSxjQUFjLCtCQUErQiwrRUFBK0UsY0FBYyxXQUFXLHlCQUF5Qiw0REFBNEQsNENBQTRDLHFFQUFxRSw4Q0FBOEMsaUJBQWlCLDBFQUEwRSw0REFBNEQsaUJBQWlCLHFDQUFxQyxxTEFBcUwsc0ZBQXNGLGtFQUFrRSxpQkFBaUIsY0FBYywrQkFBK0IscUVBQXFFLHVGQUF1RixtRUFBbUUseURBQXlELGtFQUFrRSxxQ0FBcUMsa0hBQWtILDhFQUE4RSxpQkFBaUIsaUhBQWlILG1KQUFtSiw4Q0FBOEMseURBQXlELGtFQUFrRSxxQ0FBcUMsc0RBQXNELCtFQUErRSw4RkFBOEYsb0JBQW9CLDJDQUEyQyw4REFBOEQscUNBQXFDLDJGQUEyRix1QkFBdUIsaURBQWlELGlHQUFpRyx1QkFBdUIsb0JBQW9CLGlGQUFpRixpQkFBaUIscUNBQXFDLHlFQUF5RSw4Q0FBOEMsaUJBQWlCLGNBQWMsV0FBVyxRQUFRLG9DQUFvQyxLQUFLLEM7Ozs7Ozs7Ozs7OztBQ0EzK1o7QUFBZSx1RkFBd0IsMkJBQTJCLDJCQUEyQixzQkFBc0IsMkJBQTJCLDRCQUE0Qiw2QkFBNkIseUJBQXlCLCtCQUErQiw4QkFBOEIsd0JBQXdCLG9FQUFvRSxrREFBa0Qsa0RBQWtELG9FQUFvRSw4QkFBOEIsS0FBSyxDOzs7Ozs7Ozs7OztBQ0Fwa0IsVUFBVSxtQkFBTyxDQUFDLHNKQUEyRTtBQUM3RiwwQkFBMEIsbUJBQU8sQ0FBQyw4SEFBMEQ7O0FBRTVGOztBQUVBO0FBQ0EsMEJBQTBCLFFBQVM7QUFDbkM7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7OztBQUlBLHNDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LnRzXCIpO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qIEN1c3RvbWl6ZSB0aGUgbGFiZWwgKHRoZSBDaGVja2JveExhYmVsKSAqL1xcclxcbi5DaGVja2JveExhYmVsIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogSGlkZSB0aGUgYnJvd3NlcidzIGRlZmF1bHQgY2hlY2tib3ggKi9cXHJcXG4uQ2hlY2tib3hMYWJlbCBpbnB1dCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBvcGFjaXR5OiAwO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgaGVpZ2h0OiAwO1xcclxcbiAgd2lkdGg6IDA7XFxyXFxufVxcclxcblxcclxcbi8qIENyZWF0ZSBhIGN1c3RvbSBjaGVja2JveCAqL1xcclxcbi5DaGVja21hcmsge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIGhlaWdodDogMjBweDtcXHJcXG4gIHdpZHRoOiAyMHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcXHJcXG59XFxyXFxuXFxyXFxuLyogV2hlbiB0aGUgY2hlY2tib3ggaXMgY2hlY2tlZCwgYWRkIGEgYmx1ZSBiYWNrZ3JvdW5kICovXFxyXFxuLkNoZWNrYm94TGFiZWwgaW5wdXQ6Y2hlY2tlZCB+IC5DaGVja21hcmsge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxOTZmMztcXHJcXG59XFxyXFxuXFxyXFxuLyogQ3JlYXRlIHRoZSBjaGVja21hcmsvaW5kaWNhdG9yIChoaWRkZW4gd2hlbiBub3QgY2hlY2tlZCkgKi9cXHJcXG4uQ2hlY2ttYXJrOmFmdGVyIHtcXHJcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogU2hvdyB0aGUgY2hlY2ttYXJrIHdoZW4gY2hlY2tlZCAqL1xcclxcbi5DaGVja2JveExhYmVsIGlucHV0OmNoZWNrZWQgfiAuQ2hlY2ttYXJrOmFmdGVyIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBTdHlsZSB0aGUgY2hlY2ttYXJrL2luZGljYXRvciAqL1xcclxcbi5DaGVja2JveExhYmVsIC5DaGVja21hcms6YWZ0ZXIge1xcclxcbiAgbGVmdDogN3B4O1xcclxcbiAgdG9wOiAzcHg7XFxyXFxuICB3aWR0aDogNHB4O1xcclxcbiAgaGVpZ2h0OiA4cHg7XFxyXFxuICBib3JkZXI6IHNvbGlkIHdoaXRlO1xcclxcbiAgYm9yZGVyLXdpZHRoOiAwIDNweCAzcHggMDtcXHJcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcclxcbiAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWRldmljZS13aWR0aDogODAwcHgpIHtcXHJcXG4gIC5DaGVja2JveExhYmVsIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgLyogQ3JlYXRlIGEgY3VzdG9tIGNoZWNrYm94ICovXFxyXFxuICAuQ2hlY2ttYXJrIHtcXHJcXG4gICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICB3aWR0aDogNDBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC8qIFN0eWxlIHRoZSBjaGVja21hcmsvaW5kaWNhdG9yICovXFxyXFxuICAuQ2hlY2tib3hMYWJlbCAuQ2hlY2ttYXJrOmFmdGVyIHtcXHJcXG4gICAgbGVmdDogMTRweDtcXHJcXG4gICAgdG9wOiA2cHg7XFxyXFxuICAgIHdpZHRoOiA4cHg7XFxyXFxuICAgIGhlaWdodDogMTZweDtcXHJcXG4gICAgYm9yZGVyLXdpZHRoOiAwIDZweCA2cHggMDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuTGlzdEJveCB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLkxpc3RCb3hJdGVtOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHBvd2RlcmJsdWU7XFxyXFxufVxcclxcblxcclxcbi5MaXN0Qm94SXRlbVNlbGVjdGVkLFxcclxcbi5MaXN0Qm94SXRlbVNlbGVjdGVkOmhvdmVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHN0ZWVsYmx1ZTtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWRldmljZS13aWR0aDogODAwcHgpIHtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuTWVudWJhciB7XFxyXFxuICBsZWZ0OiAwcHg7XFxyXFxuICB0b3A6IDBweDtcXHJcXG4gIHJpZ2h0OiAwcHg7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxyXFxuICBjb2xvcjogYmxhY2s7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLW1haW4tY29sb3IpLCAwLjI1KTtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLk1lbnViYXIgPiAuTWVudUl0ZW0ge1xcclxcbiAgY29sb3I6IGJsYWNrO1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uTWVudSB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzAsIDIzMCwgMjMwLCAwLjkpO1xcclxcbiAgd2lkdGg6IDIwMHB4O1xcclxcbiAgYm94LXNoYWRvdzogMHB4IDhweCAxNnB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxyXFxuICB6LWluZGV4OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4uTWVudUl0ZW0ge1xcclxcbiAgY29sb3I6IGJsYWNrO1xcclxcbiAgcGFkZGluZzogOHB4O1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5NZW51SXRlbSAuU2xpZGVyUmFuZ2Uge1xcclxcbiAgd2lkdGg6IDE3NXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uTWVudUl0ZW06aG92ZXIge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDAsIDIwMCwgMjU1LCAwLjc1KTtcXHJcXG59XFxyXFxuXFxyXFxuLyogU3R5bGUgd2UgYWRkIG9yIHJlbW92ZSBhcyBtZW51cyBhcmUgZGlzcGxheWVkIG9yIGhpZGRlbiAqL1xcclxcbi5NZW51U2hvdyB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuLk1lbnVJdGVtIC5TbGlkZXJMYWJlbCxcXHJcXG4uTWVudUl0ZW0gLlNsaWRlckNvbG9yU3BhbixcXHJcXG4uTWVudUl0ZW0gLlNsaWRlclZhbHVlU3BhbiB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uTWVudUl0ZW0gLkNoZWNrYm94IHtcXHJcXG4gIGZsb2F0OiBsZWZ0O1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MDBweCkge1xcclxcbiAgLk1lbnUge1xcclxcbiAgICB3aWR0aDogNDAwcHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuTWVudWJhciA+IC5NZW51SXRlbSB7XFxyXFxuICAgIHBhZGRpbmc6IDE2cHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuTWVudUl0ZW0ge1xcclxcbiAgICBwYWRkaW5nOiAxNnB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgLk1lbnVJdGVtIC5TbGlkZXJSYW5nZSB7XFxyXFxuICAgIHdpZHRoOiAzNTBweDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjUGF0aFRyYWNlckFwcCAjZGVzY3JpcHRpb24ge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgYm90dG9tOiA1cHg7XFxyXFxuICBsZWZ0OiAycHg7XFxyXFxuICBwYWRkaW5nOiAycHg7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDVweDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gIGZvbnQtc2l6ZTogMTBwdDtcXHJcXG4gIGZvbnQtZmFtaWx5OiBhcmlhbDtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIHRleHQtc2hhZG93OiAwcHggMHB4IDZweCByZ2JhKDAsIDAsIDAsIDEpO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNQYXRoVHJhY2VyQXBwICNkcmF3VGltZSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDVweDtcXHJcXG4gIGxlZnQ6IDJweDtcXHJcXG4gIHBhZGRpbmc6IDJweDtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcXHJcXG4gIHBhZGRpbmctbGVmdDogNXB4O1xcclxcbiAgZm9udC1zaXplOiA4cHQ7XFxyXFxuICBmb250LWZhbWlseTogYXJpYWw7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxuICB0ZXh0LXNoYWRvdzogMHB4IDBweCA2cHggcmdiYSgwLCAwLCAwLCAxKTtcXHJcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4jUGF0aFRyYWNlckFwcCAjcHJvZ3Jlc3NCYXIge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgYm90dG9tOiAwcHg7XFxyXFxuICBsZWZ0OiAwcHg7XFxyXFxuICByaWdodDogMHB4O1xcclxcbiAgaGVpZ2h0OiA1cHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDUwLCAyMDUsIDUwLCAwLjc1KTtcXHJcXG59XFxyXFxuXFxyXFxuI1BhdGhUcmFjZXJBcHAgI21vZGVCdXR0b24ge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgYm90dG9tOiA1cHg7XFxyXFxuICByaWdodDogNXB4O1xcclxcbiAgcGFkZGluZzogMnB4O1xcclxcbiAgcGFkZGluZy1yaWdodDogNXB4O1xcclxcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICBmb250LXNpemU6IDEwcHQ7XFxyXFxuICBmb250LWZhbWlseTogYXJpYWw7XFxyXFxuICBjb2xvcjogeWVsbG93O1xcclxcbiAgdGV4dC1zaGFkb3c6IDBweCAwcHggNnB4IHJnYmEoMCwgMCwgMCwgMSk7XFxyXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuI1BhdGhUcmFjZXJBcHAgLlNsaWRlckxhYmVsIHtcXHJcXG4gIGZsZXg6IDAgMCAxNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuI1BhdGhUcmFjZXJBcHAgLlNsaWRlclZhbHVlU3BhbiB7XFxyXFxuICBmbGV4OiAwIDAgODBweDtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWRldmljZS13aWR0aDogODAwcHgpIHtcXHJcXG4gICNQYXRoVHJhY2VyQXBwICNkcmF3VGltZSB7XFxyXFxuICAgIGxlZnQ6IDRweDtcXHJcXG4gICAgdG9wOiAxMHB4O1xcclxcbiAgICBmb250LXNpemU6IDE2cHQ7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBkYXJrZXI7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAjUGF0aFRyYWNlckFwcCAjbW9kZUJ1dHRvbiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjBwdDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGRhcmtlcjtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNQYXRoVHJhY2VyQXBwICNkZXNjcmlwdGlvbiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjBwdDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGRhcmtlcjtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNQYXRoVHJhY2VyQXBwIC5TbGlkZXJMYWJlbCB7XFxyXFxuICAgIGZsZXg6IDAgMCAzMDBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNQYXRoVHJhY2VyQXBwIC5TbGlkZXJWYWx1ZVNwYW4ge1xcclxcbiAgICBmbGV4OiAwIDAgMTYwcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogQ3VzdG9taXplIHRoZSBsYWJlbCAodGhlIFJhZGlvYnV0dG9uTGFiZWwpICovXFxyXFxuLlJhZGlvYnV0dG9uTGFiZWwge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDI1cHg7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBIaWRlIHRoZSBicm93c2VyJ3MgZGVmYXVsdCBSYWRpb2J1dHRvbiAqL1xcclxcbi5SYWRpb2J1dHRvbkxhYmVsIGlucHV0IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBoZWlnaHQ6IDA7XFxyXFxuICB3aWR0aDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyogQ3JlYXRlIGEgY3VzdG9tIFJhZGlvYnV0dG9uICovXFxyXFxuLlJhZGlvQ2hlY2ttYXJrIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICBoZWlnaHQ6IDE4LjVweDtcXHJcXG4gIHdpZHRoOiAxOHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG59XFxyXFxuXFxyXFxuLyogV2hlbiB0aGUgUmFkaW9idXR0b24gaXMgY2hlY2tlZCwgYWRkIGEgYmx1ZSBiYWNrZ3JvdW5kICovXFxyXFxuLlJhZGlvYnV0dG9uTGFiZWwgaW5wdXQ6Y2hlY2tlZCB+IC5SYWRpb0NoZWNrbWFyayB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE5NmYzO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBDcmVhdGUgdGhlIGNoZWNrbWFyay9pbmRpY2F0b3IgKGhpZGRlbiB3aGVuIG5vdCBjaGVja2VkKSAqL1xcclxcbi5SYWRpb0NoZWNrbWFyazphZnRlciB7XFxyXFxuICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi8qIFNob3cgdGhlIGNoZWNrbWFyayB3aGVuIGNoZWNrZWQgKi9cXHJcXG4uUmFkaW9idXR0b25MYWJlbCBpbnB1dDpjaGVja2VkIH4gLlJhZGlvQ2hlY2ttYXJrOmFmdGVyIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBTdHlsZSB0aGUgY2hlY2ttYXJrL2luZGljYXRvciAqL1xcclxcbi5SYWRpb2J1dHRvbkxhYmVsIC5SYWRpb0NoZWNrbWFyazphZnRlciB7XFxyXFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXHJcXG4gIHRvcDogNXB4O1xcclxcbiAgbGVmdDogNC41cHg7XFxyXFxuICB3aWR0aDogOXB4O1xcclxcbiAgaGVpZ2h0OiA4LjVweDtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWRldmljZS13aWR0aDogODAwcHgpIHtcXHJcXG4gIC5SYWRpb2J1dHRvbkxhYmVsIHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgLyogQ3JlYXRlIGEgY3VzdG9tIFJhZGlvYnV0dG9uICovXFxyXFxuICAuUmFkaW9DaGVja21hcmsge1xcclxcbiAgICB0b3A6IDRweDtcXHJcXG4gICAgaGVpZ2h0OiAzN3B4O1xcclxcbiAgICB3aWR0aDogMzZweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC8qIFN0eWxlIHRoZSBjaGVja21hcmsvaW5kaWNhdG9yICovXFxyXFxuICAuUmFkaW9idXR0b25MYWJlbCAuUmFkaW9DaGVja21hcms6YWZ0ZXIge1xcclxcbiAgICB0b3A6IDEwcHg7XFxyXFxuICAgIGxlZnQ6IDlweDtcXHJcXG4gICAgd2lkdGg6IDE4cHg7XFxyXFxuICAgIGhlaWdodDogMTdweDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuU2xpZGVyRGl2IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXHJcXG4gIG1hcmdpbi10b3A6IDdweDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDdweDtcXHJcXG59XFxyXFxuXFxyXFxuLlNsaWRlckxhYmVsIHtcXHJcXG4gIGZsZXg6IDAgMCAxMjVweDtcXHJcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4uU2xpZGVyUmFuZ2Uge1xcclxcbiAgZmxleDogMSAxIDIwMHB4O1xcclxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxyXFxuICBoZWlnaHQ6IDE1cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAzcHg7XFxyXFxuICBtYXJnaW4tbGVmdDogNXB4O1xcclxcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxyXFxuICBib3gtc2hhZG93OiAwIDJweCAycHggcmdiYSgwLCAwLCAwLCAwLjMpIGluc2V0O1xcclxcbiAgYm9yZGVyOiBncmF5O1xcclxcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXHJcXG4gIGJvcmRlci13aWR0aDogMC41cHg7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xcclxcbn1cXHJcXG5cXHJcXG4uU2xpZGVyUmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXHJcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXHJcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICBib3gtc2hhZG93OiAxcHggMXB4IDFweCAjMDAwMDAwLCAwcHggMHB4IDFweCAjMGQwZDBkO1xcclxcbiAgd2lkdGg6IDIwcHg7XFxyXFxuICBoZWlnaHQ6IDIwcHg7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICBib3JkZXItd2lkdGg6IDAuNXB4O1xcclxcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXHJcXG4gIGJvcmRlci1jb2xvcjogYmxhY2s7XFxyXFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCBsaWdodGdyZWVuLCBkYXJrZ3JlZW4pO1xcclxcbn1cXHJcXG5cXHJcXG4uU2xpZGVyUmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWIge1xcclxcbiAgYm94LXNoYWRvdzogMXB4IDFweCAxcHggIzAwMDAwMCwgMHB4IDBweCAxcHggIzBkMGQwZDtcXHJcXG4gIHdpZHRoOiAyMHB4O1xcclxcbiAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgYm9yZGVyLXdpZHRoOiAwLjVweDtcXHJcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxyXFxuICBib3JkZXItY29sb3I6IGJsYWNrO1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgbGlnaHRncmVlbiwgZGFya2dyZWVuKTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLlNsaWRlckNvbG9yU3BhbiB7XFxyXFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XFxyXFxuICBmbGV4OiAwIDAgMTVweDtcXHJcXG4gIHdpZHRoOiAxNXB4O1xcclxcbiAgaGVpZ2h0OiAxNXB4O1xcclxcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAycHg7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICBib3JkZXI6IGdyYXk7XFxyXFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcclxcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XFxyXFxufVxcclxcblxcclxcbi5TbGlkZXJWYWx1ZVNwYW4ge1xcclxcbiAgZmxleDogMCAwIDYwcHg7XFxyXFxufVxcclxcblxcclxcbiNTbGlkZXIgLmRpc2FibGVkIHtcXHJcXG4gIGNvbG9yOiBncmF5O1xcclxcbn1cXHJcXG5cXHJcXG4jU2xpZGVyIC5kaXNhYmxlZDo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgbGlnaHRncmF5LCBkYXJrZ3JheSk7XFxyXFxuICBib3JkZXItY29sb3I6IGdyYXk7XFxyXFxufVxcclxcblxcclxcbiNTbGlkZXIgLmRpc2FibGVkOjotbW96LXJhbmdlLXRodW1iIHtcXHJcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIGxpZ2h0Z3JheSwgZGFya2dyYXkpO1xcclxcbiAgYm9yZGVyLWNvbG9yOiBncmF5O1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MDBweCkge1xcclxcbiAgLlNsaWRlckRpdiB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEycHg7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEycHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuU2xpZGVyTGFiZWwge1xcclxcbiAgICBmbGV4OiAwIDAgMjUwcHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuU2xpZGVyUmFuZ2Uge1xcclxcbiAgICBmbGV4OiAxIDEgNDAwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxyXFxuICAgIGhlaWdodDogMzBweDtcXHJcXG4gICAgbWFyZ2luLXRvcDogNnB4O1xcclxcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcclxcbiAgICBib3gtc2hhZG93OiAwIDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjMpIGluc2V0O1xcclxcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5TbGlkZXJSYW5nZTo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIGJveC1zaGFkb3c6IDJweCAycHggMnB4ICMwMDAwMDAsIDBweCAwcHggMnB4ICMwZDBkMGQ7XFxyXFxuICAgIHdpZHRoOiA0MHB4O1xcclxcbiAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgLlNsaWRlclJhbmdlOjotbW96LXJhbmdlLXRodW1iIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCAycHggIzAwMDAwMCwgMHB4IDBweCAxcHggIzBkMGQwZDtcXHJcXG4gICAgd2lkdGg6IDQwcHg7XFxyXFxuICAgIGhlaWdodDogNDBweDtcXHJcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuU2xpZGVyQ29sb3JTcGFuIHtcXHJcXG4gICAgZmxleDogMCAwIDMwcHg7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDMwcHg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG4gICAgbWFyZ2luLXRvcDogNHB4O1xcclxcbiAgICBib3JkZXItd2lkdGg6IDJweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5TbGlkZXJWYWx1ZVNwYW4ge1xcclxcbiAgICBmbGV4OiAwIDAgMTIwcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiI1NxdWludEFwcCAjUGFuZWwge1xcclxcbiAgZmxleDogMCAwIDMwMHB4O1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAjQ2FudmFzIHtcXHJcXG4gIGZsZXgtZ3JvdzogMTtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAuUGljdHVyZSB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwIC5DYW1lcmEge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRwaW5rO1xcclxcbiAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAuU2xpZGVyTGFiZWwgLmRpc2FibGVkIHtcXHJcXG4gIGNvbG9yOiBncmF5O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNTbGlkZXIgLmRpc2FibGVkOjotd2Via2l0LXNsaWRlci10aHVtYiB7XFxyXFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCBsaWdodGdyYXksIGxpZ2h0Z3JheSk7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgLkNoZWNrYm94RGl2IHtcXHJcXG4gIHBhZGRpbmctdG9wOiA1cHg7XFxyXFxuICBwYWRkaW5nLWJvdHRvbTogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwIC5SYWRpb2J1dHRvbkRpdiB7XFxyXFxuICBwYWRkaW5nLXRvcDogNXB4O1xcclxcbiAgcGFkZGluZy1ib3R0b206IDVweDtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAuU2xpZGVyTGFiZWwge1xcclxcbiAgZmxleDogMCAwIDgwcHg7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgLlNsaWRlclJhbmdlIHtcXHJcXG4gIGZsZXg6IDEgMSA4MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwIC5EaWFsb2dCYWNrZ3JvdW5kIHtcXHJcXG4gIHBvc2l0aW9uOiBmaXhlZDsgLyogU3RheSBpbiBwbGFjZSAqL1xcclxcbiAgei1pbmRleDogMTsgLyogU2l0IG9uIHRvcCAqL1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIHdpZHRoOiAxMDAlOyAvKiBGdWxsIHdpZHRoICovXFxyXFxuICBoZWlnaHQ6IDEwMCU7IC8qIEZ1bGwgaGVpZ2h0ICovXFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMCwgMCwgMC40KTtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI0RpYWxvZ0RpdiB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIHRvcDogMjAlO1xcclxcbiAgbGVmdDogMjAlO1xcclxcbiAgd2lkdGg6IDYwJTtcXHJcXG4gIGhlaWdodDogNjAlO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNEaWFsb2dUaXRsZURpdiB7XFxyXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAxMHB4O1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDEwcHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcclxcbiAgcGFkZGluZy10b3A6IDVweDtcXHJcXG4gIHBhZGRpbmctYm90dG9tOiA1cHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNUaXRsZURpdiB7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAjQ29ubmVjdGluZ1RleHQge1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgZmxleDogMSAxIGF1dG87XFxyXFxuICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI0Nvbm5lY3RpbmdBbmltYXRpb24ge1xcclxcbiAgem9vbTogMC4yO1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNEaWFsb2dCb2R5RGl2IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxMHB4O1xcclxcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMTBweDtcXHJcXG4gIGZsZXg6IDEgMTtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAuQnV0dG9uRGl2IHtcXHJcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNWaWV3UGFuZWxEaXYge1xcclxcbiAgZmxleDogYXV0bztcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBtYXJnaW46IDEwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI1ZpZXdCdXR0b24ge1xcclxcbiAgZmxleDogMCAxIDIwcHg7XFxyXFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNWaWV3TGlzdEJveCB7XFxyXFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgZmxleDogMSAxIGF1dG87XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI09yUGFyZW50RGl2IHtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI09yRGl2IHtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI0hvc3RQYW5lbERpdiB7XFxyXFxuICBmbGV4OiBhdXRvO1xcclxcbiAgcGFkZGluZzogMTBweDtcXHJcXG4gIG1hcmdpbjogMTBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRwaW5rO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAjU2Vzc2lvbk5hbWVEaXYge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI1NxdWludEFwcCAjTmFtZUlucHV0VGV4dCB7XFxyXFxuICBmbGV4OiAxIDEgYXV0bztcXHJcXG4gIHdpZHRoOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwIC5TdHJldGNoIHtcXHJcXG4gIGZsZXg6IDEgMCBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwIC5Ob1N0cmV0Y2gge1xcclxcbiAgZmxleDogMCAwIGF1dG87XFxyXFxufVxcclxcblxcclxcbiNTcXVpbnRBcHAgI1ZpZGVvIHtcXHJcXG4gIGRpc3BsYXk6IFxcXCJub25lXFxcIjtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGxlZnQ6IDEwcHg7XFxyXFxuICB0b3A6IDUwcHg7XFxyXFxuICB3aWR0aDogMjAlO1xcclxcbiAgYm9yZGVyOiBzb2xpZCAxcHg7XFxyXFxuICBib3JkZXItY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4jU3F1aW50QXBwICNDYW52YXMge1xcclxcbiAgZm9udC1zaXplOiA0MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBjb29sIGFuaW1hdGlvbiBmcm9tIGh0dHBzOi8vbG9hZGluZy5pby9jc3MvICovXFxyXFxuLmxkcy1yaW5nIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHdpZHRoOiA4MHB4O1xcclxcbiAgaGVpZ2h0OiA4MHB4O1xcclxcbn1cXHJcXG4ubGRzLXJpbmcgZGl2IHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiA2NHB4O1xcclxcbiAgaGVpZ2h0OiA2NHB4O1xcclxcbiAgbWFyZ2luOiA4cHg7XFxyXFxuICBib3JkZXI6IDhweCBzb2xpZCAjZmZmO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgYW5pbWF0aW9uOiBsZHMtcmluZyAxLjJzIGN1YmljLWJlemllcigwLjUsIDAsIDAuNSwgMSkgaW5maW5pdGU7XFxyXFxuICBib3JkZXItY29sb3I6ICNmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcbi5sZHMtcmluZyBkaXY6bnRoLWNoaWxkKDEpIHtcXHJcXG4gIGFuaW1hdGlvbi1kZWxheTogLTAuNDVzO1xcclxcbn1cXHJcXG4ubGRzLXJpbmcgZGl2Om50aC1jaGlsZCgyKSB7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjNzO1xcclxcbn1cXHJcXG4ubGRzLXJpbmcgZGl2Om50aC1jaGlsZCgzKSB7XFxyXFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjE1cztcXHJcXG59XFxyXFxuQGtleWZyYW1lcyBsZHMtcmluZyB7XFxyXFxuICAwJSB7XFxyXFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgfVxcclxcbiAgMTAwJSB7XFxyXFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSkge1xcclxcbiAgI1NxdWludEFwcCAjRGlhbG9nQm9keURpdiB7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAob3JpZW50YXRpb246IHBvcnRyYWl0KSB7XFxyXFxuICAjU3F1aW50QXBwICNEaWFsb2dCb2R5RGl2IHtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWRldmljZS13aWR0aDogODAwcHgpIHtcXHJcXG4gICNTcXVpbnRBcHAgI1ZpZGVvIHtcXHJcXG4gICAgdG9wOiAxMDBweDtcXHJcXG4gICAgd2lkdGg6IDMwJTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNTcXVpbnRBcHAgI0hvc3RQYW5lbERpdixcXHJcXG4gICNTcXVpbnRBcHAgI1ZpZXdQYW5lbERpdiB7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIG1hcmdpbjogMjBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNTcXVpbnRBcHAgLlNsaWRlckxhYmVsIHtcXHJcXG4gICAgZmxleDogMCAwIDEyMHB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgI1NxdWludEFwcCAjQ29ubmVjdGluZ0FuaW1hdGlvbiB7XFxyXFxuICAgIHpvb206IDAuNDtcXHJcXG4gIH1cXHJcXG4gICNTcXVpbnRBcHAgKiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjVwdDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiBTdHlsZSB0aGUgdGFiICovXFxyXFxuLlRhYnMge1xcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuLyogU3R5bGUgdGhlIGJ1dHRvbnMgdGhhdCBhcmUgdXNlZCB0byBvcGVuIHRoZSB0YWIgY29udGVudCAqL1xcclxcbi5UYWJzIGJ1dHRvbiB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgZmxvYXQ6IGxlZnQ7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICBvdXRsaW5lOiBub25lO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcclxcbiAgY29sb3I6ICMzMzM7XFxyXFxufVxcclxcblxcclxcbi8qIENoYW5nZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGJ1dHRvbnMgb24gaG92ZXIgKi9cXHJcXG4uVGFicyBidXR0b246aG92ZXIge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXHJcXG4gIGNvbG9yOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBDcmVhdGUgYW4gYWN0aXZlL2N1cnJlbnQgdGFibGluayBjbGFzcyAqL1xcclxcbi5UYWJzIGJ1dHRvbi5hY3RpdmUge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXHJcXG4gIGNvbG9yOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBTdHlsZSB0aGUgdGFiIGNvbnRlbnQgKi9cXHJcXG4uVGFiQ29udGVudCB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbiAgcGFkZGluZzogMjBweCAxMnB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWRldmljZS13aWR0aDogODAwcHgpIHtcXHJcXG4gIC5UYWJzIGJ1dHRvbiB7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHggNDBweDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjVmlld2VyQXBwICNQZXJzcGVjdGl2ZUNhbnZhcyB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTE0LCAxMTcsIDEzNCk7XFxyXFxuICBoZWlnaHQ6IDEwMHB4O1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbiNWaWV3ZXJBcHAgI1ZhbHVlUGxhbmVzUGFuZWwge1xcclxcbiAgaGVpZ2h0OiAxNTRweDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jVmFsdWVQbGFuZXNQYW5lbCAuU2xpZGVyc0RpdiB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBsZWZ0OiAwcHg7XFxyXFxuICByaWdodDogMTU0cHg7XFxyXFxufVxcclxcblxcclxcbiNWYWx1ZVBsYW5lc1BhbmVsICNMaWdodExpZ2h0UmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXHJcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIGxpZ2h0Z3JheSwgZGFya2dyYXkpO1xcclxcbn1cXHJcXG4jVmFsdWVQbGFuZXNQYW5lbCAjTGlnaHRMaWdodFNsaWRlclJhbmdlOjotbW96LXJhbmdlLXRodW1iIHtcXHJcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIGxpZ2h0Z3JheSwgZGFya2dyYXkpO1xcclxcbn1cXHJcXG5cXHJcXG4jVmFsdWVQbGFuZXNQYW5lbCAjTWlkTGlnaHRSYW5nZTo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgbGlnaHRncmF5LCBkYXJrZ3JheSk7XFxyXFxufVxcclxcbiNWYWx1ZVBsYW5lc1BhbmVsICNNaWRMaWdodFNsaWRlclJhbmdlOjotbW96LXJhbmdlLXRodW1iIHtcXHJcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIGxpZ2h0Z3JheSwgZGFya2dyYXkpO1xcclxcbn1cXHJcXG5cXHJcXG4jVmFsdWVQbGFuZXNQYW5lbCAjRGFya0xpZ2h0UmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXHJcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIGxpZ2h0Z3JheSwgZGFya2dyYXkpO1xcclxcbn1cXHJcXG4jVmFsdWVQbGFuZXNQYW5lbCAjRGFya0xpZ2h0U2xpZGVyUmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWIge1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgbGlnaHRncmF5LCBkYXJrZ3JheSk7XFxyXFxufVxcclxcblxcclxcbiNWYWx1ZVBsYW5lc1BhbmVsICNWYWx1ZVBsYW5lc0NhbnZhcyB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICByaWdodDogMHB4O1xcclxcbiAgd2lkdGg6IDE1MHB4O1xcclxcbiAgaGVpZ2h0OiAxNTBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxMjgsIDEyOCwgMTUwKTtcXHJcXG59XFxyXFxuXFxyXFxuI1ZhbHVlUGxhbmVzUGFuZWwgI1ZhbHVlUGxhbmVzT3ZlcmxheUNhbnZhcyB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICByaWdodDogMHB4O1xcclxcbiAgd2lkdGg6IDE1MHB4O1xcclxcbiAgaGVpZ2h0OiAxNTBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MDBweCkge1xcclxcbiAgI1ZpZXdlckFwcCAjUGVyc3BlY3RpdmVDYW52YXMge1xcclxcbiAgICBoZWlnaHQ6IDIwMHB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgI1ZpZXdlckFwcCAjVmFsdWVQbGFuZXNQYW5lbCB7XFxyXFxuICAgIGhlaWdodDogMzA4cHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAjVmFsdWVQbGFuZXNQYW5lbCAuU2xpZGVyc0RpdiB7XFxyXFxuICAgIHJpZ2h0OiAzMDhweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNWYWx1ZVBsYW5lc1BhbmVsICNWYWx1ZVBsYW5lc0NhbnZhcyB7XFxyXFxuICAgIHdpZHRoOiAzMDBweDtcXHJcXG4gICAgaGVpZ2h0OiAzMDBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICNWYWx1ZVBsYW5lc1BhbmVsICNWYWx1ZVBsYW5lc092ZXJsYXlDYW52YXMge1xcclxcbiAgICB3aWR0aDogMzAwcHg7XFxyXFxuICAgIGhlaWdodDogMzAwcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fID0gcmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9NZW51LmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NsaWRlci5jc3NcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8yX19fID0gcmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9UYWJzLmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzNfX18gPSByZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NoZWNrYm94LmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzRfX18gPSByZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JhZGlvYnV0dG9uLmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzVfX18gPSByZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xpc3RCb3guY3NzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfNl9fXyA9IHJlcXVpcmUoXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUGF0aFRyYWNlckFwcC5jc3NcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF83X19fID0gcmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9WaWV3ZXJBcHAuY3NzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfOF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3F1aW50QXBwLmNzc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuZXhwb3J0cy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5leHBvcnRzLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzJfX18pO1xuZXhwb3J0cy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfM19fXyk7XG5leHBvcnRzLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF80X19fKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzVfX18pO1xuZXhwb3J0cy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfNl9fXyk7XG5leHBvcnRzLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF83X19fKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzhfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiBWZXJkYW5hO1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAtLW1haW4tY29sb3I6IDExNCwgMTE3LCAxMzQ7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgbWFyZ2luOiAwcHg7XFxyXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbmJvZHk6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5Db250YWluZXIge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4uRmxleENvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbn1cXHJcXG5cXHJcXG4jTWFpbkNhbnZhcyB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTE0LCAxMTcsIDEzNCk7XFxyXFxufVxcclxcblxcclxcbi5PdmVybGF5IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICB0b3A6IDA7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGJvdHRvbTogMDtcXHJcXG4gIGZvbnQtc2l6ZTogNDBweDtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogaGlkZSBwYW5lbHMgYnkgZGVmYXVsdCAtIHVzZXJzIHNob3cgdGhlbSB2aWEgbWVudXMgKi9cXHJcXG4uUGFuZWwge1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLlBhbmVsICNFeGl0QnV0dG9uIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIHdpZHRoOiAyMHB4O1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICB0b3A6IDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBjb2xvcjogbGlnaHRncmF5O1xcclxcbiAgei1pbmRleDogMTtcXHJcXG59XFxyXFxuXFxyXFxuLlZpZXdlckFwcCAjRXhpdEJ1dHRvbjpob3ZlciB7XFxyXFxuICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG5cXHJcXG4jQ29uc29sZSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDBweDtcXHJcXG4gIGxlZnQ6IDBweDtcXHJcXG4gIGJvdHRvbTogMHB4O1xcclxcbiAgcmlnaHQ6IDBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGRhcmtibHVlO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgZm9udC1zaXplOiBcXFwiMTJweFxcXCI7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MDBweCkge1xcclxcbiAgKiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5QYW5lbCAjRXhpdEJ1dHRvbiB7XFxyXFxuICAgIHdpZHRoOiA0MHB4O1xcclxcbiAgfVxcclxcblxcclxcbiAgLk92ZXJsYXlBbm5vdGF0aW9uIHtcXHJcXG4gICAgZm9udC1zaXplOiAyMHB0O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTRFBVdGlscyA9IHJlcXVpcmUoJ3NkcCcpO1xuXG5mdW5jdGlvbiBmaXhTdGF0c1R5cGUoc3RhdCkge1xuICByZXR1cm4ge1xuICAgIGluYm91bmRydHA6ICdpbmJvdW5kLXJ0cCcsXG4gICAgb3V0Ym91bmRydHA6ICdvdXRib3VuZC1ydHAnLFxuICAgIGNhbmRpZGF0ZXBhaXI6ICdjYW5kaWRhdGUtcGFpcicsXG4gICAgbG9jYWxjYW5kaWRhdGU6ICdsb2NhbC1jYW5kaWRhdGUnLFxuICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnXG4gIH1bc3RhdC50eXBlXSB8fCBzdGF0LnR5cGU7XG59XG5cbmZ1bmN0aW9uIHdyaXRlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLCBjYXBzLCB0eXBlLCBzdHJlYW0sIGR0bHNSb2xlKSB7XG4gIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uKHRyYW5zY2VpdmVyLmtpbmQsIGNhcHMpO1xuXG4gIC8vIE1hcCBJQ0UgcGFyYW1ldGVycyAodWZyYWcsIHB3ZCkgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVJY2VQYXJhbWV0ZXJzKFxuICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuZ2V0TG9jYWxQYXJhbWV0ZXJzKCkpO1xuXG4gIC8vIE1hcCBEVExTIHBhcmFtZXRlcnMgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVEdGxzUGFyYW1ldGVycyhcbiAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuZ2V0TG9jYWxQYXJhbWV0ZXJzKCksXG4gICAgICB0eXBlID09PSAnb2ZmZXInID8gJ2FjdHBhc3MnIDogZHRsc1JvbGUgfHwgJ2FjdGl2ZScpO1xuXG4gIHNkcCArPSAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcXHJcXG4nO1xuXG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICBzZHAgKz0gJ2E9c2VuZHJlY3ZcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgIHNkcCArPSAnYT1zZW5kb25seVxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICBzZHAgKz0gJ2E9cmVjdm9ubHlcXHJcXG4nO1xuICB9IGVsc2Uge1xuICAgIHNkcCArPSAnYT1pbmFjdGl2ZVxcclxcbic7XG4gIH1cblxuICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgdmFyIHRyYWNrSWQgPSB0cmFuc2NlaXZlci5ydHBTZW5kZXIuX2luaXRpYWxUcmFja0lkIHx8XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjay5pZDtcbiAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuX2luaXRpYWxUcmFja0lkID0gdHJhY2tJZDtcbiAgICAvLyBzcGVjLlxuICAgIHZhciBtc2lkID0gJ21zaWQ6JyArIChzdHJlYW0gPyBzdHJlYW0uaWQgOiAnLScpICsgJyAnICtcbiAgICAgICAgdHJhY2tJZCArICdcXHJcXG4nO1xuICAgIHNkcCArPSAnYT0nICsgbXNpZDtcbiAgICAvLyBmb3IgQ2hyb21lLiBMZWdhY3kgc2hvdWxkIG5vIGxvbmdlciBiZSByZXF1aXJlZC5cbiAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICtcbiAgICAgICAgJyAnICsgbXNpZDtcblxuICAgIC8vIFJUWFxuICAgIGlmICh0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAgICcgJyArIG1zaWQ7XG4gICAgICBzZHAgKz0gJ2E9c3NyYy1ncm91cDpGSUQgJyArXG4gICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICsgJyAnICtcbiAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgICAnXFxyXFxuJztcbiAgICB9XG4gIH1cbiAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIGJlIHdyaXR0ZW4gYnkgd3JpdGVSdHBEZXNjcmlwdGlvbi5cbiAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAnIGNuYW1lOicgKyBTRFBVdGlscy5sb2NhbENOYW1lICsgJ1xcclxcbic7XG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gc2RwO1xufVxuXG4vLyBFZGdlIGRvZXMgbm90IGxpa2Vcbi8vIDEpIHN0dW46IGZpbHRlcmVkIGFmdGVyIDE0MzkzIHVubGVzcyA/dHJhbnNwb3J0PXVkcCBpcyBwcmVzZW50XG4vLyAyKSB0dXJuOiB0aGF0IGRvZXMgbm90IGhhdmUgYWxsIG9mIHR1cm46aG9zdDpwb3J0P3RyYW5zcG9ydD11ZHBcbi8vIDMpIHR1cm46IHdpdGggaXB2NiBhZGRyZXNzZXNcbi8vIDQpIHR1cm46IG9jY3VycmluZyBtdWxpcGxlIHRpbWVzXG5mdW5jdGlvbiBmaWx0ZXJJY2VTZXJ2ZXJzKGljZVNlcnZlcnMsIGVkZ2VWZXJzaW9uKSB7XG4gIHZhciBoYXNUdXJuID0gZmFsc2U7XG4gIGljZVNlcnZlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGljZVNlcnZlcnMpKTtcbiAgcmV0dXJuIGljZVNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uKHNlcnZlcikge1xuICAgIGlmIChzZXJ2ZXIgJiYgKHNlcnZlci51cmxzIHx8IHNlcnZlci51cmwpKSB7XG4gICAgICB2YXIgdXJscyA9IHNlcnZlci51cmxzIHx8IHNlcnZlci51cmw7XG4gICAgICBpZiAoc2VydmVyLnVybCAmJiAhc2VydmVyLnVybHMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdSVENJY2VTZXJ2ZXIudXJsIGlzIGRlcHJlY2F0ZWQhIFVzZSB1cmxzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgdXJscyA9PT0gJ3N0cmluZyc7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdXJscyA9IFt1cmxzXTtcbiAgICAgIH1cbiAgICAgIHVybHMgPSB1cmxzLmZpbHRlcihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIHZhbGlkVHVybiA9IHVybC5pbmRleE9mKCd0dXJuOicpID09PSAwICYmXG4gICAgICAgICAgICB1cmwuaW5kZXhPZigndHJhbnNwb3J0PXVkcCcpICE9PSAtMSAmJlxuICAgICAgICAgICAgdXJsLmluZGV4T2YoJ3R1cm46WycpID09PSAtMSAmJlxuICAgICAgICAgICAgIWhhc1R1cm47XG5cbiAgICAgICAgaWYgKHZhbGlkVHVybikge1xuICAgICAgICAgIGhhc1R1cm4gPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmwuaW5kZXhPZignc3R1bjonKSA9PT0gMCAmJiBlZGdlVmVyc2lvbiA+PSAxNDM5MyAmJlxuICAgICAgICAgICAgdXJsLmluZGV4T2YoJz90cmFuc3BvcnQ9dWRwJykgPT09IC0xO1xuICAgICAgfSk7XG5cbiAgICAgIGRlbGV0ZSBzZXJ2ZXIudXJsO1xuICAgICAgc2VydmVyLnVybHMgPSBpc1N0cmluZyA/IHVybHNbMF0gOiB1cmxzO1xuICAgICAgcmV0dXJuICEhdXJscy5sZW5ndGg7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gRGV0ZXJtaW5lcyB0aGUgaW50ZXJzZWN0aW9uIG9mIGxvY2FsIGFuZCByZW1vdGUgY2FwYWJpbGl0aWVzLlxuZnVuY3Rpb24gZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKGxvY2FsQ2FwYWJpbGl0aWVzLCByZW1vdGVDYXBhYmlsaXRpZXMpIHtcbiAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IHtcbiAgICBjb2RlY3M6IFtdLFxuICAgIGhlYWRlckV4dGVuc2lvbnM6IFtdLFxuICAgIGZlY01lY2hhbmlzbXM6IFtdXG4gIH07XG5cbiAgdmFyIGZpbmRDb2RlY0J5UGF5bG9hZFR5cGUgPSBmdW5jdGlvbihwdCwgY29kZWNzKSB7XG4gICAgcHQgPSBwYXJzZUludChwdCwgMTApO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29kZWNzW2ldLnBheWxvYWRUeXBlID09PSBwdCB8fFxuICAgICAgICAgIGNvZGVjc1tpXS5wcmVmZXJyZWRQYXlsb2FkVHlwZSA9PT0gcHQpIHtcbiAgICAgICAgcmV0dXJuIGNvZGVjc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHJ0eENhcGFiaWxpdHlNYXRjaGVzID0gZnVuY3Rpb24obFJ0eCwgclJ0eCwgbENvZGVjcywgckNvZGVjcykge1xuICAgIHZhciBsQ29kZWMgPSBmaW5kQ29kZWNCeVBheWxvYWRUeXBlKGxSdHgucGFyYW1ldGVycy5hcHQsIGxDb2RlY3MpO1xuICAgIHZhciByQ29kZWMgPSBmaW5kQ29kZWNCeVBheWxvYWRUeXBlKHJSdHgucGFyYW1ldGVycy5hcHQsIHJDb2RlY3MpO1xuICAgIHJldHVybiBsQ29kZWMgJiYgckNvZGVjICYmXG4gICAgICAgIGxDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHJDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH07XG5cbiAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24obENvZGVjKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgckNvZGVjID0gcmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjc1tpXTtcbiAgICAgIGlmIChsQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSByQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgbENvZGVjLmNsb2NrUmF0ZSA9PT0gckNvZGVjLmNsb2NrUmF0ZSkge1xuICAgICAgICBpZiAobENvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3J0eCcgJiZcbiAgICAgICAgICAgIGxDb2RlYy5wYXJhbWV0ZXJzICYmIHJDb2RlYy5wYXJhbWV0ZXJzLmFwdCkge1xuICAgICAgICAgIC8vIGZvciBSVFggd2UgbmVlZCB0byBmaW5kIHRoZSBsb2NhbCBydHggdGhhdCBoYXMgYSBhcHRcbiAgICAgICAgICAvLyB3aGljaCBwb2ludHMgdG8gdGhlIHNhbWUgbG9jYWwgY29kZWMgYXMgdGhlIHJlbW90ZSBvbmUuXG4gICAgICAgICAgaWYgKCFydHhDYXBhYmlsaXR5TWF0Y2hlcyhsQ29kZWMsIHJDb2RlYyxcbiAgICAgICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLCByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJDb2RlYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkockNvZGVjKSk7IC8vIGRlZXBjb3B5XG4gICAgICAgIC8vIG51bWJlciBvZiBjaGFubmVscyBpcyB0aGUgaGlnaGVzdCBjb21tb24gbnVtYmVyIG9mIGNoYW5uZWxzXG4gICAgICAgIHJDb2RlYy5udW1DaGFubmVscyA9IE1hdGgubWluKGxDb2RlYy5udW1DaGFubmVscyxcbiAgICAgICAgICAgIHJDb2RlYy5udW1DaGFubmVscyk7XG4gICAgICAgIC8vIHB1c2ggckNvZGVjIHNvIHdlIHJlcGx5IHdpdGggb2ZmZXJlciBwYXlsb2FkIHR5cGVcbiAgICAgICAgY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5wdXNoKHJDb2RlYyk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGNvbW1vbiBmZWVkYmFjayBtZWNoYW5pc21zXG4gICAgICAgIHJDb2RlYy5ydGNwRmVlZGJhY2sgPSByQ29kZWMucnRjcEZlZWRiYWNrLmZpbHRlcihmdW5jdGlvbihmYikge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbENvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGxDb2RlYy5ydGNwRmVlZGJhY2tbal0udHlwZSA9PT0gZmIudHlwZSAmJlxuICAgICAgICAgICAgICAgIGxDb2RlYy5ydGNwRmVlZGJhY2tbal0ucGFyYW1ldGVyID09PSBmYi5wYXJhbWV0ZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZJWE1FOiBhbHNvIG5lZWQgdG8gZGV0ZXJtaW5lIC5wYXJhbWV0ZXJzXG4gICAgICAgIC8vICBzZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW5wZWVyL29ydGMvaXNzdWVzLzU2OVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGxvY2FsQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihsSGVhZGVyRXh0ZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5sZW5ndGg7XG4gICAgICAgICBpKyspIHtcbiAgICAgIHZhciBySGVhZGVyRXh0ZW5zaW9uID0gcmVtb3RlQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnNbaV07XG4gICAgICBpZiAobEhlYWRlckV4dGVuc2lvbi51cmkgPT09IHJIZWFkZXJFeHRlbnNpb24udXJpKSB7XG4gICAgICAgIGNvbW1vbkNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLnB1c2gockhlYWRlckV4dGVuc2lvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gRklYTUU6IGZlY01lY2hhbmlzbXNcbiAgcmV0dXJuIGNvbW1vbkNhcGFiaWxpdGllcztcbn1cblxuLy8gaXMgYWN0aW9uPXNldExvY2FsRGVzY3JpcHRpb24gd2l0aCB0eXBlIGFsbG93ZWQgaW4gc2lnbmFsaW5nU3RhdGVcbmZ1bmN0aW9uIGlzQWN0aW9uQWxsb3dlZEluU2lnbmFsaW5nU3RhdGUoYWN0aW9uLCB0eXBlLCBzaWduYWxpbmdTdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIG9mZmVyOiB7XG4gICAgICBzZXRMb2NhbERlc2NyaXB0aW9uOiBbJ3N0YWJsZScsICdoYXZlLWxvY2FsLW9mZmVyJ10sXG4gICAgICBzZXRSZW1vdGVEZXNjcmlwdGlvbjogWydzdGFibGUnLCAnaGF2ZS1yZW1vdGUtb2ZmZXInXVxuICAgIH0sXG4gICAgYW5zd2VyOiB7XG4gICAgICBzZXRMb2NhbERlc2NyaXB0aW9uOiBbJ2hhdmUtcmVtb3RlLW9mZmVyJywgJ2hhdmUtbG9jYWwtcHJhbnN3ZXInXSxcbiAgICAgIHNldFJlbW90ZURlc2NyaXB0aW9uOiBbJ2hhdmUtbG9jYWwtb2ZmZXInLCAnaGF2ZS1yZW1vdGUtcHJhbnN3ZXInXVxuICAgIH1cbiAgfVt0eXBlXVthY3Rpb25dLmluZGV4T2Yoc2lnbmFsaW5nU3RhdGUpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gbWF5YmVBZGRDYW5kaWRhdGUoaWNlVHJhbnNwb3J0LCBjYW5kaWRhdGUpIHtcbiAgLy8gRWRnZSdzIGludGVybmFsIHJlcHJlc2VudGF0aW9uIGFkZHMgc29tZSBmaWVsZHMgdGhlcmVmb3JlXG4gIC8vIG5vdCBhbGwgZmllbGTRlSBhcmUgdGFrZW4gaW50byBhY2NvdW50LlxuICB2YXIgYWxyZWFkeUFkZGVkID0gaWNlVHJhbnNwb3J0LmdldFJlbW90ZUNhbmRpZGF0ZXMoKVxuICAgICAgLmZpbmQoZnVuY3Rpb24ocmVtb3RlQ2FuZGlkYXRlKSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUuZm91bmRhdGlvbiA9PT0gcmVtb3RlQ2FuZGlkYXRlLmZvdW5kYXRpb24gJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS5pcCA9PT0gcmVtb3RlQ2FuZGlkYXRlLmlwICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUucG9ydCA9PT0gcmVtb3RlQ2FuZGlkYXRlLnBvcnQgJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS5wcmlvcml0eSA9PT0gcmVtb3RlQ2FuZGlkYXRlLnByaW9yaXR5ICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUucHJvdG9jb2wgPT09IHJlbW90ZUNhbmRpZGF0ZS5wcm90b2NvbCAmJlxuICAgICAgICAgICAgY2FuZGlkYXRlLnR5cGUgPT09IHJlbW90ZUNhbmRpZGF0ZS50eXBlO1xuICAgICAgfSk7XG4gIGlmICghYWxyZWFkeUFkZGVkKSB7XG4gICAgaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xuICB9XG4gIHJldHVybiAhYWxyZWFkeUFkZGVkO1xufVxuXG5cbmZ1bmN0aW9uIG1ha2VFcnJvcihuYW1lLCBkZXNjcmlwdGlvbikge1xuICB2YXIgZSA9IG5ldyBFcnJvcihkZXNjcmlwdGlvbik7XG4gIGUubmFtZSA9IG5hbWU7XG4gIC8vIGxlZ2FjeSBlcnJvciBjb2RlcyBmcm9tIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2lkbC1ET01FeGNlcHRpb24tZXJyb3ItbmFtZXNcbiAgZS5jb2RlID0ge1xuICAgIE5vdFN1cHBvcnRlZEVycm9yOiA5LFxuICAgIEludmFsaWRTdGF0ZUVycm9yOiAxMSxcbiAgICBJbnZhbGlkQWNjZXNzRXJyb3I6IDE1LFxuICAgIFR5cGVFcnJvcjogdW5kZWZpbmVkLFxuICAgIE9wZXJhdGlvbkVycm9yOiB1bmRlZmluZWRcbiAgfVtuYW1lXTtcbiAgcmV0dXJuIGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24od2luZG93LCBlZGdlVmVyc2lvbikge1xuICAvLyBodHRwczovL3czYy5naXRodWIuaW8vbWVkaWFjYXB0dXJlLW1haW4vI21lZGlhc3RyZWFtXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBhZGQgdGhlIHRyYWNrIHRvIHRoZSBzdHJlYW0gYW5kXG4gIC8vIGRpc3BhdGNoIHRoZSBldmVudCBvdXJzZWx2ZXMuXG4gIGZ1bmN0aW9uIGFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbSkge1xuICAgIHN0cmVhbS5hZGRUcmFjayh0cmFjayk7XG4gICAgc3RyZWFtLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrRXZlbnQoJ2FkZHRyYWNrJyxcbiAgICAgICAge3RyYWNrOiB0cmFja30pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVRyYWNrRnJvbVN0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtKSB7XG4gICAgc3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICBzdHJlYW0uZGlzcGF0Y2hFdmVudChuZXcgd2luZG93Lk1lZGlhU3RyZWFtVHJhY2tFdmVudCgncmVtb3ZldHJhY2snLFxuICAgICAgICB7dHJhY2s6IHRyYWNrfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZUFkZFRyYWNrKHBjLCB0cmFjaywgcmVjZWl2ZXIsIHN0cmVhbXMpIHtcbiAgICB2YXIgdHJhY2tFdmVudCA9IG5ldyBFdmVudCgndHJhY2snKTtcbiAgICB0cmFja0V2ZW50LnRyYWNrID0gdHJhY2s7XG4gICAgdHJhY2tFdmVudC5yZWNlaXZlciA9IHJlY2VpdmVyO1xuICAgIHRyYWNrRXZlbnQudHJhbnNjZWl2ZXIgPSB7cmVjZWl2ZXI6IHJlY2VpdmVyfTtcbiAgICB0cmFja0V2ZW50LnN0cmVhbXMgPSBzdHJlYW1zO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ3RyYWNrJywgdHJhY2tFdmVudCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgUlRDUGVlckNvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgdmFyIF9ldmVudFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsICdkaXNwYXRjaEV2ZW50J11cbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgICAgcGNbbWV0aG9kXSA9IF9ldmVudFRhcmdldFttZXRob2RdLmJpbmQoX2V2ZW50VGFyZ2V0KTtcbiAgICAgICAgfSk7XG5cbiAgICB0aGlzLmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzID0gbnVsbDtcblxuICAgIHRoaXMubmVlZE5lZ290aWF0aW9uID0gZmFsc2U7XG5cbiAgICB0aGlzLmxvY2FsU3RyZWFtcyA9IFtdO1xuICAgIHRoaXMucmVtb3RlU3RyZWFtcyA9IFtdO1xuXG4gICAgdGhpcy5fbG9jYWxEZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fcmVtb3RlRGVzY3JpcHRpb24gPSBudWxsO1xuXG4gICAgdGhpcy5zaWduYWxpbmdTdGF0ZSA9ICdzdGFibGUnO1xuICAgIHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlID0gJ25ldyc7XG4gICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAnbmV3JztcbiAgICB0aGlzLmljZUdhdGhlcmluZ1N0YXRlID0gJ25ldyc7XG5cbiAgICBjb25maWcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbmZpZyB8fCB7fSkpO1xuXG4gICAgdGhpcy51c2luZ0J1bmRsZSA9IGNvbmZpZy5idW5kbGVQb2xpY3kgPT09ICdtYXgtYnVuZGxlJztcbiAgICBpZiAoY29uZmlnLnJ0Y3BNdXhQb2xpY3kgPT09ICduZWdvdGlhdGUnKSB7XG4gICAgICB0aHJvdyhtYWtlRXJyb3IoJ05vdFN1cHBvcnRlZEVycm9yJyxcbiAgICAgICAgICAncnRjcE11eFBvbGljeSBcXCduZWdvdGlhdGVcXCcgaXMgbm90IHN1cHBvcnRlZCcpKTtcbiAgICB9IGVsc2UgaWYgKCFjb25maWcucnRjcE11eFBvbGljeSkge1xuICAgICAgY29uZmlnLnJ0Y3BNdXhQb2xpY3kgPSAncmVxdWlyZSc7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5KSB7XG4gICAgICBjYXNlICdhbGwnOlxuICAgICAgY2FzZSAncmVsYXknOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kgPSAnYWxsJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjb25maWcuYnVuZGxlUG9saWN5KSB7XG4gICAgICBjYXNlICdiYWxhbmNlZCc6XG4gICAgICBjYXNlICdtYXgtY29tcGF0JzpcbiAgICAgIGNhc2UgJ21heC1idW5kbGUnOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbmZpZy5idW5kbGVQb2xpY3kgPSAnYmFsYW5jZWQnO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25maWcuaWNlU2VydmVycyA9IGZpbHRlckljZVNlcnZlcnMoY29uZmlnLmljZVNlcnZlcnMgfHwgW10sIGVkZ2VWZXJzaW9uKTtcblxuICAgIHRoaXMuX2ljZUdhdGhlcmVycyA9IFtdO1xuICAgIGlmIChjb25maWcuaWNlQ2FuZGlkYXRlUG9vbFNpemUpIHtcbiAgICAgIGZvciAodmFyIGkgPSBjb25maWcuaWNlQ2FuZGlkYXRlUG9vbFNpemU7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy5faWNlR2F0aGVyZXJzLnB1c2gobmV3IHdpbmRvdy5SVENJY2VHYXRoZXJlcih7XG4gICAgICAgICAgaWNlU2VydmVyczogY29uZmlnLmljZVNlcnZlcnMsXG4gICAgICAgICAgZ2F0aGVyUG9saWN5OiBjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnLmljZUNhbmRpZGF0ZVBvb2xTaXplID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG5cbiAgICAvLyBwZXItdHJhY2sgaWNlR2F0aGVycywgaWNlVHJhbnNwb3J0cywgZHRsc1RyYW5zcG9ydHMsIHJ0cFNlbmRlcnMsIC4uLlxuICAgIC8vIGV2ZXJ5dGhpbmcgdGhhdCBpcyBuZWVkZWQgdG8gZGVzY3JpYmUgYSBTRFAgbS1saW5lLlxuICAgIHRoaXMudHJhbnNjZWl2ZXJzID0gW107XG5cbiAgICB0aGlzLl9zZHBTZXNzaW9uSWQgPSBTRFBVdGlscy5nZW5lcmF0ZVNlc3Npb25JZCgpO1xuICAgIHRoaXMuX3NkcFNlc3Npb25WZXJzaW9uID0gMDtcblxuICAgIHRoaXMuX2R0bHNSb2xlID0gdW5kZWZpbmVkOyAvLyByb2xlIGZvciBhPXNldHVwIHRvIHVzZSBpbiBhbnN3ZXJzLlxuXG4gICAgdGhpcy5faXNDbG9zZWQgPSBmYWxzZTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnbG9jYWxEZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2NhbERlc2NyaXB0aW9uO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdyZW1vdGVEZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW1vdGVEZXNjcmlwdGlvbjtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHNldCB1cCBldmVudCBoYW5kbGVycyBvbiBwcm90b3R5cGVcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uaWNlY2FuZGlkYXRlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uYWRkc3RyZWFtID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9udHJhY2sgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25yZW1vdmVzdHJlYW0gPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25zaWduYWxpbmdzdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9ubmVnb3RpYXRpb25uZWVkZWQgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25kYXRhY2hhbm5lbCA9IG51bGw7XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24obmFtZSwgZXZlbnQpIHtcbiAgICBpZiAodGhpcy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICBpZiAodHlwZW9mIHRoaXNbJ29uJyArIG5hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzWydvbicgKyBuYW1lXShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZScpO1xuICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ2ljZWdhdGhlcmluZ3N0YXRlY2hhbmdlJywgZXZlbnQpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxTdHJlYW1zO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZW1vdGVTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3RlU3RyZWFtcztcbiAgfTtcblxuICAvLyBpbnRlcm5hbCBoZWxwZXIgdG8gY3JlYXRlIGEgdHJhbnNjZWl2ZXIgb2JqZWN0LlxuICAvLyAod2hpY2ggaXMgbm90IHlldCB0aGUgc2FtZSBhcyB0aGUgV2ViUlRDIDEuMCB0cmFuc2NlaXZlcilcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVUcmFuc2NlaXZlciA9IGZ1bmN0aW9uKGtpbmQsIGRvTm90QWRkKSB7XG4gICAgdmFyIGhhc0J1bmRsZVRyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aCA+IDA7XG4gICAgdmFyIHRyYW5zY2VpdmVyID0ge1xuICAgICAgdHJhY2s6IG51bGwsXG4gICAgICBpY2VHYXRoZXJlcjogbnVsbCxcbiAgICAgIGljZVRyYW5zcG9ydDogbnVsbCxcbiAgICAgIGR0bHNUcmFuc3BvcnQ6IG51bGwsXG4gICAgICBsb2NhbENhcGFiaWxpdGllczogbnVsbCxcbiAgICAgIHJlbW90ZUNhcGFiaWxpdGllczogbnVsbCxcbiAgICAgIHJ0cFNlbmRlcjogbnVsbCxcbiAgICAgIHJ0cFJlY2VpdmVyOiBudWxsLFxuICAgICAga2luZDoga2luZCxcbiAgICAgIG1pZDogbnVsbCxcbiAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM6IG51bGwsXG4gICAgICByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgICAgc3RyZWFtOiBudWxsLFxuICAgICAgYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtczogW10sXG4gICAgICB3YW50UmVjZWl2ZTogdHJ1ZVxuICAgIH07XG4gICAgaWYgKHRoaXMudXNpbmdCdW5kbGUgJiYgaGFzQnVuZGxlVHJhbnNwb3J0KSB7XG4gICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgPSB0aGlzLnRyYW5zY2VpdmVyc1swXS5pY2VUcmFuc3BvcnQ7XG4gICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0ID0gdGhpcy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRyYW5zcG9ydHMgPSB0aGlzLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cygpO1xuICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ID0gdHJhbnNwb3J0cy5pY2VUcmFuc3BvcnQ7XG4gICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0ID0gdHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0O1xuICAgIH1cbiAgICBpZiAoIWRvTm90QWRkKSB7XG4gICAgICB0aGlzLnRyYW5zY2VpdmVycy5wdXNoKHRyYW5zY2VpdmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zY2VpdmVyO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9IGZ1bmN0aW9uKHRyYWNrLCBzdHJlYW0pIHtcbiAgICBpZiAodGhpcy5faXNDbG9zZWQpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gY2FsbCBhZGRUcmFjayBvbiBhIGNsb3NlZCBwZWVyY29ubmVjdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUV4aXN0cyA9IHRoaXMudHJhbnNjZWl2ZXJzLmZpbmQoZnVuY3Rpb24ocykge1xuICAgICAgcmV0dXJuIHMudHJhY2sgPT09IHRyYWNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGFscmVhZHlFeGlzdHMpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yJywgJ1RyYWNrIGFscmVhZHkgZXhpc3RzLicpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2NlaXZlcjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMudHJhbnNjZWl2ZXJzW2ldLnRyYWNrICYmXG4gICAgICAgICAgdGhpcy50cmFuc2NlaXZlcnNbaV0ua2luZCA9PT0gdHJhY2sua2luZCkge1xuICAgICAgICB0cmFuc2NlaXZlciA9IHRoaXMudHJhbnNjZWl2ZXJzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRyYW5zY2VpdmVyKSB7XG4gICAgICB0cmFuc2NlaXZlciA9IHRoaXMuX2NyZWF0ZVRyYW5zY2VpdmVyKHRyYWNrLmtpbmQpO1xuICAgIH1cblxuICAgIHRoaXMuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkKCk7XG5cbiAgICBpZiAodGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pID09PSAtMSkge1xuICAgICAgdGhpcy5sb2NhbFN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgIH1cblxuICAgIHRyYW5zY2VpdmVyLnRyYWNrID0gdHJhY2s7XG4gICAgdHJhbnNjZWl2ZXIuc3RyZWFtID0gc3RyZWFtO1xuICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlciA9IG5ldyB3aW5kb3cuUlRDUnRwU2VuZGVyKHRyYWNrLFxuICAgICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0KTtcbiAgICByZXR1cm4gdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIGlmIChlZGdlVmVyc2lvbiA+PSAxNTAyNSkge1xuICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgcGMuYWRkVHJhY2sodHJhY2ssIHN0cmVhbSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xvbmUgaXMgbmVjZXNzYXJ5IGZvciBsb2NhbCBkZW1vcyBtb3N0bHksIGF0dGFjaGluZyBkaXJlY3RseVxuICAgICAgLy8gdG8gdHdvIGRpZmZlcmVudCBzZW5kZXJzIGRvZXMgbm90IHdvcmsgKGJ1aWxkIDEwNTQ3KS5cbiAgICAgIC8vIEZpeGVkIGluIDE1MDI1IChvciBlYXJsaWVyKVxuICAgICAgdmFyIGNsb25lZFN0cmVhbSA9IHN0cmVhbS5jbG9uZSgpO1xuICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2ssIGlkeCkge1xuICAgICAgICB2YXIgY2xvbmVkVHJhY2sgPSBjbG9uZWRTdHJlYW0uZ2V0VHJhY2tzKClbaWR4XTtcbiAgICAgICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignZW5hYmxlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgY2xvbmVkVHJhY2suZW5hYmxlZCA9IGV2ZW50LmVuYWJsZWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjbG9uZWRTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICBwYy5hZGRUcmFjayh0cmFjaywgY2xvbmVkU3RyZWFtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2sgPSBmdW5jdGlvbihzZW5kZXIpIHtcbiAgICBpZiAodGhpcy5faXNDbG9zZWQpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gY2FsbCByZW1vdmVUcmFjayBvbiBhIGNsb3NlZCBwZWVyY29ubmVjdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoIShzZW5kZXIgaW5zdGFuY2VvZiB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgMSBvZiBSVENQZWVyQ29ubmVjdGlvbi5yZW1vdmVUcmFjayAnICtcbiAgICAgICAgICAnZG9lcyBub3QgaW1wbGVtZW50IGludGVyZmFjZSBSVENSdHBTZW5kZXIuJyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zY2VpdmVyID0gdGhpcy50cmFuc2NlaXZlcnMuZmluZChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5ydHBTZW5kZXIgPT09IHNlbmRlcjtcbiAgICB9KTtcblxuICAgIGlmICghdHJhbnNjZWl2ZXIpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yJyxcbiAgICAgICAgICAnU2VuZGVyIHdhcyBub3QgY3JlYXRlZCBieSB0aGlzIGNvbm5lY3Rpb24uJyk7XG4gICAgfVxuICAgIHZhciBzdHJlYW0gPSB0cmFuc2NlaXZlci5zdHJlYW07XG5cbiAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc3RvcCgpO1xuICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlciA9IG51bGw7XG4gICAgdHJhbnNjZWl2ZXIudHJhY2sgPSBudWxsO1xuICAgIHRyYW5zY2VpdmVyLnN0cmVhbSA9IG51bGw7XG5cbiAgICAvLyByZW1vdmUgdGhlIHN0cmVhbSBmcm9tIHRoZSBzZXQgb2YgbG9jYWwgc3RyZWFtc1xuICAgIHZhciBsb2NhbFN0cmVhbXMgPSB0aGlzLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQuc3RyZWFtO1xuICAgIH0pO1xuICAgIGlmIChsb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pID09PSAtMSAmJlxuICAgICAgICB0aGlzLmxvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPiAtMSkge1xuICAgICAgdGhpcy5sb2NhbFN0cmVhbXMuc3BsaWNlKHRoaXMubG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSwgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQoKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgdmFyIHNlbmRlciA9IHBjLmdldFNlbmRlcnMoKS5maW5kKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIHMudHJhY2sgPT09IHRyYWNrO1xuICAgICAgfSk7XG4gICAgICBpZiAoc2VuZGVyKSB7XG4gICAgICAgIHBjLnJlbW92ZVRyYWNrKHNlbmRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gISF0cmFuc2NlaXZlci5ydHBTZW5kZXI7XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICAgIH0pO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gISF0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICB9KVxuICAgIC5tYXAoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIHJldHVybiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICB9KTtcbiAgfTtcblxuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fY3JlYXRlSWNlR2F0aGVyZXIgPSBmdW5jdGlvbihzZHBNTGluZUluZGV4LFxuICAgICAgdXNpbmdCdW5kbGUpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIGlmICh1c2luZ0J1bmRsZSAmJiBzZHBNTGluZUluZGV4ID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNjZWl2ZXJzWzBdLmljZUdhdGhlcmVyO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faWNlR2F0aGVyZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ljZUdhdGhlcmVycy5zaGlmdCgpO1xuICAgIH1cbiAgICB2YXIgaWNlR2F0aGVyZXIgPSBuZXcgd2luZG93LlJUQ0ljZUdhdGhlcmVyKHtcbiAgICAgIGljZVNlcnZlcnM6IHRoaXMuX2NvbmZpZy5pY2VTZXJ2ZXJzLFxuICAgICAgZ2F0aGVyUG9saWN5OiB0aGlzLl9jb25maWcuaWNlVHJhbnNwb3J0UG9saWN5XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGljZUdhdGhlcmVyLCAnc3RhdGUnLFxuICAgICAgICB7dmFsdWU6ICduZXcnLCB3cml0YWJsZTogdHJ1ZX1cbiAgICApO1xuXG4gICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMgPSBbXTtcbiAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJDYW5kaWRhdGVzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBlbmQgPSAhZXZlbnQuY2FuZGlkYXRlIHx8IE9iamVjdC5rZXlzKGV2ZW50LmNhbmRpZGF0ZSkubGVuZ3RoID09PSAwO1xuICAgICAgLy8gcG9seWZpbGwgc2luY2UgUlRDSWNlR2F0aGVyZXIuc3RhdGUgaXMgbm90IGltcGxlbWVudGVkIGluXG4gICAgICAvLyBFZGdlIDEwNTQ3IHlldC5cbiAgICAgIGljZUdhdGhlcmVyLnN0YXRlID0gZW5kID8gJ2NvbXBsZXRlZCcgOiAnZ2F0aGVyaW5nJztcbiAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzLnB1c2goZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWNlR2F0aGVyZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9jYWxjYW5kaWRhdGUnLFxuICAgICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyQ2FuZGlkYXRlcyk7XG4gICAgcmV0dXJuIGljZUdhdGhlcmVyO1xuICB9O1xuXG4gIC8vIHN0YXJ0IGdhdGhlcmluZyBmcm9tIGFuIFJUQ0ljZUdhdGhlcmVyLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2dhdGhlciA9IGZ1bmN0aW9uKG1pZCwgc2RwTUxpbmVJbmRleCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgdmFyIGljZUdhdGhlcmVyID0gdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlR2F0aGVyZXI7XG4gICAgaWYgKGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzID1cbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzO1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzID0gbnVsbDtcbiAgICBpY2VHYXRoZXJlci5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2NhbGNhbmRpZGF0ZScsXG4gICAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJDYW5kaWRhdGVzKTtcbiAgICBpY2VHYXRoZXJlci5vbmxvY2FsY2FuZGlkYXRlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAocGMudXNpbmdCdW5kbGUgJiYgc2RwTUxpbmVJbmRleCA+IDApIHtcbiAgICAgICAgLy8gaWYgd2Uga25vdyB0aGF0IHdlIHVzZSBidW5kbGUgd2UgY2FuIGRyb3AgY2FuZGlkYXRlcyB3aXRoXG4gICAgICAgIC8vINGVZHBNTGluZUluZGV4ID4gMC4gSWYgd2UgZG9uJ3QgZG8gdGhpcyB0aGVuIG91ciBzdGF0ZSBnZXRzXG4gICAgICAgIC8vIGNvbmZ1c2VkIHNpbmNlIHdlIGRpc3Bvc2UgdGhlIGV4dHJhIGljZSBnYXRoZXJlci5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2VjYW5kaWRhdGUnKTtcbiAgICAgIGV2ZW50LmNhbmRpZGF0ZSA9IHtzZHBNaWQ6IG1pZCwgc2RwTUxpbmVJbmRleDogc2RwTUxpbmVJbmRleH07XG5cbiAgICAgIHZhciBjYW5kID0gZXZ0LmNhbmRpZGF0ZTtcbiAgICAgIC8vIEVkZ2UgZW1pdHMgYW4gZW1wdHkgb2JqZWN0IGZvciBSVENJY2VDYW5kaWRhdGVDb21wbGV0ZeKApVxuICAgICAgdmFyIGVuZCA9ICFjYW5kIHx8IE9iamVjdC5rZXlzKGNhbmQpLmxlbmd0aCA9PT0gMDtcbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgLy8gcG9seWZpbGwgc2luY2UgUlRDSWNlR2F0aGVyZXIuc3RhdGUgaXMgbm90IGltcGxlbWVudGVkIGluXG4gICAgICAgIC8vIEVkZ2UgMTA1NDcgeWV0LlxuICAgICAgICBpZiAoaWNlR2F0aGVyZXIuc3RhdGUgPT09ICduZXcnIHx8IGljZUdhdGhlcmVyLnN0YXRlID09PSAnZ2F0aGVyaW5nJykge1xuICAgICAgICAgIGljZUdhdGhlcmVyLnN0YXRlID0gJ2NvbXBsZXRlZCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICBpY2VHYXRoZXJlci5zdGF0ZSA9ICdnYXRoZXJpbmcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJUQ0ljZUNhbmRpZGF0ZSBkb2Vzbid0IGhhdmUgYSBjb21wb25lbnQsIG5lZWRzIHRvIGJlIGFkZGVkXG4gICAgICAgIGNhbmQuY29tcG9uZW50ID0gMTtcbiAgICAgICAgLy8gYWxzbyB0aGUgdXNlcm5hbWVGcmFnbWVudC4gVE9ETzogdXBkYXRlIFNEUCB0byB0YWtlIGJvdGggdmFyaWFudHMuXG4gICAgICAgIGNhbmQudWZyYWcgPSBpY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKS51c2VybmFtZUZyYWdtZW50O1xuXG4gICAgICAgIHZhciBzZXJpYWxpemVkQ2FuZGlkYXRlID0gU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUoY2FuZCk7XG4gICAgICAgIGV2ZW50LmNhbmRpZGF0ZSA9IE9iamVjdC5hc3NpZ24oZXZlbnQuY2FuZGlkYXRlLFxuICAgICAgICAgICAgU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoc2VyaWFsaXplZENhbmRpZGF0ZSkpO1xuXG4gICAgICAgIGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUgPSBzZXJpYWxpemVkQ2FuZGlkYXRlO1xuICAgICAgICBldmVudC5jYW5kaWRhdGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZTogZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSxcbiAgICAgICAgICAgIHNkcE1pZDogZXZlbnQuY2FuZGlkYXRlLnNkcE1pZCxcbiAgICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGV2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4LFxuICAgICAgICAgICAgdXNlcm5hbWVGcmFnbWVudDogZXZlbnQuY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnRcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyB1cGRhdGUgbG9jYWwgZGVzY3JpcHRpb24uXG4gICAgICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zKHBjLl9sb2NhbERlc2NyaXB0aW9uLnNkcCk7XG4gICAgICBpZiAoIWVuZCkge1xuICAgICAgICBzZWN0aW9uc1tldmVudC5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleF0gKz1cbiAgICAgICAgICAgICdhPScgKyBldmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlICsgJ1xcclxcbic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWN0aW9uc1tldmVudC5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleF0gKz1cbiAgICAgICAgICAgICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgIH1cbiAgICAgIHBjLl9sb2NhbERlc2NyaXB0aW9uLnNkcCA9XG4gICAgICAgICAgU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24ocGMuX2xvY2FsRGVzY3JpcHRpb24uc2RwKSArXG4gICAgICAgICAgc2VjdGlvbnMuam9pbignJyk7XG4gICAgICB2YXIgY29tcGxldGUgPSBwYy50cmFuc2NlaXZlcnMuZXZlcnkoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHBjLmljZUdhdGhlcmluZ1N0YXRlICE9PSAnZ2F0aGVyaW5nJykge1xuICAgICAgICBwYy5pY2VHYXRoZXJpbmdTdGF0ZSA9ICdnYXRoZXJpbmcnO1xuICAgICAgICBwYy5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEVtaXQgY2FuZGlkYXRlLiBBbHNvIGVtaXQgbnVsbCBjYW5kaWRhdGUgd2hlbiBhbGwgZ2F0aGVyZXJzIGFyZVxuICAgICAgLy8gY29tcGxldGUuXG4gICAgICBpZiAoIWVuZCkge1xuICAgICAgICBwYy5fZGlzcGF0Y2hFdmVudCgnaWNlY2FuZGlkYXRlJywgZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCdpY2VjYW5kaWRhdGUnLCBuZXcgRXZlbnQoJ2ljZWNhbmRpZGF0ZScpKTtcbiAgICAgICAgcGMuaWNlR2F0aGVyaW5nU3RhdGUgPSAnY29tcGxldGUnO1xuICAgICAgICBwYy5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGVtaXQgYWxyZWFkeSBnYXRoZXJlZCBjYW5kaWRhdGVzLlxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMuZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgIGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUoZSk7XG4gICAgICB9KTtcbiAgICB9LCAwKTtcbiAgfTtcblxuICAvLyBDcmVhdGUgSUNFIHRyYW5zcG9ydCBhbmQgRFRMUyB0cmFuc3BvcnQuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIHZhciBpY2VUcmFuc3BvcnQgPSBuZXcgd2luZG93LlJUQ0ljZVRyYW5zcG9ydChudWxsKTtcbiAgICBpY2VUcmFuc3BvcnQub25pY2VzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcGMuX3VwZGF0ZUljZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgICAgcGMuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IG5ldyB3aW5kb3cuUlRDRHRsc1RyYW5zcG9ydChpY2VUcmFuc3BvcnQpO1xuICAgIGR0bHNUcmFuc3BvcnQub25kdGxzc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHBjLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTtcbiAgICB9O1xuICAgIGR0bHNUcmFuc3BvcnQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gb25lcnJvciBkb2VzIG5vdCBzZXQgc3RhdGUgdG8gZmFpbGVkIGJ5IGl0c2VsZi5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkdGxzVHJhbnNwb3J0LCAnc3RhdGUnLFxuICAgICAgICAgIHt2YWx1ZTogJ2ZhaWxlZCcsIHdyaXRhYmxlOiB0cnVlfSk7XG4gICAgICBwYy5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBpY2VUcmFuc3BvcnQ6IGljZVRyYW5zcG9ydCxcbiAgICAgIGR0bHNUcmFuc3BvcnQ6IGR0bHNUcmFuc3BvcnRcbiAgICB9O1xuICB9O1xuXG4gIC8vIERlc3Ryb3kgSUNFIGdhdGhlcmVyLCBJQ0UgdHJhbnNwb3J0IGFuZCBEVExTIHRyYW5zcG9ydC5cbiAgLy8gV2l0aG91dCB0cmlnZ2VyaW5nIHRoZSBjYWxsYmFja3MuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fZGlzcG9zZUljZUFuZER0bHNUcmFuc3BvcnRzID0gZnVuY3Rpb24oXG4gICAgICBzZHBNTGluZUluZGV4KSB7XG4gICAgdmFyIGljZUdhdGhlcmVyID0gdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlR2F0aGVyZXI7XG4gICAgaWYgKGljZUdhdGhlcmVyKSB7XG4gICAgICBkZWxldGUgaWNlR2F0aGVyZXIub25sb2NhbGNhbmRpZGF0ZTtcbiAgICAgIGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VHYXRoZXJlcjtcbiAgICB9XG4gICAgdmFyIGljZVRyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZVRyYW5zcG9ydDtcbiAgICBpZiAoaWNlVHJhbnNwb3J0KSB7XG4gICAgICBkZWxldGUgaWNlVHJhbnNwb3J0Lm9uaWNlc3RhdGVjaGFuZ2U7XG4gICAgICBkZWxldGUgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlVHJhbnNwb3J0O1xuICAgIH1cbiAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmR0bHNUcmFuc3BvcnQ7XG4gICAgaWYgKGR0bHNUcmFuc3BvcnQpIHtcbiAgICAgIGRlbGV0ZSBkdGxzVHJhbnNwb3J0Lm9uZHRsc3N0YXRlY2hhbmdlO1xuICAgICAgZGVsZXRlIGR0bHNUcmFuc3BvcnQub25lcnJvcjtcbiAgICAgIGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5kdGxzVHJhbnNwb3J0O1xuICAgIH1cbiAgfTtcblxuICAvLyBTdGFydCB0aGUgUlRQIFNlbmRlciBhbmQgUmVjZWl2ZXIgZm9yIGEgdHJhbnNjZWl2ZXIuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdHJhbnNjZWl2ZSA9IGZ1bmN0aW9uKHRyYW5zY2VpdmVyLFxuICAgICAgc2VuZCwgcmVjdikge1xuICAgIHZhciBwYXJhbXMgPSBnZXRDb21tb25DYXBhYmlsaXRpZXModHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyk7XG4gICAgaWYgKHNlbmQgJiYgdHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgICBwYXJhbXMuZW5jb2RpbmdzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgIHBhcmFtcy5ydGNwID0ge1xuICAgICAgICBjbmFtZTogU0RQVXRpbHMubG9jYWxDTmFtZSxcbiAgICAgICAgY29tcG91bmQ6IHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzLmNvbXBvdW5kXG4gICAgICB9O1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBhcmFtcy5ydGNwLnNzcmMgPSB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmM7XG4gICAgICB9XG4gICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc2VuZChwYXJhbXMpO1xuICAgIH1cbiAgICBpZiAocmVjdiAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciAmJiBwYXJhbXMuY29kZWNzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHJlbW92ZSBSVFggZmllbGQgaW4gRWRnZSAxNDk0MlxuICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICd2aWRlbydcbiAgICAgICAgICAmJiB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzXG4gICAgICAgICAgJiYgZWRnZVZlcnNpb24gPCAxNTAxOSkge1xuICAgICAgICB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgICAgIGRlbGV0ZSBwLnJ0eDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gW3t9XTtcbiAgICAgIH1cbiAgICAgIHBhcmFtcy5ydGNwID0ge1xuICAgICAgICBjb21wb3VuZDogdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMuY29tcG91bmRcbiAgICAgIH07XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMuY25hbWUpIHtcbiAgICAgICAgcGFyYW1zLnJ0Y3AuY25hbWUgPSB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycy5jbmFtZTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCkge1xuICAgICAgICBwYXJhbXMucnRjcC5zc3JjID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjO1xuICAgICAgfVxuICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIucmVjZWl2ZShwYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIC8vIE5vdGU6IHByYW5zd2VyIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKFsnb2ZmZXInLCAnYW5zd2VyJ10uaW5kZXhPZihkZXNjcmlwdGlvbi50eXBlKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ1R5cGVFcnJvcicsXG4gICAgICAgICAgJ1Vuc3VwcG9ydGVkIHR5cGUgXCInICsgZGVzY3JpcHRpb24udHlwZSArICdcIicpKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aW9uQWxsb3dlZEluU2lnbmFsaW5nU3RhdGUoJ3NldExvY2FsRGVzY3JpcHRpb24nLFxuICAgICAgICBkZXNjcmlwdGlvbi50eXBlLCBwYy5zaWduYWxpbmdTdGF0ZSkgfHwgcGMuX2lzQ2xvc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3Qgc2V0IGxvY2FsICcgKyBkZXNjcmlwdGlvbi50eXBlICtcbiAgICAgICAgICAnIGluIHN0YXRlICcgKyBwYy5zaWduYWxpbmdTdGF0ZSkpO1xuICAgIH1cblxuICAgIHZhciBzZWN0aW9ucztcbiAgICB2YXIgc2Vzc2lvbnBhcnQ7XG4gICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicpIHtcbiAgICAgIC8vIFZFUlkgbGltaXRlZCBzdXBwb3J0IGZvciBTRFAgbXVuZ2luZy4gTGltaXRlZCB0bzpcbiAgICAgIC8vICogY2hhbmdpbmcgdGhlIG9yZGVyIG9mIGNvZGVjc1xuICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGRlc2NyaXB0aW9uLnNkcCk7XG4gICAgICBzZXNzaW9ucGFydCA9IHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgICB2YXIgY2FwcyA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ubG9jYWxDYXBhYmlsaXRpZXMgPSBjYXBzO1xuICAgICAgfSk7XG5cbiAgICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAgIHBjLl9nYXRoZXIodHJhbnNjZWl2ZXIubWlkLCBzZHBNTGluZUluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ2Fuc3dlcicpIHtcbiAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgIHZhciBpc0ljZUxpdGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChzZXNzaW9ucGFydCxcbiAgICAgICAgICAnYT1pY2UtbGl0ZScpLmxlbmd0aCA+IDA7XG4gICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgICB2YXIgdHJhbnNjZWl2ZXIgPSBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07XG4gICAgICAgIHZhciBpY2VHYXRoZXJlciA9IHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyO1xuICAgICAgICB2YXIgaWNlVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0O1xuICAgICAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQ7XG4gICAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzO1xuICAgICAgICB2YXIgcmVtb3RlQ2FwYWJpbGl0aWVzID0gdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzO1xuXG4gICAgICAgIC8vIHRyZWF0IGJ1bmRsZS1vbmx5IGFzIG5vdC1yZWplY3RlZC5cbiAgICAgICAgdmFyIHJlamVjdGVkID0gU0RQVXRpbHMuaXNSZWplY3RlZChtZWRpYVNlY3Rpb24pICYmXG4gICAgICAgICAgICBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWJ1bmRsZS1vbmx5JykubGVuZ3RoID09PSAwO1xuXG4gICAgICAgIGlmICghcmVqZWN0ZWQgJiYgIXRyYW5zY2VpdmVyLnJlamVjdGVkKSB7XG4gICAgICAgICAgdmFyIHJlbW90ZUljZVBhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzKFxuICAgICAgICAgICAgICBtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyhcbiAgICAgICAgICAgICAgbWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7XG4gICAgICAgICAgaWYgKGlzSWNlTGl0ZSkge1xuICAgICAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMucm9sZSA9ICdzZXJ2ZXInO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghcGMudXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcGMuX2dhdGhlcih0cmFuc2NlaXZlci5taWQsIHNkcE1MaW5lSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgICAgaWNlVHJhbnNwb3J0LnN0YXJ0KGljZUdhdGhlcmVyLCByZW1vdGVJY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgaXNJY2VMaXRlID8gJ2NvbnRyb2xsaW5nJyA6ICdjb250cm9sbGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHRsc1RyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGFydChyZW1vdGVEdGxzUGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIGludGVyc2VjdGlvbiBvZiBjYXBhYmlsaXRpZXMuXG4gICAgICAgICAgdmFyIHBhcmFtcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyhsb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzKTtcblxuICAgICAgICAgIC8vIFN0YXJ0IHRoZSBSVENSdHBTZW5kZXIuIFRoZSBSVENSdHBSZWNlaXZlciBmb3IgdGhpc1xuICAgICAgICAgIC8vIHRyYW5zY2VpdmVyIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBpbiBzZXRSZW1vdGVEZXNjcmlwdGlvbi5cbiAgICAgICAgICBwYy5fdHJhbnNjZWl2ZSh0cmFuc2NlaXZlcixcbiAgICAgICAgICAgICAgcGFyYW1zLmNvZGVjcy5sZW5ndGggPiAwLFxuICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHBjLl9sb2NhbERlc2NyaXB0aW9uID0ge1xuICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgIHNkcDogZGVzY3JpcHRpb24uc2RwXG4gICAgfTtcbiAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykge1xuICAgICAgcGMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdoYXZlLWxvY2FsLW9mZmVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBjLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnc3RhYmxlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIC8vIE5vdGU6IHByYW5zd2VyIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKFsnb2ZmZXInLCAnYW5zd2VyJ10uaW5kZXhPZihkZXNjcmlwdGlvbi50eXBlKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ1R5cGVFcnJvcicsXG4gICAgICAgICAgJ1Vuc3VwcG9ydGVkIHR5cGUgXCInICsgZGVzY3JpcHRpb24udHlwZSArICdcIicpKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aW9uQWxsb3dlZEluU2lnbmFsaW5nU3RhdGUoJ3NldFJlbW90ZURlc2NyaXB0aW9uJyxcbiAgICAgICAgZGVzY3JpcHRpb24udHlwZSwgcGMuc2lnbmFsaW5nU3RhdGUpIHx8IHBjLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IHNldCByZW1vdGUgJyArIGRlc2NyaXB0aW9uLnR5cGUgK1xuICAgICAgICAgICcgaW4gc3RhdGUgJyArIHBjLnNpZ25hbGluZ1N0YXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIHN0cmVhbXMgPSB7fTtcbiAgICBwYy5yZW1vdGVTdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICBzdHJlYW1zW3N0cmVhbS5pZF0gPSBzdHJlYW07XG4gICAgfSk7XG4gICAgdmFyIHJlY2VpdmVyTGlzdCA9IFtdO1xuICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoZGVzY3JpcHRpb24uc2RwKTtcbiAgICB2YXIgc2Vzc2lvbnBhcnQgPSBzZWN0aW9ucy5zaGlmdCgpO1xuICAgIHZhciBpc0ljZUxpdGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChzZXNzaW9ucGFydCxcbiAgICAgICAgJ2E9aWNlLWxpdGUnKS5sZW5ndGggPiAwO1xuICAgIHZhciB1c2luZ0J1bmRsZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LFxuICAgICAgICAnYT1ncm91cDpCVU5ETEUgJykubGVuZ3RoID4gMDtcbiAgICBwYy51c2luZ0J1bmRsZSA9IHVzaW5nQnVuZGxlO1xuICAgIHZhciBpY2VPcHRpb25zID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoc2Vzc2lvbnBhcnQsXG4gICAgICAgICdhPWljZS1vcHRpb25zOicpWzBdO1xuICAgIGlmIChpY2VPcHRpb25zKSB7XG4gICAgICBwYy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcyA9IGljZU9wdGlvbnMuc3Vic3RyKDE0KS5zcGxpdCgnICcpXG4gICAgICAgICAgLmluZGV4T2YoJ3RyaWNrbGUnKSA+PSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gICAgICB2YXIga2luZCA9IFNEUFV0aWxzLmdldEtpbmQobWVkaWFTZWN0aW9uKTtcbiAgICAgIC8vIHRyZWF0IGJ1bmRsZS1vbmx5IGFzIG5vdC1yZWplY3RlZC5cbiAgICAgIHZhciByZWplY3RlZCA9IFNEUFV0aWxzLmlzUmVqZWN0ZWQobWVkaWFTZWN0aW9uKSAmJlxuICAgICAgICAgIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9YnVuZGxlLW9ubHknKS5sZW5ndGggPT09IDA7XG4gICAgICB2YXIgcHJvdG9jb2wgPSBsaW5lc1swXS5zdWJzdHIoMikuc3BsaXQoJyAnKVsyXTtcblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IFNEUFV0aWxzLmdldERpcmVjdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTtcbiAgICAgIHZhciByZW1vdGVNc2lkID0gU0RQVXRpbHMucGFyc2VNc2lkKG1lZGlhU2VjdGlvbik7XG5cbiAgICAgIHZhciBtaWQgPSBTRFBVdGlscy5nZXRNaWQobWVkaWFTZWN0aW9uKSB8fCBTRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIoKTtcblxuICAgICAgLy8gUmVqZWN0IGRhdGFjaGFubmVscyB3aGljaCBhcmUgbm90IGltcGxlbWVudGVkIHlldC5cbiAgICAgIGlmIChyZWplY3RlZCB8fCAoa2luZCA9PT0gJ2FwcGxpY2F0aW9uJyAmJiAocHJvdG9jb2wgPT09ICdEVExTL1NDVFAnIHx8XG4gICAgICAgICAgcHJvdG9jb2wgPT09ICdVRFAvRFRMUy9TQ1RQJykpKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgZGFuZ2Vyb3VzIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLXJlamVjdGVkIG0tbGluZVxuICAgICAgICAvLyAgICAgYmVjb21lcyByZWplY3RlZC5cbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdID0ge1xuICAgICAgICAgIG1pZDogbWlkLFxuICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgcHJvdG9jb2w6IHByb3RvY29sLFxuICAgICAgICAgIHJlamVjdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZWplY3RlZCAmJiBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gJiZcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucmVqZWN0ZWQpIHtcbiAgICAgICAgLy8gcmVjeWNsZSBhIHJlamVjdGVkIHRyYW5zY2VpdmVyLlxuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gPSBwYy5fY3JlYXRlVHJhbnNjZWl2ZXIoa2luZCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2NlaXZlcjtcbiAgICAgIHZhciBpY2VHYXRoZXJlcjtcbiAgICAgIHZhciBpY2VUcmFuc3BvcnQ7XG4gICAgICB2YXIgZHRsc1RyYW5zcG9ydDtcbiAgICAgIHZhciBydHBSZWNlaXZlcjtcbiAgICAgIHZhciBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgdmFyIHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXM7XG5cbiAgICAgIHZhciB0cmFjaztcbiAgICAgIC8vIEZJWE1FOiBlbnN1cmUgdGhlIG1lZGlhU2VjdGlvbiBoYXMgcnRjcC1tdXggc2V0LlxuICAgICAgdmFyIHJlbW90ZUNhcGFiaWxpdGllcyA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuICAgICAgdmFyIHJlbW90ZUljZVBhcmFtZXRlcnM7XG4gICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnM7XG4gICAgICBpZiAoIXJlamVjdGVkKSB7XG4gICAgICAgIHJlbW90ZUljZVBhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbixcbiAgICAgICAgICAgIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgICBzZXNzaW9ucGFydCk7XG4gICAgICAgIHJlbW90ZUR0bHNQYXJhbWV0ZXJzLnJvbGUgPSAnY2xpZW50JztcbiAgICAgIH1cbiAgICAgIHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMgPVxuICAgICAgICAgIFNEUFV0aWxzLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG5cbiAgICAgIHZhciBydGNwUGFyYW1ldGVycyA9IFNEUFV0aWxzLnBhcnNlUnRjcFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcblxuICAgICAgdmFyIGlzQ29tcGxldGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgJ2E9ZW5kLW9mLWNhbmRpZGF0ZXMnLCBzZXNzaW9ucGFydCkubGVuZ3RoID4gMDtcbiAgICAgIHZhciBjYW5kcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9Y2FuZGlkYXRlOicpXG4gICAgICAgICAgLm1hcChmdW5jdGlvbihjYW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoY2FuZCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGNhbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYW5kLmNvbXBvbmVudCA9PT0gMTtcbiAgICAgICAgICB9KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgd2UgY2FuIHVzZSBCVU5ETEUgYW5kIGRpc3Bvc2UgdHJhbnNwb3J0cy5cbiAgICAgIGlmICgoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJyB8fCBkZXNjcmlwdGlvbi50eXBlID09PSAnYW5zd2VyJykgJiZcbiAgICAgICAgICAhcmVqZWN0ZWQgJiYgdXNpbmdCdW5kbGUgJiYgc2RwTUxpbmVJbmRleCA+IDAgJiZcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0pIHtcbiAgICAgICAgcGMuX2Rpc3Bvc2VJY2VBbmREdGxzVHJhbnNwb3J0cyhzZHBNTGluZUluZGV4KTtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZUdhdGhlcmVyID1cbiAgICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1swXS5pY2VHYXRoZXJlcjtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZVRyYW5zcG9ydCA9XG4gICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0O1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uZHRsc1RyYW5zcG9ydCA9XG4gICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydDtcbiAgICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydHBTZW5kZXIpIHtcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwU2VuZGVyLnNldFRyYW5zcG9ydChcbiAgICAgICAgICAgICAgcGMudHJhbnNjZWl2ZXJzWzBdLmR0bHNUcmFuc3BvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwUmVjZWl2ZXIpIHtcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwUmVjZWl2ZXIuc2V0VHJhbnNwb3J0KFxuICAgICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInICYmICFyZWplY3RlZCkge1xuICAgICAgICB0cmFuc2NlaXZlciA9IHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSB8fFxuICAgICAgICAgICAgcGMuX2NyZWF0ZVRyYW5zY2VpdmVyKGtpbmQpO1xuICAgICAgICB0cmFuc2NlaXZlci5taWQgPSBtaWQ7XG5cbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlci5pY2VHYXRoZXJlcikge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyID0gcGMuX2NyZWF0ZUljZUdhdGhlcmVyKHNkcE1MaW5lSW5kZXgsXG4gICAgICAgICAgICAgIHVzaW5nQnVuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYW5kcy5sZW5ndGggJiYgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgIGlmIChpc0NvbXBsZXRlICYmICghdXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKGNhbmRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FuZHMuZm9yRWFjaChmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgbWF5YmVBZGRDYW5kaWRhdGUodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LCBjYW5kaWRhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMgPSB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpO1xuXG4gICAgICAgIC8vIGZpbHRlciBSVFggdW50aWwgYWRkaXRpb25hbCBzdHVmZiBuZWVkZWQgZm9yIFJUWCBpcyBpbXBsZW1lbnRlZFxuICAgICAgICAvLyBpbiBhZGFwdGVyLmpzXG4gICAgICAgIGlmIChlZGdlVmVyc2lvbiA8IDE1MDE5KSB7XG4gICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzID0gbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihcbiAgICAgICAgICAgICAgZnVuY3Rpb24oY29kZWMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZWMubmFtZSAhPT0gJ3J0eCc7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgfHwgW3tcbiAgICAgICAgICBzc3JjOiAoMiAqIHNkcE1MaW5lSW5kZXggKyAyKSAqIDEwMDFcbiAgICAgICAgfV07XG5cbiAgICAgICAgLy8gVE9ETzogcmV3cml0ZSB0byB1c2UgaHR0cDovL3czYy5naXRodWIuaW8vd2VicnRjLXBjLyNzZXQtYXNzb2NpYXRlZC1yZW1vdGUtc3RyZWFtc1xuICAgICAgICB2YXIgaXNOZXdUcmFjayA9IGZhbHNlO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5Jykge1xuICAgICAgICAgIGlzTmV3VHJhY2sgPSAhdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgICAgcnRwUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciB8fFxuICAgICAgICAgICAgICBuZXcgd2luZG93LlJUQ1J0cFJlY2VpdmVyKHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQsIGtpbmQpO1xuXG4gICAgICAgICAgaWYgKGlzTmV3VHJhY2spIHtcbiAgICAgICAgICAgIHZhciBzdHJlYW07XG4gICAgICAgICAgICB0cmFjayA9IHJ0cFJlY2VpdmVyLnRyYWNrO1xuICAgICAgICAgICAgLy8gRklYTUU6IGRvZXMgbm90IHdvcmsgd2l0aCBQbGFuIEIuXG4gICAgICAgICAgICBpZiAocmVtb3RlTXNpZCAmJiByZW1vdGVNc2lkLnN0cmVhbSA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgIC8vIG5vLW9wLiBhIHN0cmVhbSBpZCBvZiAnLScgbWVhbnM6IG5vIGFzc29jaWF0ZWQgc3RyZWFtLlxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZW1vdGVNc2lkKSB7XG4gICAgICAgICAgICAgIGlmICghc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0pIHtcbiAgICAgICAgICAgICAgICBzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0sICdpZCcsIHtcbiAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZW1vdGVNc2lkLnN0cmVhbTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHJhY2ssICdpZCcsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbW90ZU1zaWQudHJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgc3RyZWFtID0gc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXN0cmVhbXMuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIHN0cmVhbXMuZGVmYXVsdCA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdHJlYW0gPSBzdHJlYW1zLmRlZmF1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgIGFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbSk7XG4gICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmFzc29jaWF0ZWRSZW1vdGVNZWRpYVN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlciwgc3RyZWFtXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnRyYWNrKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVUcmFjayA9IHMuZ2V0VHJhY2tzKCkuZmluZChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0LmlkID09PSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci50cmFjay5pZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5hdGl2ZVRyYWNrKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVRyYWNrRnJvbVN0cmVhbUFuZEZpcmVFdmVudChuYXRpdmVUcmFjaywgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMgPSBsb2NhbENhcGFiaWxpdGllcztcbiAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzID0gcmVtb3RlQ2FwYWJpbGl0aWVzO1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciA9IHJ0cFJlY2VpdmVyO1xuICAgICAgICB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycyA9IHJ0Y3BQYXJhbWV0ZXJzO1xuICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycyA9IHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG5cbiAgICAgICAgLy8gU3RhcnQgdGhlIFJUQ1J0cFJlY2VpdmVyIG5vdy4gVGhlIFJUUFNlbmRlciBpcyBzdGFydGVkIGluXG4gICAgICAgIC8vIHNldExvY2FsRGVzY3JpcHRpb24uXG4gICAgICAgIHBjLl90cmFuc2NlaXZlKHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgaXNOZXdUcmFjayk7XG4gICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInICYmICFyZWplY3RlZCkge1xuICAgICAgICB0cmFuc2NlaXZlciA9IHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XTtcbiAgICAgICAgaWNlR2F0aGVyZXIgPSB0cmFuc2NlaXZlci5pY2VHYXRoZXJlcjtcbiAgICAgICAgaWNlVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0O1xuICAgICAgICBkdGxzVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydDtcbiAgICAgICAgcnRwUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzID0gdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXM7XG5cbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMgPVxuICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJlbW90ZUNhcGFiaWxpdGllcyA9XG4gICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXM7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydGNwUGFyYW1ldGVycyA9IHJ0Y3BQYXJhbWV0ZXJzO1xuXG4gICAgICAgIGlmIChjYW5kcy5sZW5ndGggJiYgaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgIGlmICgoaXNJY2VMaXRlIHx8IGlzQ29tcGxldGUpICYmXG4gICAgICAgICAgICAgICghdXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKGNhbmRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FuZHMuZm9yRWFjaChmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgbWF5YmVBZGRDYW5kaWRhdGUodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LCBjYW5kaWRhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgaWYgKGljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zdGFydChpY2VHYXRoZXJlciwgcmVtb3RlSWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAnY29udHJvbGxpbmcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGR0bHNUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXJ0KHJlbW90ZUR0bHNQYXJhbWV0ZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgb2ZmZXIgY29udGFpbmVkIFJUWCBidXQgdGhlIGFuc3dlciBkaWQgbm90LFxuICAgICAgICAvLyByZW1vdmUgUlRYIGZyb20gc2VuZEVuY29kaW5nUGFyYW1ldGVycy5cbiAgICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyhcbiAgICAgICAgICB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHZhciBoYXNSdHggPSBjb21tb25DYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihmdW5jdGlvbihjKSB7XG4gICAgICAgICAgcmV0dXJuIGMubmFtZS50b0xvd2VyQ2FzZSgpID09PSAncnR4JztcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICBpZiAoIWhhc1J0eCAmJiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgICAgIGRlbGV0ZSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBjLl90cmFuc2NlaXZlKHRyYW5zY2VpdmVyLFxuICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3JlY3Zvbmx5JyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpO1xuXG4gICAgICAgIC8vIFRPRE86IHJld3JpdGUgdG8gdXNlIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1wYy8jc2V0LWFzc29jaWF0ZWQtcmVtb3RlLXN0cmVhbXNcbiAgICAgICAgaWYgKHJ0cFJlY2VpdmVyICYmXG4gICAgICAgICAgICAoZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5JykpIHtcbiAgICAgICAgICB0cmFjayA9IHJ0cFJlY2VpdmVyLnRyYWNrO1xuICAgICAgICAgIGlmIChyZW1vdGVNc2lkKSB7XG4gICAgICAgICAgICBpZiAoIXN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dKSB7XG4gICAgICAgICAgICAgIHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVHJhY2tUb1N0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0pO1xuICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlciwgc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV1dKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdHJlYW1zLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgc3RyZWFtcy5kZWZhdWx0ID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVHJhY2tUb1N0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtcy5kZWZhdWx0KTtcbiAgICAgICAgICAgIHJlY2VpdmVyTGlzdC5wdXNoKFt0cmFjaywgcnRwUmVjZWl2ZXIsIHN0cmVhbXMuZGVmYXVsdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGSVhNRTogYWN0dWFsbHkgdGhlIHJlY2VpdmVyIHNob3VsZCBiZSBjcmVhdGVkIGxhdGVyLlxuICAgICAgICAgIGRlbGV0ZSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHBjLl9kdGxzUm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYy5fZHRsc1JvbGUgPSBkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInID8gJ2FjdGl2ZScgOiAncGFzc2l2ZSc7XG4gICAgfVxuXG4gICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uID0ge1xuICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgIHNkcDogZGVzY3JpcHRpb24uc2RwXG4gICAgfTtcbiAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykge1xuICAgICAgcGMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdoYXZlLXJlbW90ZS1vZmZlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ3N0YWJsZScpO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzdHJlYW1zKS5mb3JFYWNoKGZ1bmN0aW9uKHNpZCkge1xuICAgICAgdmFyIHN0cmVhbSA9IHN0cmVhbXNbc2lkXTtcbiAgICAgIGlmIChzdHJlYW0uZ2V0VHJhY2tzKCkubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYy5yZW1vdGVTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA9PT0gLTEpIHtcbiAgICAgICAgICBwYy5yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2FkZHN0cmVhbScpO1xuICAgICAgICAgIGV2ZW50LnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCdhZGRzdHJlYW0nLCBldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWNlaXZlckxpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gaXRlbVswXTtcbiAgICAgICAgICB2YXIgcmVjZWl2ZXIgPSBpdGVtWzFdO1xuICAgICAgICAgIGlmIChzdHJlYW0uaWQgIT09IGl0ZW1bMl0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlyZUFkZFRyYWNrKHBjLCB0cmFjaywgcmVjZWl2ZXIsIFtzdHJlYW1dKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVjZWl2ZXJMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZmlyZUFkZFRyYWNrKHBjLCBpdGVtWzBdLCBpdGVtWzFdLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvLyBjaGVjayB3aGV0aGVyIGFkZEljZUNhbmRpZGF0ZSh7fSkgd2FzIGNhbGxlZCB3aXRoaW4gZm91ciBzZWNvbmRzIGFmdGVyXG4gICAgLy8gc2V0UmVtb3RlRGVzY3JpcHRpb24uXG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIShwYyAmJiBwYy50cmFuc2NlaXZlcnMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5nZXRSZW1vdGVDYW5kaWRhdGVzKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignVGltZW91dCBmb3IgYWRkUmVtb3RlQ2FuZGlkYXRlLiBDb25zaWRlciBzZW5kaW5nICcgK1xuICAgICAgICAgICAgICAnYW4gZW5kLW9mLWNhbmRpZGF0ZXMgbm90aWZpY2F0aW9uJyk7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIDQwMDApO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIC8qIG5vdCB5ZXRcbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VHYXRoZXJlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5jbG9zZSgpO1xuICAgICAgfVxuICAgICAgKi9cbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0KSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RvcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc3RvcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBGSVhNRTogY2xlYW4gdXAgdHJhY2tzLCBsb2NhbCBzdHJlYW1zLCByZW1vdGUgc3RyZWFtcywgZXRjXG4gICAgdGhpcy5faXNDbG9zZWQgPSB0cnVlO1xuICAgIHRoaXMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdjbG9zZWQnKTtcbiAgfTtcblxuICAvLyBVcGRhdGUgdGhlIHNpZ25hbGluZyBzdGF0ZS5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl91cGRhdGVTaWduYWxpbmdTdGF0ZSA9IGZ1bmN0aW9uKG5ld1N0YXRlKSB7XG4gICAgdGhpcy5zaWduYWxpbmdTdGF0ZSA9IG5ld1N0YXRlO1xuICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnc2lnbmFsaW5nc3RhdGVjaGFuZ2UnKTtcbiAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KCdzaWduYWxpbmdzdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBmaXJlIHRoZSBuZWdvdGlhdGlvbm5lZWRlZCBldmVudC5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgaWYgKHRoaXMuc2lnbmFsaW5nU3RhdGUgIT09ICdzdGFibGUnIHx8IHRoaXMubmVlZE5lZ290aWF0aW9uID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubmVlZE5lZ290aWF0aW9uID0gdHJ1ZTtcbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChwYy5uZWVkTmVnb3RpYXRpb24pIHtcbiAgICAgICAgcGMubmVlZE5lZ290aWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnKTtcbiAgICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ25lZ290aWF0aW9ubmVlZGVkJywgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIDApO1xuICB9O1xuXG4gIC8vIFVwZGF0ZSB0aGUgaWNlIGNvbm5lY3Rpb24gc3RhdGUuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlSWNlQ29ubmVjdGlvblN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld1N0YXRlO1xuICAgIHZhciBzdGF0ZXMgPSB7XG4gICAgICAnbmV3JzogMCxcbiAgICAgIGNsb3NlZDogMCxcbiAgICAgIGNoZWNraW5nOiAwLFxuICAgICAgY29ubmVjdGVkOiAwLFxuICAgICAgY29tcGxldGVkOiAwLFxuICAgICAgZGlzY29ubmVjdGVkOiAwLFxuICAgICAgZmFpbGVkOiAwXG4gICAgfTtcbiAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICYmICF0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICBzdGF0ZXNbdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlXSsrO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICBpZiAoc3RhdGVzLmZhaWxlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2ZhaWxlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY2hlY2tpbmcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjaGVja2luZyc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuZGlzY29ubmVjdGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnZGlzY29ubmVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5uZXcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICduZXcnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2Nvbm5lY3RlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY29tcGxldGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY29tcGxldGVkJztcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUgIT09IHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICB0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVXBkYXRlIHRoZSBjb25uZWN0aW9uIHN0YXRlLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdTdGF0ZTtcbiAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgJ25ldyc6IDAsXG4gICAgICBjbG9zZWQ6IDAsXG4gICAgICBjb25uZWN0aW5nOiAwLFxuICAgICAgY29ubmVjdGVkOiAwLFxuICAgICAgY29tcGxldGVkOiAwLFxuICAgICAgZGlzY29ubmVjdGVkOiAwLFxuICAgICAgZmFpbGVkOiAwXG4gICAgfTtcbiAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICYmIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQgJiZcbiAgICAgICAgICAhdHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZV0rKztcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RhdGVdKys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gSUNFVHJhbnNwb3J0LmNvbXBsZXRlZCBhbmQgY29ubmVjdGVkIGFyZSB0aGUgc2FtZSBmb3IgdGhpcyBwdXJwb3NlLlxuICAgIHN0YXRlcy5jb25uZWN0ZWQgKz0gc3RhdGVzLmNvbXBsZXRlZDtcblxuICAgIG5ld1N0YXRlID0gJ25ldyc7XG4gICAgaWYgKHN0YXRlcy5mYWlsZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdmYWlsZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RpbmcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjb25uZWN0aW5nJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5kaXNjb25uZWN0ZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLm5ldyA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ25ldyc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY29ubmVjdGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY29ubmVjdGVkJztcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUgIT09IHRoaXMuY29ubmVjdGlvblN0YXRlKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIGlmIChwYy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQ2FuIG5vdCBjYWxsIGNyZWF0ZU9mZmVyIGFmdGVyIGNsb3NlJykpO1xuICAgIH1cblxuICAgIHZhciBudW1BdWRpb1RyYWNrcyA9IHBjLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQua2luZCA9PT0gJ2F1ZGlvJztcbiAgICB9KS5sZW5ndGg7XG4gICAgdmFyIG51bVZpZGVvVHJhY2tzID0gcGMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5raW5kID09PSAndmlkZW8nO1xuICAgIH0pLmxlbmd0aDtcblxuICAgIC8vIERldGVybWluZSBudW1iZXIgb2YgYXVkaW8gYW5kIHZpZGVvIHRyYWNrcyB3ZSBuZWVkIHRvIHNlbmQvcmVjdi5cbiAgICB2YXIgb2ZmZXJPcHRpb25zID0gYXJndW1lbnRzWzBdO1xuICAgIGlmIChvZmZlck9wdGlvbnMpIHtcbiAgICAgIC8vIFJlamVjdCBDaHJvbWUgbGVnYWN5IGNvbnN0cmFpbnRzLlxuICAgICAgaWYgKG9mZmVyT3B0aW9ucy5tYW5kYXRvcnkgfHwgb2ZmZXJPcHRpb25zLm9wdGlvbmFsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAnTGVnYWN5IG1hbmRhdG9yeS9vcHRpb25hbCBjb25zdHJhaW50cyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvID09PSB0cnVlKSB7XG4gICAgICAgICAgbnVtQXVkaW9UcmFja3MgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvID09PSBmYWxzZSkge1xuICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBudW1BdWRpb1RyYWNrcyA9IG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPT09IHRydWUpIHtcbiAgICAgICAgICBudW1WaWRlb1RyYWNrcyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgbnVtVmlkZW9UcmFja3MgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG51bVZpZGVvVHJhY2tzID0gb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgbnVtQXVkaW9UcmFja3MtLTtcbiAgICAgICAgaWYgKG51bUF1ZGlvVHJhY2tzIDwgMCkge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLndhbnRSZWNlaXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICBudW1WaWRlb1RyYWNrcy0tO1xuICAgICAgICBpZiAobnVtVmlkZW9UcmFja3MgPCAwKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIud2FudFJlY2VpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIE0tbGluZXMgZm9yIHJlY3Zvbmx5IHN0cmVhbXMuXG4gICAgd2hpbGUgKG51bUF1ZGlvVHJhY2tzID4gMCB8fCBudW1WaWRlb1RyYWNrcyA+IDApIHtcbiAgICAgIGlmIChudW1BdWRpb1RyYWNrcyA+IDApIHtcbiAgICAgICAgcGMuX2NyZWF0ZVRyYW5zY2VpdmVyKCdhdWRpbycpO1xuICAgICAgICBudW1BdWRpb1RyYWNrcy0tO1xuICAgICAgfVxuICAgICAgaWYgKG51bVZpZGVvVHJhY2tzID4gMCkge1xuICAgICAgICBwYy5fY3JlYXRlVHJhbnNjZWl2ZXIoJ3ZpZGVvJyk7XG4gICAgICAgIG51bVZpZGVvVHJhY2tzLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKHBjLl9zZHBTZXNzaW9uSWQsXG4gICAgICAgIHBjLl9zZHBTZXNzaW9uVmVyc2lvbisrKTtcbiAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlciwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgLy8gRm9yIGVhY2ggdHJhY2ssIGNyZWF0ZSBhbiBpY2UgZ2F0aGVyZXIsIGljZSB0cmFuc3BvcnQsXG4gICAgICAvLyBkdGxzIHRyYW5zcG9ydCwgcG90ZW50aWFsbHkgcnRwc2VuZGVyIGFuZCBydHByZWNlaXZlci5cbiAgICAgIHZhciB0cmFjayA9IHRyYW5zY2VpdmVyLnRyYWNrO1xuICAgICAgdmFyIGtpbmQgPSB0cmFuc2NlaXZlci5raW5kO1xuICAgICAgdmFyIG1pZCA9IHRyYW5zY2VpdmVyLm1pZCB8fCBTRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIoKTtcbiAgICAgIHRyYW5zY2VpdmVyLm1pZCA9IG1pZDtcblxuICAgICAgaWYgKCF0cmFuc2NlaXZlci5pY2VHYXRoZXJlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlciA9IHBjLl9jcmVhdGVJY2VHYXRoZXJlcihzZHBNTGluZUluZGV4LFxuICAgICAgICAgICAgcGMudXNpbmdCdW5kbGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXMgPSB3aW5kb3cuUlRDUnRwU2VuZGVyLmdldENhcGFiaWxpdGllcyhraW5kKTtcbiAgICAgIC8vIGZpbHRlciBSVFggdW50aWwgYWRkaXRpb25hbCBzdHVmZiBuZWVkZWQgZm9yIFJUWCBpcyBpbXBsZW1lbnRlZFxuICAgICAgLy8gaW4gYWRhcHRlci5qc1xuICAgICAgaWYgKGVkZ2VWZXJzaW9uIDwgMTUwMTkpIHtcbiAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzID0gbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihcbiAgICAgICAgICAgIGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb2RlYy5uYW1lICE9PSAncnR4JztcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oY29kZWMpIHtcbiAgICAgICAgLy8gd29yayBhcm91bmQgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3dlYnJ0Yy9pc3N1ZXMvZGV0YWlsP2lkPTY1NTJcbiAgICAgICAgLy8gYnkgYWRkaW5nIGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTFcbiAgICAgICAgaWYgKGNvZGVjLm5hbWUgPT09ICdIMjY0JyAmJlxuICAgICAgICAgICAgY29kZWMucGFyYW1ldGVyc1snbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29kZWMucGFyYW1ldGVyc1snbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQnXSA9ICcxJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvciBzdWJzZXF1ZW50IG9mZmVycywgd2UgbWlnaHQgaGF2ZSB0byByZS11c2UgdGhlIHBheWxvYWRcbiAgICAgICAgLy8gdHlwZSBvZiB0aGUgbGFzdCBvZmZlci5cbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjcykge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihyZW1vdGVDb2RlYykge1xuICAgICAgICAgICAgaWYgKGNvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gcmVtb3RlQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgICAgICAgY29kZWMuY2xvY2tSYXRlID09PSByZW1vdGVDb2RlYy5jbG9ja1JhdGUpIHtcbiAgICAgICAgICAgICAgY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgPSByZW1vdGVDb2RlYy5wYXlsb2FkVHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsb2NhbENhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oaGRyRXh0KSB7XG4gICAgICAgIHZhciByZW1vdGVFeHRlbnNpb25zID0gdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucyB8fCBbXTtcbiAgICAgICAgcmVtb3RlRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHJIZHJFeHQpIHtcbiAgICAgICAgICBpZiAoaGRyRXh0LnVyaSA9PT0gckhkckV4dC51cmkpIHtcbiAgICAgICAgICAgIGhkckV4dC5pZCA9IHJIZHJFeHQuaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBnZW5lcmF0ZSBhbiBzc3JjIG5vdywgdG8gYmUgdXNlZCBsYXRlciBpbiBydHBTZW5kZXIuc2VuZFxuICAgICAgdmFyIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzIHx8IFt7XG4gICAgICAgIHNzcmM6ICgyICogc2RwTUxpbmVJbmRleCArIDEpICogMTAwMVxuICAgICAgfV07XG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgLy8gYWRkIFJUWFxuICAgICAgICBpZiAoZWRnZVZlcnNpb24gPj0gMTUwMTkgJiYga2luZCA9PT0gJ3ZpZGVvJyAmJlxuICAgICAgICAgICAgIXNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHggPSB7XG4gICAgICAgICAgICBzc3JjOiBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKyAxXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNjZWl2ZXIud2FudFJlY2VpdmUpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgPSBuZXcgd2luZG93LlJUQ1J0cFJlY2VpdmVyKFxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCwga2luZCk7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzID0gbG9jYWxDYXBhYmlsaXRpZXM7XG4gICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICB9KTtcblxuICAgIC8vIGFsd2F5cyBvZmZlciBCVU5ETEUgYW5kIGRpc3Bvc2Ugb24gcmV0dXJuIGlmIG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKHBjLl9jb25maWcuYnVuZGxlUG9saWN5ICE9PSAnbWF4LWNvbXBhdCcpIHtcbiAgICAgIHNkcCArPSAnYT1ncm91cDpCVU5ETEUgJyArIHBjLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5taWQ7XG4gICAgICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcbiAgICB9XG4gICAgc2RwICs9ICdhPWljZS1vcHRpb25zOnRyaWNrbGVcXHJcXG4nO1xuXG4gICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgIHNkcCArPSB3cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgJ29mZmVyJywgdHJhbnNjZWl2ZXIuc3RyZWFtLCBwYy5fZHRsc1JvbGUpO1xuICAgICAgc2RwICs9ICdhPXJ0Y3AtcnNpemVcXHJcXG4nO1xuXG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgJiYgcGMuaWNlR2F0aGVyaW5nU3RhdGUgIT09ICduZXcnICYmXG4gICAgICAgICAgKHNkcE1MaW5lSW5kZXggPT09IDAgfHwgIXBjLnVzaW5nQnVuZGxlKSkge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5nZXRMb2NhbENhbmRpZGF0ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGNhbmQpIHtcbiAgICAgICAgICBjYW5kLmNvbXBvbmVudCA9IDE7XG4gICAgICAgICAgc2RwICs9ICdhPScgKyBTRFBVdGlscy53cml0ZUNhbmRpZGF0ZShjYW5kKSArICdcXHJcXG4nO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgICAgc2RwICs9ICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGRlc2MgPSBuZXcgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiAnb2ZmZXInLFxuICAgICAgc2RwOiBzZHBcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlc2MpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgaWYgKHBjLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IGNhbGwgY3JlYXRlQW5zd2VyIGFmdGVyIGNsb3NlJykpO1xuICAgIH1cblxuICAgIGlmICghKHBjLnNpZ25hbGluZ1N0YXRlID09PSAnaGF2ZS1yZW1vdGUtb2ZmZXInIHx8XG4gICAgICAgIHBjLnNpZ25hbGluZ1N0YXRlID09PSAnaGF2ZS1sb2NhbC1wcmFuc3dlcicpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3QgY2FsbCBjcmVhdGVBbnN3ZXIgaW4gc2lnbmFsaW5nU3RhdGUgJyArIHBjLnNpZ25hbGluZ1N0YXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKHBjLl9zZHBTZXNzaW9uSWQsXG4gICAgICAgIHBjLl9zZHBTZXNzaW9uVmVyc2lvbisrKTtcbiAgICBpZiAocGMudXNpbmdCdW5kbGUpIHtcbiAgICAgIHNkcCArPSAnYT1ncm91cDpCVU5ETEUgJyArIHBjLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5taWQ7XG4gICAgICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcbiAgICB9XG4gICAgc2RwICs9ICdhPWljZS1vcHRpb25zOnRyaWNrbGVcXHJcXG4nO1xuXG4gICAgdmFyIG1lZGlhU2VjdGlvbnNJbk9mZmVyID0gU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyhcbiAgICAgICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCkubGVuZ3RoO1xuICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICBpZiAoc2RwTUxpbmVJbmRleCArIDEgPiBtZWRpYVNlY3Rpb25zSW5PZmZlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhcHBsaWNhdGlvbicpIHtcbiAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIucHJvdG9jb2wgPT09ICdEVExTL1NDVFAnKSB7IC8vIGxlZ2FjeSBmbXRcbiAgICAgICAgICAgIHNkcCArPSAnbT1hcHBsaWNhdGlvbiAwIERUTFMvU0NUUCA1MDAwXFxyXFxuJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2RwICs9ICdtPWFwcGxpY2F0aW9uIDAgJyArIHRyYW5zY2VpdmVyLnByb3RvY29sICtcbiAgICAgICAgICAgICAgICAnIHdlYnJ0Yy1kYXRhY2hhbm5lbFxcclxcbic7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICBzZHAgKz0gJ209YXVkaW8gMCBVRFAvVExTL1JUUC9TQVZQRiAwXFxyXFxuJyArXG4gICAgICAgICAgICAgICdhPXJ0cG1hcDowIFBDTVUvODAwMFxcclxcbic7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHNkcCArPSAnbT12aWRlbyAwIFVEUC9UTFMvUlRQL1NBVlBGIDEyMFxcclxcbicgK1xuICAgICAgICAgICAgICAnYT1ydHBtYXA6MTIwIFZQOC85MDAwMFxcclxcbic7XG4gICAgICAgIH1cbiAgICAgICAgc2RwICs9ICdjPUlOIElQNCAwLjAuMC4wXFxyXFxuJyArXG4gICAgICAgICAgICAnYT1pbmFjdGl2ZVxcclxcbicgK1xuICAgICAgICAgICAgJ2E9bWlkOicgKyB0cmFuc2NlaXZlci5taWQgKyAnXFxyXFxuJztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBGSVhNRTogbG9vayBhdCBkaXJlY3Rpb24uXG4gICAgICBpZiAodHJhbnNjZWl2ZXIuc3RyZWFtKSB7XG4gICAgICAgIHZhciBsb2NhbFRyYWNrO1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIGxvY2FsVHJhY2sgPSB0cmFuc2NlaXZlci5zdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgbG9jYWxUcmFjayA9IHRyYW5zY2VpdmVyLnN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbFRyYWNrKSB7XG4gICAgICAgICAgLy8gYWRkIFJUWFxuICAgICAgICAgIGlmIChlZGdlVmVyc2lvbiA+PSAxNTAxOSAmJiB0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nICYmXG4gICAgICAgICAgICAgICF0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHggPSB7XG4gICAgICAgICAgICAgIHNzcmM6IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArIDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBpbnRlcnNlY3Rpb24gb2YgY2FwYWJpbGl0aWVzLlxuICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyhcbiAgICAgICAgICB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICB2YXIgaGFzUnR4ID0gY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5maWx0ZXIoZnVuY3Rpb24oYykge1xuICAgICAgICByZXR1cm4gYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdydHgnO1xuICAgICAgfSkubGVuZ3RoO1xuICAgICAgaWYgKCFoYXNSdHggJiYgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgICAgZGVsZXRlIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4O1xuICAgICAgfVxuXG4gICAgICBzZHAgKz0gd3JpdGVNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIsIGNvbW1vbkNhcGFiaWxpdGllcyxcbiAgICAgICAgICAnYW5zd2VyJywgdHJhbnNjZWl2ZXIuc3RyZWFtLCBwYy5fZHRsc1JvbGUpO1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzICYmXG4gICAgICAgICAgdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMucmVkdWNlZFNpemUpIHtcbiAgICAgICAgc2RwICs9ICdhPXJ0Y3AtcnNpemVcXHJcXG4nO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGRlc2MgPSBuZXcgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiAnYW5zd2VyJyxcbiAgICAgIHNkcDogc2RwXG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICB2YXIgc2VjdGlvbnM7XG4gICAgaWYgKGNhbmRpZGF0ZSAmJiAhKGNhbmRpZGF0ZS5zZHBNTGluZUluZGV4ICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgY2FuZGlkYXRlLnNkcE1pZCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdzZHBNTGluZUluZGV4IG9yIHNkcE1pZCByZXF1aXJlZCcpKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBuZWVkcyB0byBnbyBpbnRvIG9wcyBxdWV1ZS5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAoIXBjLl9yZW1vdGVEZXNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICAgJ0NhbiBub3QgYWRkIElDRSBjYW5kaWRhdGUgd2l0aG91dCBhIHJlbW90ZSBkZXNjcmlwdGlvbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWNhbmRpZGF0ZSB8fCBjYW5kaWRhdGUuY2FuZGlkYXRlID09PSAnJykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBjLnRyYW5zY2VpdmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbal0ucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbal0uaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSk7XG4gICAgICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAgIHNlY3Rpb25zW2pdICs9ICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgICAgICBwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwID1cbiAgICAgICAgICAgICAgU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24ocGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCkgK1xuICAgICAgICAgICAgICBzZWN0aW9ucy5qb2luKCcnKTtcbiAgICAgICAgICBpZiAocGMudXNpbmdCdW5kbGUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNkcE1MaW5lSW5kZXggPSBjYW5kaWRhdGUuc2RwTUxpbmVJbmRleDtcbiAgICAgICAgaWYgKGNhbmRpZGF0ZS5zZHBNaWQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBjLnRyYW5zY2VpdmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tpXS5taWQgPT09IGNhbmRpZGF0ZS5zZHBNaWQpIHtcbiAgICAgICAgICAgICAgc2RwTUxpbmVJbmRleCA9IGk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhbnNjZWl2ZXIgPSBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07XG4gICAgICAgIGlmICh0cmFuc2NlaXZlcikge1xuICAgICAgICAgIGlmICh0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNhbmQgPSBPYmplY3Qua2V5cyhjYW5kaWRhdGUuY2FuZGlkYXRlKS5sZW5ndGggPiAwID9cbiAgICAgICAgICAgICAgU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoY2FuZGlkYXRlLmNhbmRpZGF0ZSkgOiB7fTtcbiAgICAgICAgICAvLyBJZ25vcmUgQ2hyb21lJ3MgaW52YWxpZCBjYW5kaWRhdGVzIHNpbmNlIEVkZ2UgZG9lcyBub3QgbGlrZSB0aGVtLlxuICAgICAgICAgIGlmIChjYW5kLnByb3RvY29sID09PSAndGNwJyAmJiAoY2FuZC5wb3J0ID09PSAwIHx8IGNhbmQucG9ydCA9PT0gOSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElnbm9yZSBSVENQIGNhbmRpZGF0ZXMsIHdlIGFzc3VtZSBSVENQLU1VWC5cbiAgICAgICAgICBpZiAoY2FuZC5jb21wb25lbnQgJiYgY2FuZC5jb21wb25lbnQgIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdoZW4gdXNpbmcgYnVuZGxlLCBhdm9pZCBhZGRpbmcgY2FuZGlkYXRlcyB0byB0aGUgd3JvbmdcbiAgICAgICAgICAvLyBpY2UgdHJhbnNwb3J0LiBBbmQgYXZvaWQgYWRkaW5nIGNhbmRpZGF0ZXMgYWRkZWQgaW4gdGhlIFNEUC5cbiAgICAgICAgICBpZiAoc2RwTUxpbmVJbmRleCA9PT0gMCB8fCAoc2RwTUxpbmVJbmRleCA+IDAgJiZcbiAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICE9PSBwYy50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0KSkge1xuICAgICAgICAgICAgaWYgKCFtYXliZUFkZENhbmRpZGF0ZSh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQsIGNhbmQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QobWFrZUVycm9yKCdPcGVyYXRpb25FcnJvcicsXG4gICAgICAgICAgICAgICAgICAnQ2FuIG5vdCBhZGQgSUNFIGNhbmRpZGF0ZScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB1cGRhdGUgdGhlIHJlbW90ZURlc2NyaXB0aW9uLlxuICAgICAgICAgIHZhciBjYW5kaWRhdGVTdHJpbmcgPSBjYW5kaWRhdGUuY2FuZGlkYXRlLnRyaW0oKTtcbiAgICAgICAgICBpZiAoY2FuZGlkYXRlU3RyaW5nLmluZGV4T2YoJ2E9JykgPT09IDApIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZVN0cmluZyA9IGNhbmRpZGF0ZVN0cmluZy5zdWJzdHIoMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyhwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgICBzZWN0aW9uc1tzZHBNTGluZUluZGV4XSArPSAnYT0nICtcbiAgICAgICAgICAgICAgKGNhbmQudHlwZSA/IGNhbmRpZGF0ZVN0cmluZyA6ICdlbmQtb2YtY2FuZGlkYXRlcycpXG4gICAgICAgICAgICAgICsgJ1xcclxcbic7XG4gICAgICAgICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCA9XG4gICAgICAgICAgICAgIFNEUFV0aWxzLmdldERlc2NyaXB0aW9uKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApICtcbiAgICAgICAgICAgICAgc2VjdGlvbnMuam9pbignJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChtYWtlRXJyb3IoJ09wZXJhdGlvbkVycm9yJyxcbiAgICAgICAgICAgICAgJ0NhbiBub3QgYWRkIElDRSBjYW5kaWRhdGUnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIGlmIChzZWxlY3RvciAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrKSB7XG4gICAgICB2YXIgc2VuZGVyT3JSZWNlaXZlciA9IG51bGw7XG4gICAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjayA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICBzZW5kZXJPclJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci50cmFjayA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICBzZW5kZXJPclJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFzZW5kZXJPclJlY2VpdmVyKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yJywgJ0ludmFsaWQgc2VsZWN0b3IuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VuZGVyT3JSZWNlaXZlci5nZXRTdGF0cygpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIFsncnRwU2VuZGVyJywgJ3J0cFJlY2VpdmVyJywgJ2ljZUdhdGhlcmVyJywgJ2ljZVRyYW5zcG9ydCcsXG4gICAgICAgICAgJ2R0bHNUcmFuc3BvcnQnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgICAgaWYgKHRyYW5zY2VpdmVyW21ldGhvZF0pIHtcbiAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0cmFuc2NlaXZlclttZXRob2RdLmdldFN0YXRzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhbGxTdGF0cykge1xuICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgTWFwKCk7XG4gICAgICBhbGxTdGF0cy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRzKSB7XG4gICAgICAgIHN0YXRzLmZvckVhY2goZnVuY3Rpb24oc3RhdCkge1xuICAgICAgICAgIHJlc3VsdHMuc2V0KHN0YXQuaWQsIHN0YXQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gZml4IGxvdy1sZXZlbCBzdGF0IG5hbWVzIGFuZCByZXR1cm4gTWFwIGluc3RlYWQgb2Ygb2JqZWN0LlxuICB2YXIgb3J0Y09iamVjdHMgPSBbJ1JUQ1J0cFNlbmRlcicsICdSVENSdHBSZWNlaXZlcicsICdSVENJY2VHYXRoZXJlcicsXG4gICAgJ1JUQ0ljZVRyYW5zcG9ydCcsICdSVENEdGxzVHJhbnNwb3J0J107XG4gIG9ydGNPYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob3J0Y09iamVjdE5hbWUpIHtcbiAgICB2YXIgb2JqID0gd2luZG93W29ydGNPYmplY3ROYW1lXTtcbiAgICBpZiAob2JqICYmIG9iai5wcm90b3R5cGUgJiYgb2JqLnByb3RvdHlwZS5nZXRTdGF0cykge1xuICAgICAgdmFyIG5hdGl2ZUdldHN0YXRzID0gb2JqLnByb3RvdHlwZS5nZXRTdGF0cztcbiAgICAgIG9iai5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUdldHN0YXRzLmFwcGx5KHRoaXMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKG5hdGl2ZVN0YXRzKSB7XG4gICAgICAgICAgdmFyIG1hcFN0YXRzID0gbmV3IE1hcCgpO1xuICAgICAgICAgIE9iamVjdC5rZXlzKG5hdGl2ZVN0YXRzKS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICBuYXRpdmVTdGF0c1tpZF0udHlwZSA9IGZpeFN0YXRzVHlwZShuYXRpdmVTdGF0c1tpZF0pO1xuICAgICAgICAgICAgbWFwU3RhdHMuc2V0KGlkLCBuYXRpdmVTdGF0c1tpZF0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBtYXBTdGF0cztcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbGVnYWN5IGNhbGxiYWNrIHNoaW1zLiBTaG91bGQgYmUgbW92ZWQgdG8gYWRhcHRlci5qcyBzb21lIGRheXMuXG4gIHZhciBtZXRob2RzID0gWydjcmVhdGVPZmZlcicsICdjcmVhdGVBbnN3ZXInXTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBuYXRpdmVNZXRob2QgPSBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBsZWdhY3lcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBbYXJndW1lbnRzWzJdXSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMF0uYXBwbHkobnVsbCwgW2Rlc2NyaXB0aW9uXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsLCBbZXJyb3JdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIG1ldGhvZHMgPSBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nLCAnYWRkSWNlQ2FuZGlkYXRlJ107XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgdHlwZW9mIGFyZ3NbMl0gPT09ICdmdW5jdGlvbicpIHsgLy8gbGVnYWN5XG4gICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1syXS5hcHBseShudWxsLCBbZXJyb3JdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIGdldFN0YXRzIGlzIHNwZWNpYWwuIEl0IGRvZXNuJ3QgaGF2ZSBhIHNwZWMgbGVnYWN5IG1ldGhvZCB5ZXQgd2Ugc3VwcG9ydFxuICAvLyBnZXRTdGF0cyhzb21ldGhpbmcsIGNiKSB3aXRob3V0IGVycm9yIGNhbGxiYWNrcy5cbiAgWydnZXRTdGF0cyddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyIG5hdGl2ZU1ldGhvZCA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdO1xuICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzWzFdLmFwcGx5KG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIFJUQ1BlZXJDb25uZWN0aW9uO1xufTtcbiIsIi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBTRFAgaGVscGVycy5cbnZhciBTRFBVdGlscyA9IHt9O1xuXG4vLyBHZW5lcmF0ZSBhbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgY25hbWUgb3IgbWlkcy5cbi8vIFRPRE86IHVzZSBVVUlEcyBpbnN0ZWFkPyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qZWQvOTgyODgzXG5TRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCAxMCk7XG59O1xuXG4vLyBUaGUgUlRDUCBDTkFNRSB1c2VkIGJ5IGFsbCBwZWVyY29ubmVjdGlvbnMgZnJvbSB0aGUgc2FtZSBKUy5cblNEUFV0aWxzLmxvY2FsQ05hbWUgPSBTRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIoKTtcblxuLy8gU3BsaXRzIFNEUCBpbnRvIGxpbmVzLCBkZWFsaW5nIHdpdGggYm90aCBDUkxGIGFuZCBMRi5cblNEUFV0aWxzLnNwbGl0TGluZXMgPSBmdW5jdGlvbihibG9iKSB7XG4gIHJldHVybiBibG9iLnRyaW0oKS5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS50cmltKCk7XG4gIH0pO1xufTtcbi8vIFNwbGl0cyBTRFAgaW50byBzZXNzaW9ucGFydCBhbmQgbWVkaWFzZWN0aW9ucy4gRW5zdXJlcyBDUkxGLlxuU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgdmFyIHBhcnRzID0gYmxvYi5zcGxpdCgnXFxubT0nKTtcbiAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbihwYXJ0LCBpbmRleCkge1xuICAgIHJldHVybiAoaW5kZXggPiAwID8gJ209JyArIHBhcnQgOiBwYXJ0KS50cmltKCkgKyAnXFxyXFxuJztcbiAgfSk7XG59O1xuXG4vLyByZXR1cm5zIHRoZSBzZXNzaW9uIGRlc2NyaXB0aW9uLlxuU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24gPSBmdW5jdGlvbihibG9iKSB7XG4gIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoYmxvYik7XG4gIHJldHVybiBzZWN0aW9ucyAmJiBzZWN0aW9uc1swXTtcbn07XG5cbi8vIHJldHVybnMgdGhlIGluZGl2aWR1YWwgbWVkaWEgc2VjdGlvbnMuXG5TRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zID0gZnVuY3Rpb24oYmxvYikge1xuICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICBzZWN0aW9ucy5zaGlmdCgpO1xuICByZXR1cm4gc2VjdGlvbnM7XG59O1xuXG4vLyBSZXR1cm5zIGxpbmVzIHRoYXQgc3RhcnQgd2l0aCBhIGNlcnRhaW4gcHJlZml4LlxuU0RQVXRpbHMubWF0Y2hQcmVmaXggPSBmdW5jdGlvbihibG9iLCBwcmVmaXgpIHtcbiAgcmV0dXJuIFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYikuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS5pbmRleE9mKHByZWZpeCkgPT09IDA7XG4gIH0pO1xufTtcblxuLy8gUGFyc2VzIGFuIElDRSBjYW5kaWRhdGUgbGluZS4gU2FtcGxlIGlucHV0OlxuLy8gY2FuZGlkYXRlOjcwMjc4NjM1MCAyIHVkcCA0MTgxOTkwMiA4LjguOC44IDYwNzY5IHR5cCByZWxheSByYWRkciA4LjguOC44XG4vLyBycG9ydCA1NTk5NlwiXG5TRFBVdGlscy5wYXJzZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzO1xuICAvLyBQYXJzZSBib3RoIHZhcmlhbnRzLlxuICBpZiAobGluZS5pbmRleE9mKCdhPWNhbmRpZGF0ZTonKSA9PT0gMCkge1xuICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTIpLnNwbGl0KCcgJyk7XG4gIH0gZWxzZSB7XG4gICAgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMCkuc3BsaXQoJyAnKTtcbiAgfVxuXG4gIHZhciBjYW5kaWRhdGUgPSB7XG4gICAgZm91bmRhdGlvbjogcGFydHNbMF0sXG4gICAgY29tcG9uZW50OiBwYXJzZUludChwYXJ0c1sxXSwgMTApLFxuICAgIHByb3RvY29sOiBwYXJ0c1syXS50b0xvd2VyQ2FzZSgpLFxuICAgIHByaW9yaXR5OiBwYXJzZUludChwYXJ0c1szXSwgMTApLFxuICAgIGlwOiBwYXJ0c1s0XSxcbiAgICBhZGRyZXNzOiBwYXJ0c1s0XSwgLy8gYWRkcmVzcyBpcyBhbiBhbGlhcyBmb3IgaXAuXG4gICAgcG9ydDogcGFyc2VJbnQocGFydHNbNV0sIDEwKSxcbiAgICAvLyBza2lwIHBhcnRzWzZdID09ICd0eXAnXG4gICAgdHlwZTogcGFydHNbN11cbiAgfTtcblxuICBmb3IgKHZhciBpID0gODsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgc3dpdGNoIChwYXJ0c1tpXSkge1xuICAgICAgY2FzZSAncmFkZHInOlxuICAgICAgICBjYW5kaWRhdGUucmVsYXRlZEFkZHJlc3MgPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncnBvcnQnOlxuICAgICAgICBjYW5kaWRhdGUucmVsYXRlZFBvcnQgPSBwYXJzZUludChwYXJ0c1tpICsgMV0sIDEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0Y3B0eXBlJzpcbiAgICAgICAgY2FuZGlkYXRlLnRjcFR5cGUgPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndWZyYWcnOlxuICAgICAgICBjYW5kaWRhdGUudWZyYWcgPSBwYXJ0c1tpICsgMV07IC8vIGZvciBiYWNrd2FyZCBjb21wYWJpbGl0eS5cbiAgICAgICAgY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gZXh0ZW5zaW9uIGhhbmRsaW5nLCBpbiBwYXJ0aWN1bGFyIHVmcmFnXG4gICAgICAgIGNhbmRpZGF0ZVtwYXJ0c1tpXV0gPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2FuZGlkYXRlO1xufTtcblxuLy8gVHJhbnNsYXRlcyBhIGNhbmRpZGF0ZSBvYmplY3QgaW50byBTRFAgY2FuZGlkYXRlIGF0dHJpYnV0ZS5cblNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gIHZhciBzZHAgPSBbXTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLmZvdW5kYXRpb24pO1xuICBzZHAucHVzaChjYW5kaWRhdGUuY29tcG9uZW50KTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLnByb3RvY29sLnRvVXBwZXJDYXNlKCkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUucHJpb3JpdHkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUuYWRkcmVzcyB8fCBjYW5kaWRhdGUuaXApO1xuICBzZHAucHVzaChjYW5kaWRhdGUucG9ydCk7XG5cbiAgdmFyIHR5cGUgPSBjYW5kaWRhdGUudHlwZTtcbiAgc2RwLnB1c2goJ3R5cCcpO1xuICBzZHAucHVzaCh0eXBlKTtcbiAgaWYgKHR5cGUgIT09ICdob3N0JyAmJiBjYW5kaWRhdGUucmVsYXRlZEFkZHJlc3MgJiZcbiAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCkge1xuICAgIHNkcC5wdXNoKCdyYWRkcicpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyk7XG4gICAgc2RwLnB1c2goJ3Jwb3J0Jyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KTtcbiAgfVxuICBpZiAoY2FuZGlkYXRlLnRjcFR5cGUgJiYgY2FuZGlkYXRlLnByb3RvY29sLnRvTG93ZXJDYXNlKCkgPT09ICd0Y3AnKSB7XG4gICAgc2RwLnB1c2goJ3RjcHR5cGUnKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUudGNwVHlwZSk7XG4gIH1cbiAgaWYgKGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50IHx8IGNhbmRpZGF0ZS51ZnJhZykge1xuICAgIHNkcC5wdXNoKCd1ZnJhZycpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50IHx8IGNhbmRpZGF0ZS51ZnJhZyk7XG4gIH1cbiAgcmV0dXJuICdjYW5kaWRhdGU6JyArIHNkcC5qb2luKCcgJyk7XG59O1xuXG4vLyBQYXJzZXMgYW4gaWNlLW9wdGlvbnMgbGluZSwgcmV0dXJucyBhbiBhcnJheSBvZiBvcHRpb24gdGFncy5cbi8vIGE9aWNlLW9wdGlvbnM6Zm9vIGJhclxuU0RQVXRpbHMucGFyc2VJY2VPcHRpb25zID0gZnVuY3Rpb24obGluZSkge1xuICByZXR1cm4gbGluZS5zdWJzdHIoMTQpLnNwbGl0KCcgJyk7XG59O1xuXG4vLyBQYXJzZXMgYW4gcnRwbWFwIGxpbmUsIHJldHVybnMgUlRDUnRwQ29kZGVjUGFyYW1ldGVycy4gU2FtcGxlIGlucHV0OlxuLy8gYT1ydHBtYXA6MTExIG9wdXMvNDgwMDAvMlxuU0RQVXRpbHMucGFyc2VSdHBNYXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDkpLnNwbGl0KCcgJyk7XG4gIHZhciBwYXJzZWQgPSB7XG4gICAgcGF5bG9hZFR5cGU6IHBhcnNlSW50KHBhcnRzLnNoaWZ0KCksIDEwKSAvLyB3YXM6IGlkXG4gIH07XG5cbiAgcGFydHMgPSBwYXJ0c1swXS5zcGxpdCgnLycpO1xuXG4gIHBhcnNlZC5uYW1lID0gcGFydHNbMF07XG4gIHBhcnNlZC5jbG9ja1JhdGUgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOyAvLyB3YXM6IGNsb2NrcmF0ZVxuICBwYXJzZWQuY2hhbm5lbHMgPSBwYXJ0cy5sZW5ndGggPT09IDMgPyBwYXJzZUludChwYXJ0c1syXSwgMTApIDogMTtcbiAgLy8gbGVnYWN5IGFsaWFzLCBnb3QgcmVuYW1lZCBiYWNrIHRvIGNoYW5uZWxzIGluIE9SVEMuXG4gIHBhcnNlZC5udW1DaGFubmVscyA9IHBhcnNlZC5jaGFubmVscztcbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbi8vIEdlbmVyYXRlIGFuIGE9cnRwbWFwIGxpbmUgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3Jcbi8vIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRwTWFwID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICB2YXIgY2hhbm5lbHMgPSBjb2RlYy5jaGFubmVscyB8fCBjb2RlYy5udW1DaGFubmVscyB8fCAxO1xuICByZXR1cm4gJ2E9cnRwbWFwOicgKyBwdCArICcgJyArIGNvZGVjLm5hbWUgKyAnLycgKyBjb2RlYy5jbG9ja1JhdGUgK1xuICAgICAgKGNoYW5uZWxzICE9PSAxID8gJy8nICsgY2hhbm5lbHMgOiAnJykgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyBhbiBhPWV4dG1hcCBsaW5lIChoZWFkZXJleHRlbnNpb24gZnJvbSBSRkMgNTI4NSkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9ZXh0bWFwOjIgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuLy8gYT1leHRtYXA6Mi9zZW5kb25seSB1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDp0b2Zmc2V0XG5TRFBVdGlscy5wYXJzZUV4dG1hcCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoOSkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBkaXJlY3Rpb246IHBhcnRzWzBdLmluZGV4T2YoJy8nKSA+IDAgPyBwYXJ0c1swXS5zcGxpdCgnLycpWzFdIDogJ3NlbmRyZWN2JyxcbiAgICB1cmk6IHBhcnRzWzFdXG4gIH07XG59O1xuXG4vLyBHZW5lcmF0ZXMgYT1leHRtYXAgbGluZSBmcm9tIFJUQ1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMgb3Jcbi8vIFJUQ1J0cEhlYWRlckV4dGVuc2lvbi5cblNEUFV0aWxzLndyaXRlRXh0bWFwID0gZnVuY3Rpb24oaGVhZGVyRXh0ZW5zaW9uKSB7XG4gIHJldHVybiAnYT1leHRtYXA6JyArIChoZWFkZXJFeHRlbnNpb24uaWQgfHwgaGVhZGVyRXh0ZW5zaW9uLnByZWZlcnJlZElkKSArXG4gICAgICAoaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvbiAmJiBoZWFkZXJFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZHJlY3YnXG4gICAgICAgID8gJy8nICsgaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvblxuICAgICAgICA6ICcnKSArXG4gICAgICAnICcgKyBoZWFkZXJFeHRlbnNpb24udXJpICsgJ1xcclxcbic7XG59O1xuXG4vLyBQYXJzZXMgYW4gZnRtcCBsaW5lLCByZXR1cm5zIGRpY3Rpb25hcnkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9Zm10cDo5NiB2YnI9b247Y25nPW9uXG4vLyBBbHNvIGRlYWxzIHdpdGggdmJyPW9uOyBjbmc9b25cblNEUFV0aWxzLnBhcnNlRm10cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga3Y7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKGxpbmUuaW5kZXhPZignICcpICsgMSkuc3BsaXQoJzsnKTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgIGt2ID0gcGFydHNbal0udHJpbSgpLnNwbGl0KCc9Jyk7XG4gICAgcGFyc2VkW2t2WzBdLnRyaW0oKV0gPSBrdlsxXTtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufTtcblxuLy8gR2VuZXJhdGVzIGFuIGE9ZnRtcCBsaW5lIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlRm10cCA9IGZ1bmN0aW9uKGNvZGVjKSB7XG4gIHZhciBsaW5lID0gJyc7XG4gIHZhciBwdCA9IGNvZGVjLnBheWxvYWRUeXBlO1xuICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHB0ID0gY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gIH1cbiAgaWYgKGNvZGVjLnBhcmFtZXRlcnMgJiYgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykubGVuZ3RoKSB7XG4gICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIGlmIChjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSkge1xuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSArICc9JyArIGNvZGVjLnBhcmFtZXRlcnNbcGFyYW1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsaW5lICs9ICdhPWZtdHA6JyArIHB0ICsgJyAnICsgcGFyYW1zLmpvaW4oJzsnKSArICdcXHJcXG4nO1xuICB9XG4gIHJldHVybiBsaW5lO1xufTtcblxuLy8gUGFyc2VzIGFuIHJ0Y3AtZmIgbGluZSwgcmV0dXJucyBSVENQUnRjcEZlZWRiYWNrIG9iamVjdC4gU2FtcGxlIGlucHV0OlxuLy8gYT1ydGNwLWZiOjk4IG5hY2sgcnBzaVxuU0RQVXRpbHMucGFyc2VSdGNwRmIgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKGxpbmUuaW5kZXhPZignICcpICsgMSkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBwYXJ0cy5zaGlmdCgpLFxuICAgIHBhcmFtZXRlcjogcGFydHMuam9pbignICcpXG4gIH07XG59O1xuLy8gR2VuZXJhdGUgYT1ydGNwLWZiIGxpbmVzIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRjcEZiID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIGxpbmVzID0gJyc7XG4gIHZhciBwdCA9IGNvZGVjLnBheWxvYWRUeXBlO1xuICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHB0ID0gY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gIH1cbiAgaWYgKGNvZGVjLnJ0Y3BGZWVkYmFjayAmJiBjb2RlYy5ydGNwRmVlZGJhY2subGVuZ3RoKSB7XG4gICAgLy8gRklYTUU6IHNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyci1pbnQ/XG4gICAgY29kZWMucnRjcEZlZWRiYWNrLmZvckVhY2goZnVuY3Rpb24oZmIpIHtcbiAgICAgIGxpbmVzICs9ICdhPXJ0Y3AtZmI6JyArIHB0ICsgJyAnICsgZmIudHlwZSArXG4gICAgICAoZmIucGFyYW1ldGVyICYmIGZiLnBhcmFtZXRlci5sZW5ndGggPyAnICcgKyBmYi5wYXJhbWV0ZXIgOiAnJykgK1xuICAgICAgICAgICdcXHJcXG4nO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBsaW5lcztcbn07XG5cbi8vIFBhcnNlcyBhbiBSRkMgNTU3NiBzc3JjIG1lZGlhIGF0dHJpYnV0ZS4gU2FtcGxlIGlucHV0OlxuLy8gYT1zc3JjOjM3MzU5Mjg1NTkgY25hbWU6c29tZXRoaW5nXG5TRFBVdGlscy5wYXJzZVNzcmNNZWRpYSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHNwID0gbGluZS5pbmRleE9mKCcgJyk7XG4gIHZhciBwYXJ0cyA9IHtcbiAgICBzc3JjOiBwYXJzZUludChsaW5lLnN1YnN0cig3LCBzcCAtIDcpLCAxMClcbiAgfTtcbiAgdmFyIGNvbG9uID0gbGluZS5pbmRleE9mKCc6Jywgc3ApO1xuICBpZiAoY29sb24gPiAtMSkge1xuICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyKHNwICsgMSwgY29sb24gLSBzcCAtIDEpO1xuICAgIHBhcnRzLnZhbHVlID0gbGluZS5zdWJzdHIoY29sb24gKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cihzcCArIDEpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn07XG5cblNEUFV0aWxzLnBhcnNlU3NyY0dyb3VwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cigxMykuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBzZW1hbnRpY3M6IHBhcnRzLnNoaWZ0KCksXG4gICAgc3NyY3M6IHBhcnRzLm1hcChmdW5jdGlvbihzc3JjKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3NyYywgMTApO1xuICAgIH0pXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyB0aGUgTUlEIChSRkMgNTg4OCkgZnJvbSBhIG1lZGlhIHNlY3Rpb24uXG4vLyByZXR1cm5zIHRoZSBNSUQgb3IgdW5kZWZpbmVkIGlmIG5vIG1pZCBsaW5lIHdhcyBmb3VuZC5cblNEUFV0aWxzLmdldE1pZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbWlkID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1taWQ6JylbMF07XG4gIGlmIChtaWQpIHtcbiAgICByZXR1cm4gbWlkLnN1YnN0cig2KTtcbiAgfVxufTtcblxuU0RQVXRpbHMucGFyc2VGaW5nZXJwcmludCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoMTQpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgYWxnb3JpdGhtOiBwYXJ0c1swXS50b0xvd2VyQ2FzZSgpLCAvLyBhbGdvcml0aG0gaXMgY2FzZS1zZW5zaXRpdmUgaW4gRWRnZS5cbiAgICB2YWx1ZTogcGFydHNbMV1cbiAgfTtcbn07XG5cbi8vIEV4dHJhY3RzIERUTFMgcGFyYW1ldGVycyBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgZmluZ2VycHJpbnQgbGluZSBhcyBpbnB1dC4gU2VlIGFsc28gZ2V0SWNlUGFyYW1ldGVycy5cblNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1maW5nZXJwcmludDonKTtcbiAgLy8gTm90ZTogYT1zZXR1cCBsaW5lIGlzIGlnbm9yZWQgc2luY2Ugd2UgdXNlIHRoZSAnYXV0bycgcm9sZS5cbiAgLy8gTm90ZTI6ICdhbGdvcml0aG0nIGlzIG5vdCBjYXNlIHNlbnNpdGl2ZSBleGNlcHQgaW4gRWRnZS5cbiAgcmV0dXJuIHtcbiAgICByb2xlOiAnYXV0bycsXG4gICAgZmluZ2VycHJpbnRzOiBsaW5lcy5tYXAoU0RQVXRpbHMucGFyc2VGaW5nZXJwcmludClcbiAgfTtcbn07XG5cbi8vIFNlcmlhbGl6ZXMgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cblNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMsIHNldHVwVHlwZSkge1xuICB2YXIgc2RwID0gJ2E9c2V0dXA6JyArIHNldHVwVHlwZSArICdcXHJcXG4nO1xuICBwYXJhbXMuZmluZ2VycHJpbnRzLmZvckVhY2goZnVuY3Rpb24oZnApIHtcbiAgICBzZHAgKz0gJ2E9ZmluZ2VycHJpbnQ6JyArIGZwLmFsZ29yaXRobSArICcgJyArIGZwLnZhbHVlICsgJ1xcclxcbic7XG4gIH0pO1xuICByZXR1cm4gc2RwO1xufTtcblxuLy8gUGFyc2VzIGE9Y3J5cHRvIGxpbmVzIGludG9cbi8vICAgaHR0cHM6Ly9yYXdnaXQuY29tL2Fib2JhL2VkZ2VydGMvbWFzdGVyL21zb3J0Yy1yczQuaHRtbCNkaWN0aW9uYXJ5LXJ0Y3NydHBzZGVzcGFyYW1ldGVycy1tZW1iZXJzXG5TRFBVdGlscy5wYXJzZUNyeXB0b0xpbmUgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDkpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdGFnOiBwYXJzZUludChwYXJ0c1swXSwgMTApLFxuICAgIGNyeXB0b1N1aXRlOiBwYXJ0c1sxXSxcbiAgICBrZXlQYXJhbXM6IHBhcnRzWzJdLFxuICAgIHNlc3Npb25QYXJhbXM6IHBhcnRzLnNsaWNlKDMpLFxuICB9O1xufTtcblxuU0RQVXRpbHMud3JpdGVDcnlwdG9MaW5lID0gZnVuY3Rpb24ocGFyYW1ldGVycykge1xuICByZXR1cm4gJ2E9Y3J5cHRvOicgKyBwYXJhbWV0ZXJzLnRhZyArICcgJyArXG4gICAgcGFyYW1ldGVycy5jcnlwdG9TdWl0ZSArICcgJyArXG4gICAgKHR5cGVvZiBwYXJhbWV0ZXJzLmtleVBhcmFtcyA9PT0gJ29iamVjdCdcbiAgICAgID8gU0RQVXRpbHMud3JpdGVDcnlwdG9LZXlQYXJhbXMocGFyYW1ldGVycy5rZXlQYXJhbXMpXG4gICAgICA6IHBhcmFtZXRlcnMua2V5UGFyYW1zKSArXG4gICAgKHBhcmFtZXRlcnMuc2Vzc2lvblBhcmFtcyA/ICcgJyArIHBhcmFtZXRlcnMuc2Vzc2lvblBhcmFtcy5qb2luKCcgJykgOiAnJykgK1xuICAgICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIHRoZSBjcnlwdG8ga2V5IHBhcmFtZXRlcnMgaW50b1xuLy8gICBodHRwczovL3Jhd2dpdC5jb20vYWJvYmEvZWRnZXJ0Yy9tYXN0ZXIvbXNvcnRjLXJzNC5odG1sI3J0Y3NydHBrZXlwYXJhbSpcblNEUFV0aWxzLnBhcnNlQ3J5cHRvS2V5UGFyYW1zID0gZnVuY3Rpb24oa2V5UGFyYW1zKSB7XG4gIGlmIChrZXlQYXJhbXMuaW5kZXhPZignaW5saW5lOicpICE9PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHBhcnRzID0ga2V5UGFyYW1zLnN1YnN0cig3KS5zcGxpdCgnfCcpO1xuICByZXR1cm4ge1xuICAgIGtleU1ldGhvZDogJ2lubGluZScsXG4gICAga2V5U2FsdDogcGFydHNbMF0sXG4gICAgbGlmZVRpbWU6IHBhcnRzWzFdLFxuICAgIG1raVZhbHVlOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMF0gOiB1bmRlZmluZWQsXG4gICAgbWtpTGVuZ3RoOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMV0gOiB1bmRlZmluZWQsXG4gIH07XG59O1xuXG5TRFBVdGlscy53cml0ZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICByZXR1cm4ga2V5UGFyYW1zLmtleU1ldGhvZCArICc6J1xuICAgICsga2V5UGFyYW1zLmtleVNhbHQgK1xuICAgIChrZXlQYXJhbXMubGlmZVRpbWUgPyAnfCcgKyBrZXlQYXJhbXMubGlmZVRpbWUgOiAnJykgK1xuICAgIChrZXlQYXJhbXMubWtpVmFsdWUgJiYga2V5UGFyYW1zLm1raUxlbmd0aFxuICAgICAgPyAnfCcgKyBrZXlQYXJhbXMubWtpVmFsdWUgKyAnOicgKyBrZXlQYXJhbXMubWtpTGVuZ3RoXG4gICAgICA6ICcnKTtcbn07XG5cbi8vIEV4dHJhY3RzIGFsbCBTREVTIHBhcmFtdGVycy5cblNEUFV0aWxzLmdldENyeXB0b1BhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWNyeXB0bzonKTtcbiAgcmV0dXJuIGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUNyeXB0b0xpbmUpO1xufTtcblxuLy8gUGFyc2VzIElDRSBpbmZvcm1hdGlvbiBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgaWNlLXVmcmFnIGFuZCBpY2UtcHdkIGxpbmVzIGFzIGlucHV0LlxuU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgdmFyIHVmcmFnID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uICsgc2Vzc2lvbnBhcnQsXG4gICAgJ2E9aWNlLXVmcmFnOicpWzBdO1xuICB2YXIgcHdkID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uICsgc2Vzc2lvbnBhcnQsXG4gICAgJ2E9aWNlLXB3ZDonKVswXTtcbiAgaWYgKCEodWZyYWcgJiYgcHdkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWVGcmFnbWVudDogdWZyYWcuc3Vic3RyKDEyKSxcbiAgICBwYXNzd29yZDogcHdkLnN1YnN0cigxMCksXG4gIH07XG59O1xuXG4vLyBTZXJpYWxpemVzIElDRSBwYXJhbWV0ZXJzIHRvIFNEUC5cblNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICByZXR1cm4gJ2E9aWNlLXVmcmFnOicgKyBwYXJhbXMudXNlcm5hbWVGcmFnbWVudCArICdcXHJcXG4nICtcbiAgICAgICdhPWljZS1wd2Q6JyArIHBhcmFtcy5wYXNzd29yZCArICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBSVENSdHBQYXJhbWV0ZXJzLlxuU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBkZXNjcmlwdGlvbiA9IHtcbiAgICBjb2RlY3M6IFtdLFxuICAgIGhlYWRlckV4dGVuc2lvbnM6IFtdLFxuICAgIGZlY01lY2hhbmlzbXM6IFtdLFxuICAgIHJ0Y3A6IFtdXG4gIH07XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgdmFyIG1saW5lID0gbGluZXNbMF0uc3BsaXQoJyAnKTtcbiAgZm9yICh2YXIgaSA9IDM7IGkgPCBtbGluZS5sZW5ndGg7IGkrKykgeyAvLyBmaW5kIGFsbCBjb2RlY3MgZnJvbSBtbGluZVszLi5dXG4gICAgdmFyIHB0ID0gbWxpbmVbaV07XG4gICAgdmFyIHJ0cG1hcGxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRwbWFwOicgKyBwdCArICcgJylbMF07XG4gICAgaWYgKHJ0cG1hcGxpbmUpIHtcbiAgICAgIHZhciBjb2RlYyA9IFNEUFV0aWxzLnBhcnNlUnRwTWFwKHJ0cG1hcGxpbmUpO1xuICAgICAgdmFyIGZtdHBzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9Zm10cDonICsgcHQgKyAnICcpO1xuICAgICAgLy8gT25seSB0aGUgZmlyc3QgYT1mbXRwOjxwdD4gaXMgY29uc2lkZXJlZC5cbiAgICAgIGNvZGVjLnBhcmFtZXRlcnMgPSBmbXRwcy5sZW5ndGggPyBTRFBVdGlscy5wYXJzZUZtdHAoZm10cHNbMF0pIDoge307XG4gICAgICBjb2RlYy5ydGNwRmVlZGJhY2sgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOicgKyBwdCArICcgJylcbiAgICAgICAgLm1hcChTRFBVdGlscy5wYXJzZVJ0Y3BGYik7XG4gICAgICBkZXNjcmlwdGlvbi5jb2RlY3MucHVzaChjb2RlYyk7XG4gICAgICAvLyBwYXJzZSBGRUMgbWVjaGFuaXNtcyBmcm9tIHJ0cG1hcCBsaW5lcy5cbiAgICAgIHN3aXRjaCAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ1JFRCc6XG4gICAgICAgIGNhc2UgJ1VMUEZFQyc6XG4gICAgICAgICAgZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5wdXNoKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIG9ubHkgUkVEIGFuZCBVTFBGRUMgYXJlIHJlY29nbml6ZWQgYXMgRkVDIG1lY2hhbmlzbXMuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9ZXh0bWFwOicpLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIGRlc2NyaXB0aW9uLmhlYWRlckV4dGVuc2lvbnMucHVzaChTRFBVdGlscy5wYXJzZUV4dG1hcChsaW5lKSk7XG4gIH0pO1xuICAvLyBGSVhNRTogcGFyc2UgcnRjcC5cbiAgcmV0dXJuIGRlc2NyaXB0aW9uO1xufTtcblxuLy8gR2VuZXJhdGVzIHBhcnRzIG9mIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBkZXNjcmliaW5nIHRoZSBjYXBhYmlsaXRpZXMgL1xuLy8gcGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRwRGVzY3JpcHRpb24gPSBmdW5jdGlvbihraW5kLCBjYXBzKSB7XG4gIHZhciBzZHAgPSAnJztcblxuICAvLyBCdWlsZCB0aGUgbWxpbmUuXG4gIHNkcCArPSAnbT0nICsga2luZCArICcgJztcbiAgc2RwICs9IGNhcHMuY29kZWNzLmxlbmd0aCA+IDAgPyAnOScgOiAnMCc7IC8vIHJlamVjdCBpZiBubyBjb2RlY3MuXG4gIHNkcCArPSAnIFVEUC9UTFMvUlRQL1NBVlBGICc7XG4gIHNkcCArPSBjYXBzLmNvZGVjcy5tYXAoZnVuY3Rpb24oY29kZWMpIHtcbiAgICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gY29kZWMucGF5bG9hZFR5cGU7XG4gIH0pLmpvaW4oJyAnKSArICdcXHJcXG4nO1xuXG4gIHNkcCArPSAnYz1JTiBJUDQgMC4wLjAuMFxcclxcbic7XG4gIHNkcCArPSAnYT1ydGNwOjkgSU4gSVA0IDAuMC4wLjBcXHJcXG4nO1xuXG4gIC8vIEFkZCBhPXJ0cG1hcCBsaW5lcyBmb3IgZWFjaCBjb2RlYy4gQWxzbyBmbXRwIGFuZCBydGNwLWZiLlxuICBjYXBzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRwTWFwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVGbXRwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVSdGNwRmIoY29kZWMpO1xuICB9KTtcbiAgdmFyIG1heHB0aW1lID0gMDtcbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgIGlmIChjb2RlYy5tYXhwdGltZSA+IG1heHB0aW1lKSB7XG4gICAgICBtYXhwdGltZSA9IGNvZGVjLm1heHB0aW1lO1xuICAgIH1cbiAgfSk7XG4gIGlmIChtYXhwdGltZSA+IDApIHtcbiAgICBzZHAgKz0gJ2E9bWF4cHRpbWU6JyArIG1heHB0aW1lICsgJ1xcclxcbic7XG4gIH1cbiAgc2RwICs9ICdhPXJ0Y3AtbXV4XFxyXFxuJztcblxuICBpZiAoY2Fwcy5oZWFkZXJFeHRlbnNpb25zKSB7XG4gICAgY2Fwcy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oZXh0ZW5zaW9uKSB7XG4gICAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVFeHRtYXAoZXh0ZW5zaW9uKTtcbiAgICB9KTtcbiAgfVxuICAvLyBGSVhNRTogd3JpdGUgZmVjTWVjaGFuaXNtcy5cbiAgcmV0dXJuIHNkcDtcbn07XG5cbi8vIFBhcnNlcyB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gYW5kIHJldHVybnMgYW4gYXJyYXkgb2Zcbi8vIFJUQ1J0cEVuY29kaW5nUGFyYW1ldGVycy5cblNEUFV0aWxzLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBlbmNvZGluZ1BhcmFtZXRlcnMgPSBbXTtcbiAgdmFyIGRlc2NyaXB0aW9uID0gU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG4gIHZhciBoYXNSZWQgPSBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLmluZGV4T2YoJ1JFRCcpICE9PSAtMTtcbiAgdmFyIGhhc1VscGZlYyA9IGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMuaW5kZXhPZignVUxQRkVDJykgIT09IC0xO1xuXG4gIC8vIGZpbHRlciBhPXNzcmM6Li4uIGNuYW1lOiwgaWdub3JlIFBsYW5CLW1zaWRcbiAgdmFyIHNzcmNzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zc3JjOicpXG4gICAgLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSk7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICByZXR1cm4gcGFydHMuYXR0cmlidXRlID09PSAnY25hbWUnO1xuICAgIH0pO1xuICB2YXIgcHJpbWFyeVNzcmMgPSBzc3Jjcy5sZW5ndGggPiAwICYmIHNzcmNzWzBdLnNzcmM7XG4gIHZhciBzZWNvbmRhcnlTc3JjO1xuXG4gIHZhciBmbG93cyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYy1ncm91cDpGSUQnKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoMTcpLnNwbGl0KCcgJyk7XG4gICAgICByZXR1cm4gcGFydHMubWFwKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHBhcnQsIDEwKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICBpZiAoZmxvd3MubGVuZ3RoID4gMCAmJiBmbG93c1swXS5sZW5ndGggPiAxICYmIGZsb3dzWzBdWzBdID09PSBwcmltYXJ5U3NyYykge1xuICAgIHNlY29uZGFyeVNzcmMgPSBmbG93c1swXVsxXTtcbiAgfVxuXG4gIGRlc2NyaXB0aW9uLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgaWYgKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1JUWCcgJiYgY29kZWMucGFyYW1ldGVycy5hcHQpIHtcbiAgICAgIHZhciBlbmNQYXJhbSA9IHtcbiAgICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgICAgIGNvZGVjUGF5bG9hZFR5cGU6IHBhcnNlSW50KGNvZGVjLnBhcmFtZXRlcnMuYXB0LCAxMClcbiAgICAgIH07XG4gICAgICBpZiAocHJpbWFyeVNzcmMgJiYgc2Vjb25kYXJ5U3NyYykge1xuICAgICAgICBlbmNQYXJhbS5ydHggPSB7c3NyYzogc2Vjb25kYXJ5U3NyY307XG4gICAgICB9XG4gICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICBpZiAoaGFzUmVkKSB7XG4gICAgICAgIGVuY1BhcmFtID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbmNQYXJhbSkpO1xuICAgICAgICBlbmNQYXJhbS5mZWMgPSB7XG4gICAgICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgICAgICAgbWVjaGFuaXNtOiBoYXNVbHBmZWMgPyAncmVkK3VscGZlYycgOiAncmVkJ1xuICAgICAgICB9O1xuICAgICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgaWYgKGVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGggPT09IDAgJiYgcHJpbWFyeVNzcmMpIHtcbiAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaCh7XG4gICAgICBzc3JjOiBwcmltYXJ5U3NyY1xuICAgIH0pO1xuICB9XG5cbiAgLy8gd2Ugc3VwcG9ydCBib3RoIGI9QVMgYW5kIGI9VElBUyBidXQgaW50ZXJwcmV0IEFTIGFzIFRJQVMuXG4gIHZhciBiYW5kd2lkdGggPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdiPScpO1xuICBpZiAoYmFuZHdpZHRoLmxlbmd0aCkge1xuICAgIGlmIChiYW5kd2lkdGhbMF0uaW5kZXhPZignYj1USUFTOicpID09PSAwKSB7XG4gICAgICBiYW5kd2lkdGggPSBwYXJzZUludChiYW5kd2lkdGhbMF0uc3Vic3RyKDcpLCAxMCk7XG4gICAgfSBlbHNlIGlmIChiYW5kd2lkdGhbMF0uaW5kZXhPZignYj1BUzonKSA9PT0gMCkge1xuICAgICAgLy8gdXNlIGZvcm11bGEgZnJvbSBKU0VQIHRvIGNvbnZlcnQgYj1BUyB0byBUSUFTIHZhbHVlLlxuICAgICAgYmFuZHdpZHRoID0gcGFyc2VJbnQoYmFuZHdpZHRoWzBdLnN1YnN0cig1KSwgMTApICogMTAwMCAqIDAuOTVcbiAgICAgICAgICAtICg1MCAqIDQwICogOCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhbmR3aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZW5jb2RpbmdQYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICBwYXJhbXMubWF4Qml0cmF0ZSA9IGJhbmR3aWR0aDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZW5jb2RpbmdQYXJhbWV0ZXJzO1xufTtcblxuLy8gcGFyc2VzIGh0dHA6Ly9kcmFmdC5vcnRjLm9yZy8jcnRjcnRjcHBhcmFtZXRlcnMqXG5TRFBVdGlscy5wYXJzZVJ0Y3BQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBydGNwUGFyYW1ldGVycyA9IHt9O1xuXG4gIC8vIEdldHMgdGhlIGZpcnN0IFNTUkMuIE5vdGUgdGhhIHdpdGggUlRYIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlXG4gIC8vIFNTUkNzLlxuICB2YXIgcmVtb3RlU3NyYyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIFNEUFV0aWxzLnBhcnNlU3NyY01lZGlhKGxpbmUpO1xuICAgIH0pXG4gICAgLmZpbHRlcihmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmouYXR0cmlidXRlID09PSAnY25hbWUnO1xuICAgIH0pWzBdO1xuICBpZiAocmVtb3RlU3NyYykge1xuICAgIHJ0Y3BQYXJhbWV0ZXJzLmNuYW1lID0gcmVtb3RlU3NyYy52YWx1ZTtcbiAgICBydGNwUGFyYW1ldGVycy5zc3JjID0gcmVtb3RlU3NyYy5zc3JjO1xuICB9XG5cbiAgLy8gRWRnZSB1c2VzIHRoZSBjb21wb3VuZCBhdHRyaWJ1dGUgaW5zdGVhZCBvZiByZWR1Y2VkU2l6ZVxuICAvLyBjb21wb3VuZCBpcyAhcmVkdWNlZFNpemVcbiAgdmFyIHJzaXplID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLXJzaXplJyk7XG4gIHJ0Y3BQYXJhbWV0ZXJzLnJlZHVjZWRTaXplID0gcnNpemUubGVuZ3RoID4gMDtcbiAgcnRjcFBhcmFtZXRlcnMuY29tcG91bmQgPSByc2l6ZS5sZW5ndGggPT09IDA7XG5cbiAgLy8gcGFyc2VzIHRoZSBydGNwLW11eCBhdHRy0ZZidXRlLlxuICAvLyBOb3RlIHRoYXQgRWRnZSBkb2VzIG5vdCBzdXBwb3J0IHVubXV4ZWQgUlRDUC5cbiAgdmFyIG11eCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9cnRjcC1tdXgnKTtcbiAgcnRjcFBhcmFtZXRlcnMubXV4ID0gbXV4Lmxlbmd0aCA+IDA7XG5cbiAgcmV0dXJuIHJ0Y3BQYXJhbWV0ZXJzO1xufTtcblxuLy8gcGFyc2VzIGVpdGhlciBhPW1zaWQ6IG9yIGE9c3NyYzouLi4gbXNpZCBsaW5lcyBhbmQgcmV0dXJuc1xuLy8gdGhlIGlkIG9mIHRoZSBNZWRpYVN0cmVhbSBhbmQgTWVkaWFTdHJlYW1UcmFjay5cblNEUFV0aWxzLnBhcnNlTXNpZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgcGFydHM7XG4gIHZhciBzcGVjID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1tc2lkOicpO1xuICBpZiAoc3BlYy5sZW5ndGggPT09IDEpIHtcbiAgICBwYXJ0cyA9IHNwZWNbMF0uc3Vic3RyKDcpLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtzdHJlYW06IHBhcnRzWzBdLCB0cmFjazogcGFydHNbMV19O1xuICB9XG4gIHZhciBwbGFuQiA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIFNEUFV0aWxzLnBhcnNlU3NyY01lZGlhKGxpbmUpO1xuICAgIH0pXG4gICAgLmZpbHRlcihmdW5jdGlvbihtc2lkUGFydHMpIHtcbiAgICAgIHJldHVybiBtc2lkUGFydHMuYXR0cmlidXRlID09PSAnbXNpZCc7XG4gICAgfSk7XG4gIGlmIChwbGFuQi5sZW5ndGggPiAwKSB7XG4gICAgcGFydHMgPSBwbGFuQlswXS52YWx1ZS5zcGxpdCgnICcpO1xuICAgIHJldHVybiB7c3RyZWFtOiBwYXJ0c1swXSwgdHJhY2s6IHBhcnRzWzFdfTtcbiAgfVxufTtcblxuLy8gU0NUUFxuLy8gcGFyc2VzIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTI2IGZpcnN0IGFuZCBmYWxscyBiYWNrXG4vLyB0byBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0wNVxuU0RQVXRpbHMucGFyc2VTY3RwRGVzY3JpcHRpb24gPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIG1saW5lID0gU0RQVXRpbHMucGFyc2VNTGluZShtZWRpYVNlY3Rpb24pO1xuICB2YXIgbWF4U2l6ZUxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1heC1tZXNzYWdlLXNpemU6Jyk7XG4gIHZhciBtYXhNZXNzYWdlU2l6ZTtcbiAgaWYgKG1heFNpemVMaW5lLmxlbmd0aCA+IDApIHtcbiAgICBtYXhNZXNzYWdlU2l6ZSA9IHBhcnNlSW50KG1heFNpemVMaW5lWzBdLnN1YnN0cigxOSksIDEwKTtcbiAgfVxuICBpZiAoaXNOYU4obWF4TWVzc2FnZVNpemUpKSB7XG4gICAgbWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcbiAgfVxuICB2YXIgc2N0cFBvcnQgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNjdHAtcG9ydDonKTtcbiAgaWYgKHNjdHBQb3J0Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9ydDogcGFyc2VJbnQoc2N0cFBvcnRbMF0uc3Vic3RyKDEyKSwgMTApLFxuICAgICAgcHJvdG9jb2w6IG1saW5lLmZtdCxcbiAgICAgIG1heE1lc3NhZ2VTaXplOiBtYXhNZXNzYWdlU2l6ZVxuICAgIH07XG4gIH1cbiAgdmFyIHNjdHBNYXBMaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c2N0cG1hcDonKTtcbiAgaWYgKHNjdHBNYXBMaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHBhcnRzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zY3RwbWFwOicpWzBdXG4gICAgICAuc3Vic3RyKDEwKVxuICAgICAgLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzBdLCAxMCksXG4gICAgICBwcm90b2NvbDogcGFydHNbMV0sXG4gICAgICBtYXhNZXNzYWdlU2l6ZTogbWF4TWVzc2FnZVNpemVcbiAgICB9O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBvdXRwdXRzIHRoZSBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0yNiB2ZXJzaW9uIHRoYXQgYWxsIGJyb3dzZXJzXG4vLyBzdXBwb3J0IGJ5IG5vdyByZWNlaXZpbmcgaW4gdGhpcyBmb3JtYXQsIHVubGVzcyB3ZSBvcmlnaW5hbGx5IHBhcnNlZFxuLy8gYXMgdGhlIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1IGZvcm1hdCAoaW5kaWNhdGVkIGJ5IHRoZSBtLWxpbmVcbi8vIHByb3RvY29sIG9mIERUTFMvU0NUUCAtLSB3aXRob3V0IFVEUC8gb3IgVENQLylcblNEUFV0aWxzLndyaXRlU2N0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24obWVkaWEsIHNjdHApIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBpZiAobWVkaWEucHJvdG9jb2wgIT09ICdEVExTL1NDVFAnKSB7XG4gICAgb3V0cHV0ID0gW1xuICAgICAgJ209JyArIG1lZGlhLmtpbmQgKyAnIDkgJyArIG1lZGlhLnByb3RvY29sICsgJyAnICsgc2N0cC5wcm90b2NvbCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cC1wb3J0OicgKyBzY3RwLnBvcnQgKyAnXFxyXFxuJ1xuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0gW1xuICAgICAgJ209JyArIG1lZGlhLmtpbmQgKyAnIDkgJyArIG1lZGlhLnByb3RvY29sICsgJyAnICsgc2N0cC5wb3J0ICsgJ1xcclxcbicsXG4gICAgICAnYz1JTiBJUDQgMC4wLjAuMFxcclxcbicsXG4gICAgICAnYT1zY3RwbWFwOicgKyBzY3RwLnBvcnQgKyAnICcgKyBzY3RwLnByb3RvY29sICsgJyA2NTUzNVxcclxcbidcbiAgICBdO1xuICB9XG4gIGlmIChzY3RwLm1heE1lc3NhZ2VTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICBvdXRwdXQucHVzaCgnYT1tYXgtbWVzc2FnZS1zaXplOicgKyBzY3RwLm1heE1lc3NhZ2VTaXplICsgJ1xcclxcbicpO1xuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJyk7XG59O1xuXG4vLyBHZW5lcmF0ZSBhIHNlc3Npb24gSUQgZm9yIFNEUC5cbi8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLXJ0Y3dlYi1qc2VwLTIwI3NlY3Rpb24tNS4yLjFcbi8vIHJlY29tbWVuZHMgdXNpbmcgYSBjcnlwdG9ncmFwaGljYWxseSByYW5kb20gK3ZlIDY0LWJpdCB2YWx1ZVxuLy8gYnV0IHJpZ2h0IG5vdyB0aGlzIHNob3VsZCBiZSBhY2NlcHRhYmxlIGFuZCB3aXRoaW4gdGhlIHJpZ2h0IHJhbmdlXG5TRFBVdGlscy5nZW5lcmF0ZVNlc3Npb25JZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnN1YnN0cigyLCAyMSk7XG59O1xuXG4vLyBXcml0ZSBib2lsZGVyIHBsYXRlIGZvciBzdGFydCBvZiBTRFBcbi8vIHNlc3NJZCBhcmd1bWVudCBpcyBvcHRpb25hbCAtIGlmIG5vdCBzdXBwbGllZCBpdCB3aWxsXG4vLyBiZSBnZW5lcmF0ZWQgcmFuZG9tbHlcbi8vIHNlc3NWZXJzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byAyXG4vLyBzZXNzVXNlciBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gJ3RoaXNpc2FkYXB0ZXJvcnRjJ1xuU0RQVXRpbHMud3JpdGVTZXNzaW9uQm9pbGVycGxhdGUgPSBmdW5jdGlvbihzZXNzSWQsIHNlc3NWZXIsIHNlc3NVc2VyKSB7XG4gIHZhciBzZXNzaW9uSWQ7XG4gIHZhciB2ZXJzaW9uID0gc2Vzc1ZlciAhPT0gdW5kZWZpbmVkID8gc2Vzc1ZlciA6IDI7XG4gIGlmIChzZXNzSWQpIHtcbiAgICBzZXNzaW9uSWQgPSBzZXNzSWQ7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvbklkID0gU0RQVXRpbHMuZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgfVxuICB2YXIgdXNlciA9IHNlc3NVc2VyIHx8ICd0aGlzaXNhZGFwdGVyb3J0Yyc7XG4gIC8vIEZJWE1FOiBzZXNzLWlkIHNob3VsZCBiZSBhbiBOVFAgdGltZXN0YW1wLlxuICByZXR1cm4gJ3Y9MFxcclxcbicgK1xuICAgICAgJ289JyArIHVzZXIgKyAnICcgKyBzZXNzaW9uSWQgKyAnICcgKyB2ZXJzaW9uICtcbiAgICAgICAgJyBJTiBJUDQgMTI3LjAuMC4xXFxyXFxuJyArXG4gICAgICAncz0tXFxyXFxuJyArXG4gICAgICAndD0wIDBcXHJcXG4nO1xufTtcblxuU0RQVXRpbHMud3JpdGVNZWRpYVNlY3Rpb24gPSBmdW5jdGlvbih0cmFuc2NlaXZlciwgY2FwcywgdHlwZSwgc3RyZWFtKSB7XG4gIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uKHRyYW5zY2VpdmVyLmtpbmQsIGNhcHMpO1xuXG4gIC8vIE1hcCBJQ0UgcGFyYW1ldGVycyAodWZyYWcsIHB3ZCkgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVJY2VQYXJhbWV0ZXJzKFxuICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLmdldExvY2FsUGFyYW1ldGVycygpKTtcblxuICAvLyBNYXAgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cbiAgc2RwICs9IFNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMoXG4gICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5nZXRMb2NhbFBhcmFtZXRlcnMoKSxcbiAgICB0eXBlID09PSAnb2ZmZXInID8gJ2FjdHBhc3MnIDogJ2FjdGl2ZScpO1xuXG4gIHNkcCArPSAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcXHJcXG4nO1xuXG4gIGlmICh0cmFuc2NlaXZlci5kaXJlY3Rpb24pIHtcbiAgICBzZHAgKz0gJ2E9JyArIHRyYW5zY2VpdmVyLmRpcmVjdGlvbiArICdcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1zZW5kcmVjdlxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgc2RwICs9ICdhPXNlbmRvbmx5XFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1yZWN2b25seVxcclxcbic7XG4gIH0gZWxzZSB7XG4gICAgc2RwICs9ICdhPWluYWN0aXZlXFxyXFxuJztcbiAgfVxuXG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICAvLyBzcGVjLlxuICAgIHZhciBtc2lkID0gJ21zaWQ6JyArIHN0cmVhbS5pZCArICcgJyArXG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjay5pZCArICdcXHJcXG4nO1xuICAgIHNkcCArPSAnYT0nICsgbXNpZDtcblxuICAgIC8vIGZvciBDaHJvbWUuXG4gICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAgICcgJyArIG1zaWQ7XG4gICAgaWYgKHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICAgJyAnICsgbXNpZDtcbiAgICAgIHNkcCArPSAnYT1zc3JjLWdyb3VwOkZJRCAnICtcbiAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKyAnICcgK1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAgICdcXHJcXG4nO1xuICAgIH1cbiAgfVxuICAvLyBGSVhNRTogdGhpcyBzaG91bGQgYmUgd3JpdHRlbiBieSB3cml0ZVJ0cERlc2NyaXB0aW9uLlxuICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICtcbiAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXFxyXFxuJztcbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgJyBjbmFtZTonICsgU0RQVXRpbHMubG9jYWxDTmFtZSArICdcXHJcXG4nO1xuICB9XG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBHZXRzIHRoZSBkaXJlY3Rpb24gZnJvbSB0aGUgbWVkaWFTZWN0aW9uIG9yIHRoZSBzZXNzaW9ucGFydC5cblNEUFV0aWxzLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuXG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHN3aXRjaCAobGluZXNbaV0pIHtcbiAgICAgIGNhc2UgJ2E9c2VuZHJlY3YnOlxuICAgICAgY2FzZSAnYT1zZW5kb25seSc6XG4gICAgICBjYXNlICdhPXJlY3Zvbmx5JzpcbiAgICAgIGNhc2UgJ2E9aW5hY3RpdmUnOlxuICAgICAgICByZXR1cm4gbGluZXNbaV0uc3Vic3RyKDIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRklYTUU6IFdoYXQgc2hvdWxkIGhhcHBlbiBoZXJlP1xuICAgIH1cbiAgfVxuICBpZiAoc2Vzc2lvbnBhcnQpIHtcbiAgICByZXR1cm4gU0RQVXRpbHMuZ2V0RGlyZWN0aW9uKHNlc3Npb25wYXJ0KTtcbiAgfVxuICByZXR1cm4gJ3NlbmRyZWN2Jztcbn07XG5cblNEUFV0aWxzLmdldEtpbmQgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgbWxpbmUgPSBsaW5lc1swXS5zcGxpdCgnICcpO1xuICByZXR1cm4gbWxpbmVbMF0uc3Vic3RyKDIpO1xufTtcblxuU0RQVXRpbHMuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICByZXR1cm4gbWVkaWFTZWN0aW9uLnNwbGl0KCcgJywgMilbMV0gPT09ICcwJztcbn07XG5cblNEUFV0aWxzLnBhcnNlTUxpbmUgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgcGFydHMgPSBsaW5lc1swXS5zdWJzdHIoMikuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBwYXJ0c1swXSxcbiAgICBwb3J0OiBwYXJzZUludChwYXJ0c1sxXSwgMTApLFxuICAgIHByb3RvY29sOiBwYXJ0c1syXSxcbiAgICBmbXQ6IHBhcnRzLnNsaWNlKDMpLmpvaW4oJyAnKVxuICB9O1xufTtcblxuU0RQVXRpbHMucGFyc2VPTGluZSA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbGluZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ289JylbMF07XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWU6IHBhcnRzWzBdLFxuICAgIHNlc3Npb25JZDogcGFydHNbMV0sXG4gICAgc2Vzc2lvblZlcnNpb246IHBhcnNlSW50KHBhcnRzWzJdLCAxMCksXG4gICAgbmV0VHlwZTogcGFydHNbM10sXG4gICAgYWRkcmVzc1R5cGU6IHBhcnRzWzRdLFxuICAgIGFkZHJlc3M6IHBhcnRzWzVdXG4gIH07XG59O1xuXG4vLyBhIHZlcnkgbmFpdmUgaW50ZXJwcmV0YXRpb24gb2YgYSB2YWxpZCBTRFAuXG5TRFBVdGlscy5pc1ZhbGlkU0RQID0gZnVuY3Rpb24oYmxvYikge1xuICBpZiAodHlwZW9mIGJsb2IgIT09ICdzdHJpbmcnIHx8IGJsb2IubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGluZXNbaV0ubGVuZ3RoIDwgMiB8fCBsaW5lc1tpXS5jaGFyQXQoMSkgIT09ICc9Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUT0RPOiBjaGVjayB0aGUgbW9kaWZpZXIgYSBiaXQgbW9yZS5cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFNEUFV0aWxzO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2FkYXB0ZXJGYWN0b3J5fSBmcm9tICcuL2FkYXB0ZXJfZmFjdG9yeS5qcyc7XG5cbmNvbnN0IGFkYXB0ZXIgPVxuICBhZGFwdGVyRmFjdG9yeSh7d2luZG93OiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IHdpbmRvd30pO1xuZXhwb3J0IGRlZmF1bHQgYWRhcHRlcjtcbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbiAgLy8gQnJvd3NlciBzaGltcy5cbmltcG9ydCAqIGFzIGNocm9tZVNoaW0gZnJvbSAnLi9jaHJvbWUvY2hyb21lX3NoaW0nO1xuaW1wb3J0ICogYXMgZWRnZVNoaW0gZnJvbSAnLi9lZGdlL2VkZ2Vfc2hpbSc7XG5pbXBvcnQgKiBhcyBmaXJlZm94U2hpbSBmcm9tICcuL2ZpcmVmb3gvZmlyZWZveF9zaGltJztcbmltcG9ydCAqIGFzIHNhZmFyaVNoaW0gZnJvbSAnLi9zYWZhcmkvc2FmYXJpX3NoaW0nO1xuaW1wb3J0ICogYXMgY29tbW9uU2hpbSBmcm9tICcuL2NvbW1vbl9zaGltJztcblxuLy8gU2hpbW1pbmcgc3RhcnRzIGhlcmUuXG5leHBvcnQgZnVuY3Rpb24gYWRhcHRlckZhY3Rvcnkoe3dpbmRvd30gPSB7fSwgb3B0aW9ucyA9IHtcbiAgc2hpbUNocm9tZTogdHJ1ZSxcbiAgc2hpbUZpcmVmb3g6IHRydWUsXG4gIHNoaW1FZGdlOiB0cnVlLFxuICBzaGltU2FmYXJpOiB0cnVlLFxufSkge1xuICAvLyBVdGlscy5cbiAgY29uc3QgbG9nZ2luZyA9IHV0aWxzLmxvZztcbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG5cbiAgY29uc3QgYWRhcHRlciA9IHtcbiAgICBicm93c2VyRGV0YWlscyxcbiAgICBjb21tb25TaGltLFxuICAgIGV4dHJhY3RWZXJzaW9uOiB1dGlscy5leHRyYWN0VmVyc2lvbixcbiAgICBkaXNhYmxlTG9nOiB1dGlscy5kaXNhYmxlTG9nLFxuICAgIGRpc2FibGVXYXJuaW5nczogdXRpbHMuZGlzYWJsZVdhcm5pbmdzXG4gIH07XG5cbiAgLy8gU2hpbSBicm93c2VyIGlmIGZvdW5kLlxuICBzd2l0Y2ggKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIpIHtcbiAgICBjYXNlICdjaHJvbWUnOlxuICAgICAgaWYgKCFjaHJvbWVTaGltIHx8ICFjaHJvbWVTaGltLnNoaW1QZWVyQ29ubmVjdGlvbiB8fFxuICAgICAgICAgICFvcHRpb25zLnNoaW1DaHJvbWUpIHtcbiAgICAgICAgbG9nZ2luZygnQ2hyb21lIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uID09PSBudWxsKSB7XG4gICAgICAgIGxvZ2dpbmcoJ0Nocm9tZSBzaGltIGNhbiBub3QgZGV0ZXJtaW5lIHZlcnNpb24sIG5vdCBzaGltbWluZy4nKTtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXI7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIGNocm9tZS4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gY2hyb21lU2hpbTtcblxuICAgICAgY2hyb21lU2hpbS5zaGltR2V0VXNlck1lZGlhKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1NZWRpYVN0cmVhbSh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltUGVlckNvbm5lY3Rpb24od2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbU9uVHJhY2sod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2sod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbUdldFNlbmRlcnNXaXRoRHRtZih3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltR2V0U3RhdHMod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbVNlbmRlclJlY2VpdmVyR2V0U3RhdHMod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uZml4TmVnb3RpYXRpb25OZWVkZWQod2luZG93KTtcblxuICAgICAgY29tbW9uU2hpbS5zaGltUlRDSWNlQ2FuZGlkYXRlKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1Db25uZWN0aW9uU3RhdGUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbU1heE1lc3NhZ2VTaXplKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1TZW5kVGhyb3dUeXBlRXJyb3Iod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0ucmVtb3ZlQWxsb3dFeHRtYXBNaXhlZCh3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmlyZWZveCc6XG4gICAgICBpZiAoIWZpcmVmb3hTaGltIHx8ICFmaXJlZm94U2hpbS5zaGltUGVlckNvbm5lY3Rpb24gfHxcbiAgICAgICAgICAhb3B0aW9ucy5zaGltRmlyZWZveCkge1xuICAgICAgICBsb2dnaW5nKCdGaXJlZm94IHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgZmlyZWZveC4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gZmlyZWZveFNoaW07XG5cbiAgICAgIGZpcmVmb3hTaGltLnNoaW1HZXRVc2VyTWVkaWEod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbU9uVHJhY2sod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1SZW1vdmVTdHJlYW0od2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1TZW5kZXJHZXRTdGF0cyh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVJlY2VpdmVyR2V0U3RhdHMod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1SVENEYXRhQ2hhbm5lbCh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbUFkZFRyYW5zY2VpdmVyKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltR2V0UGFyYW1ldGVycyh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbUNyZWF0ZU9mZmVyKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltQ3JlYXRlQW5zd2VyKHdpbmRvdyk7XG5cbiAgICAgIGNvbW1vblNoaW0uc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltQ29ubmVjdGlvblN0YXRlKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1NYXhNZXNzYWdlU2l6ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltU2VuZFRocm93VHlwZUVycm9yKHdpbmRvdyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlZGdlJzpcbiAgICAgIGlmICghZWRnZVNoaW0gfHwgIWVkZ2VTaGltLnNoaW1QZWVyQ29ubmVjdGlvbiB8fCAhb3B0aW9ucy5zaGltRWRnZSkge1xuICAgICAgICBsb2dnaW5nKCdNUyBlZGdlIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgZWRnZS4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gZWRnZVNoaW07XG5cbiAgICAgIGVkZ2VTaGltLnNoaW1HZXRVc2VyTWVkaWEod2luZG93KTtcbiAgICAgIGVkZ2VTaGltLnNoaW1HZXREaXNwbGF5TWVkaWEod2luZG93KTtcbiAgICAgIGVkZ2VTaGltLnNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbVJlcGxhY2VUcmFjayh3aW5kb3cpO1xuXG4gICAgICAvLyB0aGUgZWRnZSBzaGltIGltcGxlbWVudHMgdGhlIGZ1bGwgUlRDSWNlQ2FuZGlkYXRlIG9iamVjdC5cblxuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2FmYXJpJzpcbiAgICAgIGlmICghc2FmYXJpU2hpbSB8fCAhb3B0aW9ucy5zaGltU2FmYXJpKSB7XG4gICAgICAgIGxvZ2dpbmcoJ1NhZmFyaSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXI7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIHNhZmFyaS4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gc2FmYXJpU2hpbTtcblxuICAgICAgc2FmYXJpU2hpbS5zaGltUlRDSWNlU2VydmVyVXJscyh3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltQ3JlYXRlT2ZmZXJMZWdhY3kod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbUNhbGxiYWNrc0FQSSh3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltTG9jYWxTdHJlYW1zQVBJKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1SZW1vdGVTdHJlYW1zQVBJKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1UcmFja0V2ZW50VHJhbnNjZWl2ZXIod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltQXVkaW9Db250ZXh0KHdpbmRvdyk7XG5cbiAgICAgIGNvbW1vblNoaW0uc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5yZW1vdmVBbGxvd0V4dG1hcE1peGVkKHdpbmRvdyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2luZygnVW5zdXBwb3J0ZWQgYnJvd3NlciEnKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuZXhwb3J0IHtzaGltR2V0VXNlck1lZGlhfSBmcm9tICcuL2dldHVzZXJtZWRpYSc7XG5leHBvcnQge3NoaW1HZXREaXNwbGF5TWVkaWF9IGZyb20gJy4vZ2V0ZGlzcGxheW1lZGlhJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1NZWRpYVN0cmVhbSh3aW5kb3cpIHtcbiAgd2luZG93Lk1lZGlhU3RyZWFtID0gd2luZG93Lk1lZGlhU3RyZWFtIHx8IHdpbmRvdy53ZWJraXRNZWRpYVN0cmVhbTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1PblRyYWNrKHdpbmRvdykge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmICEoJ29udHJhY2snIGluXG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnb250cmFjaycsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29udHJhY2s7XG4gICAgICB9LFxuICAgICAgc2V0KGYpIHtcbiAgICAgICAgaWYgKHRoaXMuX29udHJhY2spIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb250cmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2sgPSBmKTtcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgY29uc3Qgb3JpZ1NldFJlbW90ZURlc2NyaXB0aW9uID1cbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID1cbiAgICAgIGZ1bmN0aW9uIHNldFJlbW90ZURlc2NyaXB0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuX29udHJhY2twb2x5KSB7XG4gICAgICAgICAgdGhpcy5fb250cmFja3BvbHkgPSAoZSkgPT4ge1xuICAgICAgICAgICAgLy8gb25hZGRzdHJlYW0gZG9lcyBub3QgZmlyZSB3aGVuIGEgdHJhY2sgaXMgYWRkZWQgdG8gYW4gZXhpc3RpbmdcbiAgICAgICAgICAgIC8vIHN0cmVhbS4gQnV0IHN0cmVhbS5vbmFkZHRyYWNrIGlzIGltcGxlbWVudGVkIHNvIHdlIHVzZSB0aGF0LlxuICAgICAgICAgICAgZS5zdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcignYWRkdHJhY2snLCB0ZSA9PiB7XG4gICAgICAgICAgICAgIGxldCByZWNlaXZlcjtcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIgPSB0aGlzLmdldFJlY2VpdmVycygpXG4gICAgICAgICAgICAgICAgICAuZmluZChyID0+IHIudHJhY2sgJiYgci50cmFjay5pZCA9PT0gdGUudHJhY2suaWQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0ge3RyYWNrOiB0ZS50cmFja307XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCgndHJhY2snKTtcbiAgICAgICAgICAgICAgZXZlbnQudHJhY2sgPSB0ZS50cmFjaztcbiAgICAgICAgICAgICAgZXZlbnQucmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICAgICAgICAgICAgZXZlbnQudHJhbnNjZWl2ZXIgPSB7cmVjZWl2ZXJ9O1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW1zID0gW2Uuc3RyZWFtXTtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZS5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICAgICAgICAgIGxldCByZWNlaXZlcjtcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIgPSB0aGlzLmdldFJlY2VpdmVycygpXG4gICAgICAgICAgICAgICAgICAuZmluZChyID0+IHIudHJhY2sgJiYgci50cmFjay5pZCA9PT0gdHJhY2suaWQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0ge3RyYWNrfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCgndHJhY2snKTtcbiAgICAgICAgICAgICAgZXZlbnQudHJhY2sgPSB0cmFjaztcbiAgICAgICAgICAgICAgZXZlbnQucmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICAgICAgICAgICAgZXZlbnQudHJhbnNjZWl2ZXIgPSB7cmVjZWl2ZXJ9O1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW1zID0gW2Uuc3RyZWFtXTtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBldmVuIGlmIFJUQ1J0cFRyYW5zY2VpdmVyIGlzIGluIHdpbmRvdywgaXQgaXMgb25seSB1c2VkIGFuZFxuICAgIC8vIGVtaXR0ZWQgaW4gdW5pZmllZC1wbGFuLiBVbmZvcnR1bmF0ZWx5IHRoaXMgbWVhbnMgd2UgbmVlZFxuICAgIC8vIHRvIHVuY29uZGl0aW9uYWxseSB3cmFwIHRoZSBldmVudC5cbiAgICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGUgPT4ge1xuICAgICAgaWYgKCFlLnRyYW5zY2VpdmVyKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAndHJhbnNjZWl2ZXInLFxuICAgICAgICAgIHt2YWx1ZToge3JlY2VpdmVyOiBlLnJlY2VpdmVyfX0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXRTZW5kZXJzV2l0aER0bWYod2luZG93KSB7XG4gIC8vIE92ZXJyaWRlcyBhZGRUcmFjay9yZW1vdmVUcmFjaywgZGVwZW5kcyBvbiBzaGltQWRkVHJhY2tSZW1vdmVUcmFjay5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgISgnZ2V0U2VuZGVycycgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkgJiZcbiAgICAgICdjcmVhdGVEVE1GU2VuZGVyJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgY29uc3Qgc2hpbVNlbmRlcldpdGhEdG1mID0gZnVuY3Rpb24ocGMsIHRyYWNrKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmFjayxcbiAgICAgICAgZ2V0IGR0bWYoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2R0bWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZHRtZiA9IHBjLmNyZWF0ZURUTUZTZW5kZXIodHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fZHRtZiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9kdG1mO1xuICAgICAgICB9LFxuICAgICAgICBfcGM6IHBjXG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvLyBhdWdtZW50IGFkZFRyYWNrIHdoZW4gZ2V0U2VuZGVycyBpcyBub3QgYXZhaWxhYmxlLlxuICAgIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzKSB7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnMgPSBmdW5jdGlvbiBnZXRTZW5kZXJzKCkge1xuICAgICAgICB0aGlzLl9zZW5kZXJzID0gdGhpcy5fc2VuZGVycyB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRlcnMuc2xpY2UoKTsgLy8gcmV0dXJuIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgc3RhdGUuXG4gICAgICB9O1xuICAgICAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPVxuICAgICAgICBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaywgc3RyZWFtKSB7XG4gICAgICAgICAgbGV0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIGlmICghc2VuZGVyKSB7XG4gICAgICAgICAgICBzZW5kZXIgPSBzaGltU2VuZGVyV2l0aER0bWYodGhpcywgdHJhY2spO1xuICAgICAgICAgICAgdGhpcy5fc2VuZGVycy5wdXNoKHNlbmRlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZW5kZXI7XG4gICAgICAgIH07XG5cbiAgICAgIGNvbnN0IG9yaWdSZW1vdmVUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2s7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrID1cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVHJhY2soc2VuZGVyKSB7XG4gICAgICAgICAgb3JpZ1JlbW92ZVRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5fc2VuZGVycy5pbmRleE9mKHNlbmRlcik7XG4gICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBvcmlnQWRkU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbiBhZGRTdHJlYW0oc3RyZWFtKSB7XG4gICAgICB0aGlzLl9zZW5kZXJzID0gdGhpcy5fc2VuZGVycyB8fCBbXTtcbiAgICAgIG9yaWdBZGRTdHJlYW0uYXBwbHkodGhpcywgW3N0cmVhbV0pO1xuICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICB0aGlzLl9zZW5kZXJzLnB1c2goc2hpbVNlbmRlcldpdGhEdG1mKHRoaXMsIHRyYWNrKSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID1cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgdGhpcy5fc2VuZGVycyA9IHRoaXMuX3NlbmRlcnMgfHwgW107XG4gICAgICAgIG9yaWdSZW1vdmVTdHJlYW0uYXBwbHkodGhpcywgW3N0cmVhbV0pO1xuXG4gICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgICBjb25zdCBzZW5kZXIgPSB0aGlzLl9zZW5kZXJzLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICAgICAgaWYgKHNlbmRlcikgeyAvLyByZW1vdmUgc2VuZGVyXG4gICAgICAgICAgICB0aGlzLl9zZW5kZXJzLnNwbGljZSh0aGlzLl9zZW5kZXJzLmluZGV4T2Yoc2VuZGVyKSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICAgICAgICAgJ2dldFNlbmRlcnMnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgJiZcbiAgICAgICAgICAgICAnY3JlYXRlRFRNRlNlbmRlcicgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSAmJlxuICAgICAgICAgICAgIHdpbmRvdy5SVENSdHBTZW5kZXIgJiZcbiAgICAgICAgICAgICAhKCdkdG1mJyBpbiB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSkpIHtcbiAgICBjb25zdCBvcmlnR2V0U2VuZGVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycztcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnMgPSBmdW5jdGlvbiBnZXRTZW5kZXJzKCkge1xuICAgICAgY29uc3Qgc2VuZGVycyA9IG9yaWdHZXRTZW5kZXJzLmFwcGx5KHRoaXMsIFtdKTtcbiAgICAgIHNlbmRlcnMuZm9yRWFjaChzZW5kZXIgPT4gc2VuZGVyLl9wYyA9IHRoaXMpO1xuICAgICAgcmV0dXJuIHNlbmRlcnM7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSwgJ2R0bWYnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gdGhpcy5fcGMuY3JlYXRlRFRNRlNlbmRlcih0aGlzLnRyYWNrKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZHRtZiA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kdG1mO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0U3RhdHMod2luZG93KSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3JpZ0dldFN0YXRzID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cztcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uIGdldFN0YXRzKCkge1xuICAgIGNvbnN0IFtzZWxlY3Rvciwgb25TdWNjLCBvbkVycl0gPSBhcmd1bWVudHM7XG5cbiAgICAvLyBJZiBzZWxlY3RvciBpcyBhIGZ1bmN0aW9uIHRoZW4gd2UgYXJlIGluIHRoZSBvbGQgc3R5bGUgc3RhdHMgc28ganVzdFxuICAgIC8vIHBhc3MgYmFjayB0aGUgb3JpZ2luYWwgZ2V0U3RhdHMgZm9ybWF0IHRvIGF2b2lkIGJyZWFraW5nIG9sZCB1c2Vycy5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gV2hlbiBzcGVjLXN0eWxlIGdldFN0YXRzIGlzIHN1cHBvcnRlZCwgcmV0dXJuIHRob3NlIHdoZW4gY2FsbGVkIHdpdGhcbiAgICAvLyBlaXRoZXIgbm8gYXJndW1lbnRzIG9yIHRoZSBzZWxlY3RvciBhcmd1bWVudCBpcyBudWxsLlxuICAgIGlmIChvcmlnR2V0U3RhdHMubGVuZ3RoID09PSAwICYmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgW10pO1xuICAgIH1cblxuICAgIGNvbnN0IGZpeENocm9tZVN0YXRzXyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICBjb25zdCBzdGFuZGFyZFJlcG9ydCA9IHt9O1xuICAgICAgY29uc3QgcmVwb3J0cyA9IHJlc3BvbnNlLnJlc3VsdCgpO1xuICAgICAgcmVwb3J0cy5mb3JFYWNoKHJlcG9ydCA9PiB7XG4gICAgICAgIGNvbnN0IHN0YW5kYXJkU3RhdHMgPSB7XG4gICAgICAgICAgaWQ6IHJlcG9ydC5pZCxcbiAgICAgICAgICB0aW1lc3RhbXA6IHJlcG9ydC50aW1lc3RhbXAsXG4gICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgbG9jYWxjYW5kaWRhdGU6ICdsb2NhbC1jYW5kaWRhdGUnLFxuICAgICAgICAgICAgcmVtb3RlY2FuZGlkYXRlOiAncmVtb3RlLWNhbmRpZGF0ZSdcbiAgICAgICAgICB9W3JlcG9ydC50eXBlXSB8fCByZXBvcnQudHlwZVxuICAgICAgICB9O1xuICAgICAgICByZXBvcnQubmFtZXMoKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgIHN0YW5kYXJkU3RhdHNbbmFtZV0gPSByZXBvcnQuc3RhdChuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YW5kYXJkUmVwb3J0W3N0YW5kYXJkU3RhdHMuaWRdID0gc3RhbmRhcmRTdGF0cztcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc3RhbmRhcmRSZXBvcnQ7XG4gICAgfTtcblxuICAgIC8vIHNoaW0gZ2V0U3RhdHMgd2l0aCBtYXBsaWtlIHN1cHBvcnRcbiAgICBjb25zdCBtYWtlTWFwU3RhdHMgPSBmdW5jdGlvbihzdGF0cykge1xuICAgICAgcmV0dXJuIG5ldyBNYXAoT2JqZWN0LmtleXMoc3RhdHMpLm1hcChrZXkgPT4gW2tleSwgc3RhdHNba2V5XV0pKTtcbiAgICB9O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgY29uc3Qgc3VjY2Vzc0NhbGxiYWNrV3JhcHBlcl8gPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBvblN1Y2MobWFrZU1hcFN0YXRzKGZpeENocm9tZVN0YXRzXyhyZXNwb25zZSkpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgW3N1Y2Nlc3NDYWxsYmFja1dyYXBwZXJfLFxuICAgICAgICBzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIC8vIHByb21pc2Utc3VwcG9ydFxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgW1xuICAgICAgICBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHJlc29sdmUobWFrZU1hcFN0YXRzKGZpeENocm9tZVN0YXRzXyhyZXNwb25zZSkpKTtcbiAgICAgICAgfSwgcmVqZWN0XSk7XG4gICAgfSkudGhlbihvblN1Y2MsIG9uRXJyKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1TZW5kZXJSZWNlaXZlckdldFN0YXRzKHdpbmRvdykge1xuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgIHdpbmRvdy5SVENSdHBTZW5kZXIgJiYgd2luZG93LlJUQ1J0cFJlY2VpdmVyKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNoaW0gc2VuZGVyIHN0YXRzLlxuICBpZiAoISgnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSkge1xuICAgIGNvbnN0IG9yaWdHZXRTZW5kZXJzID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzO1xuICAgIGlmIChvcmlnR2V0U2VuZGVycykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24gZ2V0U2VuZGVycygpIHtcbiAgICAgICAgY29uc3Qgc2VuZGVycyA9IG9yaWdHZXRTZW5kZXJzLmFwcGx5KHRoaXMsIFtdKTtcbiAgICAgICAgc2VuZGVycy5mb3JFYWNoKHNlbmRlciA9PiBzZW5kZXIuX3BjID0gdGhpcyk7XG4gICAgICAgIHJldHVybiBzZW5kZXJzO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnQWRkVHJhY2sgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrO1xuICAgIGlmIChvcmlnQWRkVHJhY2spIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPSBmdW5jdGlvbiBhZGRUcmFjaygpIHtcbiAgICAgICAgY29uc3Qgc2VuZGVyID0gb3JpZ0FkZFRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHNlbmRlci5fcGMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gc2VuZGVyO1xuICAgICAgfTtcbiAgICB9XG4gICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICAgIGNvbnN0IHNlbmRlciA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5fcGMuZ2V0U3RhdHMoKS50aGVuKHJlc3VsdCA9PlxuICAgICAgICAvKiBOb3RlOiB0aGlzIHdpbGwgaW5jbHVkZSBzdGF0cyBvZiBhbGwgc2VuZGVycyB0aGF0XG4gICAgICAgICAqICAgc2VuZCBhIHRyYWNrIHdpdGggdGhlIHNhbWUgaWQgYXMgc2VuZGVyLnRyYWNrIGFzXG4gICAgICAgICAqICAgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGlkZW50aWZ5IHRoZSBSVENSdHBTZW5kZXIuXG4gICAgICAgICAqL1xuICAgICAgICB1dGlscy5maWx0ZXJTdGF0cyhyZXN1bHQsIHNlbmRlci50cmFjaywgdHJ1ZSkpO1xuICAgIH07XG4gIH1cblxuICAvLyBzaGltIHJlY2VpdmVyIHN0YXRzLlxuICBpZiAoISgnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUpKSB7XG4gICAgY29uc3Qgb3JpZ0dldFJlY2VpdmVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzO1xuICAgIGlmIChvcmlnR2V0UmVjZWl2ZXJzKSB7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycyA9XG4gICAgICAgIGZ1bmN0aW9uIGdldFJlY2VpdmVycygpIHtcbiAgICAgICAgICBjb25zdCByZWNlaXZlcnMgPSBvcmlnR2V0UmVjZWl2ZXJzLmFwcGx5KHRoaXMsIFtdKTtcbiAgICAgICAgICByZWNlaXZlcnMuZm9yRWFjaChyZWNlaXZlciA9PiByZWNlaXZlci5fcGMgPSB0aGlzKTtcbiAgICAgICAgICByZXR1cm4gcmVjZWl2ZXJzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGUgPT4ge1xuICAgICAgZS5yZWNlaXZlci5fcGMgPSBlLnNyY0VsZW1lbnQ7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgICB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgICBjb25zdCByZWNlaXZlciA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5fcGMuZ2V0U3RhdHMoKS50aGVuKHJlc3VsdCA9PlxuICAgICAgICB1dGlscy5maWx0ZXJTdGF0cyhyZXN1bHQsIHJlY2VpdmVyLnRyYWNrLCBmYWxzZSkpO1xuICAgIH07XG4gIH1cblxuICBpZiAoISgnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlICYmXG4gICAgICAnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc2hpbSBSVENQZWVyQ29ubmVjdGlvbi5nZXRTdGF0cyh0cmFjaykuXG4gIGNvbnN0IG9yaWdHZXRTdGF0cyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgYXJndW1lbnRzWzBdIGluc3RhbmNlb2Ygd2luZG93Lk1lZGlhU3RyZWFtVHJhY2spIHtcbiAgICAgIGNvbnN0IHRyYWNrID0gYXJndW1lbnRzWzBdO1xuICAgICAgbGV0IHNlbmRlcjtcbiAgICAgIGxldCByZWNlaXZlcjtcbiAgICAgIGxldCBlcnI7XG4gICAgICB0aGlzLmdldFNlbmRlcnMoKS5mb3JFYWNoKHMgPT4ge1xuICAgICAgICBpZiAocy50cmFjayA9PT0gdHJhY2spIHtcbiAgICAgICAgICBpZiAoc2VuZGVyKSB7XG4gICAgICAgICAgICBlcnIgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZW5kZXIgPSBzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmdldFJlY2VpdmVycygpLmZvckVhY2gociA9PiB7XG4gICAgICAgIGlmIChyLnRyYWNrID09PSB0cmFjaykge1xuICAgICAgICAgIGlmIChyZWNlaXZlcikge1xuICAgICAgICAgICAgZXJyID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjZWl2ZXIgPSByO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gci50cmFjayA9PT0gdHJhY2s7XG4gICAgICB9KTtcbiAgICAgIGlmIChlcnIgfHwgKHNlbmRlciAmJiByZWNlaXZlcikpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ1RoZXJlIGFyZSBtb3JlIHRoYW4gb25lIHNlbmRlciBvciByZWNlaXZlciBmb3IgdGhlIHRyYWNrLicsXG4gICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VuZGVyKSB7XG4gICAgICAgIHJldHVybiBzZW5kZXIuZ2V0U3RhdHMoKTtcbiAgICAgIH0gZWxzZSBpZiAocmVjZWl2ZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgJ1RoZXJlIGlzIG5vIHNlbmRlciBvciByZWNlaXZlciBmb3IgdGhlIHRyYWNrLicsXG4gICAgICAgICdJbnZhbGlkQWNjZXNzRXJyb3InKSk7XG4gICAgfVxuICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1BZGRUcmFja1JlbW92ZVRyYWNrV2l0aE5hdGl2ZSh3aW5kb3cpIHtcbiAgLy8gc2hpbSBhZGRUcmFjay9yZW1vdmVUcmFjayB3aXRoIG5hdGl2ZSB2YXJpYW50cyBpbiBvcmRlciB0byBtYWtlXG4gIC8vIHRoZSBpbnRlcmFjdGlvbnMgd2l0aCBsZWdhY3kgZ2V0TG9jYWxTdHJlYW1zIGJlaGF2ZSBhcyBpbiBvdGhlciBicm93c2Vycy5cbiAgLy8gS2VlcHMgYSBtYXBwaW5nIHN0cmVhbS5pZCA9PiBbc3RyZWFtLCBydHBzZW5kZXJzLi4uXVxuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldExvY2FsU3RyZWFtcyA9XG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxTdHJlYW1zKCkge1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcylcbiAgICAgICAgLm1hcChzdHJlYW1JZCA9PiB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXVswXSk7XG4gICAgfTtcblxuICBjb25zdCBvcmlnQWRkVHJhY2sgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID1cbiAgICBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaywgc3RyZWFtKSB7XG4gICAgICBpZiAoIXN0cmVhbSkge1xuICAgICAgICByZXR1cm4gb3JpZ0FkZFRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zID0gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyB8fCB7fTtcblxuICAgICAgY29uc3Qgc2VuZGVyID0gb3JpZ0FkZFRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoIXRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtLmlkXSkge1xuICAgICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0gPSBbc3RyZWFtLCBzZW5kZXJdO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0uaW5kZXhPZihzZW5kZXIpID09PSAtMSkge1xuICAgICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0ucHVzaChzZW5kZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbmRlcjtcbiAgICB9O1xuXG4gIGNvbnN0IG9yaWdBZGRTdHJlYW0gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbiBhZGRTdHJlYW0oc3RyZWFtKSB7XG4gICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG5cbiAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICBjb25zdCBhbHJlYWR5RXhpc3RzID0gdGhpcy5nZXRTZW5kZXJzKCkuZmluZChzID0+IHMudHJhY2sgPT09IHRyYWNrKTtcbiAgICAgIGlmIChhbHJlYWR5RXhpc3RzKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1RyYWNrIGFscmVhZHkgZXhpc3RzLicsXG4gICAgICAgICAgICAnSW52YWxpZEFjY2Vzc0Vycm9yJyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZXhpc3RpbmdTZW5kZXJzID0gdGhpcy5nZXRTZW5kZXJzKCk7XG4gICAgb3JpZ0FkZFN0cmVhbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGNvbnN0IG5ld1NlbmRlcnMgPSB0aGlzLmdldFNlbmRlcnMoKVxuICAgICAgLmZpbHRlcihuZXdTZW5kZXIgPT4gZXhpc3RpbmdTZW5kZXJzLmluZGV4T2YobmV3U2VuZGVyKSA9PT0gLTEpO1xuICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtLmlkXSA9IFtzdHJlYW1dLmNvbmNhdChuZXdTZW5kZXJzKTtcbiAgfTtcblxuICBjb25zdCBvcmlnUmVtb3ZlU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID1cbiAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zID0gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyB8fCB7fTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgICByZXR1cm4gb3JpZ1JlbW92ZVN0cmVhbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgY29uc3Qgb3JpZ1JlbW92ZVRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjaztcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjayA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlVHJhY2soc2VuZGVyKSB7XG4gICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zID0gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyB8fCB7fTtcbiAgICAgIGlmIChzZW5kZXIpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcykuZm9yRWFjaChzdHJlYW1JZCA9PiB7XG4gICAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW1JZF0uaW5kZXhPZihzZW5kZXIpO1xuICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ1JlbW92ZVRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1BZGRUcmFja1JlbW92ZVRyYWNrKHdpbmRvdykge1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcbiAgLy8gc2hpbSBhZGRUcmFjayBhbmQgcmVtb3ZlVHJhY2suXG4gIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrICYmXG4gICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uID49IDY1KSB7XG4gICAgcmV0dXJuIHNoaW1BZGRUcmFja1JlbW92ZVRyYWNrV2l0aE5hdGl2ZSh3aW5kb3cpO1xuICB9XG5cbiAgLy8gYWxzbyBzaGltIHBjLmdldExvY2FsU3RyZWFtcyB3aGVuIGFkZFRyYWNrIGlzIHNoaW1tZWRcbiAgLy8gdG8gcmV0dXJuIHRoZSBvcmlnaW5hbCBzdHJlYW1zLlxuICBjb25zdCBvcmlnR2V0TG9jYWxTdHJlYW1zID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVxuICAgICAgLmdldExvY2FsU3RyZWFtcztcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXMgPVxuICAgIGZ1bmN0aW9uIGdldExvY2FsU3RyZWFtcygpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZVN0cmVhbXMgPSBvcmlnR2V0TG9jYWxTdHJlYW1zLmFwcGx5KHRoaXMpO1xuICAgICAgdGhpcy5fcmV2ZXJzZVN0cmVhbXMgPSB0aGlzLl9yZXZlcnNlU3RyZWFtcyB8fCB7fTtcbiAgICAgIHJldHVybiBuYXRpdmVTdHJlYW1zLm1hcChzdHJlYW0gPT4gdGhpcy5fcmV2ZXJzZVN0cmVhbXNbc3RyZWFtLmlkXSk7XG4gICAgfTtcblxuICBjb25zdCBvcmlnQWRkU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24gYWRkU3RyZWFtKHN0cmVhbSkge1xuICAgIHRoaXMuX3N0cmVhbXMgPSB0aGlzLl9zdHJlYW1zIHx8IHt9O1xuICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zID0gdGhpcy5fcmV2ZXJzZVN0cmVhbXMgfHwge307XG5cbiAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICBjb25zdCBhbHJlYWR5RXhpc3RzID0gdGhpcy5nZXRTZW5kZXJzKCkuZmluZChzID0+IHMudHJhY2sgPT09IHRyYWNrKTtcbiAgICAgIGlmIChhbHJlYWR5RXhpc3RzKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1RyYWNrIGFscmVhZHkgZXhpc3RzLicsXG4gICAgICAgICAgICAnSW52YWxpZEFjY2Vzc0Vycm9yJyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gQWRkIGlkZW50aXR5IG1hcHBpbmcgZm9yIGNvbnNpc3RlbmN5IHdpdGggYWRkVHJhY2suXG4gICAgLy8gVW5sZXNzIHRoaXMgaXMgYmVpbmcgdXNlZCB3aXRoIGEgc3RyZWFtIGZyb20gYWRkVHJhY2suXG4gICAgaWYgKCF0aGlzLl9yZXZlcnNlU3RyZWFtc1tzdHJlYW0uaWRdKSB7XG4gICAgICBjb25zdCBuZXdTdHJlYW0gPSBuZXcgd2luZG93Lk1lZGlhU3RyZWFtKHN0cmVhbS5nZXRUcmFja3MoKSk7XG4gICAgICB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF0gPSBuZXdTdHJlYW07XG4gICAgICB0aGlzLl9yZXZlcnNlU3RyZWFtc1tuZXdTdHJlYW0uaWRdID0gc3RyZWFtO1xuICAgICAgc3RyZWFtID0gbmV3U3RyZWFtO1xuICAgIH1cbiAgICBvcmlnQWRkU3RyZWFtLmFwcGx5KHRoaXMsIFtzdHJlYW1dKTtcbiAgfTtcblxuICBjb25zdCBvcmlnUmVtb3ZlU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID1cbiAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zID0gdGhpcy5fcmV2ZXJzZVN0cmVhbXMgfHwge307XG5cbiAgICAgIG9yaWdSZW1vdmVTdHJlYW0uYXBwbHkodGhpcywgWyh0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF0gfHwgc3RyZWFtKV0pO1xuICAgICAgZGVsZXRlIHRoaXMuX3JldmVyc2VTdHJlYW1zWyh0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF0gP1xuICAgICAgICAgIHRoaXMuX3N0cmVhbXNbc3RyZWFtLmlkXS5pZCA6IHN0cmVhbS5pZCldO1xuICAgICAgZGVsZXRlIHRoaXMuX3N0cmVhbXNbc3RyZWFtLmlkXTtcbiAgICB9O1xuXG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPVxuICAgIGZ1bmN0aW9uIGFkZFRyYWNrKHRyYWNrLCBzdHJlYW0pIHtcbiAgICAgIGlmICh0aGlzLnNpZ25hbGluZ1N0YXRlID09PSAnY2xvc2VkJykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFxuICAgICAgICAgICdUaGUgUlRDUGVlckNvbm5lY3Rpb25cXCdzIHNpZ25hbGluZ1N0YXRlIGlzIFxcJ2Nsb3NlZFxcJy4nLFxuICAgICAgICAgICdJbnZhbGlkU3RhdGVFcnJvcicpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RyZWFtcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIGlmIChzdHJlYW1zLmxlbmd0aCAhPT0gMSB8fFxuICAgICAgICAgICFzdHJlYW1zWzBdLmdldFRyYWNrcygpLmZpbmQodCA9PiB0ID09PSB0cmFjaykpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgZnVsbHkgY29ycmVjdCBidXQgYWxsIHdlIGNhbiBtYW5hZ2Ugd2l0aG91dFxuICAgICAgICAvLyBbW2Fzc29jaWF0ZWQgTWVkaWFTdHJlYW1zXV0gaW50ZXJuYWwgc2xvdC5cbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnVGhlIGFkYXB0ZXIuanMgYWRkVHJhY2sgcG9seWZpbGwgb25seSBzdXBwb3J0cyBhIHNpbmdsZSAnICtcbiAgICAgICAgICAnIHN0cmVhbSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCB0cmFjay4nLFxuICAgICAgICAgICdOb3RTdXBwb3J0ZWRFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhbHJlYWR5RXhpc3RzID0gdGhpcy5nZXRTZW5kZXJzKCkuZmluZChzID0+IHMudHJhY2sgPT09IHRyYWNrKTtcbiAgICAgIGlmIChhbHJlYWR5RXhpc3RzKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1RyYWNrIGFscmVhZHkgZXhpc3RzLicsXG4gICAgICAgICAgICAnSW52YWxpZEFjY2Vzc0Vycm9yJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0cmVhbXMgPSB0aGlzLl9zdHJlYW1zIHx8IHt9O1xuICAgICAgdGhpcy5fcmV2ZXJzZVN0cmVhbXMgPSB0aGlzLl9yZXZlcnNlU3RyZWFtcyB8fCB7fTtcbiAgICAgIGNvbnN0IG9sZFN0cmVhbSA9IHRoaXMuX3N0cmVhbXNbc3RyZWFtLmlkXTtcbiAgICAgIGlmIChvbGRTdHJlYW0pIHtcbiAgICAgICAgLy8gdGhpcyBpcyB1c2luZyBvZGQgQ2hyb21lIGJlaGF2aW91ciwgdXNlIHdpdGggY2F1dGlvbjpcbiAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3dlYnJ0Yy9pc3N1ZXMvZGV0YWlsP2lkPTc4MTVcbiAgICAgICAgLy8gTm90ZTogd2UgcmVseSBvbiB0aGUgaGlnaC1sZXZlbCBhZGRUcmFjay9kdG1mIHNoaW0gdG9cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBzZW5kZXIgd2l0aCBhIGR0bWYgc2VuZGVyLlxuICAgICAgICBvbGRTdHJlYW0uYWRkVHJhY2sodHJhY2spO1xuXG4gICAgICAgIC8vIFRyaWdnZXIgT05OIGFzeW5jLlxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCduZWdvdGlhdGlvbm5lZWRlZCcpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdTdHJlYW0gPSBuZXcgd2luZG93Lk1lZGlhU3RyZWFtKFt0cmFja10pO1xuICAgICAgICB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF0gPSBuZXdTdHJlYW07XG4gICAgICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zW25ld1N0cmVhbS5pZF0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMuYWRkU3RyZWFtKG5ld1N0cmVhbSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5nZXRTZW5kZXJzKCkuZmluZChzID0+IHMudHJhY2sgPT09IHRyYWNrKTtcbiAgICB9O1xuXG4gIC8vIHJlcGxhY2UgdGhlIGludGVybmFsIHN0cmVhbSBpZCB3aXRoIHRoZSBleHRlcm5hbCBvbmUgYW5kXG4gIC8vIHZpY2UgdmVyc2EuXG4gIGZ1bmN0aW9uIHJlcGxhY2VJbnRlcm5hbFN0cmVhbUlkKHBjLCBkZXNjcmlwdGlvbikge1xuICAgIGxldCBzZHAgPSBkZXNjcmlwdGlvbi5zZHA7XG4gICAgT2JqZWN0LmtleXMocGMuX3JldmVyc2VTdHJlYW1zIHx8IFtdKS5mb3JFYWNoKGludGVybmFsSWQgPT4ge1xuICAgICAgY29uc3QgZXh0ZXJuYWxTdHJlYW0gPSBwYy5fcmV2ZXJzZVN0cmVhbXNbaW50ZXJuYWxJZF07XG4gICAgICBjb25zdCBpbnRlcm5hbFN0cmVhbSA9IHBjLl9zdHJlYW1zW2V4dGVybmFsU3RyZWFtLmlkXTtcbiAgICAgIHNkcCA9IHNkcC5yZXBsYWNlKG5ldyBSZWdFeHAoaW50ZXJuYWxTdHJlYW0uaWQsICdnJyksXG4gICAgICAgICAgZXh0ZXJuYWxTdHJlYW0uaWQpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgIHR5cGU6IGRlc2NyaXB0aW9uLnR5cGUsXG4gICAgICBzZHBcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZXBsYWNlRXh0ZXJuYWxTdHJlYW1JZChwYywgZGVzY3JpcHRpb24pIHtcbiAgICBsZXQgc2RwID0gZGVzY3JpcHRpb24uc2RwO1xuICAgIE9iamVjdC5rZXlzKHBjLl9yZXZlcnNlU3RyZWFtcyB8fCBbXSkuZm9yRWFjaChpbnRlcm5hbElkID0+IHtcbiAgICAgIGNvbnN0IGV4dGVybmFsU3RyZWFtID0gcGMuX3JldmVyc2VTdHJlYW1zW2ludGVybmFsSWRdO1xuICAgICAgY29uc3QgaW50ZXJuYWxTdHJlYW0gPSBwYy5fc3RyZWFtc1tleHRlcm5hbFN0cmVhbS5pZF07XG4gICAgICBzZHAgPSBzZHAucmVwbGFjZShuZXcgUmVnRXhwKGV4dGVybmFsU3RyZWFtLmlkLCAnZycpLFxuICAgICAgICAgIGludGVybmFsU3RyZWFtLmlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgc2RwXG4gICAgfSk7XG4gIH1cbiAgWydjcmVhdGVPZmZlcicsICdjcmVhdGVBbnN3ZXInXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIGNvbnN0IG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICBjb25zdCBtZXRob2RPYmogPSB7W21ldGhvZF0oKSB7XG4gICAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgY29uc3QgaXNMZWdhY3lDYWxsID0gYXJndW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICAgIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoaXNMZWdhY3lDYWxsKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgW1xuICAgICAgICAgIChkZXNjcmlwdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVzYyA9IHJlcGxhY2VJbnRlcm5hbFN0cmVhbUlkKHRoaXMsIGRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGFyZ3NbMF0uYXBwbHkobnVsbCwgW2Rlc2NdKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChhcmdzWzFdKSB7XG4gICAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBhcmd1bWVudHNbMl1cbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIC50aGVuKGRlc2NyaXB0aW9uID0+IHJlcGxhY2VJbnRlcm5hbFN0cmVhbUlkKHRoaXMsIGRlc2NyaXB0aW9uKSk7XG4gICAgfX07XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gbWV0aG9kT2JqW21ldGhvZF07XG4gIH0pO1xuXG4gIGNvbnN0IG9yaWdTZXRMb2NhbERlc2NyaXB0aW9uID1cbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uID1cbiAgICBmdW5jdGlvbiBzZXRMb2NhbERlc2NyaXB0aW9uKCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoIHx8ICFhcmd1bWVudHNbMF0udHlwZSkge1xuICAgICAgICByZXR1cm4gb3JpZ1NldExvY2FsRGVzY3JpcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGFyZ3VtZW50c1swXSA9IHJlcGxhY2VFeHRlcm5hbFN0cmVhbUlkKHRoaXMsIGFyZ3VtZW50c1swXSk7XG4gICAgICByZXR1cm4gb3JpZ1NldExvY2FsRGVzY3JpcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gIC8vIFRPRE86IG1hbmdsZSBnZXRTdGF0czogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1zdGF0cy8jZG9tLXJ0Y21lZGlhc3RyZWFtc3RhdHMtc3RyZWFtaWRlbnRpZmllclxuXG4gIGNvbnN0IG9yaWdMb2NhbERlc2NyaXB0aW9uID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdsb2NhbERlc2NyaXB0aW9uJyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLFxuICAgICAgJ2xvY2FsRGVzY3JpcHRpb24nLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IG9yaWdMb2NhbERlc2NyaXB0aW9uLmdldC5hcHBseSh0aGlzKTtcbiAgICAgICAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2VJbnRlcm5hbFN0cmVhbUlkKHRoaXMsIGRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjayA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlVHJhY2soc2VuZGVyKSB7XG4gICAgICBpZiAodGhpcy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnVGhlIFJUQ1BlZXJDb25uZWN0aW9uXFwncyBzaWduYWxpbmdTdGF0ZSBpcyBcXCdjbG9zZWRcXCcuJyxcbiAgICAgICAgICAnSW52YWxpZFN0YXRlRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGNhbiBub3QgeWV0IGNoZWNrIGZvciBzZW5kZXIgaW5zdGFuY2VvZiBSVENSdHBTZW5kZXJcbiAgICAgIC8vIHNpbmNlIHdlIHNoaW0gUlRQU2VuZGVyLiBTbyB3ZSBjaGVjayBpZiBzZW5kZXIuX3BjIGlzIHNldC5cbiAgICAgIGlmICghc2VuZGVyLl9wYykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdBcmd1bWVudCAxIG9mIFJUQ1BlZXJDb25uZWN0aW9uLnJlbW92ZVRyYWNrICcgK1xuICAgICAgICAgICAgJ2RvZXMgbm90IGltcGxlbWVudCBpbnRlcmZhY2UgUlRDUnRwU2VuZGVyLicsICdUeXBlRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzTG9jYWwgPSBzZW5kZXIuX3BjID09PSB0aGlzO1xuICAgICAgaWYgKCFpc0xvY2FsKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1NlbmRlciB3YXMgbm90IGNyZWF0ZWQgYnkgdGhpcyBjb25uZWN0aW9uLicsXG4gICAgICAgICAgICAnSW52YWxpZEFjY2Vzc0Vycm9yJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlYXJjaCBmb3IgdGhlIG5hdGl2ZSBzdHJlYW0gdGhlIHNlbmRlcnMgdHJhY2sgYmVsb25ncyB0by5cbiAgICAgIHRoaXMuX3N0cmVhbXMgPSB0aGlzLl9zdHJlYW1zIHx8IHt9O1xuICAgICAgbGV0IHN0cmVhbTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3N0cmVhbXMpLmZvckVhY2goc3RyZWFtaWQgPT4ge1xuICAgICAgICBjb25zdCBoYXNUcmFjayA9IHRoaXMuX3N0cmVhbXNbc3RyZWFtaWRdLmdldFRyYWNrcygpXG4gICAgICAgICAgLmZpbmQodHJhY2sgPT4gc2VuZGVyLnRyYWNrID09PSB0cmFjayk7XG4gICAgICAgIGlmIChoYXNUcmFjaykge1xuICAgICAgICAgIHN0cmVhbSA9IHRoaXMuX3N0cmVhbXNbc3RyZWFtaWRdO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICBpZiAoc3RyZWFtLmdldFRyYWNrcygpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgdGhlIGxhc3QgdHJhY2sgb2YgdGhlIHN0cmVhbSwgcmVtb3ZlIHRoZSBzdHJlYW0uIFRoaXNcbiAgICAgICAgICAvLyB0YWtlcyBjYXJlIG9mIGFueSBzaGltbWVkIF9zZW5kZXJzLlxuICAgICAgICAgIHRoaXMucmVtb3ZlU3RyZWFtKHRoaXMuX3JldmVyc2VTdHJlYW1zW3N0cmVhbS5pZF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlbHlpbmcgb24gdGhlIHNhbWUgb2RkIGNocm9tZSBiZWhhdmlvdXIgYXMgYWJvdmUuXG4gICAgICAgICAgc3RyZWFtLnJlbW92ZVRyYWNrKHNlbmRlci50cmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnKSk7XG4gICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpIHtcbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG5cbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiYgd2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgLy8gdmVyeSBiYXNpYyBzdXBwb3J0IGZvciBvbGQgdmVyc2lvbnMuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gd2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uO1xuICB9XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWRkSWNlQ2FuZGlkYXRlTnVsbFN1cHBvcnRlZCA9XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUubGVuZ3RoID09PSAwO1xuXG4gIC8vIHNoaW0gaW1wbGljaXQgY3JlYXRpb24gb2YgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uL1JUQ0ljZUNhbmRpZGF0ZVxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDUzKSB7XG4gICAgWydzZXRMb2NhbERlc2NyaXB0aW9uJywgJ3NldFJlbW90ZURlc2NyaXB0aW9uJywgJ2FkZEljZUNhbmRpZGF0ZSddXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIGNvbnN0IG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgICBjb25zdCBtZXRob2RPYmogPSB7W21ldGhvZF0oKSB7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBuZXcgKChtZXRob2QgPT09ICdhZGRJY2VDYW5kaWRhdGUnKSA/XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA6XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9fTtcbiAgICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBtZXRob2RPYmpbbWV0aG9kXTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvLyBzdXBwb3J0IGZvciBhZGRJY2VDYW5kaWRhdGUobnVsbCBvciB1bmRlZmluZWQpXG4gIGNvbnN0IG5hdGl2ZUFkZEljZUNhbmRpZGF0ZSA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPVxuICAgIGZ1bmN0aW9uIGFkZEljZUNhbmRpZGF0ZSgpIHtcbiAgICAgIGlmICghYWRkSWNlQ2FuZGlkYXRlTnVsbFN1cHBvcnRlZCAmJiAhYXJndW1lbnRzWzBdKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBhcmd1bWVudHNbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgLy8gRmlyZWZveCA2OCsgZW1pdHMgYW5kIHByb2Nlc3NlcyB7Y2FuZGlkYXRlOiBcIlwiLCAuLi59LCBpZ25vcmVcbiAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zLiBOYXRpdmUgc3VwcG9ydCBwbGFubmVkIGZvciBDaHJvbWUgTTc3LlxuICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA3OCAmJlxuICAgICAgICBhcmd1bWVudHNbMF0gJiYgYXJndW1lbnRzWzBdLmNhbmRpZGF0ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUFkZEljZUNhbmRpZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8vIEF0dGVtcHQgdG8gZml4IE9OTiBpbiBwbGFuLWIgbW9kZS5cbmV4cG9ydCBmdW5jdGlvbiBmaXhOZWdvdGlhdGlvbk5lZWRlZCh3aW5kb3cpIHtcbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG4gIHV0aWxzLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgJ25lZ290aWF0aW9ubmVlZGVkJywgZSA9PiB7XG4gICAgY29uc3QgcGMgPSBlLnRhcmdldDtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDcyIHx8IChwYy5nZXRDb25maWd1cmF0aW9uICYmXG4gICAgICAgIHBjLmdldENvbmZpZ3VyYXRpb24oKS5zZHBTZW1hbnRpY3MgPT09ICdwbGFuLWInKSkge1xuICAgICAgaWYgKHBjLnNpZ25hbGluZ1N0YXRlICE9PSAnc3RhYmxlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9KTtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBhZGFwdGVyLmpzIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXREaXNwbGF5TWVkaWEod2luZG93LCBnZXRTb3VyY2VJZCkge1xuICBpZiAod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAnZ2V0RGlzcGxheU1lZGlhJyBpbiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoISh3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0U291cmNlSWQgaXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB3aXRoXG4gIC8vIHRoZSBzb3VyY2VJZCBvZiB0aGUgc2NyZWVuL3dpbmRvdy90YWIgdG8gYmUgc2hhcmVkLlxuICBpZiAodHlwZW9mIGdldFNvdXJjZUlkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcignc2hpbUdldERpc3BsYXlNZWRpYTogZ2V0U291cmNlSWQgYXJndW1lbnQgaXMgbm90ICcgK1xuICAgICAgICAnYSBmdW5jdGlvbicpO1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPVxuICAgIGZ1bmN0aW9uIGdldERpc3BsYXlNZWRpYShjb25zdHJhaW50cykge1xuICAgICAgcmV0dXJuIGdldFNvdXJjZUlkKGNvbnN0cmFpbnRzKVxuICAgICAgICAudGhlbihzb3VyY2VJZCA9PiB7XG4gICAgICAgICAgY29uc3Qgd2lkdGhTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJiBjb25zdHJhaW50cy52aWRlby53aWR0aDtcbiAgICAgICAgICBjb25zdCBoZWlnaHRTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJlxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uaGVpZ2h0O1xuICAgICAgICAgIGNvbnN0IGZyYW1lUmF0ZVNwZWNpZmllZCA9IGNvbnN0cmFpbnRzLnZpZGVvICYmXG4gICAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5mcmFtZVJhdGU7XG4gICAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSB7XG4gICAgICAgICAgICBtYW5kYXRvcnk6IHtcbiAgICAgICAgICAgICAgY2hyb21lTWVkaWFTb3VyY2U6ICdkZXNrdG9wJyxcbiAgICAgICAgICAgICAgY2hyb21lTWVkaWFTb3VyY2VJZDogc291cmNlSWQsXG4gICAgICAgICAgICAgIG1heEZyYW1lUmF0ZTogZnJhbWVSYXRlU3BlY2lmaWVkIHx8IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh3aWR0aFNwZWNpZmllZCkge1xuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8ubWFuZGF0b3J5Lm1heFdpZHRoID0gd2lkdGhTcGVjaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZWlnaHRTcGVjaWZpZWQpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLm1hbmRhdG9yeS5tYXhIZWlnaHQgPSBoZWlnaHRTcGVjaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmNvbnN0IGxvZ2dpbmcgPSB1dGlscy5sb2c7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0VXNlck1lZGlhKHdpbmRvdykge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcblxuICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBjb25zdCBjb25zdHJhaW50c1RvQ2hyb21lXyA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAodHlwZW9mIGMgIT09ICdvYmplY3QnIHx8IGMubWFuZGF0b3J5IHx8IGMub3B0aW9uYWwpIHtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICBjb25zdCBjYyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICdyZXF1aXJlJyB8fCBrZXkgPT09ICdhZHZhbmNlZCcgfHwga2V5ID09PSAnbWVkaWFTb3VyY2UnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHIgPSAodHlwZW9mIGNba2V5XSA9PT0gJ29iamVjdCcpID8gY1trZXldIDoge2lkZWFsOiBjW2tleV19O1xuICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgci5taW4gPSByLm1heCA9IHIuZXhhY3Q7XG4gICAgICB9XG4gICAgICBjb25zdCBvbGRuYW1lXyA9IGZ1bmN0aW9uKHByZWZpeCwgbmFtZSkge1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgcmV0dXJuIHByZWZpeCArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmFtZSA9PT0gJ2RldmljZUlkJykgPyAnc291cmNlSWQnIDogbmFtZTtcbiAgICAgIH07XG4gICAgICBpZiAoci5pZGVhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNjLm9wdGlvbmFsID0gY2Mub3B0aW9uYWwgfHwgW107XG4gICAgICAgIGxldCBvYyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHIuaWRlYWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJ21pbicsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgICBvYyA9IHt9O1xuICAgICAgICAgIG9jW29sZG5hbWVfKCdtYXgnLCBrZXkpXSA9IHIuaWRlYWw7XG4gICAgICAgICAgY2Mub3B0aW9uYWwucHVzaChvYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJycsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY2MubWFuZGF0b3J5ID0gY2MubWFuZGF0b3J5IHx8IHt9O1xuICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8oJycsIGtleSldID0gci5leGFjdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFsnbWluJywgJ21heCddLmZvckVhY2gobWl4ID0+IHtcbiAgICAgICAgICBpZiAoclttaXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNjLm1hbmRhdG9yeSA9IGNjLm1hbmRhdG9yeSB8fCB7fTtcbiAgICAgICAgICAgIGNjLm1hbmRhdG9yeVtvbGRuYW1lXyhtaXgsIGtleSldID0gclttaXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGMuYWR2YW5jZWQpIHtcbiAgICAgIGNjLm9wdGlvbmFsID0gKGNjLm9wdGlvbmFsIHx8IFtdKS5jb25jYXQoYy5hZHZhbmNlZCk7XG4gICAgfVxuICAgIHJldHVybiBjYztcbiAgfTtcblxuICBjb25zdCBzaGltQ29uc3RyYWludHNfID0gZnVuY3Rpb24oY29uc3RyYWludHMsIGZ1bmMpIHtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2MSkge1xuICAgICAgcmV0dXJuIGZ1bmMoY29uc3RyYWludHMpO1xuICAgIH1cbiAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICBpZiAoY29uc3RyYWludHMgJiYgdHlwZW9mIGNvbnN0cmFpbnRzLmF1ZGlvID09PSAnb2JqZWN0Jykge1xuICAgICAgY29uc3QgcmVtYXAgPSBmdW5jdGlvbihvYmosIGEsIGIpIHtcbiAgICAgICAgaWYgKGEgaW4gb2JqICYmICEoYiBpbiBvYmopKSB7XG4gICAgICAgICAgb2JqW2JdID0gb2JqW2FdO1xuICAgICAgICAgIGRlbGV0ZSBvYmpbYV07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICAgIHJlbWFwKGNvbnN0cmFpbnRzLmF1ZGlvLCAnYXV0b0dhaW5Db250cm9sJywgJ2dvb2dBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgIHJlbWFwKGNvbnN0cmFpbnRzLmF1ZGlvLCAnbm9pc2VTdXBwcmVzc2lvbicsICdnb29nTm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgY29uc3RyYWludHMuYXVkaW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy5hdWRpbyk7XG4gICAgfVxuICAgIGlmIChjb25zdHJhaW50cyAmJiB0eXBlb2YgY29uc3RyYWludHMudmlkZW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBTaGltIGZhY2luZ01vZGUgZm9yIG1vYmlsZSAmIHN1cmZhY2UgcHJvLlxuICAgICAgbGV0IGZhY2UgPSBjb25zdHJhaW50cy52aWRlby5mYWNpbmdNb2RlO1xuICAgICAgZmFjZSA9IGZhY2UgJiYgKCh0eXBlb2YgZmFjZSA9PT0gJ29iamVjdCcpID8gZmFjZSA6IHtpZGVhbDogZmFjZX0pO1xuICAgICAgY29uc3QgZ2V0U3VwcG9ydGVkRmFjaW5nTW9kZUxpZXMgPSBicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNjY7XG5cbiAgICAgIGlmICgoZmFjZSAmJiAoZmFjZS5leGFjdCA9PT0gJ3VzZXInIHx8IGZhY2UuZXhhY3QgPT09ICdlbnZpcm9ubWVudCcgfHxcbiAgICAgICAgICAgICAgICAgICAgZmFjZS5pZGVhbCA9PT0gJ3VzZXInIHx8IGZhY2UuaWRlYWwgPT09ICdlbnZpcm9ubWVudCcpKSAmJlxuICAgICAgICAgICEobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cyAmJlxuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpLmZhY2luZ01vZGUgJiZcbiAgICAgICAgICAgICFnZXRTdXBwb3J0ZWRGYWNpbmdNb2RlTGllcykpIHtcbiAgICAgICAgZGVsZXRlIGNvbnN0cmFpbnRzLnZpZGVvLmZhY2luZ01vZGU7XG4gICAgICAgIGxldCBtYXRjaGVzO1xuICAgICAgICBpZiAoZmFjZS5leGFjdCA9PT0gJ2Vudmlyb25tZW50JyB8fCBmYWNlLmlkZWFsID09PSAnZW52aXJvbm1lbnQnKSB7XG4gICAgICAgICAgbWF0Y2hlcyA9IFsnYmFjaycsICdyZWFyJ107XG4gICAgICAgIH0gZWxzZSBpZiAoZmFjZS5leGFjdCA9PT0gJ3VzZXInIHx8IGZhY2UuaWRlYWwgPT09ICd1c2VyJykge1xuICAgICAgICAgIG1hdGNoZXMgPSBbJ2Zyb250J107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAvLyBMb29rIGZvciBtYXRjaGVzIGluIGxhYmVsLCBvciB1c2UgbGFzdCBjYW0gZm9yIGJhY2sgKHR5cGljYWwpLlxuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKVxuICAgICAgICAgIC50aGVuKGRldmljZXMgPT4ge1xuICAgICAgICAgICAgZGV2aWNlcyA9IGRldmljZXMuZmlsdGVyKGQgPT4gZC5raW5kID09PSAndmlkZW9pbnB1dCcpO1xuICAgICAgICAgICAgbGV0IGRldiA9IGRldmljZXMuZmluZChkID0+IG1hdGNoZXMuc29tZShtYXRjaCA9PlxuICAgICAgICAgICAgICBkLmxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobWF0Y2gpKSk7XG4gICAgICAgICAgICBpZiAoIWRldiAmJiBkZXZpY2VzLmxlbmd0aCAmJiBtYXRjaGVzLmluY2x1ZGVzKCdiYWNrJykpIHtcbiAgICAgICAgICAgICAgZGV2ID0gZGV2aWNlc1tkZXZpY2VzLmxlbmd0aCAtIDFdOyAvLyBtb3JlIGxpa2VseSB0aGUgYmFjayBjYW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZXYpIHtcbiAgICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uZGV2aWNlSWQgPSBmYWNlLmV4YWN0ID8ge2V4YWN0OiBkZXYuZGV2aWNlSWR9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkZWFsOiBkZXYuZGV2aWNlSWR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgICAgICAgICBsb2dnaW5nKCdjaHJvbWU6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoY29uc3RyYWludHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLnZpZGVvKTtcbiAgICB9XG4gICAgbG9nZ2luZygnY2hyb21lOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICByZXR1cm4gZnVuYyhjb25zdHJhaW50cyk7XG4gIH07XG5cbiAgY29uc3Qgc2hpbUVycm9yXyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2NCkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIFBlcm1pc3Npb25EZW5pZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIFBlcm1pc3Npb25EaXNtaXNzZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIEludmFsaWRTdGF0ZUVycm9yOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICAgICAgRGV2aWNlc05vdEZvdW5kRXJyb3I6ICdOb3RGb3VuZEVycm9yJyxcbiAgICAgICAgQ29uc3RyYWludE5vdFNhdGlzZmllZEVycm9yOiAnT3ZlcmNvbnN0cmFpbmVkRXJyb3InLFxuICAgICAgICBUcmFja1N0YXJ0RXJyb3I6ICdOb3RSZWFkYWJsZUVycm9yJyxcbiAgICAgICAgTWVkaWFEZXZpY2VGYWlsZWREdWVUb1NodXRkb3duOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICAgICAgTWVkaWFEZXZpY2VLaWxsU3dpdGNoT246ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgICBUYWJDYXB0dXJlRXJyb3I6ICdBYm9ydEVycm9yJyxcbiAgICAgICAgU2NyZWVuQ2FwdHVyZUVycm9yOiAnQWJvcnRFcnJvcicsXG4gICAgICAgIERldmljZUNhcHR1cmVFcnJvcjogJ0Fib3J0RXJyb3InXG4gICAgICB9W2UubmFtZV0gfHwgZS5uYW1lLFxuICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgY29uc3RyYWludDogZS5jb25zdHJhaW50IHx8IGUuY29uc3RyYWludE5hbWUsXG4gICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArICh0aGlzLm1lc3NhZ2UgJiYgJzogJykgKyB0aGlzLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBnZXRVc2VyTWVkaWFfID0gZnVuY3Rpb24oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICAgIHNoaW1Db25zdHJhaW50c18oY29uc3RyYWludHMsIGMgPT4ge1xuICAgICAgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYShjLCBvblN1Y2Nlc3MsIGUgPT4ge1xuICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgIG9uRXJyb3Ioc2hpbUVycm9yXyhlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZ2V0VXNlck1lZGlhXy5iaW5kKG5hdmlnYXRvcik7XG5cbiAgLy8gRXZlbiB0aG91Z2ggQ2hyb21lIDQ1IGhhcyBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzIGFuZCBhIGdldFVzZXJNZWRpYVxuICAvLyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgUHJvbWlzZSwgaXQgZG9lcyBub3QgYWNjZXB0IHNwZWMtc3R5bGVcbiAgLy8gY29uc3RyYWludHMuXG4gIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIGNvbnN0IG9yaWdHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5cbiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNzKSB7XG4gICAgICByZXR1cm4gc2hpbUNvbnN0cmFpbnRzXyhjcywgYyA9PiBvcmlnR2V0VXNlck1lZGlhKGMpLnRoZW4oc3RyZWFtID0+IHtcbiAgICAgICAgaWYgKGMuYXVkaW8gJiYgIXN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCB8fFxuICAgICAgICAgICAgYy52aWRlbyAmJiAhc3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKSB7XG4gICAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJycsICdOb3RGb3VuZEVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sIGUgPT4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSkpKTtcbiAgICB9O1xuICB9XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNyBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgU0RQVXRpbHMgZnJvbSAnc2RwJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpIHtcbiAgLy8gZm91bmRhdGlvbiBpcyBhcmJpdHJhcmlseSBjaG9zZW4gYXMgYW4gaW5kaWNhdG9yIGZvciBmdWxsIHN1cHBvcnQgZm9yXG4gIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtcGMvI3J0Y2ljZWNhbmRpZGF0ZS1pbnRlcmZhY2VcbiAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlIHx8ICh3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlICYmICdmb3VuZGF0aW9uJyBpblxuICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgTmF0aXZlUlRDSWNlQ2FuZGlkYXRlID0gd2luZG93LlJUQ0ljZUNhbmRpZGF0ZTtcbiAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uIFJUQ0ljZUNhbmRpZGF0ZShhcmdzKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBhPSB3aGljaCBzaG91bGRuJ3QgYmUgcGFydCBvZiB0aGUgY2FuZGlkYXRlIHN0cmluZy5cbiAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdvYmplY3QnICYmIGFyZ3MuY2FuZGlkYXRlICYmXG4gICAgICAgIGFyZ3MuY2FuZGlkYXRlLmluZGV4T2YoJ2E9JykgPT09IDApIHtcbiAgICAgIGFyZ3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFyZ3MpKTtcbiAgICAgIGFyZ3MuY2FuZGlkYXRlID0gYXJncy5jYW5kaWRhdGUuc3Vic3RyKDIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmNhbmRpZGF0ZSAmJiBhcmdzLmNhbmRpZGF0ZS5sZW5ndGgpIHtcbiAgICAgIC8vIEF1Z21lbnQgdGhlIG5hdGl2ZSBjYW5kaWRhdGUgd2l0aCB0aGUgcGFyc2VkIGZpZWxkcy5cbiAgICAgIGNvbnN0IG5hdGl2ZUNhbmRpZGF0ZSA9IG5ldyBOYXRpdmVSVENJY2VDYW5kaWRhdGUoYXJncyk7XG4gICAgICBjb25zdCBwYXJzZWRDYW5kaWRhdGUgPSBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShhcmdzLmNhbmRpZGF0ZSk7XG4gICAgICBjb25zdCBhdWdtZW50ZWRDYW5kaWRhdGUgPSBPYmplY3QuYXNzaWduKG5hdGl2ZUNhbmRpZGF0ZSxcbiAgICAgICAgICBwYXJzZWRDYW5kaWRhdGUpO1xuXG4gICAgICAvLyBBZGQgYSBzZXJpYWxpemVyIHRoYXQgZG9lcyBub3Qgc2VyaWFsaXplIHRoZSBleHRyYSBhdHRyaWJ1dGVzLlxuICAgICAgYXVnbWVudGVkQ2FuZGlkYXRlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjYW5kaWRhdGU6IGF1Z21lbnRlZENhbmRpZGF0ZS5jYW5kaWRhdGUsXG4gICAgICAgICAgc2RwTWlkOiBhdWdtZW50ZWRDYW5kaWRhdGUuc2RwTWlkLFxuICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGF1Z21lbnRlZENhbmRpZGF0ZS5zZHBNTGluZUluZGV4LFxuICAgICAgICAgIHVzZXJuYW1lRnJhZ21lbnQ6IGF1Z21lbnRlZENhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50LFxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIHJldHVybiBhdWdtZW50ZWRDYW5kaWRhdGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTmF0aXZlUlRDSWNlQ2FuZGlkYXRlKGFyZ3MpO1xuICB9O1xuICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlLnByb3RvdHlwZSA9IE5hdGl2ZVJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGU7XG5cbiAgLy8gSG9vayB1cCB0aGUgYXVnbWVudGVkIGNhbmRpZGF0ZSBpbiBvbmljZWNhbmRpZGF0ZSBhbmRcbiAgLy8gYWRkRXZlbnRMaXN0ZW5lcignaWNlY2FuZGlkYXRlJywgLi4uKVxuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICdpY2VjYW5kaWRhdGUnLCBlID0+IHtcbiAgICBpZiAoZS5jYW5kaWRhdGUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAnY2FuZGlkYXRlJywge1xuICAgICAgICB2YWx1ZTogbmV3IHdpbmRvdy5SVENJY2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpLFxuICAgICAgICB3cml0YWJsZTogJ2ZhbHNlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1NYXhNZXNzYWdlU2l6ZSh3aW5kb3cpIHtcbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG5cbiAgaWYgKCEoJ3NjdHAnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdzY3RwJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX3NjdHAgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHRoaXMuX3NjdHA7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBzY3RwSW5EZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgaWYgKCFkZXNjcmlwdGlvbiB8fCAhZGVzY3JpcHRpb24uc2RwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhkZXNjcmlwdGlvbi5zZHApO1xuICAgIHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHNlY3Rpb25zLnNvbWUobWVkaWFTZWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IG1MaW5lID0gU0RQVXRpbHMucGFyc2VNTGluZShtZWRpYVNlY3Rpb24pO1xuICAgICAgcmV0dXJuIG1MaW5lICYmIG1MaW5lLmtpbmQgPT09ICdhcHBsaWNhdGlvbidcbiAgICAgICAgICAmJiBtTGluZS5wcm90b2NvbC5pbmRleE9mKCdTQ1RQJykgIT09IC0xO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGdldFJlbW90ZUZpcmVmb3hWZXJzaW9uID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAvLyBUT0RPOiBJcyB0aGVyZSBhIGJldHRlciBzb2x1dGlvbiBmb3IgZGV0ZWN0aW5nIEZpcmVmb3g/XG4gICAgY29uc3QgbWF0Y2ggPSBkZXNjcmlwdGlvbi5zZHAubWF0Y2goL21vemlsbGEuLi5USElTX0lTX1NEUEFSVEEtKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsIHx8IG1hdGNoLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgY29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgLy8gVGVzdCBmb3IgTmFOICh5ZXMsIHRoaXMgaXMgdWdseSlcbiAgICByZXR1cm4gdmVyc2lvbiAhPT0gdmVyc2lvbiA/IC0xIDogdmVyc2lvbjtcbiAgfTtcblxuICBjb25zdCBnZXRDYW5TZW5kTWF4TWVzc2FnZVNpemUgPSBmdW5jdGlvbihyZW1vdGVJc0ZpcmVmb3gpIHtcbiAgICAvLyBFdmVyeSBpbXBsZW1lbnRhdGlvbiB3ZSBrbm93IGNhbiBzZW5kIGF0IGxlYXN0IDY0IEtpQi5cbiAgICAvLyBOb3RlOiBBbHRob3VnaCBDaHJvbWUgaXMgdGVjaG5pY2FsbHkgYWJsZSB0byBzZW5kIHVwIHRvIDI1NiBLaUIsIHRoZVxuICAgIC8vICAgICAgIGRhdGEgZG9lcyBub3QgcmVhY2ggdGhlIG90aGVyIHBlZXIgcmVsaWFibHkuXG4gICAgLy8gICAgICAgU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9ODQxOVxuICAgIGxldCBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDU3KSB7XG4gICAgICAgIGlmIChyZW1vdGVJc0ZpcmVmb3ggPT09IC0xKSB7XG4gICAgICAgICAgLy8gRkYgPCA1NyB3aWxsIHNlbmQgaW4gMTYgS2lCIGNodW5rcyB1c2luZyB0aGUgZGVwcmVjYXRlZCBQUElEXG4gICAgICAgICAgLy8gZnJhZ21lbnRhdGlvbi5cbiAgICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSAxNjM4NDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBIb3dldmVyLCBvdGhlciBGRiAoYW5kIFJBV1JUQykgY2FuIHJlYXNzZW1ibGUgUFBJRC1mcmFnbWVudGVkXG4gICAgICAgICAgLy8gbWVzc2FnZXMuIFRodXMsIHN1cHBvcnRpbmcgfjIgR2lCIHdoZW4gc2VuZGluZy5cbiAgICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSAyMTQ3NDgzNjM3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA2MCkge1xuICAgICAgICAvLyBDdXJyZW50bHksIGFsbCBGRiA+PSA1NyB3aWxsIHJlc2V0IHRoZSByZW1vdGUgbWF4aW11bSBtZXNzYWdlIHNpemVcbiAgICAgICAgLy8gdG8gdGhlIGRlZmF1bHQgdmFsdWUgd2hlbiBhIGRhdGEgY2hhbm5lbCBpcyBjcmVhdGVkIGF0IGEgbGF0ZXJcbiAgICAgICAgLy8gc3RhZ2UuIDooXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNjgzMVxuICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPVxuICAgICAgICAgIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPT09IDU3ID8gNjU1MzUgOiA2NTUzNjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZGID49IDYwIHN1cHBvcnRzIHNlbmRpbmcgfjIgR2lCXG4gICAgICAgIGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9IDIxNDc0ODM2Mzc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW5TZW5kTWF4TWVzc2FnZVNpemU7XG4gIH07XG5cbiAgY29uc3QgZ2V0TWF4TWVzc2FnZVNpemUgPSBmdW5jdGlvbihkZXNjcmlwdGlvbiwgcmVtb3RlSXNGaXJlZm94KSB7XG4gICAgLy8gTm90ZTogNjU1MzYgYnl0ZXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUgZnJvbSB0aGUgU0RQIHNwZWMuIEFsc28sXG4gICAgLy8gICAgICAgZXZlcnkgaW1wbGVtZW50YXRpb24gd2Uga25vdyBzdXBwb3J0cyByZWNlaXZpbmcgNjU1MzYgYnl0ZXMuXG4gICAgbGV0IG1heE1lc3NhZ2VTaXplID0gNjU1MzY7XG5cbiAgICAvLyBGRiA1NyBoYXMgYSBzbGlnaHRseSBpbmNvcnJlY3QgZGVmYXVsdCByZW1vdGUgbWF4IG1lc3NhZ2Ugc2l6ZSwgc29cbiAgICAvLyB3ZSBuZWVkIHRvIGFkanVzdCBpdCBoZXJlIHRvIGF2b2lkIGEgZmFpbHVyZSB3aGVuIHNlbmRpbmcuXG4gICAgLy8gU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI1Njk3XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIgPT09ICdmaXJlZm94J1xuICAgICAgICAgJiYgYnJvd3NlckRldGFpbHMudmVyc2lvbiA9PT0gNTcpIHtcbiAgICAgIG1heE1lc3NhZ2VTaXplID0gNjU1MzU7XG4gICAgfVxuXG4gICAgY29uc3QgbWF0Y2ggPSBTRFBVdGlscy5tYXRjaFByZWZpeChkZXNjcmlwdGlvbi5zZHAsXG4gICAgICAnYT1tYXgtbWVzc2FnZS1zaXplOicpO1xuICAgIGlmIChtYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICBtYXhNZXNzYWdlU2l6ZSA9IHBhcnNlSW50KG1hdGNoWzBdLnN1YnN0cigxOSksIDEwKTtcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIgPT09ICdmaXJlZm94JyAmJlxuICAgICAgICAgICAgICAgIHJlbW90ZUlzRmlyZWZveCAhPT0gLTEpIHtcbiAgICAgIC8vIElmIHRoZSBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZSBpcyBub3QgcHJlc2VudCBpbiB0aGUgcmVtb3RlIFNEUCBhbmRcbiAgICAgIC8vIGJvdGggbG9jYWwgYW5kIHJlbW90ZSBhcmUgRmlyZWZveCwgdGhlIHJlbW90ZSBwZWVyIGNhbiByZWNlaXZlXG4gICAgICAvLyB+MiBHaUIuXG4gICAgICBtYXhNZXNzYWdlU2l6ZSA9IDIxNDc0ODM2Mzc7XG4gICAgfVxuICAgIHJldHVybiBtYXhNZXNzYWdlU2l6ZTtcbiAgfTtcblxuICBjb25zdCBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24gPVxuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgZnVuY3Rpb24gc2V0UmVtb3RlRGVzY3JpcHRpb24oKSB7XG4gICAgICB0aGlzLl9zY3RwID0gbnVsbDtcbiAgICAgIC8vIENocm9tZSBkZWNpZGVkIHRvIG5vdCBleHBvc2UgLnNjdHAgaW4gcGxhbi1iIG1vZGUuXG4gICAgICAvLyBBcyB1c3VhbCwgYWRhcHRlci5qcyBoYXMgdG8gZG8gYW4gJ3VnbHkgd29yYWthcm91bmQnXG4gICAgICAvLyB0byBjb3ZlciB1cCB0aGUgbWVzcy5cbiAgICAgIGlmIChicm93c2VyRGV0YWlscy5icm93c2VyID09PSAnY2hyb21lJyAmJiBicm93c2VyRGV0YWlscy52ZXJzaW9uID49IDc2KSB7XG4gICAgICAgIGNvbnN0IHtzZHBTZW1hbnRpY3N9ID0gdGhpcy5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgICAgIGlmIChzZHBTZW1hbnRpY3MgPT09ICdwbGFuLWInKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY3RwJywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX3NjdHAgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHRoaXMuX3NjdHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2N0cEluRGVzY3JpcHRpb24oYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVtb3RlIGlzIEZGLlxuICAgICAgICBjb25zdCBpc0ZpcmVmb3ggPSBnZXRSZW1vdGVGaXJlZm94VmVyc2lvbihhcmd1bWVudHNbMF0pO1xuXG4gICAgICAgIC8vIEdldCB0aGUgbWF4aW11bSBtZXNzYWdlIHNpemUgdGhlIGxvY2FsIHBlZXIgaXMgY2FwYWJsZSBvZiBzZW5kaW5nXG4gICAgICAgIGNvbnN0IGNhblNlbmRNTVMgPSBnZXRDYW5TZW5kTWF4TWVzc2FnZVNpemUoaXNGaXJlZm94KTtcblxuICAgICAgICAvLyBHZXQgdGhlIG1heGltdW0gbWVzc2FnZSBzaXplIG9mIHRoZSByZW1vdGUgcGVlci5cbiAgICAgICAgY29uc3QgcmVtb3RlTU1TID0gZ2V0TWF4TWVzc2FnZVNpemUoYXJndW1lbnRzWzBdLCBpc0ZpcmVmb3gpO1xuXG4gICAgICAgIC8vIERldGVybWluZSBmaW5hbCBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZVxuICAgICAgICBsZXQgbWF4TWVzc2FnZVNpemU7XG4gICAgICAgIGlmIChjYW5TZW5kTU1TID09PSAwICYmIHJlbW90ZU1NUyA9PT0gMCkge1xuICAgICAgICAgIG1heE1lc3NhZ2VTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9IGVsc2UgaWYgKGNhblNlbmRNTVMgPT09IDAgfHwgcmVtb3RlTU1TID09PSAwKSB7XG4gICAgICAgICAgbWF4TWVzc2FnZVNpemUgPSBNYXRoLm1heChjYW5TZW5kTU1TLCByZW1vdGVNTVMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heE1lc3NhZ2VTaXplID0gTWF0aC5taW4oY2FuU2VuZE1NUywgcmVtb3RlTU1TKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGR1bW15IFJUQ1NjdHBUcmFuc3BvcnQgb2JqZWN0IGFuZCB0aGUgJ21heE1lc3NhZ2VTaXplJ1xuICAgICAgICAvLyBhdHRyaWJ1dGUuXG4gICAgICAgIGNvbnN0IHNjdHAgPSB7fTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNjdHAsICdtYXhNZXNzYWdlU2l6ZScsIHtcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF4TWVzc2FnZVNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2N0cCA9IHNjdHA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpIHtcbiAgaWYgKCEod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICAnY3JlYXRlRGF0YUNoYW5uZWwnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTm90ZTogQWx0aG91Z2ggRmlyZWZveCA+PSA1NyBoYXMgYSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIHRoZSBtYXhpbXVtXG4gIC8vICAgICAgIG1lc3NhZ2Ugc2l6ZSBjYW4gYmUgcmVzZXQgZm9yIGFsbCBkYXRhIGNoYW5uZWxzIGF0IGEgbGF0ZXIgc3RhZ2UuXG4gIC8vICAgICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNjgzMVxuXG4gIGZ1bmN0aW9uIHdyYXBEY1NlbmQoZGMsIHBjKSB7XG4gICAgY29uc3Qgb3JpZ0RhdGFDaGFubmVsU2VuZCA9IGRjLnNlbmQ7XG4gICAgZGMuc2VuZCA9IGZ1bmN0aW9uIHNlbmQoKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXJndW1lbnRzWzBdO1xuICAgICAgY29uc3QgbGVuZ3RoID0gZGF0YS5sZW5ndGggfHwgZGF0YS5zaXplIHx8IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChkYy5yZWFkeVN0YXRlID09PSAnb3BlbicgJiZcbiAgICAgICAgICBwYy5zY3RwICYmIGxlbmd0aCA+IHBjLnNjdHAubWF4TWVzc2FnZVNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWVzc2FnZSB0b28gbGFyZ2UgKGNhbiBzZW5kIGEgbWF4aW11bSBvZiAnICtcbiAgICAgICAgICBwYy5zY3RwLm1heE1lc3NhZ2VTaXplICsgJyBieXRlcyknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnRGF0YUNoYW5uZWxTZW5kLmFwcGx5KGRjLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgY29uc3Qgb3JpZ0NyZWF0ZURhdGFDaGFubmVsID1cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsID1cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRhQ2hhbm5lbCgpIHtcbiAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gb3JpZ0NyZWF0ZURhdGFDaGFubmVsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3cmFwRGNTZW5kKGRhdGFDaGFubmVsLCB0aGlzKTtcbiAgICAgIHJldHVybiBkYXRhQ2hhbm5lbDtcbiAgICB9O1xuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICdkYXRhY2hhbm5lbCcsIGUgPT4ge1xuICAgIHdyYXBEY1NlbmQoZS5jaGFubmVsLCBlLnRhcmdldCk7XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xufVxuXG5cbi8qIHNoaW1zIFJUQ0Nvbm5lY3Rpb25TdGF0ZSBieSBwcmV0ZW5kaW5nIGl0IGlzIHRoZSBzYW1lIGFzIGljZUNvbm5lY3Rpb25TdGF0ZS5cbiAqIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9NjE0NSNjMTJcbiAqIGZvciB3aHkgdGhpcyBpcyBhIHZhbGlkIGhhY2sgaW4gQ2hyb21lLiBJbiBGaXJlZm94IGl0IGlzIHNsaWdodGx5IGluY29ycmVjdFxuICogc2luY2UgRFRMUyBmYWlsdXJlcyB3b3VsZCBiZSBoaWRkZW4uIFNlZVxuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTI2NTgyN1xuICogZm9yIHRoZSBGaXJlZm94IHRyYWNraW5nIGJ1Zy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoaW1Db25uZWN0aW9uU3RhdGUod2luZG93KSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uIHx8XG4gICAgICAnY29ubmVjdGlvblN0YXRlJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHByb3RvID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnY29ubmVjdGlvblN0YXRlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBsZXRlZDogJ2Nvbm5lY3RlZCcsXG4gICAgICAgIGNoZWNraW5nOiAnY29ubmVjdGluZydcbiAgICAgIH1bdGhpcy5pY2VDb25uZWN0aW9uU3RhdGVdIHx8IHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ29uY29ubmVjdGlvbnN0YXRlY2hhbmdlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSB8fCBudWxsO1xuICAgIH0sXG4gICAgc2V0KGNiKSB7XG4gICAgICBpZiAodGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLFxuICAgICAgICAgICAgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UpO1xuICAgICAgICBkZWxldGUgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2U7XG4gICAgICB9XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLFxuICAgICAgICAgICAgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSBjYik7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nXS5mb3JFYWNoKChtZXRob2QpID0+IHtcbiAgICBjb25zdCBvcmlnTWV0aG9kID0gcHJvdG9bbWV0aG9kXTtcbiAgICBwcm90b1ttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZXBvbHkpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbnN0YXRlY2hhbmdlcG9seSA9IGUgPT4ge1xuICAgICAgICAgIGNvbnN0IHBjID0gZS50YXJnZXQ7XG4gICAgICAgICAgaWYgKHBjLl9sYXN0Q29ubmVjdGlvblN0YXRlICE9PSBwYy5jb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHBjLl9sYXN0Q29ubmVjdGlvblN0YXRlID0gcGMuY29ubmVjdGlvblN0YXRlO1xuICAgICAgICAgICAgY29uc3QgbmV3RXZlbnQgPSBuZXcgRXZlbnQoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGUpO1xuICAgICAgICAgICAgcGMuZGlzcGF0Y2hFdmVudChuZXdFdmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsXG4gICAgICAgICAgdGhpcy5fY29ubmVjdGlvbnN0YXRlY2hhbmdlcG9seSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ01ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsb3dFeHRtYXBNaXhlZCh3aW5kb3cpIHtcbiAgLyogcmVtb3ZlIGE9ZXh0bWFwLWFsbG93LW1peGVkIGZvciB3ZWJydGMub3JnIDwgTTcxICovXG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2Nocm9tZScgJiYgYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA3MSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ3NhZmFyaScgJiYgYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2MDUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbmF0aXZlU1JEID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gIGZ1bmN0aW9uIHNldFJlbW90ZURlc2NyaXB0aW9uKGRlc2MpIHtcbiAgICBpZiAoZGVzYyAmJiBkZXNjLnNkcCAmJiBkZXNjLnNkcC5pbmRleE9mKCdcXG5hPWV4dG1hcC1hbGxvdy1taXhlZCcpICE9PSAtMSkge1xuICAgICAgZGVzYy5zZHAgPSBkZXNjLnNkcC5zcGxpdCgnXFxuJykuZmlsdGVyKChsaW5lKSA9PiB7XG4gICAgICAgIHJldHVybiBsaW5lLnRyaW0oKSAhPT0gJ2E9ZXh0bWFwLWFsbG93LW1peGVkJztcbiAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlU1JELmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQge2ZpbHRlckljZVNlcnZlcnN9IGZyb20gJy4vZmlsdGVyaWNlc2VydmVycyc7XG5pbXBvcnQgc2hpbVJUQ1BlZXJDb25uZWN0aW9uIGZyb20gJ3J0Y3BlZXJjb25uZWN0aW9uLXNoaW0nO1xuXG5leHBvcnQge3NoaW1HZXRVc2VyTWVkaWF9IGZyb20gJy4vZ2V0dXNlcm1lZGlhJztcbmV4cG9ydCB7c2hpbUdldERpc3BsYXlNZWRpYX0gZnJvbSAnLi9nZXRkaXNwbGF5bWVkaWEnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdykge1xuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBpZiAod2luZG93LlJUQ0ljZUdhdGhlcmVyKSB7XG4gICAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlKSB7XG4gICAgICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24gUlRDSWNlQ2FuZGlkYXRlKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIXdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pIHtcbiAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBSVENTZXNzaW9uRGVzY3JpcHRpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIHRoaXMgYWRkcyBhbiBhZGRpdGlvbmFsIGV2ZW50IGxpc3RlbmVyIHRvIE1lZGlhU3RyYWNrVHJhY2sgdGhhdCBzaWduYWxzXG4gICAgLy8gd2hlbiBhIHRyYWNrcyBlbmFibGVkIHByb3BlcnR5IHdhcyBjaGFuZ2VkLiBXb3JrYXJvdW5kIGZvciBhIGJ1ZyBpblxuICAgIC8vIGFkZFN0cmVhbSwgc2VlIGJlbG93LiBObyBsb25nZXIgcmVxdWlyZWQgaW4gMTUwMjUrXG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCAxNTAyNSkge1xuICAgICAgY29uc3Qgb3JpZ01TVEVuYWJsZWQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgICAgIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSwgJ2VuYWJsZWQnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUsICdlbmFibGVkJywge1xuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICBvcmlnTVNURW5hYmxlZC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgY29uc3QgZXYgPSBuZXcgRXZlbnQoJ2VuYWJsZWQnKTtcbiAgICAgICAgICBldi5lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gT1JUQyBkZWZpbmVzIHRoZSBEVE1GIHNlbmRlciBhIGJpdCBkaWZmZXJlbnQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvb3J0Yy9pc3N1ZXMvNzE0XG4gIGlmICh3aW5kb3cuUlRDUnRwU2VuZGVyICYmICEoJ2R0bWYnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSwgJ2R0bWYnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gbmV3IHdpbmRvdy5SVENEdG1mU2VuZGVyKHRoaXMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFjay5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2R0bWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLy8gRWRnZSBjdXJyZW50bHkgb25seSBpbXBsZW1lbnRzIHRoZSBSVENEdG1mU2VuZGVyLCBub3QgdGhlXG4gIC8vIFJUQ0RUTUZTZW5kZXIgYWxpYXMuIFNlZSBodHRwOi8vZHJhZnQub3J0Yy5vcmcvI3J0Y2R0bWZzZW5kZXIyKlxuICBpZiAod2luZG93LlJUQ0R0bWZTZW5kZXIgJiYgIXdpbmRvdy5SVENEVE1GU2VuZGVyKSB7XG4gICAgd2luZG93LlJUQ0RUTUZTZW5kZXIgPSB3aW5kb3cuUlRDRHRtZlNlbmRlcjtcbiAgfVxuXG4gIGNvbnN0IFJUQ1BlZXJDb25uZWN0aW9uU2hpbSA9IHNoaW1SVENQZWVyQ29ubmVjdGlvbih3aW5kb3csXG4gICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24gUlRDUGVlckNvbm5lY3Rpb24oY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaWNlU2VydmVycykge1xuICAgICAgY29uZmlnLmljZVNlcnZlcnMgPSBmaWx0ZXJJY2VTZXJ2ZXJzKGNvbmZpZy5pY2VTZXJ2ZXJzLFxuICAgICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgICAgIHV0aWxzLmxvZygnSUNFIHNlcnZlcnMgYWZ0ZXIgZmlsdGVyaW5nOicsIGNvbmZpZy5pY2VTZXJ2ZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSVENQZWVyQ29ubmVjdGlvblNoaW0oY29uZmlnKTtcbiAgfTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSA9IFJUQ1BlZXJDb25uZWN0aW9uU2hpbS5wcm90b3R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUmVwbGFjZVRyYWNrKHdpbmRvdykge1xuICAvLyBPUlRDIGhhcyByZXBsYWNlVHJhY2sgLS0gaHR0cHM6Ly9naXRodWIuY29tL3czYy9vcnRjL2lzc3Vlcy82MTRcbiAgaWYgKHdpbmRvdy5SVENSdHBTZW5kZXIgJiZcbiAgICAgICEoJ3JlcGxhY2VUcmFjaycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUucmVwbGFjZVRyYWNrID1cbiAgICAgICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuc2V0VHJhY2s7XG4gIH1cbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcbi8vIEVkZ2UgZG9lcyBub3QgbGlrZVxuLy8gMSkgc3R1bjogZmlsdGVyZWQgYWZ0ZXIgMTQzOTMgdW5sZXNzID90cmFuc3BvcnQ9dWRwIGlzIHByZXNlbnRcbi8vIDIpIHR1cm46IHRoYXQgZG9lcyBub3QgaGF2ZSBhbGwgb2YgdHVybjpob3N0OnBvcnQ/dHJhbnNwb3J0PXVkcFxuLy8gMykgdHVybjogd2l0aCBpcHY2IGFkZHJlc3Nlc1xuLy8gNCkgdHVybjogb2NjdXJyaW5nIG11bGlwbGUgdGltZXNcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJJY2VTZXJ2ZXJzKGljZVNlcnZlcnMsIGVkZ2VWZXJzaW9uKSB7XG4gIGxldCBoYXNUdXJuID0gZmFsc2U7XG4gIGljZVNlcnZlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGljZVNlcnZlcnMpKTtcbiAgcmV0dXJuIGljZVNlcnZlcnMuZmlsdGVyKHNlcnZlciA9PiB7XG4gICAgaWYgKHNlcnZlciAmJiAoc2VydmVyLnVybHMgfHwgc2VydmVyLnVybCkpIHtcbiAgICAgIHZhciB1cmxzID0gc2VydmVyLnVybHMgfHwgc2VydmVyLnVybDtcbiAgICAgIGlmIChzZXJ2ZXIudXJsICYmICFzZXJ2ZXIudXJscykge1xuICAgICAgICB1dGlscy5kZXByZWNhdGVkKCdSVENJY2VTZXJ2ZXIudXJsJywgJ1JUQ0ljZVNlcnZlci51cmxzJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHR5cGVvZiB1cmxzID09PSAnc3RyaW5nJztcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB1cmxzID0gW3VybHNdO1xuICAgICAgfVxuICAgICAgdXJscyA9IHVybHMuZmlsdGVyKHVybCA9PiB7XG4gICAgICAgIC8vIGZpbHRlciBTVFVOIHVuY29uZGl0aW9uYWxseS5cbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCdzdHVuOicpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsaWRUdXJuID0gdXJsLnN0YXJ0c1dpdGgoJ3R1cm4nKSAmJlxuICAgICAgICAgICAgIXVybC5zdGFydHNXaXRoKCd0dXJuOlsnKSAmJlxuICAgICAgICAgICAgdXJsLmluY2x1ZGVzKCd0cmFuc3BvcnQ9dWRwJyk7XG4gICAgICAgIGlmICh2YWxpZFR1cm4gJiYgIWhhc1R1cm4pIHtcbiAgICAgICAgICBoYXNUdXJuID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWRUdXJuICYmICFoYXNUdXJuO1xuICAgICAgfSk7XG5cbiAgICAgIGRlbGV0ZSBzZXJ2ZXIudXJsO1xuICAgICAgc2VydmVyLnVybHMgPSBpc1N0cmluZyA/IHVybHNbMF0gOiB1cmxzO1xuICAgICAgcmV0dXJuICEhdXJscy5sZW5ndGg7XG4gICAgfVxuICB9KTtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBhZGFwdGVyLmpzIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXREaXNwbGF5TWVkaWEod2luZG93KSB7XG4gIGlmICghKCdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAnZ2V0RGlzcGxheU1lZGlhJyBpbiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPVxuICAgIHdpbmRvdy5uYXZpZ2F0b3IuZ2V0RGlzcGxheU1lZGlhLmJpbmQod2luZG93Lm5hdmlnYXRvcik7XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXRVc2VyTWVkaWEod2luZG93KSB7XG4gIGNvbnN0IG5hdmlnYXRvciA9IHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yO1xuXG4gIGNvbnN0IHNoaW1FcnJvcl8gPSBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHtQZXJtaXNzaW9uRGVuaWVkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InfVtlLm5hbWVdIHx8IGUubmFtZSxcbiAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgIGNvbnN0cmFpbnQ6IGUuY29uc3RyYWludCxcbiAgICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gZ2V0VXNlck1lZGlhIGVycm9yIHNoaW0uXG4gIGNvbnN0IG9yaWdHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5cbiAgICAgIGJpbmQobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyk7XG4gIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oYykge1xuICAgIHJldHVybiBvcmlnR2V0VXNlck1lZGlhKGMpLmNhdGNoKGUgPT4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSkpO1xuICB9O1xufVxuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IHtzaGltR2V0VXNlck1lZGlhfSBmcm9tICcuL2dldHVzZXJtZWRpYSc7XG5leHBvcnQge3NoaW1HZXREaXNwbGF5TWVkaWF9IGZyb20gJy4vZ2V0ZGlzcGxheW1lZGlhJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1PblRyYWNrKHdpbmRvdykge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1RyYWNrRXZlbnQgJiZcbiAgICAgICgncmVjZWl2ZXInIGluIHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSkgJiZcbiAgICAgICEoJ3RyYW5zY2VpdmVyJyBpbiB3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSwgJ3RyYW5zY2VpdmVyJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4ge3JlY2VpdmVyOiB0aGlzLnJlY2VpdmVyfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdykge1xuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHxcbiAgICAgICEod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uIHx8IHdpbmRvdy5tb3pSVENQZWVyQ29ubmVjdGlvbikpIHtcbiAgICByZXR1cm47IC8vIHByb2JhYmx5IG1lZGlhLnBlZXJjb25uZWN0aW9uLmVuYWJsZWQ9ZmFsc2UgaW4gYWJvdXQ6Y29uZmlnXG4gIH1cbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiYgd2luZG93Lm1velJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgLy8gdmVyeSBiYXNpYyBzdXBwb3J0IGZvciBvbGQgdmVyc2lvbnMuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gd2luZG93Lm1velJUQ1BlZXJDb25uZWN0aW9uO1xuICB9XG5cbiAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA1Mykge1xuICAgIC8vIHNoaW0gYXdheSBuZWVkIGZvciBvYnNvbGV0ZSBSVENJY2VDYW5kaWRhdGUvUlRDU2Vzc2lvbkRlc2NyaXB0aW9uLlxuICAgIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICBjb25zdCBuYXRpdmVNZXRob2QgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgICAgICAgY29uc3QgbWV0aG9kT2JqID0ge1ttZXRob2RdKCkge1xuICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gbmV3ICgobWV0aG9kID09PSAnYWRkSWNlQ2FuZGlkYXRlJykgP1xuICAgICAgICAgICAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgOlxuICAgICAgICAgICAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pKGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfX07XG4gICAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gbWV0aG9kT2JqW21ldGhvZF07XG4gICAgICAgIH0pO1xuICB9XG5cbiAgLy8gc3VwcG9ydCBmb3IgYWRkSWNlQ2FuZGlkYXRlKG51bGwgb3IgdW5kZWZpbmVkKVxuICAvLyBhcyB3ZWxsIGFzIGlnbm9yaW5nIHtzZHBNaWQsIGNhbmRpZGF0ZTogXCJcIn1cbiAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA2OCkge1xuICAgIGNvbnN0IG5hdGl2ZUFkZEljZUNhbmRpZGF0ZSA9XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID1cbiAgICBmdW5jdGlvbiBhZGRJY2VDYW5kaWRhdGUoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzWzFdKSB7XG4gICAgICAgICAgYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIC8vIEZpcmVmb3ggNjgrIGVtaXRzIGFuZCBwcm9jZXNzZXMge2NhbmRpZGF0ZTogXCJcIiwgLi4ufSwgaWdub3JlXG4gICAgICAvLyBpbiBvbGRlciB2ZXJzaW9ucy5cbiAgICAgIGlmIChhcmd1bWVudHNbMF0gJiYgYXJndW1lbnRzWzBdLmNhbmRpZGF0ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUFkZEljZUNhbmRpZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBjb25zdCBtb2Rlcm5TdGF0c1R5cGVzID0ge1xuICAgIGluYm91bmRydHA6ICdpbmJvdW5kLXJ0cCcsXG4gICAgb3V0Ym91bmRydHA6ICdvdXRib3VuZC1ydHAnLFxuICAgIGNhbmRpZGF0ZXBhaXI6ICdjYW5kaWRhdGUtcGFpcicsXG4gICAgbG9jYWxjYW5kaWRhdGU6ICdsb2NhbC1jYW5kaWRhdGUnLFxuICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnXG4gIH07XG5cbiAgY29uc3QgbmF0aXZlR2V0U3RhdHMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgY29uc3QgW3NlbGVjdG9yLCBvblN1Y2MsIG9uRXJyXSA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmF0aXZlR2V0U3RhdHMuYXBwbHkodGhpcywgW3NlbGVjdG9yIHx8IG51bGxdKVxuICAgICAgLnRoZW4oc3RhdHMgPT4ge1xuICAgICAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDUzICYmICFvblN1Y2MpIHtcbiAgICAgICAgICAvLyBTaGltIG9ubHkgcHJvbWlzZSBnZXRTdGF0cyB3aXRoIHNwZWMtaHlwaGVucyBpbiB0eXBlIG5hbWVzXG4gICAgICAgICAgLy8gTGVhdmUgY2FsbGJhY2sgdmVyc2lvbiBhbG9uZTsgbWlzYyBvbGQgdXNlcyBvZiBmb3JFYWNoIGJlZm9yZSBNYXBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhdHMuZm9yRWFjaChzdGF0ID0+IHtcbiAgICAgICAgICAgICAgc3RhdC50eXBlID0gbW9kZXJuU3RhdHNUeXBlc1tzdGF0LnR5cGVdIHx8IHN0YXQudHlwZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdUeXBlRXJyb3InKSB7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdm9pZCBUeXBlRXJyb3I6IFwidHlwZVwiIGlzIHJlYWQtb25seSwgaW4gb2xkIHZlcnNpb25zLiAzNC00M2lzaFxuICAgICAgICAgICAgc3RhdHMuZm9yRWFjaCgoc3RhdCwgaSkgPT4ge1xuICAgICAgICAgICAgICBzdGF0cy5zZXQoaSwgT2JqZWN0LmFzc2lnbih7fSwgc3RhdCwge1xuICAgICAgICAgICAgICAgIHR5cGU6IG1vZGVyblN0YXRzVHlwZXNbc3RhdC50eXBlXSB8fCBzdGF0LnR5cGVcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0cztcbiAgICAgIH0pXG4gICAgICAudGhlbihvblN1Y2MsIG9uRXJyKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1TZW5kZXJHZXRTdGF0cyh3aW5kb3cpIHtcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAod2luZG93LlJUQ1J0cFNlbmRlciAmJiAnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9yaWdHZXRTZW5kZXJzID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzO1xuICBpZiAob3JpZ0dldFNlbmRlcnMpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnMgPSBmdW5jdGlvbiBnZXRTZW5kZXJzKCkge1xuICAgICAgY29uc3Qgc2VuZGVycyA9IG9yaWdHZXRTZW5kZXJzLmFwcGx5KHRoaXMsIFtdKTtcbiAgICAgIHNlbmRlcnMuZm9yRWFjaChzZW5kZXIgPT4gc2VuZGVyLl9wYyA9IHRoaXMpO1xuICAgICAgcmV0dXJuIHNlbmRlcnM7XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IG9yaWdBZGRUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7XG4gIGlmIChvcmlnQWRkVHJhY2spIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24gYWRkVHJhY2soKSB7XG4gICAgICBjb25zdCBzZW5kZXIgPSBvcmlnQWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHNlbmRlci5fcGMgPSB0aGlzO1xuICAgICAgcmV0dXJuIHNlbmRlcjtcbiAgICB9O1xuICB9XG4gIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sgPyB0aGlzLl9wYy5nZXRTdGF0cyh0aGlzLnRyYWNrKSA6XG4gICAgICAgIFByb21pc2UucmVzb2x2ZShuZXcgTWFwKCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJlY2VpdmVyR2V0U3RhdHMod2luZG93KSB7XG4gIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgd2luZG93LlJUQ1J0cFNlbmRlcikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHdpbmRvdy5SVENSdHBTZW5kZXIgJiYgJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9yaWdHZXRSZWNlaXZlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycztcbiAgaWYgKG9yaWdHZXRSZWNlaXZlcnMpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycyA9IGZ1bmN0aW9uIGdldFJlY2VpdmVycygpIHtcbiAgICAgIGNvbnN0IHJlY2VpdmVycyA9IG9yaWdHZXRSZWNlaXZlcnMuYXBwbHkodGhpcywgW10pO1xuICAgICAgcmVjZWl2ZXJzLmZvckVhY2gocmVjZWl2ZXIgPT4gcmVjZWl2ZXIuX3BjID0gdGhpcyk7XG4gICAgICByZXR1cm4gcmVjZWl2ZXJzO1xuICAgIH07XG4gIH1cbiAgdXRpbHMud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCAndHJhY2snLCBlID0+IHtcbiAgICBlLnJlY2VpdmVyLl9wYyA9IGUuc3JjRWxlbWVudDtcbiAgICByZXR1cm4gZTtcbiAgfSk7XG4gIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcGMuZ2V0U3RhdHModGhpcy50cmFjayk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUmVtb3ZlU3RyZWFtKHdpbmRvdykge1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiB8fFxuICAgICAgJ3JlbW92ZVN0cmVhbScgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdXRpbHMuZGVwcmVjYXRlZCgncmVtb3ZlU3RyZWFtJywgJ3JlbW92ZVRyYWNrJyk7XG4gICAgICB0aGlzLmdldFNlbmRlcnMoKS5mb3JFYWNoKHNlbmRlciA9PiB7XG4gICAgICAgIGlmIChzZW5kZXIudHJhY2sgJiYgc3RyZWFtLmdldFRyYWNrcygpLmluY2x1ZGVzKHNlbmRlci50cmFjaykpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZVRyYWNrKHNlbmRlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUlRDRGF0YUNoYW5uZWwod2luZG93KSB7XG4gIC8vIHJlbmFtZSBEYXRhQ2hhbm5lbCB0byBSVENEYXRhQ2hhbm5lbCAobmF0aXZlIGZpeCBpbiBGRjYwKTpcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTE3Mzg1MVxuICBpZiAod2luZG93LkRhdGFDaGFubmVsICYmICF3aW5kb3cuUlRDRGF0YUNoYW5uZWwpIHtcbiAgICB3aW5kb3cuUlRDRGF0YUNoYW5uZWwgPSB3aW5kb3cuRGF0YUNoYW5uZWw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1BZGRUcmFuc2NlaXZlcih3aW5kb3cpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnJ0Y0hhY2tzL2FkYXB0ZXIvaXNzdWVzLzk5OCNpc3N1ZWNvbW1lbnQtNTE2OTIxNjQ3XG4gIC8vIEZpcmVmb3ggaWdub3JlcyB0aGUgaW5pdCBzZW5kRW5jb2RpbmdzIG9wdGlvbnMgcGFzc2VkIHRvIGFkZFRyYW5zY2VpdmVyXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzOTY5MThcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvcmlnQWRkVHJhbnNjZWl2ZXIgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYW5zY2VpdmVyO1xuICBpZiAob3JpZ0FkZFRyYW5zY2VpdmVyKSB7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFuc2NlaXZlciA9XG4gICAgICBmdW5jdGlvbiBhZGRUcmFuc2NlaXZlcigpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaW5pdFBhcmFtZXRlcnMgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGNvbnN0IHNob3VsZFBlcmZvcm1DaGVjayA9IGluaXRQYXJhbWV0ZXJzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbmRFbmNvZGluZ3MnIGluIGluaXRQYXJhbWV0ZXJzO1xuICAgICAgICBpZiAoc2hvdWxkUGVyZm9ybUNoZWNrKSB7XG4gICAgICAgICAgLy8gSWYgc2VuZEVuY29kaW5ncyBwYXJhbXMgYXJlIHByb3ZpZGVkLCB2YWxpZGF0ZSBncmFtbWFyXG4gICAgICAgICAgaW5pdFBhcmFtZXRlcnMuc2VuZEVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZ1BhcmFtKSA9PiB7XG4gICAgICAgICAgICBpZiAoJ3JpZCcgaW4gZW5jb2RpbmdQYXJhbSkge1xuICAgICAgICAgICAgICBjb25zdCByaWRSZWdleCA9IC9eW2EtejAtOV17MCwxNn0kL2k7XG4gICAgICAgICAgICAgIGlmICghcmlkUmVnZXgudGVzdChlbmNvZGluZ1BhcmFtLnJpZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIFJJRCB2YWx1ZSBwcm92aWRlZC4nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdzY2FsZVJlc29sdXRpb25Eb3duQnknIGluIGVuY29kaW5nUGFyYW0pIHtcbiAgICAgICAgICAgICAgaWYgKCEocGFyc2VGbG9hdChlbmNvZGluZ1BhcmFtLnNjYWxlUmVzb2x1dGlvbkRvd25CeSkgPj0gMS4wKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdzY2FsZV9yZXNvbHV0aW9uX2Rvd25fYnkgbXVzdCBiZSA+PSAxLjAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdtYXhGcmFtZXJhdGUnIGluIGVuY29kaW5nUGFyYW0pIHtcbiAgICAgICAgICAgICAgaWYgKCEocGFyc2VGbG9hdChlbmNvZGluZ1BhcmFtLm1heEZyYW1lcmF0ZSkgPj0gMCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbWF4X2ZyYW1lcmF0ZSBtdXN0IGJlID49IDAuMCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSBvcmlnQWRkVHJhbnNjZWl2ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHNob3VsZFBlcmZvcm1DaGVjaykge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBpbml0IG9wdGlvbnMgd2VyZSBhcHBsaWVkLiBJZiBub3Qgd2UgZG8gdGhpcyBpbiBhblxuICAgICAgICAgIC8vIGFzeW5jaHJvbm91cyB3YXkgYW5kIHNhdmUgdGhlIHByb21pc2UgcmVmZXJlbmNlIGluIGEgZ2xvYmFsIG9iamVjdC5cbiAgICAgICAgICAvLyBUaGlzIGlzIGFuIHVnbHkgaGFjaywgYnV0IGF0IHRoZSBzYW1lIHRpbWUgaXMgd2F5IG1vcmUgcm9idXN0IHRoYW5cbiAgICAgICAgICAvLyBjaGVja2luZyB0aGUgc2VuZGVyIHBhcmFtZXRlcnMgYmVmb3JlIGFuZCBhZnRlciB0aGUgY3JlYXRlT2ZmZXJcbiAgICAgICAgICAvLyBBbHNvIG5vdGUgdGhhdCBhZnRlciB0aGUgY3JlYXRlb2ZmZXIgd2UgYXJlIG5vdCAxMDAlIHN1cmUgdGhhdFxuICAgICAgICAgIC8vIHRoZSBwYXJhbXMgd2VyZSBhc3luY2hyb25vdXNseSBhcHBsaWVkIHNvIHdlIG1pZ2h0IG1pc3MgdGhlXG4gICAgICAgICAgLy8gb3Bwb3J0dW5pdHkgdG8gcmVjcmVhdGUgb2ZmZXIuXG4gICAgICAgICAgY29uc3Qge3NlbmRlcn0gPSB0cmFuc2NlaXZlcjtcbiAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICAgIGlmICghKCdlbmNvZGluZ3MnIGluIHBhcmFtcykpIHtcbiAgICAgICAgICAgIHBhcmFtcy5lbmNvZGluZ3MgPSBpbml0UGFyYW1ldGVycy5zZW5kRW5jb2RpbmdzO1xuICAgICAgICAgICAgc2VuZGVyLnNlbmRFbmNvZGluZ3MgPSBpbml0UGFyYW1ldGVycy5zZW5kRW5jb2RpbmdzO1xuICAgICAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMucHVzaChzZW5kZXIuc2V0UGFyYW1ldGVycyhwYXJhbXMpXG4gICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2VuZGVyLnNlbmRFbmNvZGluZ3M7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2VuZGVyLnNlbmRFbmNvZGluZ3M7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXI7XG4gICAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0UGFyYW1ldGVycyh3aW5kb3cpIHtcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1J0cFNlbmRlcikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0dldFBhcmFtZXRlcnMgPSB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzO1xuICBpZiAob3JpZ0dldFBhcmFtZXRlcnMpIHtcbiAgICB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzID1cbiAgICAgIGZ1bmN0aW9uIGdldFBhcmFtZXRlcnMoKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBvcmlnR2V0UGFyYW1ldGVycy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoISgnc2VuZEVuY29kaW5ncycgaW4gdGhpcykpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB7ZW5jb2RpbmdzOiB0aGlzLnNlbmRFbmNvZGluZ3N9LCBwYXJhbXMpO1xuICAgICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUNyZWF0ZU9mZmVyKHdpbmRvdykge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicnRjSGFja3MvYWRhcHRlci9pc3N1ZXMvOTk4I2lzc3VlY29tbWVudC01MTY5MjE2NDdcbiAgLy8gRmlyZWZveCBpZ25vcmVzIHRoZSBpbml0IHNlbmRFbmNvZGluZ3Mgb3B0aW9ucyBwYXNzZWQgdG8gYWRkVHJhbnNjZWl2ZXJcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM5NjkxOFxuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9yaWdDcmVhdGVPZmZlciA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXI7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXIgPSBmdW5jdGlvbiBjcmVhdGVPZmZlcigpIHtcbiAgICBpZiAodGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMgJiYgdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBvcmlnQ3JlYXRlT2ZmZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzID0gW107XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdDcmVhdGVPZmZlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUNyZWF0ZUFuc3dlcih3aW5kb3cpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnJ0Y0hhY2tzL2FkYXB0ZXIvaXNzdWVzLzk5OCNpc3N1ZWNvbW1lbnQtNTE2OTIxNjQ3XG4gIC8vIEZpcmVmb3ggaWdub3JlcyB0aGUgaW5pdCBzZW5kRW5jb2RpbmdzIG9wdGlvbnMgcGFzc2VkIHRvIGFkZFRyYW5zY2VpdmVyXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzOTY5MThcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvcmlnQ3JlYXRlQW5zd2VyID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXI7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQW5zd2VyID0gZnVuY3Rpb24gY3JlYXRlQW5zd2VyKCkge1xuICAgIGlmICh0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyAmJiB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcylcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG9yaWdDcmVhdGVBbnN3ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzID0gW107XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdDcmVhdGVBbnN3ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBhZGFwdGVyLmpzIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3csIHByZWZlcnJlZE1lZGlhU291cmNlKSB7XG4gIGlmICh3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJlxuICAgICdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPVxuICAgIGZ1bmN0aW9uIGdldERpc3BsYXlNZWRpYShjb25zdHJhaW50cykge1xuICAgICAgaWYgKCEoY29uc3RyYWludHMgJiYgY29uc3RyYWludHMudmlkZW8pKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBET01FeGNlcHRpb24oJ2dldERpc3BsYXlNZWRpYSB3aXRob3V0IHZpZGVvICcgK1xuICAgICAgICAgICAgJ2NvbnN0cmFpbnRzIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICBlcnIubmFtZSA9ICdOb3RGb3VuZEVycm9yJztcbiAgICAgICAgLy8gZnJvbSBodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyNpZGwtRE9NRXhjZXB0aW9uLWVycm9yLW5hbWVzXG4gICAgICAgIGVyci5jb2RlID0gODtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoY29uc3RyYWludHMudmlkZW8gPT09IHRydWUpIHtcbiAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSB7bWVkaWFTb3VyY2U6IHByZWZlcnJlZE1lZGlhU291cmNlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLm1lZGlhU291cmNlID0gcHJlZmVycmVkTWVkaWFTb3VyY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICB9O1xufVxuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpIHtcbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG4gIGNvbnN0IG5hdmlnYXRvciA9IHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yO1xuICBjb25zdCBNZWRpYVN0cmVhbVRyYWNrID0gd2luZG93ICYmIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrO1xuXG4gIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKSB7XG4gICAgLy8gUmVwbGFjZSBGaXJlZm94IDQ0KydzIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2l0aCB1bnByZWZpeGVkIHZlcnNpb24uXG4gICAgdXRpbHMuZGVwcmVjYXRlZCgnbmF2aWdhdG9yLmdldFVzZXJNZWRpYScsXG4gICAgICAgICduYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYScpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gIH07XG5cbiAgaWYgKCEoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+IDU1ICYmXG4gICAgICAnYXV0b0dhaW5Db250cm9sJyBpbiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzKCkpKSB7XG4gICAgY29uc3QgcmVtYXAgPSBmdW5jdGlvbihvYmosIGEsIGIpIHtcbiAgICAgIGlmIChhIGluIG9iaiAmJiAhKGIgaW4gb2JqKSkge1xuICAgICAgICBvYmpbYl0gPSBvYmpbYV07XG4gICAgICAgIGRlbGV0ZSBvYmpbYV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG5hdGl2ZUdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLlxuICAgICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oYykge1xuICAgICAgaWYgKHR5cGVvZiBjID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYy5hdWRpbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgICAgICByZW1hcChjLmF1ZGlvLCAnYXV0b0dhaW5Db250cm9sJywgJ21vekF1dG9HYWluQ29udHJvbCcpO1xuICAgICAgICByZW1hcChjLmF1ZGlvLCAnbm9pc2VTdXBwcmVzc2lvbicsICdtb3pOb2lzZVN1cHByZXNzaW9uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlR2V0VXNlck1lZGlhKGMpO1xuICAgIH07XG5cbiAgICBpZiAoTWVkaWFTdHJlYW1UcmFjayAmJiBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncykge1xuICAgICAgY29uc3QgbmF0aXZlR2V0U2V0dGluZ3MgPSBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncztcbiAgICAgIE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmdldFNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG5hdGl2ZUdldFNldHRpbmdzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJlbWFwKG9iaiwgJ21vekF1dG9HYWluQ29udHJvbCcsICdhdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgICAgcmVtYXAob2JqLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicsICdub2lzZVN1cHByZXNzaW9uJyk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChNZWRpYVN0cmVhbVRyYWNrICYmIE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHMpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZUFwcGx5Q29uc3RyYWludHMgPVxuICAgICAgICBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzO1xuICAgICAgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgaWYgKHRoaXMua2luZCA9PT0gJ2F1ZGlvJyAmJiB0eXBlb2YgYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjKSk7XG4gICAgICAgICAgcmVtYXAoYywgJ2F1dG9HYWluQ29udHJvbCcsICdtb3pBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgICAgICByZW1hcChjLCAnbm9pc2VTdXBwcmVzc2lvbicsICdtb3pOb2lzZVN1cHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hdGl2ZUFwcGx5Q29uc3RyYWludHMuYXBwbHkodGhpcywgW2NdKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1Mb2NhbFN0cmVhbXNBUEkod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKCdnZXRMb2NhbFN0cmVhbXMnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXMgPVxuICAgICAgZnVuY3Rpb24gZ2V0TG9jYWxTdHJlYW1zKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcykge1xuICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFN0cmVhbXM7XG4gICAgICB9O1xuICB9XG4gIGlmICghKCdhZGRTdHJlYW0nIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgY29uc3QgX2FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbSA9IGZ1bmN0aW9uIGFkZFN0cmVhbShzdHJlYW0pIHtcbiAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9sb2NhbFN0cmVhbXMuaW5jbHVkZXMoc3RyZWFtKSkge1xuICAgICAgICB0aGlzLl9sb2NhbFN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgICAgfVxuICAgICAgLy8gVHJ5IHRvIGVtdWxhdGUgQ2hyb21lJ3MgYmVoYXZpb3VyIG9mIGFkZGluZyBpbiBhdWRpby12aWRlbyBvcmRlci5cbiAgICAgIC8vIFNhZmFyaSBvcmRlcnMgYnkgdHJhY2sgaWQuXG4gICAgICBzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IF9hZGRUcmFjay5jYWxsKHRoaXMsIHRyYWNrLFxuICAgICAgICBzdHJlYW0pKTtcbiAgICAgIHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmZvckVhY2godHJhY2sgPT4gX2FkZFRyYWNrLmNhbGwodGhpcywgdHJhY2ssXG4gICAgICAgIHN0cmVhbSkpO1xuICAgIH07XG5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID1cbiAgICAgIGZ1bmN0aW9uIGFkZFRyYWNrKHRyYWNrLCAuLi5zdHJlYW1zKSB7XG4gICAgICAgIGlmIChzdHJlYW1zKSB7XG4gICAgICAgICAgc3RyZWFtcy5mb3JFYWNoKChzdHJlYW0pID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtzdHJlYW1dO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zLmluY2x1ZGVzKHN0cmVhbSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2FkZFRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICB9XG4gIGlmICghKCdyZW1vdmVTdHJlYW0nIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW0gPVxuICAgICAgZnVuY3Rpb24gcmVtb3ZlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcykge1xuICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sb2NhbFN0cmVhbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgY29uc3QgdHJhY2tzID0gc3RyZWFtLmdldFRyYWNrcygpO1xuICAgICAgICB0aGlzLmdldFNlbmRlcnMoKS5mb3JFYWNoKHNlbmRlciA9PiB7XG4gICAgICAgICAgaWYgKHRyYWNrcy5pbmNsdWRlcyhzZW5kZXIudHJhY2spKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRyYWNrKHNlbmRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1SZW1vdGVTdHJlYW1zQVBJKHdpbmRvdykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHwgIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoISgnZ2V0UmVtb3RlU3RyZWFtcycgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlbW90ZVN0cmVhbXMgPVxuICAgICAgZnVuY3Rpb24gZ2V0UmVtb3RlU3RyZWFtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVN0cmVhbXMgPyB0aGlzLl9yZW1vdGVTdHJlYW1zIDogW107XG4gICAgICB9O1xuICB9XG4gIGlmICghKCdvbmFkZHN0cmVhbScgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ29uYWRkc3RyZWFtJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25hZGRzdHJlYW07XG4gICAgICB9LFxuICAgICAgc2V0KGYpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uYWRkc3RyZWFtKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbmFkZHN0cmVhbSk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29uYWRkc3RyZWFtcG9seSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbmFkZHN0cmVhbSA9IGYpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb25hZGRzdHJlYW1wb2x5ID0gKGUpID0+IHtcbiAgICAgICAgICBlLnN0cmVhbXMuZm9yRWFjaChzdHJlYW0gPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZW1vdGVTdHJlYW1zKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3JlbW90ZVN0cmVhbXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW1vdGVTdHJlYW1zLmluY2x1ZGVzKHN0cmVhbSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCgnYWRkc3RyZWFtJyk7XG4gICAgICAgICAgICBldmVudC5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24gPVxuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID1cbiAgICAgIGZ1bmN0aW9uIHNldFJlbW90ZURlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBwYyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fb25hZGRzdHJlYW1wb2x5KSB7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29uYWRkc3RyZWFtcG9seSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUuc3RyZWFtcy5mb3JFYWNoKHN0cmVhbSA9PiB7XG4gICAgICAgICAgICAgIGlmICghcGMuX3JlbW90ZVN0cmVhbXMpIHtcbiAgICAgICAgICAgICAgICBwYy5fcmVtb3RlU3RyZWFtcyA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChwYy5fcmVtb3RlU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYy5fcmVtb3RlU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KCdhZGRzdHJlYW0nKTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICAgICAgICBwYy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkocGMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQ2FsbGJhY2tzQVBJKHdpbmRvdykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHwgIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwcm90b3R5cGUgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuICBjb25zdCBvcmlnQ3JlYXRlT2ZmZXIgPSBwcm90b3R5cGUuY3JlYXRlT2ZmZXI7XG4gIGNvbnN0IG9yaWdDcmVhdGVBbnN3ZXIgPSBwcm90b3R5cGUuY3JlYXRlQW5zd2VyO1xuICBjb25zdCBzZXRMb2NhbERlc2NyaXB0aW9uID0gcHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb247XG4gIGNvbnN0IHNldFJlbW90ZURlc2NyaXB0aW9uID0gcHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO1xuICBjb25zdCBhZGRJY2VDYW5kaWRhdGUgPSBwcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlO1xuXG4gIHByb3RvdHlwZS5jcmVhdGVPZmZlciA9XG4gICAgZnVuY3Rpb24gY3JlYXRlT2ZmZXIoc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSA/IGFyZ3VtZW50c1syXSA6IGFyZ3VtZW50c1swXTtcbiAgICAgIGNvbnN0IHByb21pc2UgPSBvcmlnQ3JlYXRlT2ZmZXIuYXBwbHkodGhpcywgW29wdGlvbnNdKTtcbiAgICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuICAgICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuXG4gIHByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFuc3dlcihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IChhcmd1bWVudHMubGVuZ3RoID49IDIpID8gYXJndW1lbnRzWzJdIDogYXJndW1lbnRzWzBdO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG9yaWdDcmVhdGVBbnN3ZXIuYXBwbHkodGhpcywgW29wdGlvbnNdKTtcbiAgICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuICAgICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuXG4gIGxldCB3aXRoQ2FsbGJhY2sgPSBmdW5jdGlvbihkZXNjcmlwdGlvbiwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICBjb25zdCBwcm9taXNlID0gc2V0TG9jYWxEZXNjcmlwdGlvbi5hcHBseSh0aGlzLCBbZGVzY3JpcHRpb25dKTtcbiAgICBpZiAoIWZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuICBwcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbiA9IHdpdGhDYWxsYmFjaztcblxuICB3aXRoQ2FsbGJhY2sgPSBmdW5jdGlvbihkZXNjcmlwdGlvbiwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICBjb25zdCBwcm9taXNlID0gc2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkodGhpcywgW2Rlc2NyaXB0aW9uXSk7XG4gICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfTtcbiAgcHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID0gd2l0aENhbGxiYWNrO1xuXG4gIHdpdGhDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbmRpZGF0ZSwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICBjb25zdCBwcm9taXNlID0gYWRkSWNlQ2FuZGlkYXRlLmFwcGx5KHRoaXMsIFtjYW5kaWRhdGVdKTtcbiAgICBpZiAoIWZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuICBwcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gd2l0aENhbGxiYWNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3I7XG5cbiAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgJiYgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgICAvLyBzaGltIG5vdCBuZWVkZWQgaW4gU2FmYXJpIDEyLjFcbiAgICBjb25zdCBtZWRpYURldmljZXMgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzO1xuICAgIGNvbnN0IF9nZXRVc2VyTWVkaWEgPSBtZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLmJpbmQobWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IChjb25zdHJhaW50cykgPT4ge1xuICAgICAgcmV0dXJuIF9nZXRVc2VyTWVkaWEoc2hpbUNvbnN0cmFpbnRzKGNvbnN0cmFpbnRzKSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghbmF2aWdhdG9yLmdldFVzZXJNZWRpYSAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24gZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzLCBjYiwgZXJyY2IpIHtcbiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKVxuICAgICAgLnRoZW4oY2IsIGVycmNiKTtcbiAgICB9LmJpbmQobmF2aWdhdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUNvbnN0cmFpbnRzKGNvbnN0cmFpbnRzKSB7XG4gIGlmIChjb25zdHJhaW50cyAmJiBjb25zdHJhaW50cy52aWRlbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXG4gICAgICBjb25zdHJhaW50cyxcbiAgICAgIHt2aWRlbzogdXRpbHMuY29tcGFjdE9iamVjdChjb25zdHJhaW50cy52aWRlbyl9XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBjb25zdHJhaW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1SVENJY2VTZXJ2ZXJVcmxzKHdpbmRvdykge1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBtaWdyYXRlIGZyb20gbm9uLXNwZWMgUlRDSWNlU2VydmVyLnVybCB0byBSVENJY2VTZXJ2ZXIudXJsc1xuICBjb25zdCBPcmlnUGVlckNvbm5lY3Rpb24gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb247XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9XG4gICAgZnVuY3Rpb24gUlRDUGVlckNvbm5lY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpIHtcbiAgICAgIGlmIChwY0NvbmZpZyAmJiBwY0NvbmZpZy5pY2VTZXJ2ZXJzKSB7XG4gICAgICAgIGNvbnN0IG5ld0ljZVNlcnZlcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwY0NvbmZpZy5pY2VTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHNlcnZlciA9IHBjQ29uZmlnLmljZVNlcnZlcnNbaV07XG4gICAgICAgICAgaWYgKCFzZXJ2ZXIuaGFzT3duUHJvcGVydHkoJ3VybHMnKSAmJlxuICAgICAgICAgICAgICBzZXJ2ZXIuaGFzT3duUHJvcGVydHkoJ3VybCcpKSB7XG4gICAgICAgICAgICB1dGlscy5kZXByZWNhdGVkKCdSVENJY2VTZXJ2ZXIudXJsJywgJ1JUQ0ljZVNlcnZlci51cmxzJyk7XG4gICAgICAgICAgICBzZXJ2ZXIgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlcnZlcikpO1xuICAgICAgICAgICAgc2VydmVyLnVybHMgPSBzZXJ2ZXIudXJsO1xuICAgICAgICAgICAgZGVsZXRlIHNlcnZlci51cmw7XG4gICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2goc2VydmVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3SWNlU2VydmVycy5wdXNoKHBjQ29uZmlnLmljZVNlcnZlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwY0NvbmZpZy5pY2VTZXJ2ZXJzID0gbmV3SWNlU2VydmVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgT3JpZ1BlZXJDb25uZWN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKTtcbiAgICB9O1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlID0gT3JpZ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gd3JhcCBzdGF0aWMgbWV0aG9kcy4gQ3VycmVudGx5IGp1c3QgZ2VuZXJhdGVDZXJ0aWZpY2F0ZS5cbiAgaWYgKCdnZW5lcmF0ZUNlcnRpZmljYXRlJyBpbiBPcmlnUGVlckNvbm5lY3Rpb24pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLCAnZ2VuZXJhdGVDZXJ0aWZpY2F0ZScsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE9yaWdQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltVHJhY2tFdmVudFRyYW5zY2VpdmVyKHdpbmRvdykge1xuICAvLyBBZGQgZXZlbnQudHJhbnNjZWl2ZXIgbWVtYmVyIG92ZXIgZGVwcmVjYXRlZCBldmVudC5yZWNlaXZlclxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1RyYWNrRXZlbnQgJiZcbiAgICAgICdyZWNlaXZlcicgaW4gd2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlICYmXG4gICAgICAhKCd0cmFuc2NlaXZlcicgaW4gd2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUsICd0cmFuc2NlaXZlcicsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHtyZWNlaXZlcjogdGhpcy5yZWNlaXZlcn07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1DcmVhdGVPZmZlckxlZ2FjeSh3aW5kb3cpIHtcbiAgY29uc3Qgb3JpZ0NyZWF0ZU9mZmVyID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlcjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlciA9XG4gICAgZnVuY3Rpb24gY3JlYXRlT2ZmZXIob2ZmZXJPcHRpb25zKSB7XG4gICAgICBpZiAob2ZmZXJPcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gc3VwcG9ydCBiaXQgdmFsdWVzXG4gICAgICAgICAgb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gPVxuICAgICAgICAgICAgISFvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdWRpb1RyYW5zY2VpdmVyID0gdGhpcy5nZXRUcmFuc2NlaXZlcnMoKS5maW5kKHRyYW5zY2VpdmVyID0+XG4gICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gJ2F1ZGlvJyk7XG4gICAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9PT0gZmFsc2UgJiYgYXVkaW9UcmFuc2NlaXZlcikge1xuICAgICAgICAgIGlmIChhdWRpb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2Jykge1xuICAgICAgICAgICAgaWYgKGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdzZW5kb25seScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXVkaW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnc2VuZG9ubHknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYXVkaW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdyZWN2b25seScpIHtcbiAgICAgICAgICAgIGlmIChhdWRpb1RyYW5zY2VpdmVyLnNldERpcmVjdGlvbikge1xuICAgICAgICAgICAgICBhdWRpb1RyYW5zY2VpdmVyLnNldERpcmVjdGlvbignaW5hY3RpdmUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID0gJ2luYWN0aXZlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gPT09IHRydWUgJiZcbiAgICAgICAgICAgICFhdWRpb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgdGhpcy5hZGRUcmFuc2NlaXZlcignYXVkaW8nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gc3VwcG9ydCBiaXQgdmFsdWVzXG4gICAgICAgICAgb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPVxuICAgICAgICAgICAgISFvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWRlb1RyYW5zY2VpdmVyID0gdGhpcy5nZXRUcmFuc2NlaXZlcnMoKS5maW5kKHRyYW5zY2VpdmVyID0+XG4gICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gJ3ZpZGVvJyk7XG4gICAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9PT0gZmFsc2UgJiYgdmlkZW9UcmFuc2NlaXZlcikge1xuICAgICAgICAgIGlmICh2aWRlb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2Jykge1xuICAgICAgICAgICAgaWYgKHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdzZW5kb25seScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmlkZW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnc2VuZG9ubHknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodmlkZW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdyZWN2b25seScpIHtcbiAgICAgICAgICAgIGlmICh2aWRlb1RyYW5zY2VpdmVyLnNldERpcmVjdGlvbikge1xuICAgICAgICAgICAgICB2aWRlb1RyYW5zY2VpdmVyLnNldERpcmVjdGlvbignaW5hY3RpdmUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZpZGVvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID0gJ2luYWN0aXZlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPT09IHRydWUgJiZcbiAgICAgICAgICAgICF2aWRlb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgdGhpcy5hZGRUcmFuc2NlaXZlcigndmlkZW8nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdDcmVhdGVPZmZlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQXVkaW9Db250ZXh0KHdpbmRvdykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHwgd2luZG93LkF1ZGlvQ29udGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cuQXVkaW9Db250ZXh0ID0gd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dDtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgbG9nRGlzYWJsZWRfID0gdHJ1ZTtcbmxldCBkZXByZWNhdGlvbldhcm5pbmdzXyA9IHRydWU7XG5cbi8qKlxuICogRXh0cmFjdCBicm93c2VyIHZlcnNpb24gb3V0IG9mIHRoZSBwcm92aWRlZCB1c2VyIGFnZW50IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0geyFzdHJpbmd9IHVhc3RyaW5nIHVzZXJBZ2VudCBzdHJpbmcuXG4gKiBAcGFyYW0geyFzdHJpbmd9IGV4cHIgUmVndWxhciBleHByZXNzaW9uIHVzZWQgYXMgbWF0Y2ggY3JpdGVyaWEuXG4gKiBAcGFyYW0geyFudW1iZXJ9IHBvcyBwb3NpdGlvbiBpbiB0aGUgdmVyc2lvbiBzdHJpbmcgdG8gYmUgcmV0dXJuZWQuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBicm93c2VyIHZlcnNpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VmVyc2lvbih1YXN0cmluZywgZXhwciwgcG9zKSB7XG4gIGNvbnN0IG1hdGNoID0gdWFzdHJpbmcubWF0Y2goZXhwcik7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPj0gcG9zICYmIHBhcnNlSW50KG1hdGNoW3Bvc10sIDEwKTtcbn1cblxuLy8gV3JhcHMgdGhlIHBlZXJjb25uZWN0aW9uIGV2ZW50IGV2ZW50TmFtZVRvV3JhcCBpbiBhIGZ1bmN0aW9uXG4vLyB3aGljaCByZXR1cm5zIHRoZSBtb2RpZmllZCBldmVudCBvYmplY3QgKG9yIGZhbHNlIHRvIHByZXZlbnRcbi8vIHRoZSBldmVudCkuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCBldmVudE5hbWVUb1dyYXAsIHdyYXBwZXIpIHtcbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcHJvdG8gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuICBjb25zdCBuYXRpdmVBZGRFdmVudExpc3RlbmVyID0gcHJvdG8uYWRkRXZlbnRMaXN0ZW5lcjtcbiAgcHJvdG8uYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKG5hdGl2ZUV2ZW50TmFtZSwgY2IpIHtcbiAgICBpZiAobmF0aXZlRXZlbnROYW1lICE9PSBldmVudE5hbWVUb1dyYXApIHtcbiAgICAgIHJldHVybiBuYXRpdmVBZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGNvbnN0IHdyYXBwZWRDYWxsYmFjayA9IChlKSA9PiB7XG4gICAgICBjb25zdCBtb2RpZmllZEV2ZW50ID0gd3JhcHBlcihlKTtcbiAgICAgIGlmIChtb2RpZmllZEV2ZW50KSB7XG4gICAgICAgIGlmIChjYi5oYW5kbGVFdmVudCkge1xuICAgICAgICAgIGNiLmhhbmRsZUV2ZW50KG1vZGlmaWVkRXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG1vZGlmaWVkRXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9ldmVudE1hcCA9IHRoaXMuX2V2ZW50TWFwIHx8IHt9O1xuICAgIGlmICghdGhpcy5fZXZlbnRNYXBbZXZlbnROYW1lVG9XcmFwXSkge1xuICAgICAgdGhpcy5fZXZlbnRNYXBbZXZlbnROYW1lVG9XcmFwXSA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRNYXBbZXZlbnROYW1lVG9XcmFwXS5zZXQoY2IsIHdyYXBwZWRDYWxsYmFjayk7XG4gICAgcmV0dXJuIG5hdGl2ZUFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcywgW25hdGl2ZUV2ZW50TmFtZSxcbiAgICAgIHdyYXBwZWRDYWxsYmFja10pO1xuICB9O1xuXG4gIGNvbnN0IG5hdGl2ZVJlbW92ZUV2ZW50TGlzdGVuZXIgPSBwcm90by5yZW1vdmVFdmVudExpc3RlbmVyO1xuICBwcm90by5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24obmF0aXZlRXZlbnROYW1lLCBjYikge1xuICAgIGlmIChuYXRpdmVFdmVudE5hbWUgIT09IGV2ZW50TmFtZVRvV3JhcCB8fCAhdGhpcy5fZXZlbnRNYXBcbiAgICAgICAgfHwgIXRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0pIHtcbiAgICAgIHJldHVybiBuYXRpdmVSZW1vdmVFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fZXZlbnRNYXBbZXZlbnROYW1lVG9XcmFwXS5oYXMoY2IpKSB7XG4gICAgICByZXR1cm4gbmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBjb25zdCB1bndyYXBwZWRDYiA9IHRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0uZ2V0KGNiKTtcbiAgICB0aGlzLl9ldmVudE1hcFtldmVudE5hbWVUb1dyYXBdLmRlbGV0ZShjYik7XG4gICAgaWYgKHRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF0uc2l6ZSA9PT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50TWFwW2V2ZW50TmFtZVRvV3JhcF07XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9ldmVudE1hcCkubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRNYXA7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVSZW1vdmVFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIFtuYXRpdmVFdmVudE5hbWUsXG4gICAgICB1bndyYXBwZWRDYl0pO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ29uJyArIGV2ZW50TmFtZVRvV3JhcCwge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXTtcbiAgICB9LFxuICAgIHNldChjYikge1xuICAgICAgaWYgKHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWVUb1dyYXAsXG4gICAgICAgICAgICB0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXTtcbiAgICAgIH1cbiAgICAgIGlmIChjYikge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lVG9XcmFwLFxuICAgICAgICAgICAgdGhpc1snX29uJyArIGV2ZW50TmFtZVRvV3JhcF0gPSBjYik7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc2FibGVMb2coYm9vbCkge1xuICBpZiAodHlwZW9mIGJvb2wgIT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0FyZ3VtZW50IHR5cGU6ICcgKyB0eXBlb2YgYm9vbCArXG4gICAgICAgICcuIFBsZWFzZSB1c2UgYSBib29sZWFuLicpO1xuICB9XG4gIGxvZ0Rpc2FibGVkXyA9IGJvb2w7XG4gIHJldHVybiAoYm9vbCkgPyAnYWRhcHRlci5qcyBsb2dnaW5nIGRpc2FibGVkJyA6XG4gICAgICAnYWRhcHRlci5qcyBsb2dnaW5nIGVuYWJsZWQnO1xufVxuXG4vKipcbiAqIERpc2FibGUgb3IgZW5hYmxlIGRlcHJlY2F0aW9uIHdhcm5pbmdzXG4gKiBAcGFyYW0geyFib29sZWFufSBib29sIHNldCB0byB0cnVlIHRvIGRpc2FibGUgd2FybmluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlV2FybmluZ3MoYm9vbCkge1xuICBpZiAodHlwZW9mIGJvb2wgIT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0FyZ3VtZW50IHR5cGU6ICcgKyB0eXBlb2YgYm9vbCArXG4gICAgICAgICcuIFBsZWFzZSB1c2UgYSBib29sZWFuLicpO1xuICB9XG4gIGRlcHJlY2F0aW9uV2FybmluZ3NfID0gIWJvb2w7XG4gIHJldHVybiAnYWRhcHRlci5qcyBkZXByZWNhdGlvbiB3YXJuaW5ncyAnICsgKGJvb2wgPyAnZGlzYWJsZWQnIDogJ2VuYWJsZWQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZygpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKGxvZ0Rpc2FibGVkXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmxvZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBTaG93cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgc3VnZ2VzdGluZyB0aGUgbW9kZXJuIGFuZCBzcGVjLWNvbXBhdGlibGUgQVBJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlZChvbGRNZXRob2QsIG5ld01ldGhvZCkge1xuICBpZiAoIWRlcHJlY2F0aW9uV2FybmluZ3NfKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUud2FybihvbGRNZXRob2QgKyAnIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgJyArIG5ld01ldGhvZCArXG4gICAgICAnIGluc3RlYWQuJyk7XG59XG5cbi8qKlxuICogQnJvd3NlciBkZXRlY3Rvci5cbiAqXG4gKiBAcmV0dXJuIHtvYmplY3R9IHJlc3VsdCBjb250YWluaW5nIGJyb3dzZXIgYW5kIHZlcnNpb25cbiAqICAgICBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0QnJvd3Nlcih3aW5kb3cpIHtcbiAgLy8gUmV0dXJuZWQgcmVzdWx0IG9iamVjdC5cbiAgY29uc3QgcmVzdWx0ID0ge2Jyb3dzZXI6IG51bGwsIHZlcnNpb246IG51bGx9O1xuXG4gIC8vIEZhaWwgZWFybHkgaWYgaXQncyBub3QgYSBicm93c2VyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhd2luZG93Lm5hdmlnYXRvcikge1xuICAgIHJlc3VsdC5icm93c2VyID0gJ05vdCBhIGJyb3dzZXIuJztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgY29uc3Qge25hdmlnYXRvcn0gPSB3aW5kb3c7XG5cbiAgaWYgKG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEpIHsgLy8gRmlyZWZveC5cbiAgICByZXN1bHQuYnJvd3NlciA9ICdmaXJlZm94JztcbiAgICByZXN1bHQudmVyc2lvbiA9IGV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIC9GaXJlZm94XFwvKFxcZCspXFwuLywgMSk7XG4gIH0gZWxzZSBpZiAobmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fFxuICAgICAgKHdpbmRvdy5pc1NlY3VyZUNvbnRleHQgPT09IGZhbHNlICYmIHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgICF3aW5kb3cuUlRDSWNlR2F0aGVyZXIpKSB7XG4gICAgLy8gQ2hyb21lLCBDaHJvbWl1bSwgV2VidmlldywgT3BlcmEuXG4gICAgLy8gVmVyc2lvbiBtYXRjaGVzIENocm9tZS9XZWJSVEMgdmVyc2lvbi5cbiAgICAvLyBDaHJvbWUgNzQgcmVtb3ZlZCB3ZWJraXRHZXRVc2VyTWVkaWEgb24gaHR0cCBhcyB3ZWxsIHNvIHdlIG5lZWQgdGhlXG4gICAgLy8gbW9yZSBjb21wbGljYXRlZCBmYWxsYmFjayB0byB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5cbiAgICByZXN1bHQuYnJvd3NlciA9ICdjaHJvbWUnO1xuICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgL0Nocm9tKGV8aXVtKVxcLyhcXGQrKVxcLi8sIDIpO1xuICB9IGVsc2UgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykuKFxcZCspJC8pKSB7IC8vIEVkZ2UuXG4gICAgcmVzdWx0LmJyb3dzZXIgPSAnZWRnZSc7XG4gICAgcmVzdWx0LnZlcnNpb24gPSBleHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAvRWRnZVxcLyhcXGQrKS4oXFxkKykkLywgMik7XG4gIH0gZWxzZSBpZiAod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8pKSB7IC8vIFNhZmFyaS5cbiAgICByZXN1bHQuYnJvd3NlciA9ICdzYWZhcmknO1xuICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLywgMSk7XG4gICAgcmVzdWx0LnN1cHBvcnRzVW5pZmllZFBsYW4gPSB3aW5kb3cuUlRDUnRwVHJhbnNjZWl2ZXIgJiZcbiAgICAgICAgJ2N1cnJlbnREaXJlY3Rpb24nIGluIHdpbmRvdy5SVENSdHBUcmFuc2NlaXZlci5wcm90b3R5cGU7XG4gIH0gZWxzZSB7IC8vIERlZmF1bHQgZmFsbHRocm91Z2g6IG5vdCBzdXBwb3J0ZWQuXG4gICAgcmVzdWx0LmJyb3dzZXIgPSAnTm90IGEgc3VwcG9ydGVkIGJyb3dzZXIuJztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgc29tZXRoaW5nIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgc29tZXRoaW5nIHlvdSB3YW50IHRvIGNoZWNrLlxuICogQHJldHVybiB0cnVlIGlmIHZhbCBpcyBhbiBvYmplY3QsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBlbXB0eSBvYmplY3RzIGFuZCB1bmRlZmluZWQgdmFsdWVzXG4gKiBmcm9tIGEgbmVzdGVkIG9iamVjdCAtLSBhbiBlbmhhbmNlZCBhbmQgdmFuaWxsYSB2ZXJzaW9uXG4gKiBvZiBMb2Rhc2gncyBgY29tcGFjdGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wYWN0T2JqZWN0KGRhdGEpIHtcbiAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZShmdW5jdGlvbihhY2N1bXVsYXRvciwga2V5KSB7XG4gICAgY29uc3QgaXNPYmogPSBpc09iamVjdChkYXRhW2tleV0pO1xuICAgIGNvbnN0IHZhbHVlID0gaXNPYmogPyBjb21wYWN0T2JqZWN0KGRhdGFba2V5XSkgOiBkYXRhW2tleV07XG4gICAgY29uc3QgaXNFbXB0eU9iamVjdCA9IGlzT2JqICYmICFPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGlzRW1wdHlPYmplY3QpIHtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjdW11bGF0b3IsIHtba2V5XTogdmFsdWV9KTtcbiAgfSwge30pO1xufVxuXG4vKiBpdGVyYXRlcyB0aGUgc3RhdHMgZ3JhcGggcmVjdXJzaXZlbHkuICovXG5leHBvcnQgZnVuY3Rpb24gd2Fsa1N0YXRzKHN0YXRzLCBiYXNlLCByZXN1bHRTZXQpIHtcbiAgaWYgKCFiYXNlIHx8IHJlc3VsdFNldC5oYXMoYmFzZS5pZCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVzdWx0U2V0LnNldChiYXNlLmlkLCBiYXNlKTtcbiAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChuYW1lID0+IHtcbiAgICBpZiAobmFtZS5lbmRzV2l0aCgnSWQnKSkge1xuICAgICAgd2Fsa1N0YXRzKHN0YXRzLCBzdGF0cy5nZXQoYmFzZVtuYW1lXSksIHJlc3VsdFNldCk7XG4gICAgfSBlbHNlIGlmIChuYW1lLmVuZHNXaXRoKCdJZHMnKSkge1xuICAgICAgYmFzZVtuYW1lXS5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgd2Fsa1N0YXRzKHN0YXRzLCBzdGF0cy5nZXQoaWQpLCByZXN1bHRTZXQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuLyogZmlsdGVyIGdldFN0YXRzIGZvciBhIHNlbmRlci9yZWNlaXZlciB0cmFjay4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJTdGF0cyhyZXN1bHQsIHRyYWNrLCBvdXRib3VuZCkge1xuICBjb25zdCBzdHJlYW1TdGF0c1R5cGUgPSBvdXRib3VuZCA/ICdvdXRib3VuZC1ydHAnIDogJ2luYm91bmQtcnRwJztcbiAgY29uc3QgZmlsdGVyZWRSZXN1bHQgPSBuZXcgTWFwKCk7XG4gIGlmICh0cmFjayA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmaWx0ZXJlZFJlc3VsdDtcbiAgfVxuICBjb25zdCB0cmFja1N0YXRzID0gW107XG4gIHJlc3VsdC5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICBpZiAodmFsdWUudHlwZSA9PT0gJ3RyYWNrJyAmJlxuICAgICAgICB2YWx1ZS50cmFja0lkZW50aWZpZXIgPT09IHRyYWNrLmlkKSB7XG4gICAgICB0cmFja1N0YXRzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHRyYWNrU3RhdHMuZm9yRWFjaCh0cmFja1N0YXQgPT4ge1xuICAgIHJlc3VsdC5mb3JFYWNoKHN0YXRzID0+IHtcbiAgICAgIGlmIChzdGF0cy50eXBlID09PSBzdHJlYW1TdGF0c1R5cGUgJiYgc3RhdHMudHJhY2tJZCA9PT0gdHJhY2tTdGF0LmlkKSB7XG4gICAgICAgIHdhbGtTdGF0cyhyZXN1bHQsIHN0YXRzLCBmaWx0ZXJlZFJlc3VsdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gZmlsdGVyZWRSZXN1bHQ7XG59XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJMb2FkZXJXb3JrZXIud29ya2VyLmpzXCIpO1xufTsiLCJpbXBvcnQgeyBnbENvbG9yMyB9IGZyb20gXCIuLi8uLi9nbC9nbENvbG9yXCI7XHJcblxyXG4vKipcclxuICogVGhlIGl0ZW1zIHJldHVybmVkIGZyb20gZXhhbWluaW5nIHRoZSBjdXJyZW50IHZpZXdcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbG9yRGF0YSB7XHJcbiAgIG1heENocm9tYTogbnVtYmVyLFxyXG4gICBoaWdobGlnaHRDb2xvcjogZ2xDb2xvcjMsXHJcbiAgIGF2Z0xpZ2h0Q29sb3I6IGdsQ29sb3IzLFxyXG4gICBsaWdodGVzdExpZ2h0Q29sb3I6IGdsQ29sb3IzLFxyXG4gICBkYXJrZXN0TGlnaHRDb2xvcjogZ2xDb2xvcjMsXHJcbiAgIGF2Z1NoYWRvd0NvbG9yOiBnbENvbG9yMyxcclxuICAgbGlnaHRlc3RTaGFkb3dDb2xvcjogZ2xDb2xvcjMsXHJcbiAgIGRhcmtlc3RTaGFkb3dDb2xvcjogZ2xDb2xvcjMsXHJcbiAgIHRlcm1pbmF0b3JDb2xvcjogZ2xDb2xvcjMsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGdyYWJzIGEgY29weSBvZiB0aGUgcmVuZGVyZWQgdGV4dHVyZSBhbmQgZXhhbWluZXMgaXQgZm9yXHJcbiAqIGNvbG9yIHZhbHVlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb2xvckFuYWx5emVyIHtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBUaGUgYXJyYXkgd2hlcmUgd2UnbGwgZHVtcCB0aGUgdGV4dHVyZSB0by4gQ2FjaGUgdGhpcyBhcnJheSBpbnN0ZWFkIG9mXHJcbiAgICAqIGFsbG9jYXRpbmcgYSBuZXcgb25lIGZvciBlYWNoIGZyYW1lLlxyXG4gICAgKi9cclxuICAgcHJpdmF0ZSBwaXhlbHM6IEZsb2F0MzJBcnJheTtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTaXplIG9mIHRoZSB0ZXh0dXJlXHJcbiAgICAqL1xyXG4gICBwcml2YXRlIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gc2l6ZSBUaGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgYnVmZmVyXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3Ioc2l6ZTogbnVtYmVyKSB7XHJcblxyXG4gICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG5cclxuICAgICAgLy8gYWxsb2NhdGUgdGhlIGJ1ZmZlciB1c2VkIGZvciBncmFic1xyXG4gICAgICB0aGlzLnBpeGVscyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5zaXplICogdGhpcy5zaXplICogNCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBSdW5zIHRoZSBhbmFseXNpcyAtIGdyYWJzIGEgY29weSBvZiB0aGUgZnJhbWUgYnVmZmVyIGFuZCBzY2FucyBpdC5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBhbHBoYUxpZ2h0IFRoZSBhbHBoYSB2YWx1ZSBmb3IgdGhpbmdzIGluIGxpZ2h0LiBWYWx1ZXMgYWJvdmUgdGhpcyBhcmUgZHVlIHRvIHNwZWN1bGFyIGxpZ2h0aW5nLlxyXG4gICAgKiBAcGFyYW0gYWxwaGFTaGFkb3cgVGhlIGFscGhhIHZhbHVlIGZvciB0aGluZ3MgaW4gc2hhZG93LlxyXG4gICAgKi9cclxuICAgcHVibGljIHJ1bihcclxuICAgICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXHJcbiAgICAgIGFscGhhTGlnaHQ6IG51bWJlcixcclxuICAgICAgYWxwaGFTaGFkb3c6IG51bWJlclxyXG4gICApOiBJQ29sb3JEYXRhIHtcclxuXHJcbiAgICAgIGxldCBkYXRhOiBJQ29sb3JEYXRhID0ge1xyXG4gICAgICAgICBtYXhDaHJvbWE6IDAsXHJcbiAgICAgICAgIGF2Z0xpZ2h0Q29sb3I6IG5ldyBnbENvbG9yMyhbMCwgMCwgMF0pLFxyXG4gICAgICAgICBsaWdodGVzdExpZ2h0Q29sb3I6IG5ldyBnbENvbG9yMyhbMCwgMCwgMF0pLFxyXG4gICAgICAgICBkYXJrZXN0TGlnaHRDb2xvcjogbmV3IGdsQ29sb3IzKFsxLCAxLCAxXSksXHJcbiAgICAgICAgIGF2Z1NoYWRvd0NvbG9yOiBuZXcgZ2xDb2xvcjMoWzAsIDAsIDBdKSxcclxuICAgICAgICAgbGlnaHRlc3RTaGFkb3dDb2xvcjogbmV3IGdsQ29sb3IzKFswLCAwLCAwXSksXHJcbiAgICAgICAgIGRhcmtlc3RTaGFkb3dDb2xvcjogbmV3IGdsQ29sb3IzKFsxLCAxLCAxXSksXHJcbiAgICAgICAgIHRlcm1pbmF0b3JDb2xvcjogbmV3IGdsQ29sb3IzKFswLCAwLCAwXSksXHJcbiAgICAgICAgIGhpZ2hsaWdodENvbG9yOiBuZXcgZ2xDb2xvcjMoWzAsIDAsIDBdKSxcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVE9ETyBoYW5kbGUgY2FzZSB3aGVuIHRoZSB0ZXh0IHR5cGUgaXMgVU5TSUdORURfQllURVxyXG4gICAgICAvLyBUT0RPIGdsLkZMT0FUIG5vdCBzdXBwb3J0ZWQgb24gU2FmYXJpLlxyXG4gICAgICBnbC5yZWFkUGl4ZWxzKDAsIDAsIHRoaXMuc2l6ZSwgdGhpcy5zaXplLCBnbC5SR0JBLCBnbC5GTE9BVCwgdGhpcy5waXhlbHMpO1xyXG5cclxuICAgICAgbGV0IG51bUxpZ2h0UGl4ZWxzID0gMDtcclxuICAgICAgbGV0IG51bVNoYWRvd1BpeGVscyA9IDA7XHJcbiAgICAgIGxldCBudW1UZXJtaW5hdG9yUGl4ZWxzID0gMDtcclxuXHJcbiAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHRoaXMuc2l6ZTsgcm93KyspIHtcclxuICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgdGhpcy5zaXplOyBjb2wrKykge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAocm93ICogdGhpcy5zaXplICsgY29sKSAqIDQ7XHJcbiAgICAgICAgICAgIGxldCByID0gdGhpcy5waXhlbHNbaW5kZXggKyAwXTtcclxuICAgICAgICAgICAgbGV0IGcgPSB0aGlzLnBpeGVsc1tpbmRleCArIDFdO1xyXG4gICAgICAgICAgICBsZXQgYiA9IHRoaXMucGl4ZWxzW2luZGV4ICsgMl07XHJcbiAgICAgICAgICAgIGxldCBhID0gdGhpcy5waXhlbHNbaW5kZXggKyAzXTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlnbm9yZSB2YWx1ZXMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIGJhbGxcclxuICAgICAgICAgICAgaWYgKGEgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBhdmcgPSAociArIGcgKyBiKSAvIDM7XHJcbiAgICAgICAgICAgIGxldCBjaHJvbWEgPSAoTWF0aC5hYnMociAtIGF2ZykgKyBNYXRoLmFicyhnIC0gYXZnKSArIE1hdGguYWJzKGIgLSBhdmcpKSAvICg0IC8gMyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hyb21hID4gZGF0YS5tYXhDaHJvbWEpIHtcclxuICAgICAgICAgICAgICAgZGF0YS5tYXhDaHJvbWEgPSBjaHJvbWE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb2xvciA9IG5ldyBnbENvbG9yMyhbciwgZywgYl0pO1xyXG4gICAgICAgICAgICBpZiAoYSA9PSBhbHBoYUxpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgIG51bUxpZ2h0UGl4ZWxzKys7XHJcbiAgICAgICAgICAgICAgIGlmIChkYXRhLmxpZ2h0ZXN0TGlnaHRDb2xvciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRhdGEubGlnaHRlc3RMaWdodENvbG9yID0gY29sb3I7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgaWYgKGRhdGEuZGFya2VzdExpZ2h0Q29sb3IgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICBkYXRhLmRhcmtlc3RMaWdodENvbG9yID0gY29sb3I7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZGF0YS5saWdodGVzdExpZ2h0Q29sb3IgPSBnbENvbG9yMy5saWdodGVzdChkYXRhLmxpZ2h0ZXN0TGlnaHRDb2xvciwgY29sb3IpO1xyXG4gICAgICAgICAgICAgICBkYXRhLmRhcmtlc3RMaWdodENvbG9yID0gZ2xDb2xvcjMuZGFya2VzdChkYXRhLmRhcmtlc3RMaWdodENvbG9yLCBjb2xvcik7XHJcbiAgICAgICAgICAgICAgIGRhdGEuYXZnTGlnaHRDb2xvci5yICs9IGNvbG9yLnI7XHJcbiAgICAgICAgICAgICAgIGRhdGEuYXZnTGlnaHRDb2xvci5iICs9IGNvbG9yLmI7XHJcbiAgICAgICAgICAgICAgIGRhdGEuYXZnTGlnaHRDb2xvci5nICs9IGNvbG9yLmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYSA9PSBhbHBoYVNoYWRvdykge1xyXG4gICAgICAgICAgICAgICBudW1TaGFkb3dQaXhlbHMrKztcclxuICAgICAgICAgICAgICAgaWYgKGRhdGEubGlnaHRlc3RTaGFkb3dDb2xvciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRhdGEubGlnaHRlc3RTaGFkb3dDb2xvciA9IGNvbG9yO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGlmIChkYXRhLmRhcmtlc3RTaGFkb3dDb2xvciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRhdGEuZGFya2VzdFNoYWRvd0NvbG9yID0gY29sb3I7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZGF0YS5saWdodGVzdFNoYWRvd0NvbG9yID0gZ2xDb2xvcjMubGlnaHRlc3QoZGF0YS5saWdodGVzdFNoYWRvd0NvbG9yLCBjb2xvcik7XHJcbiAgICAgICAgICAgICAgIGRhdGEuZGFya2VzdFNoYWRvd0NvbG9yID0gZ2xDb2xvcjMuZGFya2VzdChkYXRhLmRhcmtlc3RTaGFkb3dDb2xvciwgY29sb3IpO1xyXG4gICAgICAgICAgICAgICBkYXRhLmF2Z1NoYWRvd0NvbG9yLnIgKz0gY29sb3IucjtcclxuICAgICAgICAgICAgICAgZGF0YS5hdmdTaGFkb3dDb2xvci5iICs9IGNvbG9yLmI7XHJcbiAgICAgICAgICAgICAgIGRhdGEuYXZnU2hhZG93Q29sb3IuZyArPSBjb2xvci5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGEgPiBhbHBoYUxpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgIGRhdGEuaGlnaGxpZ2h0Q29sb3IgPSBnbENvbG9yMy5saWdodGVzdChkYXRhLmhpZ2hsaWdodENvbG9yLCBjb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB0ZXJtaW5hdG9yID0gKGFscGhhTGlnaHQgKyBhbHBoYVNoYWRvdykgLyAyLjA7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhhIC0gdGVybWluYXRvcikgPCAwLjEpIHtcclxuICAgICAgICAgICAgICAgbnVtVGVybWluYXRvclBpeGVscysrO1xyXG4gICAgICAgICAgICAgICBkYXRhLnRlcm1pbmF0b3JDb2xvci5yICs9IGNvbG9yLnI7XHJcbiAgICAgICAgICAgICAgIGRhdGEudGVybWluYXRvckNvbG9yLmIgKz0gY29sb3IuYjtcclxuICAgICAgICAgICAgICAgZGF0YS50ZXJtaW5hdG9yQ29sb3IuZyArPSBjb2xvci5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG51bUxpZ2h0UGl4ZWxzID4gMCkge1xyXG4gICAgICAgICBkYXRhLmF2Z0xpZ2h0Q29sb3IuciAvPSBudW1MaWdodFBpeGVscztcclxuICAgICAgICAgZGF0YS5hdmdMaWdodENvbG9yLmcgLz0gbnVtTGlnaHRQaXhlbHM7XHJcbiAgICAgICAgIGRhdGEuYXZnTGlnaHRDb2xvci5iIC89IG51bUxpZ2h0UGl4ZWxzO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChudW1TaGFkb3dQaXhlbHMgPiAwKSB7XHJcbiAgICAgICAgIGRhdGEuYXZnU2hhZG93Q29sb3IuciAvPSBudW1TaGFkb3dQaXhlbHM7XHJcbiAgICAgICAgIGRhdGEuYXZnU2hhZG93Q29sb3IuZyAvPSBudW1TaGFkb3dQaXhlbHM7XHJcbiAgICAgICAgIGRhdGEuYXZnU2hhZG93Q29sb3IuYiAvPSBudW1TaGFkb3dQaXhlbHM7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG51bVRlcm1pbmF0b3JQaXhlbHMgPiAwKSB7XHJcbiAgICAgICAgIGRhdGEudGVybWluYXRvckNvbG9yLnIgLz0gbnVtVGVybWluYXRvclBpeGVscztcclxuICAgICAgICAgZGF0YS50ZXJtaW5hdG9yQ29sb3IuZyAvPSBudW1UZXJtaW5hdG9yUGl4ZWxzO1xyXG4gICAgICAgICBkYXRhLnRlcm1pbmF0b3JDb2xvci5iIC89IG51bVRlcm1pbmF0b3JQaXhlbHM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBodG1sQ29sb3IgfSBmcm9tIFwiLi4vLi4vVXRpbC9odG1sQ29sb3JcIjtcclxuaW1wb3J0IHsgSUFwcCB9IGZyb20gXCIuLi8uLi9JQXBwXCI7XHJcbmltcG9ydCB7IFBhdGhUcmFjZXJSZW5kZXJlciwgUmVuZGVyTW9kZSB9IGZyb20gXCIuL1BhdGhUcmFjZXJSZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBTcGhlcmljYWxDb29yZCB9IGZyb20gXCIuLi8uLi9VdGlsM0QvU3BoZXJpY2FsQ29vcmRcIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4uLy4uL0dVSS9TbGlkZXJcIjtcclxuaW1wb3J0IHsgaXNNb2JpbGUsIGNsYW1wIH0gZnJvbSBcIi4uLy4uL1V0aWwvR2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBQb2ludGVyRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4uLy4uL0dVSS9Qb2ludGVyRXZlbnRIYW5kbGVyXCI7XHJcbmltcG9ydCB7IFZlYzIsIFZlYzMgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL1ZlY1wiO1xyXG5pbXBvcnQgeyBUcmlhbmdsZU9iaiB9IGZyb20gXCIuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmpcIjtcclxuaW1wb3J0IHsgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZSB9IGZyb20gXCIuLi8uLi9nbC9nbENvbG9yV2l0aFRlbXBlcmF0dXJlXCI7XHJcbmltcG9ydCB7IE1lbnViYXIgfSBmcm9tIFwiLi4vLi4vR1VJL01lbnVcIjtcclxuaW1wb3J0IHsgVHJpYW5nbGVPYmpCdWlsZGVyIH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9UcmlhbmdsZU9iakJ1aWxkZXJcIjtcclxuaW1wb3J0IHsgVHJpYW5nbGVPYmpGaWxlIH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9UcmlhbmdsZU9iakZpbGVcIjtcclxuaW1wb3J0IHsgTWF0NCB9IGZyb20gXCIuLi8uLi9VdGlsM0QvTWF0XCI7XHJcblxyXG5sZXQgc2tpblRvbmVzID0gW1xyXG4gICBuZXcgaHRtbENvbG9yKFsyNDAsIDIyMywgMjE0XSksXHJcbiAgIG5ldyBodG1sQ29sb3IoWzI1NSwgMjE4LCAyMDBdKSxcclxuICAgbmV3IGh0bWxDb2xvcihbMjMyLCAxNzksIDExN10pLFxyXG4gICBuZXcgaHRtbENvbG9yKFsxOTAsIDEzNiwgODddKSxcclxuICAgLy8gICBuZXcgaHRtbENvbG9yKFsxMTUsIDkxLCA1OV0pLFxyXG4gICBuZXcgaHRtbENvbG9yKFsxMzksIDczLCA2NV0pXHJcbiAgIC8vICAgbmV3IGh0bWxDb2xvcihbMTMyLCA1NSwgMzRdKSxcclxuICAgLy9uZXcgaHRtbENvbG9yKFs2MSwgMTIsIDJdKSxcclxuICAgLy8gICBuZXcgaHRtbENvbG9yKFszOCwgNywgMV0pXHJcbl07XHJcblxyXG5lbnVtIFBvaW50ZXJNb2RlIHtcclxuICAgVmlldyxcclxuICAgTGlnaHQsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYXRoVHJhY2VyQXBwIGltcGxlbWVudHMgSUFwcCB7XHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwcml2YXRlIHJlbmRlcmVyOiBQYXRoVHJhY2VyUmVuZGVyZXI7XHJcbiAgIHByaXZhdGUgcG9pbnRlck1vZGU6IFBvaW50ZXJNb2RlID0gUG9pbnRlck1vZGUuVmlldztcclxuICAgcHJpdmF0ZSBwb2ludGVyTW9kZVNwZWNpYWwgPSBmYWxzZTtcclxuICAgcHJpdmF0ZSBwb3M6IFNwaGVyaWNhbENvb3JkO1xyXG4gICBwcml2YXRlIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgIHByaXZhdGUgYW5pbWF0aW9uRnJhbWU6IG51bWJlcjtcclxuXHJcbiAgIHByaXZhdGUgaW50ZW5zaXR5U2xpZGVyOiBTbGlkZXI7XHJcbiAgIHByaXZhdGUgbGlnaHRDb2xvclNsaWRlcjogU2xpZGVyO1xyXG4gICBwcml2YXRlIGJhbGxDb2xvclNsaWRlcjogU2xpZGVyO1xyXG4gICBwcml2YXRlIGFtYmllbnRJbnRlbnNpdHlTbGlkZXI6IFNsaWRlcjtcclxuXHJcbiAgIHByaXZhdGUgYW5nbGVYID0gMC41O1xyXG4gICBwcml2YXRlIGFuZ2xlWSA9IDAuNzU7XHJcbiAgIHByaXZhdGUgem9vbVogPSAzLjU7XHJcblxyXG4gICBwcml2YXRlIGxhc3RUaW1lczogbnVtYmVyW10gPSBbXTtcclxuICAgcHJpdmF0ZSByZWFkb25seSBNQVhfU0FNUExFUyA9IDUwMDtcclxuXHJcbiAgIHByaXZhdGUgcXVlcnk6IHN0cmluZztcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihxdWVyeTogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNyZWF0ZShkaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblxyXG4gICAgICBkaXYuaWQgPSAnUGF0aFRyYWNlckFwcCc7XHJcblxyXG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9ICdDb250YWluZXInO1xyXG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHJcbiAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgIHRoaXMuY2FudmFzLmlkID0gJ2NhbnZhc3gnO1xyXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xyXG5cclxuICAgICAgbGV0IGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbDInKTtcclxuXHJcbiAgICAgIGlmICghY29udGV4dCkge1xyXG4gICAgICAgICBjb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghY29udGV4dCkge1xyXG4gICAgICAgICAvLyBUT0RPIGRpc3BsYXkgYSBtZXNzYWdlIGFib3V0IG5vdCBiZWluZyBhYmxlIHRvIGNyZWF0ZSBhIFdlYkdMIGNvbnRleHRcclxuICAgICAgICAgY29uc29sZS5sb2coXCJVbmFibGUgdG8gZ2V0IFdlYkdMIGNvbnRleHRcIik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5nbCA9IGNvbnRleHQ7XHJcblxyXG4gICAgICBsZXQgc2l6ZSA9IDUxMjtcclxuICAgICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgICAgIHNpemUgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2wuY2FudmFzLndpZHRoID0gc2l6ZTtcclxuICAgICAgdGhpcy5nbC5jYW52YXMuaGVpZ2h0ID0gc2l6ZTtcclxuICAgICAgZGl2LnN0eWxlLndpZHRoID0gc2l6ZSArICdweCc7XHJcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4JztcclxuXHJcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUGF0aFRyYWNlclJlbmRlcmVyKHRoaXMuZ2wpO1xyXG5cclxuICAgICAgbGV0IGhhbmRsZXIgPSBuZXcgUG9pbnRlckV2ZW50SGFuZGxlcih0aGlzLmNhbnZhcyk7XHJcbiAgICAgIGhhbmRsZXIub25EcmFnID0gKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpID0+IHRoaXMub25Nb3ZlKHBvcywgZGVsdGEpO1xyXG4gICAgICBoYW5kbGVyLm9uQ2xpY2sgPSAocG9zOiBWZWMyKSA9PiB0aGlzLmNsaWNrKHBvcy54LCBwb3MueSk7XHJcbiAgICAgIGhhbmRsZXIub25Eb3duID0gKHBvczogVmVjMikgPT4gdGhpcy5vbkRvd24ocG9zLngsIHBvcy55KTtcclxuXHJcbiAgICAgIHRoaXMubG9hZE1vZGVsKHRoaXMucXVlcnkpLnRoZW4oKHRPYmo6IFRyaWFuZ2xlT2JqKSA9PiB7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0T2JqKHRPYmopO1xyXG4gICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpO1xyXG4gICAgICB9KVxyXG5cclxuICAgICAgbGV0IGRyYXdUaW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGRyYXdUaW1lLmlkID0gJ2RyYXdUaW1lJztcclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRyYXdUaW1lKTtcclxuXHJcbiAgICAgIGxldCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkZXNjcmlwdGlvbi5pZCA9ICdkZXNjcmlwdGlvbic7XHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbik7XHJcblxyXG4gICAgICBsZXQgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGJ1dHRvbi5pZCA9ICdtb2RlQnV0dG9uJztcclxuICAgICAgYnV0dG9uLmlubmVySFRNTCA9ICdWaWV3JztcclxuICAgICAgdGhpcy5wb2ludGVyTW9kZSA9IFBvaW50ZXJNb2RlLlZpZXc7XHJcbiAgICAgIGJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICBzd2l0Y2ggKHRoaXMucG9pbnRlck1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSBQb2ludGVyTW9kZS5WaWV3OlxyXG4gICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gJ0xpZ2h0JztcclxuICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyTW9kZSA9IFBvaW50ZXJNb2RlLkxpZ2h0O1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgUG9pbnRlck1vZGUuTGlnaHQ6XHJcbiAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSAnVmlldyc7XHJcbiAgICAgICAgICAgICAgIHRoaXMucG9pbnRlck1vZGUgPSBQb2ludGVyTW9kZS5WaWV3O1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG5cclxuICAgICAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb2dyZXNzQmFyLmlkID0gJ3Byb2dyZXNzQmFyJztcclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcclxuXHJcbiAgICAgIHRoaXMuaW50ZW5zaXR5U2xpZGVyID0gbmV3IFNsaWRlcihkaXYsIHtcclxuICAgICAgICAgaWQ6ICdMaWdodEludGVuc2l0eScsXHJcbiAgICAgICAgIGxhYmVsOiAnTGlnaHQgSW50ZW5zaXR5JyxcclxuICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICBtYXg6IDEsXHJcbiAgICAgICAgIHZhbHVlOiB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVMaWdodEludGVuc2l0eSxcclxuICAgICAgICAgY29sb3JzOiBbaHRtbENvbG9yLmJsYWNrLCBodG1sQ29sb3Iud2hpdGVdLFxyXG4gICAgICAgICBvbmlucHV0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUxpZ2h0SW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHlTbGlkZXIudmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gYnVpbGQgYSByYW5nZSBvZiBjb2xvcnNcclxuICAgICAgbGV0IG1pbiA9IDIwMDA7XHJcbiAgICAgIGxldCBtYXggPSAxMDAwMDtcclxuICAgICAgbGV0IGNvbG9yczogaHRtbENvbG9yW10gPSBbXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB0ZW1wID0gbWluICsgKGkgLyA5KSAqIChtYXggLSBtaW4pO1xyXG4gICAgICAgICBjb2xvcnMucHVzaChnbENvbG9yV2l0aFRlbXBlcmF0dXJlLmNyZWF0ZSh0ZW1wKS50b0h0bWxDb2xvcigpKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxpZ2h0Q29sb3JTbGlkZXIgPSBuZXcgU2xpZGVyKGRpdiwge1xyXG4gICAgICAgICBpZDogJ0xpZ2h0Q29sb3InLFxyXG4gICAgICAgICBsYWJlbDogJ0xpZ2h0IENvbG9yJyxcclxuICAgICAgICAgbWluOiAyMDAwLFxyXG4gICAgICAgICBtYXg6IDEwMDAwLFxyXG4gICAgICAgICB2YWx1ZTogZ2xDb2xvcldpdGhUZW1wZXJhdHVyZS5kYXlsaWdodC50ZW1wZXJhdHVyZSxcclxuICAgICAgICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICAgICAgIG9uaW5wdXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRMaWdodENvbG9yKCk7XHJcbiAgICAgICAgIH0sXHJcbiAgICAgICAgIGdldFRleHQ6IChzbGlkZXI6IFNsaWRlcikgPT4geyByZXR1cm4gc2xpZGVyLnZhbHVlLnRvRml4ZWQoKSArIFwiS1wiIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBhcHBseSB0aGUgaW5pdGlhbCBjb2xvcnNcclxuICAgICAgdGhpcy5zZXRMaWdodENvbG9yKCk7XHJcblxyXG4gICAgICB0aGlzLmJhbGxDb2xvclNsaWRlciA9IG5ldyBTbGlkZXIoZGl2LCB7XHJcbiAgICAgICAgIGlkOiAnQmFsbENvbG9yJyxcclxuICAgICAgICAgbGFiZWw6ICdCYWxsIENvbG9yJyxcclxuICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICBtYXg6IDEwMCxcclxuICAgICAgICAgdmFsdWU6IDUwLFxyXG4gICAgICAgICBjb2xvcnM6IHNraW5Ub25lcyxcclxuICAgICAgICAgb25pbnB1dDogKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVPYmpDb2xvciA9IHRoaXMuYmFsbENvbG9yU2xpZGVyLmdsQ29sb3I7XHJcbiAgICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gbWFrZSBzdXJlIGdsIG1hdGNoZXMgdGhlIGluaXRpYWwgVUkgc2V0dGluZ1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVPYmpDb2xvciA9IHRoaXMuYmFsbENvbG9yU2xpZGVyLmdsQ29sb3I7XHJcblxyXG4gICAgICB0aGlzLmFtYmllbnRJbnRlbnNpdHlTbGlkZXIgPSBuZXcgU2xpZGVyKGRpdiwge1xyXG4gICAgICAgICBpZDogJ0FtYmllbnRJbnRlbnNpdHknLFxyXG4gICAgICAgICBsYWJlbDogJ0FtYmllbnQgTGlnaHQnLFxyXG4gICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgIG1heDogMSxcclxuICAgICAgICAgdmFsdWU6IHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUFtYmllbnRMaWdodEludGVuc2l0eSxcclxuICAgICAgICAgY29sb3JzOiBbaHRtbENvbG9yLmJsYWNrLCBodG1sQ29sb3Iud2hpdGVdLFxyXG4gICAgICAgICBvbmlucHV0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUFtYmllbnRMaWdodEludGVuc2l0eSA9IHRoaXMuYW1iaWVudEludGVuc2l0eVNsaWRlci52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5yZXN0YXJ0KCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmRlbGV0ZSgpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYnVpbGRNZW51KG1lbnViYXI6IE1lbnViYXIpIHtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBsb2FkTW9kZWwocXVlcnk6IHN0cmluZyk6IFByb21pc2U8VHJpYW5nbGVPYmo+IHtcclxuICAgICAgaWYgKHF1ZXJ5ICYmIHF1ZXJ5LnRvTG93ZXJDYXNlKCkgPT09ICdzcGhlcmUnKSB7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUJhbGxSYWRpdXMgPSAwO1xyXG4gICAgICAgICBsZXQgcmFkaXVzID0gMC41O1xyXG4gICAgICAgICBsZXQgY2VudGVyID0gbmV3IFZlYzMoWzAsIHJhZGl1cywgMF0pO1xyXG4gICAgICAgICBsZXQgdE9iaiA9IG5ldyBUcmlhbmdsZU9iakJ1aWxkZXIoKTtcclxuICAgICAgICAgdE9iai5hZGRTcGhlcmUoOCwgcmFkaXVzLCBjZW50ZXIpO1xyXG4gICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRPYmopO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHF1ZXJ5ICYmIHF1ZXJ5LnRvTG93ZXJDYXNlKCkgPT09ICdjdWJlJykge1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVCYWxsUmFkaXVzID0gMDtcclxuICAgICAgICAgbGV0IHNpemUgPSAwLjg7XHJcbiAgICAgICAgIGxldCBjZW50ZXIgPSBuZXcgVmVjMyhbMCwgc2l6ZSAvIDIuMCwgMF0pO1xyXG4gICAgICAgICBsZXQgdE9iaiA9IG5ldyBUcmlhbmdsZU9iakJ1aWxkZXIoKTtcclxuICAgICAgICAgdE9iai5hZGRDdWJlKHNpemUsIGNlbnRlcik7XHJcbiAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodE9iaik7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAocXVlcnkgJiYgcXVlcnkudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgnLm9iaicpKSB7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUJhbGxSYWRpdXMgPSAwO1xyXG4gICAgICAgICByZXR1cm4gZmV0Y2gocXVlcnkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxyXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICBsZXQgdE9iaiA9IG5ldyBUcmlhbmdsZU9iakZpbGUocXVlcnksIHJlcyk7XHJcbiAgICAgICAgICAgICAgIHJldHVybiB0T2JqO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHNldExpZ2h0Q29sb3IoKSB7XHJcblxyXG4gICAgICAvLyB1cGRhdGUgdGhlIGNvbG9ycyBmb3IgdGhlIGludGVuc2l0eSBzbGlkZXJcclxuICAgICAgdGhpcy5pbnRlbnNpdHlTbGlkZXIuY29sb3JzID0gW2h0bWxDb2xvci5ibGFjaywgdGhpcy5saWdodENvbG9yU2xpZGVyLmh0bWxDb2xvcl07XHJcblxyXG4gICAgICAvLyB1c2UgdGhlIHZhbHVlIGluIHJlbmRlcmluZ1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVMaWdodENvbG9yID0gdGhpcy5saWdodENvbG9yU2xpZGVyLmdsQ29sb3I7XHJcblxyXG4gICAgICB0aGlzLnJlc3RhcnQoKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvbkRvd24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuXHJcbiAgICAgIHRoaXMucG9pbnRlck1vZGVTcGVjaWFsID0gKHggPCAwLjEgKiB0aGlzLmNhbnZhcy53aWR0aCkgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLnBvcyA9IFNwaGVyaWNhbENvb3JkLmZyb21YWVoodGhpcy5yZW5kZXJlci51bmlmb3Jtcy51TGlnaHRQb3MudmFsdWVzKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvbk1vdmUocG9zOiBWZWMyLCBkZWx0YTogVmVjMikge1xyXG4gICAgICBpZiAodGhpcy5wb2ludGVyTW9kZSA9PT0gUG9pbnRlck1vZGUuVmlldykge1xyXG4gICAgICAgICBpZiAodGhpcy5wb2ludGVyTW9kZVNwZWNpYWwpIHtcclxuICAgICAgICAgICAgdGhpcy56b29tWiAtPSAoZGVsdGEueSkgKiAwLjAxO1xyXG4gICAgICAgICAgICB0aGlzLnpvb21aID0gY2xhbXAodGhpcy56b29tWiwgMSwgOCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYW5nbGVzIGJhc2VkIG9uIGhvdyBmYXIgd2UgbW92ZWQgc2luY2UgbGFzdCB0aW1lXHJcbiAgICAgICAgICAgIHRoaXMuYW5nbGVZIC09IChkZWx0YS54KSAqIDAuMDE7XHJcbiAgICAgICAgICAgIHRoaXMuYW5nbGVYICs9IChkZWx0YS55KSAqIDAuMDE7XHJcblxyXG4gICAgICAgICAgICAvLyBkb24ndCBnbyB1cHNpZGUgZG93blxyXG4gICAgICAgICAgICB0aGlzLmFuZ2xlWCA9IE1hdGgubWF4KHRoaXMuYW5nbGVYLCAtTWF0aC5QSSAvIDIgKyAwLjAxKTtcclxuICAgICAgICAgICAgdGhpcy5hbmdsZVggPSBNYXRoLm1pbih0aGlzLmFuZ2xlWCwgTWF0aC5QSSAvIDIgLSAwLjAxKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHRoaXMucG9pbnRlck1vZGUgPT09IFBvaW50ZXJNb2RlLkxpZ2h0KSB7XHJcblxyXG4gICAgICAgICBpZiAodGhpcy5wb2ludGVyTW9kZVNwZWNpYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3MucmFkaXVzIC09IChkZWx0YS55KSAqIDAuMDA1O1xyXG4gICAgICAgICAgICB0aGlzLnBvcy5yYWRpdXMgPSBjbGFtcCh0aGlzLnBvcy5yYWRpdXMsIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUJhbGxSYWRpdXMgKyAwLjUsIDUpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVMaWdodFBvcy52YWx1ZXMgPSB0aGlzLnBvcy50b1hZWigpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBvcy5yb3RhdGlvbkFuZ2xlICs9ICgtZGVsdGEueCk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zLmVsZXZhdGlvbkFuZ2xlICs9ICgtZGVsdGEueSk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zLmVsZXZhdGlvbkFuZ2xlID0gY2xhbXAodGhpcy5wb3MuZWxldmF0aW9uQW5nbGUsIDAsIDE4MCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUxpZ2h0UG9zLnZhbHVlcyA9IHRoaXMucG9zLnRvWFlaKCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY2xlYXIgdGhlIHNhbXBsZSBidWZmZXJcclxuICAgICAgdGhpcy5yZXN0YXJ0KCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBQcm9jZXNzZXMgYSBjbGljay90b3VjaCBldmVudCBhdCB0aGUgZGVzaWduYXRlZCBjb29yZGluYXRlcy4gSWYgYSBoaXRcclxuICAgICogb2NjdXJzLCB0aGUgY2xpY2tlZCBvbiB2aWV3IGlzIHN3YXBwZWQgZm9yIHRoZSBwcmltYXJ5IHZpZXcgYW5kIHRydWVcclxuICAgICogaXMgcmV0dXJuZWQuIElmIG5vIGhpdCBvY2N1cnMsIGZhbHNlIGlzIHJldHVybmVkLlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHggVGhlIHggY29vcmRpbmF0ZS5cclxuICAgICogQHBhcmFtIHkgVGhlIHkgY29vcmRpbmF0ZS5cclxuICAgICogQHJldHVybnMgdHJ1ZSBpZiBhIGhpdCBvbiBvbmUgb2YgdGhlIHZpZXdzIG9jY3Vycy5cclxuICAgICovXHJcbiAgIHByaXZhdGUgY2xpY2soeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgLy8gVE9ETyBoYW5kbGUgdGhpcyB3aXRoaW4gdGhlIFBhdGhUcmFjZXIgY2xhc3Mgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGhhcmQgY29kZSB2aWV3IHN0dWZmXHJcbiAgICAgIGxldCBzaXplID0gMC4yICogdGhpcy5jYW52YXMud2lkdGg7XHJcblxyXG4gICAgICBpZiAoeSA8IHNpemUpIHtcclxuXHJcbiAgICAgICAgIGlmICh4ID4gdGhpcy5jYW52YXMud2lkdGggLSAxICogc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN3YXAoMik7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGVzY3JpcHRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSBpZiAoeCA+IHRoaXMuY2FudmFzLndpZHRoIC0gMiAqIHNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5zd2FwKDEpO1xyXG4gICAgICAgICAgICB0aGlzLnNldERlc2NyaXB0aW9uKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKHggPiB0aGlzLmNhbnZhcy53aWR0aCAtIDMgKiBzaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3dhcCgwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXREZXNjcmlwdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgc2V0RGVzY3JpcHRpb24oKSB7XHJcbiAgICAgIGxldCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpO1xyXG4gICAgICBzd2l0Y2ggKHRoaXMucmVuZGVyZXIucmVuZGVyTW9kZSkge1xyXG4gICAgICAgICBjYXNlIFJlbmRlck1vZGUuQXJ0aXN0OlxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbi5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgIGNhc2UgUmVuZGVyTW9kZS5DaHJvbWE6XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLmlubmVyVGV4dCA9IFwiQ2hyb21hIFZpZXc6IHJlZD1oaWdoZXN0IGNocm9tYVwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgIGNhc2UgUmVuZGVyTW9kZS5WYWx1ZTpcclxuICAgICAgICAgICAgZGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gXCJWYWx1ZSBWaWV3XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgY2FzZSBSZW5kZXJNb2RlLkJhbmRzOlxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbi5pbm5lclRleHQgPSBcIjUgQ29sb3IgKyBIaWdobGlnaHQgVmlld1wiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHVwZGF0ZVRleHR1cmUoKSB7XHJcbiAgICAgIGxldCBtb2RlbHZpZXcgPSBNYXQ0Lm1ha2VMb29rQXQoXHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUV5ZSxcclxuICAgICAgICAgbmV3IFZlYzMoWzAsIDEsIDBdKSwgIC8vIGNlbnRlciBwb2ludFxyXG4gICAgICAgICBuZXcgVmVjMyhbMCwgMSwgMF0pICAgLy8gdXAgdmVjdG9yXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBsZXQgcHJvamVjdGlvbiA9IE1hdDQubWFrZVBlcnNwZWN0aXZlKDU1LCAxLCAwLjEsIDEwMCk7XHJcbiAgICAgIGxldCBtb2RlbHZpZXdQcm9qZWN0aW9uID0gcHJvamVjdGlvbi5tdWx0TShtb2RlbHZpZXcpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnVwZGF0ZVRleHR1cmUobW9kZWx2aWV3UHJvamVjdGlvbik7XHJcbiAgIH07XHJcblxyXG4gICBwcml2YXRlIGRpc3BsYXlUZXh0dXJlKCk6IHZvaWQge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmRpc3BsYXlUZXh0dXJlKCk7XHJcbiAgIH07XHJcblxyXG4gICBwdWJsaWMgcmVzdGFydCgpOiB2b2lkIHtcclxuICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5yZXN0YXJ0KCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHN3YXAocG9zOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zd2FwKHBvcyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyB0aWNrKCkge1xyXG5cclxuICAgICAgdGhpcy51cGRhdGVUaW1lckxhYmVsKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3MoKTtcclxuICAgICAgaWYgKHRoaXMucmVuZGVyZXIudW5pZm9ybXMudVNhbXBsZSA8IHRoaXMuTUFYX1NBTVBMRVMpIHtcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci51bmlmb3Jtcy51RXllLnZhbHVlc1swXSA9IHRoaXMuem9vbVogKiBNYXRoLnNpbih0aGlzLmFuZ2xlWSkgKiBNYXRoLmNvcyh0aGlzLmFuZ2xlWCk7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIudW5pZm9ybXMudUV5ZS52YWx1ZXNbMV0gPSB0aGlzLnpvb21aICogTWF0aC5zaW4odGhpcy5hbmdsZVgpO1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVFeWUudmFsdWVzWzJdID0gdGhpcy56b29tWiAqIE1hdGguY29zKHRoaXMuYW5nbGVZKSAqIE1hdGguY29zKHRoaXMuYW5nbGVYKTtcclxuXHJcbiAgICAgICAgIHRoaXMudXBkYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgICB0aGlzLmRpc3BsYXlUZXh0dXJlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHVwZGF0ZVRpbWVyTGFiZWwoKSB7XHJcblxyXG4gICAgICBsZXQgdCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgbGV0IGRyYXdUaW1lTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHJhd1RpbWUnKTtcclxuICAgICAgaWYgKHRoaXMubGFzdFRpbWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgbGV0IGVsYXBzZWRNcyA9ICh0IC0gdGhpcy5sYXN0VGltZXNbMF0pIC8gdGhpcy5sYXN0VGltZXMubGVuZ3RoO1xyXG4gICAgICAgICBkcmF3VGltZUxhYmVsLmlubmVyVGV4dCA9IGVsYXBzZWRNcy50b0ZpeGVkKDApICsgJ21zJztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxhc3RUaW1lcy5wdXNoKHQpO1xyXG4gICAgICBpZiAodGhpcy5sYXN0VGltZXMubGVuZ3RoID4gMzApIHtcclxuICAgICAgICAgdGhpcy5sYXN0VGltZXMuc2hpZnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZHJhd1RpbWVMYWJlbC5zdHlsZS52aXNpYmlsaXR5ID0gdGhpcy5yZW5kZXJlci51bmlmb3Jtcy51U2FtcGxlIDwgdGhpcy5NQVhfU0FNUExFUyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHVwZGF0ZVByb2dyZXNzKCkge1xyXG4gICAgICBsZXQgcHJvZ3Jlc3MgPSB0aGlzLnJlbmRlcmVyLnVuaWZvcm1zLnVTYW1wbGUgLyB0aGlzLk1BWF9TQU1QTEVTO1xyXG4gICAgICBsZXQgYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzQmFyJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGlmIChwcm9ncmVzcyA+PSAwICYmIHByb2dyZXNzIDwgMSkge1xyXG4gICAgICAgICBiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICAgbGV0IHcgPSB0aGlzLmNhbnZhcy53aWR0aDtcclxuICAgICAgICAgYmFyLnN0eWxlLnJpZ2h0ID0gdyAqICgxIC0gcHJvZ3Jlc3MpICsgJ3B4JztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgYmFyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgfVxyXG4gICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFZvbHVtZSB9IGZyb20gXCIuL1ZvbHVtZVwiO1xyXG5pbXBvcnQgeyBUcmlhbmdsZU9iaiB9IGZyb20gXCIuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmpcIjtcclxuaW1wb3J0IHsgVmVjMyB9IGZyb20gXCIuLi8uLi9VdGlsM0QvVmVjXCI7XHJcbmltcG9ydCB7IEluZGV4ZWRWZWMzIH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9JbmRleGVkVmVjM1wiO1xyXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gXCIuLi8uLi9VdGlsL0dsb2JhbHNcIjtcclxuXHJcbi8qKlxyXG4gKiBXcmFwcGVyIGZvciBUcmlhbmdsZU9iaiB1c2VkIGJ5IHRoZSBQYXRoVHJhY2VyIGFwcC4gQWRkcyB0aGUgYWJpbGl0eSB0byBcclxuICogbW92ZSB2ZXJ0aWNlcyAoYXMgb3Bwb3NlZCB0byB1c2luZyBhIHRyYW5mb3JtYXRpb24gbWF0cml4KSBhbmQgdG8gYnJlYWtcclxuICogdGhpbmdzIGRvd24gaW50byB2b2x1bWVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBhdGhUcmFjZXJPYmoge1xyXG4gICBwdWJsaWMgdm9sdW1lczogVm9sdW1lW10gPSBbXTtcclxuICAgcHVibGljIHRPYmo6IFRyaWFuZ2xlT2JqO1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHRPYmo6IFRyaWFuZ2xlT2JqKSB7XHJcbiAgICAgIHRoaXMudE9iaiA9IHRPYmo7XHJcblxyXG4gICAgICB0aGlzLmF1dG9DZW50ZXIoKTtcclxuICAgICAgdGhpcy5icmVha0ludG9Wb2x1bWVzKCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTY2FsZXMgdGhlIG9iamVjdCwgY2VudGVycyBpdCwgYW5kIHB1dHMgaXQgb24gdGhlIGZsb29yIGF0IHk9MFxyXG4gICAgKi9cclxuICAgcHJpdmF0ZSBhdXRvQ2VudGVyKCkge1xyXG5cclxuICAgICAgbGV0IGNlbnRlciA9IHRoaXMudE9iai5ib3guY2VudGVyO1xyXG4gICAgICBsZXQgdHJhbnMgPSBuZXcgVmVjMyhbLWNlbnRlci54LCAtY2VudGVyLnkgKyB0aGlzLnRPYmouaGVpZ2h0IC8gMiwgLWNlbnRlci56XSk7XHJcblxyXG4gICAgICBsZXQgc2NhbGUgPSAyIC8gdGhpcy50T2JqLmRpYWdvbmFsO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRPYmoubnVtVmVydGljZXM7IGkrKykge1xyXG4gICAgICAgICBsZXQgdiA9IG5ldyBJbmRleGVkVmVjMyh0aGlzLnRPYmoudmVydGljZXMsIGkpO1xyXG5cclxuICAgICAgICAgdi54ID0gKHYueCArIHRyYW5zLngpICogc2NhbGU7XHJcbiAgICAgICAgIHYueSA9ICh2LnkgKyB0cmFucy55KSAqIHNjYWxlO1xyXG4gICAgICAgICB2LnogPSAodi56ICsgdHJhbnMueikgKiBzY2FsZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50T2JqLmJveC5taW4ueCA9ICh0aGlzLnRPYmouYm94Lm1pbi54ICsgdHJhbnMueCkgKiBzY2FsZTtcclxuICAgICAgdGhpcy50T2JqLmJveC5taW4ueSA9ICh0aGlzLnRPYmouYm94Lm1pbi55ICsgdHJhbnMueSkgKiBzY2FsZTtcclxuICAgICAgdGhpcy50T2JqLmJveC5taW4ueiA9ICh0aGlzLnRPYmouYm94Lm1pbi56ICsgdHJhbnMueikgKiBzY2FsZTtcclxuICAgICAgdGhpcy50T2JqLmJveC5tYXgueCA9ICh0aGlzLnRPYmouYm94Lm1heC54ICsgdHJhbnMueCkgKiBzY2FsZTtcclxuICAgICAgdGhpcy50T2JqLmJveC5tYXgueSA9ICh0aGlzLnRPYmouYm94Lm1heC55ICsgdHJhbnMueSkgKiBzY2FsZTtcclxuICAgICAgdGhpcy50T2JqLmJveC5tYXgueiA9ICh0aGlzLnRPYmouYm94Lm1heC56ICsgdHJhbnMueikgKiBzY2FsZTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52b2x1bWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB2ID0gdGhpcy52b2x1bWVzW2ldO1xyXG4gICAgICAgICB2LmJveE1pbi54ID0gKHYuYm94TWluLnggKyB0cmFucy54KSAqIHNjYWxlO1xyXG4gICAgICAgICB2LmJveE1pbi55ID0gKHYuYm94TWluLnkgKyB0cmFucy55KSAqIHNjYWxlO1xyXG4gICAgICAgICB2LmJveE1pbi56ID0gKHYuYm94TWluLnogKyB0cmFucy56KSAqIHNjYWxlO1xyXG4gICAgICAgICB2LmJveE1heC54ID0gKHYuYm94TWF4LnggKyB0cmFucy54KSAqIHNjYWxlO1xyXG4gICAgICAgICB2LmJveE1heC55ID0gKHYuYm94TWF4LnkgKyB0cmFucy55KSAqIHNjYWxlO1xyXG4gICAgICAgICB2LmJveE1heC56ID0gKHYuYm94TWF4LnogKyB0cmFucy56KSAqIHNjYWxlO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBCcmVha3MgdGhlIG9iamVjdCBpbnRvIGV2ZW5seSBzcGFjZWQgdm9sdW1lcy4gVGhlIG51bWJlciBvZiB2b2x1bWVzIGlzIGF1dG9tYXRpY2FsbHlcclxuICAgICogZGV0ZXJtaW5lZCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHRyaWFuZ2xlcy5cclxuICAgICovXHJcbiAgIHB1YmxpYyBicmVha0ludG9Wb2x1bWVzKCkge1xyXG4gICAgICBsZXQgbnVtU3RlcHM7XHJcbiAgICAgIGlmICh0aGlzLnRPYmoubnVtVHJpYW5nbGVzIDwgNDApIHtcclxuICAgICAgICAgbnVtU3RlcHMgPSAxO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMudE9iai5udW1UcmlhbmdsZXMgPCAxNTAwKSB7XHJcbiAgICAgICAgIG51bVN0ZXBzID0gMjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgbnVtU3RlcHMgPSAzO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudm9sdW1lcyA9IFtdO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgucG93KG51bVN0ZXBzLCAzKTsgaSsrKSB7XHJcbiAgICAgICAgIHRoaXMudm9sdW1lcy5wdXNoKG5ldyBWb2x1bWUoKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50T2JqLm51bVRyaWFuZ2xlczsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB0ID0gdGhpcy50T2JqLmdldFRyaWFuZ2xlKGkpO1xyXG4gICAgICAgICBsZXQgeCA9IE1hdGguZmxvb3IobnVtU3RlcHMgKiAodC5taW5YIC0gdGhpcy50T2JqLmJveC5taW4ueCkgLyAodGhpcy50T2JqLmJveC53aWR0aCkpO1xyXG4gICAgICAgICBsZXQgeSA9IE1hdGguZmxvb3IobnVtU3RlcHMgKiAodC5taW5ZIC0gdGhpcy50T2JqLmJveC5taW4ueSkgLyAodGhpcy50T2JqLmJveC5oZWlnaHQpKTtcclxuICAgICAgICAgbGV0IHogPSBNYXRoLmZsb29yKG51bVN0ZXBzICogKHQubWluWiAtIHRoaXMudE9iai5ib3gubWluLnopIC8gKHRoaXMudE9iai5ib3guZGVwdGgpKTtcclxuICAgICAgICAgeCA9IGNsYW1wKHgsIDAsIG51bVN0ZXBzIC0gMSk7XHJcbiAgICAgICAgIHkgPSBjbGFtcCh5LCAwLCBudW1TdGVwcyAtIDEpO1xyXG4gICAgICAgICB6ID0gY2xhbXAoeiwgMCwgbnVtU3RlcHMgLSAxKTtcclxuICAgICAgICAgbGV0IGluZGV4ID0geCArIHkgKiBudW1TdGVwcyArIHogKiBudW1TdGVwcyAqIG51bVN0ZXBzO1xyXG4gICAgICAgICB0aGlzLnZvbHVtZXNbaW5kZXhdLnB1c2godCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG59IiwiaW1wb3J0IHRvU2NyZWVuVmVydGV4U291cmNlIGZyb20gJy4uLy4uL3NoYWRlcnMvUGF0aFRyYWNlclRvU2NyZWVuVmVydGV4Lmdsc2wnO1xyXG5pbXBvcnQgdG9TY3JlZW5GcmFnbWVudFNvdXJjZSBmcm9tICcuLi8uLi9zaGFkZXJzL1BhdGhUcmFjZXJUb1NjcmVlbkZyYWdtZW50Lmdsc2wnO1xyXG5pbXBvcnQgdG9UZXh0dXJlVmVydGV4U291cmNlIGZyb20gJy4uLy4uL3NoYWRlcnMvUGF0aFRyYWNlclRvVGV4dHVyZVZlcnRleC5nbHNsJztcclxuaW1wb3J0IHRvVGV4dHVyZUZyYWdtZW50U291cmNlIGZyb20gJy4uLy4uL3NoYWRlcnMvUGF0aFRyYWNlclRvVGV4dHVyZUZyYWdtZW50Lmdsc2wnO1xyXG5pbXBvcnQgeyBnbENvbG9yMyB9IGZyb20gJy4uLy4uL2dsL2dsQ29sb3InO1xyXG5pbXBvcnQgeyBWZWMzLCBWZWM0IH0gZnJvbSAnLi4vLi4vVXRpbDNEL1ZlYyc7XHJcbmltcG9ydCB7IFNwaGVyaWNhbENvb3JkIH0gZnJvbSAnLi4vLi4vVXRpbDNEL1NwaGVyaWNhbENvb3JkJztcclxuaW1wb3J0IHsgZ2xGcmFtZUJ1ZmZlciB9IGZyb20gJy4uLy4uL2dsL2dsRnJhbWVCdWZmZXInO1xyXG5pbXBvcnQgeyBnbFRleHR1cmUsIGdsVGV4dHVyZVN0eWxlIH0gZnJvbSAnLi4vLi4vZ2wvZ2xUZXh0dXJlJztcclxuaW1wb3J0IHsgZ2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vZ2wvZ2xQcm9ncmFtJztcclxuaW1wb3J0IHsgZ2xBdHRyaWJ1dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9nbC9nbEF0dHJpYnV0ZUJ1ZmZlcic7XHJcbmltcG9ydCB7IENvbG9yQW5hbHl6ZXIgfSBmcm9tICcuL0NvbG9yQW5hbHl6ZXInO1xyXG5pbXBvcnQgeyBnbFVuaWZvcm1CbG9jayB9IGZyb20gJy4uLy4uL2dsL2dsVW5pZm9ybUJsb2NrJztcclxuaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tICcuLi8uLi9VdGlsL0dsb2JhbHMnO1xyXG5pbXBvcnQgeyBUcmlhbmdsZU9iaiB9IGZyb20gJy4uLy4uL1V0aWwzRC9UcmlhbmdsZU9iaic7XHJcbmltcG9ydCB7IFByb2ZpbGVyIH0gZnJvbSAnLi4vLi4vVXRpbC9Qcm9maWxlcic7XHJcbmltcG9ydCB7IFBhdGhUcmFjZXJPYmogfSBmcm9tICcuL1BhdGhUcmFjZXJPYmonO1xyXG5pbXBvcnQgeyBnbFVuaWZvcm0gfSBmcm9tICcuLi8uLi9nbC9nbFVuaWZvcm0nO1xyXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vLi4vVXRpbDNEL01hdCc7XHJcbmltcG9ydCB7IENvbG9yUmFuZ2UgfSBmcm9tICcuLi8uLi9HVUkvQ29sb3JSYW5nZSc7XHJcblxyXG4vKipcclxuICogUmVuZGVyaW5nIG1vZGUgZm9yIGRpc3BsYXlpbmcgdGhlIHRleHR1cmVcclxuICovXHJcbmV4cG9ydCBlbnVtIFJlbmRlck1vZGUge1xyXG4gICBBcnRpc3QgPSAwLFxyXG4gICBWYWx1ZSA9IDEsXHJcbiAgIENocm9tYSA9IDIsXHJcbiAgIEJhbmRzID0gMyxcclxufVxyXG5cclxuY2xhc3MgVW5pZm9ybXMge1xyXG4gICB1U2NhbGUgPSAxLjA7XHJcbiAgIHVYT2Zmc2V0ID0gMC4wO1xyXG4gICB1WU9mZnNldCA9IDAuMDtcclxuICAgdU1vZGUgPSAwO1xyXG4gICB1TWF4Q2hyb21hID0gMS4wO1xyXG5cclxuICAgdUhpZ2hsaWdodENvbG9yOiBnbENvbG9yMztcclxuICAgdUxpZ2h0TGlnaHRDb2xvcjogZ2xDb2xvcjM7XHJcbiAgIHVNaWRMaWdodENvbG9yOiBnbENvbG9yMztcclxuICAgdURhcmtMaWdodENvbG9yOiBnbENvbG9yMztcclxuXHJcbiAgIHVTaGFkb3dDb2xvcjogZ2xDb2xvcjM7XHJcbiAgIHVSZWZsZWN0ZWRMaWdodENvbG9yOiBnbENvbG9yMztcclxuICAgdURhcmtBY2NlbnRDb2xvcjogZ2xDb2xvcjM7XHJcbiAgIHVMaWdodEFscGhhID0gMTAwMTtcclxuICAgdVNoYWRvd0FscGhhID0gMTAwMDtcclxuXHJcbiAgIHVMaWdodEludGVuc2l0eSA9IDAuNztcclxuICAgdUxpZ2h0Q29sb3IgPSBuZXcgZ2xDb2xvcjMoWzEuMCwgMS4wLCAxLjBdKTtcclxuICAgdUxpZ2h0UG9zID0gbmV3IFZlYzMobmV3IFNwaGVyaWNhbENvb3JkKDIsIDYwLCAxMTApLnRvWFlaKCkpO1xyXG4gICB1QW1iaWVudExpZ2h0SW50ZW5zaXR5ID0gMC4zO1xyXG4gICB1T2JqQ29sb3IgPSBuZXcgZ2xDb2xvcjMoWzAuNSwgMC41LCAwLjhdKTtcclxuICAgdUJhbGxSYWRpdXMgPSAwLjU7XHJcbiAgIHVFeWUgPSBuZXcgVmVjMyhbMCwgMCwgMF0pO1xyXG4gICB1VGV4dHVyZVNpemUgPSAyNTY7XHJcbiAgIHVSYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gICB1UmF5MDAgPSBuZXcgVmVjMyhbMCwgMCwgMF0pO1xyXG4gICB1UmF5MDEgPSBuZXcgVmVjMyhbMCwgMCwgMF0pO1xyXG4gICB1UmF5MTAgPSBuZXcgVmVjMyhbMCwgMCwgMF0pO1xyXG4gICB1UmF5MTEgPSBuZXcgVmVjMyhbMCwgMCwgMF0pO1xyXG4gICB1U2FtcGxlID0gMC4wO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCBkb2VzIHRoZSB3b3JrIG9mIGJ1aWxkaW5nIHRoZSBQYXRoIFRyYWNlZCB0ZXh0dXJlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGF0aFRyYWNlclJlbmRlcmVyIHtcclxuXHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwcml2YXRlIHZlcnRleEJ1ZmZlcjogV2ViR0xCdWZmZXI7XHJcbiAgIHByaXZhdGUgZnJhbWVCdWZmZXI6IGdsRnJhbWVCdWZmZXI7XHJcbiAgIHByaXZhdGUgdGV4dHVyZXM6IGdsVGV4dHVyZVtdO1xyXG4gICBwcml2YXRlIHRvU2NyZWVuUHJvZ3JhbTogZ2xQcm9ncmFtO1xyXG4gICBwcml2YXRlIHRvU2NyZWVuVmVydGV4QXR0cmlidXRlOiBnbEF0dHJpYnV0ZUJ1ZmZlcjtcclxuICAgcHJpdmF0ZSB0b1RleHR1cmVQcm9ncmFtOiBnbFByb2dyYW07XHJcbiAgIHByaXZhdGUgdG9UZXh0dXJlVmVydGV4QXR0cmlidXRlOiBnbEF0dHJpYnV0ZUJ1ZmZlcjtcclxuICAgcHJpdmF0ZSBhbmFseXplcjogQ29sb3JBbmFseXplcjtcclxuICAgcHJpdmF0ZSB0QmxvY2s6IGdsVW5pZm9ybUJsb2NrO1xyXG4gICBwcml2YXRlIHZCbG9jazogZ2xVbmlmb3JtQmxvY2s7XHJcbiAgIHB1YmxpYyB1bmlmb3JtcyA9IG5ldyBVbmlmb3JtcygpO1xyXG5cclxuICAgcHJpdmF0ZSBtYWluVmlldyA9IFJlbmRlck1vZGUuQXJ0aXN0O1xyXG4gICBwcml2YXRlIHNtYWxsVmlld3MgPSBbXHJcbiAgICAgIFJlbmRlck1vZGUuQ2hyb21hLFxyXG4gICAgICBSZW5kZXJNb2RlLlZhbHVlLFxyXG4gICAgICBSZW5kZXJNb2RlLkJhbmRzLFxyXG4gICBdO1xyXG5cclxuICAgcHJpdmF0ZSB2ZXJ0aWNlcyA9IFtcclxuICAgICAgLTEsIC0xLFxyXG4gICAgICAtMSwgKzEsXHJcbiAgICAgICsxLCAtMSxcclxuICAgICAgKzEsICsxXHJcbiAgIF07XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgIGdsQ3R4OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxyXG4gICApIHtcclxuXHJcbiAgICAgIHRoaXMuZ2wgPSBnbEN0eDtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIC8vIGxhcmdlciB0ZXh0dXJlIGlzIGhpZ2hlciByZXNvbHV0aW9uLCBidXQgdGFrZXMgbG9uZ2VyIHRvIGNvbXB1dGVcclxuICAgICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgICAgIHRoaXMudW5pZm9ybXMudVRleHR1cmVTaXplID0gMjU2O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICAvLyB0aGlzLnVuaWZvcm1zLnVUZXh0dXJlU2l6ZSA9IDUxMjtcclxuICAgICAgICAgdGhpcy51bmlmb3Jtcy51VGV4dHVyZVNpemUgPSAyNTY7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hbmFseXplciA9IG5ldyBDb2xvckFuYWx5emVyKHRoaXMudW5pZm9ybXMudVRleHR1cmVTaXplKTtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBmcmFtZWJ1ZmZlclxyXG4gICAgICB0aGlzLmZyYW1lQnVmZmVyID0gbmV3IGdsRnJhbWVCdWZmZXIoXHJcbiAgICAgICAgIGdsLFxyXG4gICAgICAgICB0aGlzLnVuaWZvcm1zLnVUZXh0dXJlU2l6ZSxcclxuICAgICAgICAgdGhpcy51bmlmb3Jtcy51VGV4dHVyZVNpemUsXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgdHdvIHRleHR1cmVzLiBPbmUgd2UgZGlzcGxheSBhbmQgb25lIHdlIGRyYXcgdG9cclxuICAgICAgdGhpcy50ZXh0dXJlcyA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xyXG4gICAgICAgICB0aGlzLnRleHR1cmVzLnB1c2godGhpcy5mcmFtZUJ1ZmZlci5jcmVhdGVUZXh0dXJlKGdsVGV4dHVyZVN0eWxlLkZsb2F0KSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNyZWF0ZSB0b1NjcmVlbiBzaGFkZXJcclxuICAgICAgdGhpcy50b1NjcmVlblByb2dyYW0gPSBuZXcgZ2xQcm9ncmFtKGdsLCB0b1NjcmVlblZlcnRleFNvdXJjZSwgdG9TY3JlZW5GcmFnbWVudFNvdXJjZSk7XHJcbiAgICAgIHRoaXMudG9TY3JlZW5WZXJ0ZXhBdHRyaWJ1dGUgPSBuZXcgZ2xBdHRyaWJ1dGVCdWZmZXIoZ2wsIHRoaXMudG9TY3JlZW5Qcm9ncmFtLCAndmVydGV4Jyk7XHJcbiAgICAgIHRoaXMudG9TY3JlZW5WZXJ0ZXhBdHRyaWJ1dGUudXBsb2FkKHRoaXMudmVydGljZXMpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2V0T2JqKHRPYmo6IFRyaWFuZ2xlT2JqKSB7XHJcbiAgICAgIHRoaXMuY29tcGlsZVNoYWRlcih0T2JqKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGRlbGV0ZSgpIHtcclxuICAgICAgdGhpcy5mcmFtZUJ1ZmZlci5kZWxldGUoKTtcclxuICAgICAgdGhpcy50ZXh0dXJlc1swXS5kZWxldGUoKTtcclxuICAgICAgdGhpcy50ZXh0dXJlc1sxXS5kZWxldGUoKTtcclxuICAgICAgaWYgKHRoaXMudkJsb2NrKSB7XHJcbiAgICAgICAgIHRoaXMudkJsb2NrLmRlbGV0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnRCbG9jaykge1xyXG4gICAgICAgICB0aGlzLnRCbG9jay5kZWxldGUoKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNvbXBpbGVTaGFkZXIodE9iaj86IFRyaWFuZ2xlT2JqKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcblxyXG4gICAgICBpZiAodGhpcy50b1RleHR1cmVQcm9ncmFtKSB7XHJcbiAgICAgICAgIHRoaXMudG9UZXh0dXJlUHJvZ3JhbS5kZWxldGUoKTtcclxuICAgICAgICAgdGhpcy50b1RleHR1cmVQcm9ncmFtID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHAgPSBuZXcgUHJvZmlsZXIoKTtcclxuICAgICAgLy8gY3JlYXRlIHRoZSB0b1RleHR1cmUgc2hhZGVyXHJcbiAgICAgIGlmICh0T2JqICYmIHRPYmoubnVtVHJpYW5nbGVzID4gMCkge1xyXG5cclxuICAgICAgICAgbGV0IHBPYmogPSBuZXcgUGF0aFRyYWNlck9iaih0T2JqKTtcclxuXHJcbiAgICAgICAgIHRoaXMudG9UZXh0dXJlUHJvZ3JhbSA9IG5ldyBnbFByb2dyYW0oXHJcbiAgICAgICAgICAgIGdsLFxyXG4gICAgICAgICAgICB0b1RleHR1cmVWZXJ0ZXhTb3VyY2VcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoJzxWRVJTSU9OPicsICcjdmVyc2lvbiAzMDAgZXMnKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgnTk9USElORycsICdVU0VfVFJJQU5HTEVTJyksXHJcbiAgICAgICAgICAgIHRvVGV4dHVyZUZyYWdtZW50U291cmNlXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKCc8VkVSU0lPTj4nLCAnI3ZlcnNpb24gMzAwIGVzJylcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoJ05PVEhJTkcnLCAnVVNFX1RSSUFOR0xFUycpXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKCc8TlVNX1ZFUlRJQ0VTPicsIHRPYmoubnVtVmVydGljZXMudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoJzxOVU1fVk9MVU1FUz4nLCBwT2JqLnZvbHVtZXMubGVuZ3RoLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKCc8TlVNX1RSSUFOR0xFUz4nLCB0T2JqLm51bVRyaWFuZ2xlcy50b1N0cmluZygpKVxyXG4gICAgICAgICApO1xyXG5cclxuICAgICAgICAgLy8gdXBsb2FkIHRyaWFuZ2xlcyB0byB0aGUgR1BVXHJcbiAgICAgICAgIHRoaXMudXBsb2FkVW5pZm9ybXMocE9iaik7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMudG9UZXh0dXJlUHJvZ3JhbSA9IG5ldyBnbFByb2dyYW0oXHJcbiAgICAgICAgICAgIGdsLFxyXG4gICAgICAgICAgICB0b1RleHR1cmVWZXJ0ZXhTb3VyY2VcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoJzxWRVJTSU9OPicsICcnKSxcclxuICAgICAgICAgICAgdG9UZXh0dXJlRnJhZ21lbnRTb3VyY2VcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoJzxWRVJTSU9OPicsICcnKVxyXG4gICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRvVGV4dHVyZVZlcnRleEF0dHJpYnV0ZSA9IG5ldyBnbEF0dHJpYnV0ZUJ1ZmZlcihnbCwgdGhpcy50b1RleHR1cmVQcm9ncmFtLCAndmVydGV4Jyk7XHJcbiAgICAgIHRoaXMudG9UZXh0dXJlVmVydGV4QXR0cmlidXRlLnVwbG9hZCh0aGlzLnZlcnRpY2VzKTtcclxuXHJcbiAgICAgIHAubG9nKCdjb21waWxlJyk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBVcGxvYWRzIGFsbCB0aGUgdHJpYW5nbGUgZGF0YSB0byBXZWJHTFxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHByb2dyYW0gVGhlIHByb2dyYW0gdG8gdXBsb2FkIHRvXHJcbiAgICAqL1xyXG4gICBwcml2YXRlIHVwbG9hZFVuaWZvcm1zKHBPYmo6IFBhdGhUcmFjZXJPYmopIHtcclxuXHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuICAgICAgbGV0IHRPYmogPSBwT2JqLnRPYmo7XHJcblxyXG4gICAgICAvLyB1cGxvYWQgdGhlIGJpZyBjaHVua3MgYXMgVW5pZm9ybSBCbG9ja3NcclxuICAgICAgbGV0IGJsb2NrQmluZGluZyA9IDI7XHJcbiAgICAgIHRoaXMudkJsb2NrID0gbmV3IGdsVW5pZm9ybUJsb2NrKGdsLCB0aGlzLnRvVGV4dHVyZVByb2dyYW0sICdNeVZlcnRpY2VzQmxvY2snLCBibG9ja0JpbmRpbmcpO1xyXG5cclxuICAgICAgLy8gcHV0IHRoZSBkYXRhIGludG8gYSBGbG9hdDMyQXJyYXkgZm9yIHVwbG9hZGluZ1xyXG4gICAgICBsZXQgdkRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHBPYmoudE9iai5udW1WZXJ0aWNlcyAqIDQpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRPYmoubnVtVmVydGljZXM7IGkrKykge1xyXG4gICAgICAgICB2RGF0YVs0ICogaSArIDBdID0gdE9iai52ZXJ0aWNlc1szICogaSArIDBdO1xyXG4gICAgICAgICB2RGF0YVs0ICogaSArIDFdID0gdE9iai52ZXJ0aWNlc1szICogaSArIDFdO1xyXG4gICAgICAgICB2RGF0YVs0ICogaSArIDJdID0gdE9iai52ZXJ0aWNlc1szICogaSArIDJdO1xyXG4gICAgICAgICB2RGF0YVs0ICogaSArIDNdID0gMDtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnZCbG9jay51cGxvYWQodkRhdGEpO1xyXG5cclxuICAgICAgYmxvY2tCaW5kaW5nID0gMztcclxuICAgICAgdGhpcy50QmxvY2sgPSBuZXcgZ2xVbmlmb3JtQmxvY2soZ2wsIHRoaXMudG9UZXh0dXJlUHJvZ3JhbSwgJ015VHJpYW5nbGVzQmxvY2snLCBibG9ja0JpbmRpbmcpO1xyXG5cclxuICAgICAgLy8gcHV0IHRoZSBkYXRhIGludG8gYSBGbG9hdDMyQXJyYXkgZm9yIHVwbG9hZGluZ1xyXG4gICAgICBsZXQgdERhdGEgPSBuZXcgSW50MzJBcnJheSh0T2JqLm51bVRyaWFuZ2xlcyAqIDQpO1xyXG4gICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IHBPYmoudm9sdW1lcy5sZW5ndGg7IHYrKykge1xyXG4gICAgICAgICBsZXQgdm9sID0gcE9iai52b2x1bWVzW3ZdO1xyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZvbC50cmlhbmdsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHQgPSB2b2wudHJpYW5nbGVzW2ldO1xyXG4gICAgICAgICAgICB0RGF0YVtpbmRleCsrXSA9IHQuaTE7XHJcbiAgICAgICAgICAgIHREYXRhW2luZGV4KytdID0gdC5pMjtcclxuICAgICAgICAgICAgdERhdGFbaW5kZXgrK10gPSB0LmkzO1xyXG4gICAgICAgICAgICB0RGF0YVtpbmRleCsrXSA9IDA7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRCbG9jay51cGxvYWQodERhdGEpO1xyXG5cclxuICAgICAgLy8gVXBsb2FkIHRoZSB2b2x1bWUgaW5mbyBhcyBhIHN0YW5kYXJkIHVuaWZvcm1cclxuICAgICAgbGV0IHVuaSA9IG5ldyBnbFVuaWZvcm0oZ2wsIHRoaXMudG9UZXh0dXJlUHJvZ3JhbSk7XHJcbiAgICAgIGxldCBzdGFydEluZGV4ID0gMDtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwT2JqLnZvbHVtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgbGV0IHZvbCA9IHBPYmoudm9sdW1lc1tpXTtcclxuICAgICAgICAgdW5pLnNldCgnb2JqZWN0LnZvbHVtZXNbJyArIGkgKyAnXS5zdGFydEluZGV4Jywgc3RhcnRJbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgIHVuaS5zZXQoJ29iamVjdC52b2x1bWVzWycgKyBpICsgJ10ubnVtVHJpYW5nbGVzJywgdm9sLnRyaWFuZ2xlcy5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICB1bmkuc2V0KCdvYmplY3Qudm9sdW1lc1snICsgaSArICddLmJveE1pbicsIHZvbC5ib3hNaW4pO1xyXG4gICAgICAgICB1bmkuc2V0KCdvYmplY3Qudm9sdW1lc1snICsgaSArICddLmJveE1heCcsIHZvbC5ib3hNYXgpO1xyXG4gICAgICAgICBzdGFydEluZGV4ICs9IHZvbC50cmlhbmdsZXMubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICAgIHVuaS5zZXQoJ29iamVjdC5ib3hNaW4nLCB0T2JqLmJveC5taW4pO1xyXG4gICAgICB1bmkuc2V0KCdvYmplY3QuYm94TWF4JywgdE9iai5ib3gubWF4KTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCByZW5kZXJNb2RlKCk6IFJlbmRlck1vZGUge1xyXG4gICAgICByZXR1cm4gdGhpcy5tYWluVmlldztcclxuICAgfVxyXG5cclxuICAgcHVibGljIHJlc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudVNhbXBsZSA9IDA7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZ2V0RXllUmF5KG1hdHJpeDogTWF0NCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBWZWMzIHtcclxuICAgICAgbGV0IHZlYyA9IG5ldyBWZWM0KFt4LCB5LCAwLCAxXSk7XHJcbiAgICAgIHJldHVybiBtYXRyaXgubXVsdFYodmVjKS5kaXZpZGVCeVcoKS5zdWJ0cmFjdCh0aGlzLnVuaWZvcm1zLnVFeWUpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgdXBkYXRlVGV4dHVyZShtb2RlbHZpZXdQcm9qZWN0aW9uOiBNYXQ0KTogdm9pZCB7XHJcblxyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgLy8gaW1wbGVtZW50IGFsaWFzaW5nIGJ5IHJhbmRvbSBzYW1wbGluZyB3aXRoaW4gYSBwaXhlbFxyXG4gICAgICBsZXQgeCA9IChNYXRoLnJhbmRvbSgpICogMiAtIDEpIC8gdGhpcy51bmlmb3Jtcy51VGV4dHVyZVNpemU7XHJcbiAgICAgIGxldCB5ID0gKE1hdGgucmFuZG9tKCkgKiAyIC0gMSkgLyB0aGlzLnVuaWZvcm1zLnVUZXh0dXJlU2l6ZTtcclxuICAgICAgbGV0IHogPSAwO1xyXG5cclxuICAgICAgbGV0IHYgPSBuZXcgVmVjMyhbeCwgeSwgel0pO1xyXG4gICAgICBsZXQgaml0dGVyID0gTWF0NC5mcm9tVHJhbnNsYXRpb24odik7XHJcbiAgICAgIGxldCBtYXRyaXggPSBqaXR0ZXIubXVsdE0obW9kZWx2aWV3UHJvamVjdGlvbikuaW52ZXJzZSgpO1xyXG5cclxuICAgICAgdGhpcy51bmlmb3Jtcy51UmF5MDAgPSB0aGlzLmdldEV5ZVJheShtYXRyaXgsIC0xLCAtMSk7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudVJheTAxID0gdGhpcy5nZXRFeWVSYXkobWF0cml4LCAtMSwgKzEpO1xyXG4gICAgICB0aGlzLnVuaWZvcm1zLnVSYXkxMCA9IHRoaXMuZ2V0RXllUmF5KG1hdHJpeCwgKzEsIC0xKTtcclxuICAgICAgdGhpcy51bmlmb3Jtcy51UmF5MTEgPSB0aGlzLmdldEV5ZVJheShtYXRyaXgsICsxLCArMSk7XHJcbiAgICAgIC8vIHNldCB1bmlmb3Jtc1xyXG4gICAgICBsZXQgdW5pID0gbmV3IGdsVW5pZm9ybShnbCwgdGhpcy50b1RleHR1cmVQcm9ncmFtKTtcclxuICAgICAgdW5pLnNldEFsbCh0aGlzLnVuaWZvcm1zKTtcclxuXHJcbiAgICAgIC8vIHJlbmRlciB0byB0ZXh0dXJlXHJcbiAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIHRoaXMudW5pZm9ybXMudVRleHR1cmVTaXplLCB0aGlzLnVuaWZvcm1zLnVUZXh0dXJlU2l6ZSk7XHJcbiAgICAgIHRoaXMudGV4dHVyZXNbMF0uYmluZCgpO1xyXG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhCdWZmZXIpO1xyXG4gICAgICB0aGlzLmZyYW1lQnVmZmVyLmJpbmQoKTtcclxuICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmVzWzFdLmdldCgpLCAwKTtcclxuXHJcbiAgICAgIHRoaXMudG9UZXh0dXJlVmVydGV4QXR0cmlidXRlLmJpbmQoMik7XHJcblxyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxuXHJcbiAgICAgIGxldCBkYXRhID0gdGhpcy5hbmFseXplci5ydW4oZ2wsIHRoaXMudW5pZm9ybXMudUxpZ2h0QWxwaGEsIHRoaXMudW5pZm9ybXMudVNoYWRvd0FscGhhKTtcclxuICAgICAgdGhpcy51bmlmb3Jtcy51TWF4Q2hyb21hID0gZGF0YS5tYXhDaHJvbWE7XHJcblxyXG4gICAgICBsZXQgY3IgPSBuZXcgQ29sb3JSYW5nZShbZGF0YS5kYXJrZXN0TGlnaHRDb2xvci50b0h0bWxDb2xvcigpLCBkYXRhLmF2Z0xpZ2h0Q29sb3IudG9IdG1sQ29sb3IoKSwgZGF0YS5saWdodGVzdExpZ2h0Q29sb3IudG9IdG1sQ29sb3IoKV0pO1xyXG4gICAgICB0aGlzLnVuaWZvcm1zLnVIaWdobGlnaHRDb2xvciA9IGRhdGEuaGlnaGxpZ2h0Q29sb3I7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudUxpZ2h0TGlnaHRDb2xvciA9IGNyLmdldCgwLjg1KS50b0dsQ29sb3IoKTtcclxuICAgICAgdGhpcy51bmlmb3Jtcy51TWlkTGlnaHRDb2xvciA9IGNyLmdldCgwLjUpLnRvR2xDb2xvcigpO1xyXG4gICAgICB0aGlzLnVuaWZvcm1zLnVEYXJrTGlnaHRDb2xvciA9IGNyLmdldCgwLjE1KS50b0dsQ29sb3IoKTtcclxuXHJcbiAgICAgIGNyID0gbmV3IENvbG9yUmFuZ2UoW2RhdGEuZGFya2VzdFNoYWRvd0NvbG9yLnRvSHRtbENvbG9yKCksIGRhdGEuYXZnU2hhZG93Q29sb3IudG9IdG1sQ29sb3IoKSwgZGF0YS5saWdodGVzdFNoYWRvd0NvbG9yLnRvSHRtbENvbG9yKCldKTtcclxuICAgICAgLy90aGlzLnVuaWZvcm1zLnVTaGFkb3dDb2xvciA9IGRhdGEudGVybWluYXRvckNvbG9yO1xyXG4gICAgICB0aGlzLnVuaWZvcm1zLnVTaGFkb3dDb2xvciA9IGRhdGEuYXZnU2hhZG93Q29sb3I7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudVJlZmxlY3RlZExpZ2h0Q29sb3IgPSBjci5nZXQoMSkudG9HbENvbG9yKCk7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudURhcmtBY2NlbnRDb2xvciA9IGNyLmdldCgwLjApLnRvR2xDb2xvcigpO1xyXG5cclxuICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcclxuXHJcbiAgICAgIC8vIHBpbmcgcG9uZyB0ZXh0dXJlc1xyXG4gICAgICB0aGlzLnRleHR1cmVzLnJldmVyc2UoKTtcclxuXHJcbiAgICAgIHRoaXMudW5pZm9ybXMudVNhbXBsZSsrO1xyXG4gICAgICB0aGlzLnVuaWZvcm1zLnVSYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gICB9O1xyXG5cclxuICAgcHVibGljIGRpc3BsYXlUZXh0dXJlKCk6IHZvaWQge1xyXG5cclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgIHRoaXMudG9TY3JlZW5Qcm9ncmFtLnVzZSgpO1xyXG4gICAgICB0aGlzLnRleHR1cmVzWzBdLmJpbmQoKTtcclxuICAgICAgdGhpcy50b1NjcmVlblZlcnRleEF0dHJpYnV0ZS5iaW5kKDIpO1xyXG5cclxuICAgICAgLy8gZGlzcGxheSB0aGUgbWFpbiBzY3JlZW5cclxuICAgICAgbGV0IHVuaSA9IG5ldyBnbFVuaWZvcm0oZ2wsIHRoaXMudG9TY3JlZW5Qcm9ncmFtKTtcclxuICAgICAgdGhpcy51bmlmb3Jtcy51U2NhbGUgPSAxLjA7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudVhPZmZzZXQgPSAwLjA7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudVlPZmZzZXQgPSAwLjA7XHJcbiAgICAgIHRoaXMudW5pZm9ybXMudU1vZGUgPSB0aGlzLm1haW5WaWV3O1xyXG4gICAgICB1bmkuc2V0QWxsKHRoaXMudW5pZm9ybXMpO1xyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxuXHJcbiAgICAgIC8vIGRpc3BsYXkgdGhlIHNtYWxsZXIgdmlld3NcclxuICAgICAgdGhpcy51bmlmb3Jtcy51U2NhbGUgPSAwLjI7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbWFsbFZpZXdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIHRoaXMudW5pZm9ybXMudVhPZmZzZXQgPSAxLjAgLSAodGhpcy5zbWFsbFZpZXdzLmxlbmd0aCAtIGkgLSAwLjUpICogKDIgKiB0aGlzLnVuaWZvcm1zLnVTY2FsZSk7XHJcbiAgICAgICAgIHRoaXMudW5pZm9ybXMudVlPZmZzZXQgPSAxLjAgLSB0aGlzLnVuaWZvcm1zLnVTY2FsZTtcclxuICAgICAgICAgdGhpcy51bmlmb3Jtcy51TW9kZSA9IHRoaXMuc21hbGxWaWV3c1tpXTtcclxuICAgICAgICAgdW5pLnNldEFsbCh0aGlzLnVuaWZvcm1zKTtcclxuICAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHN3YXAocG9zOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy5zbWFsbFZpZXdzID0gW1xyXG4gICAgICAgICBSZW5kZXJNb2RlLkNocm9tYSxcclxuICAgICAgICAgUmVuZGVyTW9kZS5WYWx1ZSxcclxuICAgICAgICAgUmVuZGVyTW9kZS5CYW5kcyxcclxuICAgICAgXTtcclxuICAgICAgaWYgKHRoaXMubWFpblZpZXcgPT0gdGhpcy5zbWFsbFZpZXdzW3Bvc10pIHtcclxuICAgICAgICAgdGhpcy5tYWluVmlldyA9IFJlbmRlck1vZGUuQXJ0aXN0O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLm1haW5WaWV3ID0gdGhpcy5zbWFsbFZpZXdzW3Bvc107XHJcbiAgICAgICAgIHRoaXMuc21hbGxWaWV3c1twb3NdID0gUmVuZGVyTW9kZS5BcnRpc3Q7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5kaXNwbGF5VGV4dHVyZSgpO1xyXG4gICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL1ZlY1wiO1xyXG5pbXBvcnQgeyBJbmRleGVkVHJpYW5nbGUgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL0luZGV4ZWRUcmlhbmdsZVwiO1xyXG5cclxuY29uc3QgTUFYID0gMTAwMDsgLy8gSU5GSU5JVFkgaW4gb3VyIHJlbmRlcmluZyB3b3JsZFxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRoYXQgbWFuYWdlcyBhIHNldCBvZiB0cmlhbmdsZXMgd2l0aGluIGEgZ2l2ZW4gc3BhY2VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWb2x1bWUge1xyXG4gICAvKipcclxuICAgICogVGhlIHRyaWFuZ2xlcyBlbmNsb3NlZCB3aXRoaW4gdGhlIGJvdW5kaW5nIGJveFxyXG4gICAgKi9cclxuICAgcHVibGljIHRyaWFuZ2xlczogSW5kZXhlZFRyaWFuZ2xlW10gPSBbXTtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBCb3VuZGluZyBib3ggbWluaW11bVxyXG4gICAgKi9cclxuICAgcHVibGljIGJveE1pbiA9IG5ldyBWZWMzKFtNQVgsIE1BWCwgTUFYXSk7XHJcblxyXG4gICAvKipcclxuICAgICogQm91bmRpbmcgYm94IG1heGltdW1cclxuICAgICovXHJcbiAgIHB1YmxpYyBib3hNYXggPSBuZXcgVmVjMyhbLU1BWCwgLU1BWCwgLU1BWF0pO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIFN0b3JlcyBhIHRyaWFuZ2xlIGFuZCB1cGRhdGVzIHRoZSBib3VuZGluZyBib3hcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB0cmlhbmdsZSBUaGUgdHJpYW5nbGUgdG8gc3RvcmVcclxuICAgICovXHJcbiAgIHB1YmxpYyBwdXNoKHRyaWFuZ2xlOiBJbmRleGVkVHJpYW5nbGUpIHtcclxuXHJcbiAgICAgIHRoaXMudHJpYW5nbGVzLnB1c2godHJpYW5nbGUpO1xyXG4gICAgICB0aGlzLmJveE1pbi54ID0gTWF0aC5taW4odGhpcy5ib3hNaW4ueCwgdHJpYW5nbGUubWluWCk7XHJcbiAgICAgIHRoaXMuYm94TWluLnkgPSBNYXRoLm1pbih0aGlzLmJveE1pbi55LCB0cmlhbmdsZS5taW5ZKTtcclxuICAgICAgdGhpcy5ib3hNaW4ueiA9IE1hdGgubWluKHRoaXMuYm94TWluLnosIHRyaWFuZ2xlLm1pblopO1xyXG4gICAgICB0aGlzLmJveE1heC54ID0gTWF0aC5tYXgodGhpcy5ib3hNYXgueCwgdHJpYW5nbGUubWF4WCk7XHJcbiAgICAgIHRoaXMuYm94TWF4LnkgPSBNYXRoLm1heCh0aGlzLmJveE1heC55LCB0cmlhbmdsZS5tYXhZKTtcclxuICAgICAgdGhpcy5ib3hNYXgueiA9IE1hdGgubWF4KHRoaXMuYm94TWF4LnosIHRyaWFuZ2xlLm1heFopO1xyXG4gICB9XHJcbn1cclxuIiwiXHJcbi8vZXhwb3J0IGNvbnN0IFNxdWludFVybCA9ICd3czovL2xvY2FsaG9zdDo4MDgwL1YxLydcclxuLy9leHBvcnQgY29uc3QgU3F1aW50VXJsID0gJ3dzOi8vMTkyLjE2OC44Ni4yMzo4MDgwL1YxLydcclxuZXhwb3J0IGNvbnN0IFNxdWludFVybCA9ICd3c3M6Ly9zcXVpbnRzZXJ2ZXItMTEyNzgubm9kZWNoZWYuY29tL1YxLydcclxuXHJcbiAgIC8vc3RhdGljIHJlYWRvbmx5IHVybCA9ICd3czovL2xvY2FsaG9zdDo4MDgwL1YxLydcclxuICAgLy9zdGF0aWMgcmVhZG9ubHkgdXJsID0gJ3dzczovL3NxdWludHNlcnZlci0xMTI3OC5ub2RlY2hlZi5jb20vVjEvJ1xyXG5cclxuXHJcbiAgIC8vcHJpdmF0ZSBob3N0ID0gJ2h0dHBzOi8vd295YWt0ZXN0LnVlLnIuYXBwc3BvdC5jb20vJztcclxuICAgLy9wcml2YXRlIGhvc3QgPSAnaHR0cDovLzE5Mi4xNjguODYuMjM6ODA4MC8nO1xyXG4gICAvL3ByaXZhdGUgaG9zdCA9ICdodHRwOi8vbG9jYWxob3N0OjgwODAvJztcclxuICAgLy9wcml2YXRlIGhvc3QgPSAnaHR0cDovLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArICc6ODA4MC9WMSc7XHJcbiAgIC8vcHJpdmF0ZSBob3N0ID0gJ2h0dHA6Ly8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAnOjMwMDAvJztcclxuXHJcbiAgIC8vc3RhdGljIHJlYWRvbmx5IHVybCA9ICdodHRwczovL3NxdWludHNlcnZlci0xMTI3OC5ub2RlY2hlZi5jb20vVjEnO1xyXG4gICAvL3N0YXRpYyByZWFkb25seSB1cmwgPSAnaHR0cDovLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArICc6ODA4MC9WMSdcclxuICAgLy9zdGF0aWMgcmVhZG9ubHkgdXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9WMSdcclxuIiwiaW1wb3J0IHsgU3F1aW50VXJsIGFzIFNxdWludFVybCB9IGZyb20gXCIuL1NlcnZlcnNcIjtcclxuaW1wb3J0IHsgZGVidWcgfSBmcm9tIFwiLi9TcXVpbnRBcHBcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNxdWludE1lc3NhZ2Uge1xyXG4gICBbcHJvcDogc3RyaW5nXTogYW55LFxyXG4gICBzdWJqZWN0OiAnQ3JlYXRlU2Vzc2lvbicgfCAnU2Vzc2lvbkNyZWF0ZWQnIHwgJ1Nlc3Npb25DcmVhdGVFcnJvcicgfCAnU2Vzc2lvbkxpc3QnIHwgJ1N1YnNjcmliZScgfCAnUmVhZHlGb3JOZXh0SW1hZ2UnLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElTZXNzaW9uIHtcclxuICAgbmFtZTogc3RyaW5nLFxyXG4gICBjb25uZWN0aW9uSWQ6IHN0cmluZyxcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgT25JbWFnZUhhbmRsZXIgPSAoaW1nOiBCbG9iKSA9PiB2b2lkO1xyXG5leHBvcnQgdHlwZSBTZXNzaW9uTGlzdEhhbmRsZXIgPSAoc2Vzc2lvbjogSVNlc3Npb25bXSkgPT4gdm9pZDtcclxuXHJcbnR5cGUgU2Vzc2lvbkNyZWF0ZWRIYW5kbGVyID0gKHNlc3Npb246IElTZXNzaW9uKSA9PiB2b2lkO1xyXG50eXBlIFNlc3Npb25DcmVhdGVFcnJvckhhbmRsZXIgPSAoZXJyb3I6IHN0cmluZykgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcXVpbnQge1xyXG5cclxuICAgcHVibGljIHN0YXRpYyByZWFkb25seSB1cmwgPSBTcXVpbnRVcmw7XHJcblxyXG4gICBwcml2YXRlIHdzOiBXZWJTb2NrZXQ7XHJcblxyXG4gICBwdWJsaWMgb25JbWFnZTogT25JbWFnZUhhbmRsZXI7XHJcbiAgIHB1YmxpYyBvblNlc3Npb25MaXN0OiBTZXNzaW9uTGlzdEhhbmRsZXI7XHJcbiAgIHByaXZhdGUgb25TZXNzaW9uQ3JlYXRlZDogU2Vzc2lvbkNyZWF0ZWRIYW5kbGVyO1xyXG4gICBwcml2YXRlIG9uU2Vzc2lvbkNyZWF0ZUVycm9yOiBTZXNzaW9uQ3JlYXRlRXJyb3JIYW5kbGVyO1xyXG4gICBwcml2YXRlIGNvbm5lY3Rpb25JZDogc3RyaW5nO1xyXG5cclxuICAgcHVibGljIG9uRXJyb3I6IChldmVudDogRXZlbnQpID0+IHZvaWQ7XHJcbiAgIHB1YmxpYyBvbkNsb3NlOiAoZXZlbnQ6IENsb3NlRXZlbnQpID0+IHZvaWQ7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgIGlmICh0aGlzLndzICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcclxuICAgICAgICAgICAgdGhpcy53cy5jbG9zZSgpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAvKlxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4ge1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnYmVmb3JldW5sb2FkJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2VoaWRlJywgKCkgPT4ge1xyXG4gICAgICAgICBhbGVydCgncGFnZWhpZGUnKTtcclxuICAgICAgICAgY29uc29sZS5sb2coJ3BhZ2VoaWRlJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAqL1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGNvbm5lY3RlZCgpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuICh0aGlzLndzICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGJ1ZmZlclJlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgIGRlYnVnKCdTcXVpbnQuYnVmZmVyUmVhZHkoKSBjYWxsZWQgYWZ0ZXIgd2Vic29ja2V0IHdhcyBkaXNjb25uZWN0ZWQnKTtcclxuICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy53cy5idWZmZXJlZEFtb3VudCA9PT0gMDtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBzZXRXUyh3czogV2ViU29ja2V0KSB7XHJcblxyXG4gICAgICB0aGlzLndzID0gd3M7XHJcblxyXG4gICAgICB3cy5vbm9wZW4gPSBudWxsO1xyXG5cclxuICAgICAgd3Mub25lcnJvciA9IChldmVudDogRXZlbnQpID0+IHtcclxuICAgICAgICAgdGhpcy53cyA9IG51bGw7XHJcbiAgICAgICAgIGlmICh0aGlzLm9uRXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkVycm9yKGV2ZW50KTtcclxuICAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgd3Mub25tZXNzYWdlID0gKG1lc3NhZ2U6IE1lc3NhZ2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAvLyBwcm9jZXNzIHRoZSBpbWFnZVxyXG4gICAgICAgICBpZiAobWVzc2FnZS5kYXRhIGluc3RhbmNlb2YgQmxvYikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkltYWdlKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25JbWFnZShtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UuZGF0YSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgbGV0IG9iaiA9IEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzTWVzc2FnZShvYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgbWVzc2FnZSBub3QgcmVjZWl2ZWQ6IEludmFsaWQgSlNPTi5cXG4nICsgbWVzc2FnZS5kYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3cy5vbmNsb3NlID0gKGV2ZW50OiBDbG9zZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgIHRoaXMud3MgPSBudWxsO1xyXG4gICAgICAgICBpZiAodGhpcy5vbkNsb3NlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25DbG9zZShldmVudCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY29ubmVjdCh1cmw6IHN0cmluZywgcmVjb25uZWN0SWQ6IHN0cmluZyA9IHVuZGVmaW5lZCk6IFByb21pc2U8dm9pZD4ge1xyXG5cclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICByZWplY3QoJ0Nhbm5vdCBjb25uZWN0IHRvIHNlcnZlcjogcHJldmlvdXMgY29ubmVjdGlvbiBpcyBzdGlsbCBvcGVuJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgLy8gY3JlYXRlIHRlbXBvcmFyeSBoYW5kbGVycyB0aGF0IHByb2Nlc3MgdGhlIHNlcnZlciBoYW5kc2hha2VcclxuICAgICAgICAgbGV0IHdzID0gbmV3IFdlYlNvY2tldCh1cmwpO1xyXG5cclxuICAgICAgICAgd3Mub25vcGVuID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBzZW5kIGhhbmRzaGFrZSBtZXNzYWdlXHJcbiAgICAgICAgICAgIHdzLnNlbmQoXHJcbiAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgc3ViamVjdDogJ0hlbGxvJyxcclxuICAgICAgICAgICAgICAgICAgcmVjb25uZWN0SWQ6IHJlY29ubmVjdElkLFxyXG4gICAgICAgICAgICAgICAgICB1c2VyQWdlbnQ6IG5hdmlnYXRvci51c2VyQWdlbnQsXHJcbiAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiBuYXZpZ2F0b3IucGxhdGZvcm0sXHJcbiAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgIH07XHJcblxyXG4gICAgICAgICB3cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdCgnQ2Fubm90IGNvbm5lY3QgdG8gc2VydmVyOiAnICsgZXZlbnQuY29kZSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgd3Mub25lcnJvciA9IChldmVudDogRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KCdDYW5ub3QgY29ubmVjdCB0byAnICsgdXJsKTtcclxuICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgIHdzLm9ubWVzc2FnZSA9IChtZXNzYWdlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgbGV0IG1zZyA9IEpTT04ucGFyc2UobWVzc2FnZUV2ZW50LmRhdGEpO1xyXG4gICAgICAgICAgICAgICBpZiAobXNnLnN1YmplY3QgJiYgbXNnLnN1YmplY3QgPT09ICdIZWxsbycpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBtc2cuaWQ7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0V1Mod3MpO1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3F1aW50IGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQuIElEPScgKyBtc2cuaWQpO1xyXG4gICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGRlYnVnKCdFeHBlY3RlZCBIZWxsbyByZXNwb25zZSwgZ290OiAnICsgSlNPTi5zdHJpbmdpZnkobXNnLCBudWxsLCAnICcpKTtcclxuICAgICAgICAgICAgICAgICAgcmVqZWN0KCdDYW5ub3QgY29ubmVjdCB0byAnICsgdXJsICsgJ1xcblxcbkludmFsaWQgc2VydmVyIGhhbmRzaGFrZS4nKTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgZGVidWcoJ0V4cGVjdGVkIEhlbGxvIHJlc3BvbnNlLCBnb3Q6ICcgKyBtZXNzYWdlRXZlbnQuZGF0YSk7XHJcbiAgICAgICAgICAgICAgIHJlamVjdCgnQ2Fubm90IGNvbm5lY3QgdG8gJyArIHVybCArICdcXG5cXG5JbnZhbGlkIHNlcnZlciBoYW5kc2hha2UuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNsb3NlKCkge1xyXG4gICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgIGRlYnVnKCdTcXVpbnQuY2xvc2UoKSBjYWxsZWQgYnV0IG5vIGNvbm5lY3Rpb24gZXhpc3RzJyk7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy53cy5jbG9zZSgpO1xyXG4gICAgICB0aGlzLndzID0gbnVsbDtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBwcm9jZXNzTWVzc2FnZShtc2c6IElTcXVpbnRNZXNzYWdlKSB7XHJcbiAgICAgIHN3aXRjaCAobXNnLnN1YmplY3QpIHtcclxuICAgICAgICAgY2FzZSAnU2Vzc2lvbkNyZWF0ZWQnOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5vblNlc3Npb25DcmVhdGVkKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25TZXNzaW9uQ3JlYXRlZCh7XHJcbiAgICAgICAgICAgICAgICAgIG5hbWU6IG1zZy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICBjb25uZWN0aW9uSWQ6IG1zZy5jb25uZWN0aW9uSWQsXHJcbiAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgIGNhc2UgJ1Nlc3Npb25DcmVhdGVFcnJvcic6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uU2Vzc2lvbkNyZWF0ZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25TZXNzaW9uQ3JlYXRlRXJyb3IobXNnLmVycm9yKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlICdTZXNzaW9uTGlzdCc6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uU2Vzc2lvbkxpc3QpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5vblNlc3Npb25MaXN0KG1zZy5zZXNzaW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlIHVuZGVmaW5lZDpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCBNZXNzYWdlOiBcXCdzdWJqZWN0XFwnIG5vdCBmb3VuZC5cXG4nICsgSlNPTi5zdHJpbmdpZnkobXNnLCBudWxsLCAnICcpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIE1lc3NhZ2U6IHVua25vd24gXFwnc3ViamVjdFxcJy5cXG4nICsgSlNPTi5zdHJpbmdpZnkobXNnLCBudWxsLCAnICcpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgc2VuZChtc2c6IElTcXVpbnRNZXNzYWdlKSB7XHJcbiAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgZGVidWcoJ1NxdWludC5zZW5kKCkgY2FsbGVkLCBidXQgbm90IGNvbm5lY3RlZCcpO1xyXG4gICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMud3Muc2VuZChKU09OLnN0cmluZ2lmeShtc2cpKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNlbmRJbWFnZShibG9iOiBCbG9iKSB7XHJcbiAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgZGVidWcoJ1NxdWludC5zZW5kSW1hZ2UoKSBjYWxsZWQsIGJ1dCBub3QgY29ubmVjdGVkJyk7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuYnVmZmVyUmVhZHkpIHtcclxuICAgICAgICAgdGhpcy53cy5zZW5kKGJsb2IpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnc2tpcHBpbmcgdXBsb2FkLCBidWZmZXIgbm90IGVtcHR5OiAnICsgdGhpcy53cy5idWZmZXJlZEFtb3VudCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHJlcXVlc3ROZXh0SW1hZ2UoKSB7XHJcbiAgICAgIHRoaXMuc2VuZCh7XHJcbiAgICAgICAgIHN1YmplY3Q6ICdSZWFkeUZvck5leHRJbWFnZScsXHJcbiAgICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY3JlYXRlU2Vzc2lvbihuYW1lOiBzdHJpbmcpOiBQcm9taXNlPElTZXNzaW9uPiB7XHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZVNlc3Npb24oKSBzb2NrZXQgcmVhZHkgc3RhdGU6ICcgKyAodGhpcy53cyA/IHRoaXMud3MucmVhZHlTdGF0ZSA6ICdudWxsJykpO1xyXG4gICAgICAgICAgICByZWplY3QoJ1dlYlNvY2tldCBub3QgY29ubmVjdGVkLicpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHRoaXMuc2VuZCh7XHJcbiAgICAgICAgICAgIHN1YmplY3Q6ICdDcmVhdGVTZXNzaW9uJyxcclxuICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICBsZXQgY2xvc2VIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoJ1dlYlNvY2tldCB3YXMgY2xvc2VkJyk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgdGhpcy53cy5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsIGNsb3NlSGFuZGxlcik7XHJcbiAgICAgICAgIGxldCBlcnJIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoJ1dlYlNvY2tldCBlcnJvcicpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHRoaXMud3MuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgIHRoaXMub25TZXNzaW9uQ3JlYXRlZCA9IChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25TZXNzaW9uQ3JlYXRlZCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25TZXNzaW9uQ3JlYXRlRXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLndzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgY2xvc2VIYW5kbGVyKTtcclxuICAgICAgICAgICAgdGhpcy53cy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVyckhhbmRsZXIpO1xyXG4gICAgICAgICAgICByZXNvbHZlKHNlc3Npb24pO1xyXG4gICAgICAgICB9O1xyXG4gICAgICAgICB0aGlzLm9uU2Vzc2lvbkNyZWF0ZUVycm9yID0gKGVycikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uU2Vzc2lvbkNyZWF0ZWQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm9uU2Vzc2lvbkNyZWF0ZUVycm9yID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy53cy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbG9zZScsIGNsb3NlSGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMud3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJIYW5kbGVyKTtcclxuICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3Vic2NyaWJlKGNvbm5lY3Rpb25JZDogc3RyaW5nKSB7XHJcbiAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3Vic2NyaWJlLiBXZWJTb2NrZXQgbm90IGNvbm5lY3RlZC4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zZW5kKHtcclxuICAgICAgICAgc3ViamVjdDogJ1N1YnNjcmliZScsXHJcbiAgICAgICAgIGNvbm5lY3Rpb25JZDogY29ubmVjdGlvbklkLFxyXG4gICAgICB9KVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgJ3dlYnJ0Yy1hZGFwdGVyJztcclxuaW1wb3J0IHsgSUFwcCB9IGZyb20gJy4uLy4uL0lBcHAnO1xyXG5pbXBvcnQgeyBQb2ludGVyRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vR1VJL1BvaW50ZXJFdmVudEhhbmRsZXInO1xyXG5pbXBvcnQgeyBJVmlkZW9SZXNvbHV0aW9uLCBWaWRlbyB9IGZyb20gJy4vVmlkZW8nO1xyXG5pbXBvcnQgeyBVcGxvYWRlciB9IGZyb20gJy4vVXBsb2FkZXInO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tICcuLi8uLi9HVUkvU2xpZGVyJztcclxuaW1wb3J0IHsgSUN0cmwgfSBmcm9tICcuLi8uLi9HVUkvSUN0cmwnO1xyXG5pbXBvcnQgeyBpT1MsIHRvVGltZVN0ciwgdG9TaXplU3RyLCBpc01vYmlsZSB9IGZyb20gJy4uLy4uL1V0aWwvR2xvYmFscyc7XHJcbmltcG9ydCB7IFZlYzIgfSBmcm9tICcuLi8uLi9VdGlsM0QvVmVjJztcclxuaW1wb3J0IHsgTWVudWJhciB9IGZyb20gJy4uLy4uL0dVSS9NZW51JztcclxuaW1wb3J0IHsgQ29uc29sZUNhcHR1cmUgfSBmcm9tICcuLi8uLi9VdGlsL0NvbnNvbGVDYXB0dXJlJztcclxuaW1wb3J0IHsgU3RhcnREaWFsb2cgfSBmcm9tICcuL1N0YXJ0RGlhbG9nJztcclxuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vVmVyc2lvbic7XHJcbmltcG9ydCB7IFNxdWludCB9IGZyb20gJy4vU3F1aW50JztcclxuaW1wb3J0IHsgRlBTIH0gZnJvbSAnLi4vLi4vVXRpbC9GUFMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNxdWludFN0cmluZ3Mge1xyXG4gICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBTUVSQV9OT1RfUkVBRFkgPSAnQ2FtZXJhIG5vdCByZWFkeSc7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVidWcobXNnOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgY29uc29sZS5lcnJvcihtc2cpO1xyXG4gICAvL2FsZXJ0KCdkZWJ1ZyBlcnJvcjogJyArIG1zZyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTcXVpbnRBcHAgaW1wbGVtZW50cyBJQXBwIHtcclxuICAgcHJpdmF0ZSBoYW5kbGVyOiBQb2ludGVyRXZlbnRIYW5kbGVyO1xyXG4gICBwcml2YXRlIGRpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgIHByaXZhdGUgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICBwcml2YXRlIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgIHByaXZhdGUgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQ7XHJcbiAgIHByaXZhdGUgZGVzaXJlZDogSVZpZGVvUmVzb2x1dGlvbiA9IHtcclxuICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICB3aWR0aDogMCxcclxuICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICBmcmFtZVJhdGU6IDAsXHJcbiAgICAgIGZhY2luZ01vZGU6ICcnLFxyXG4gICAgICBkZXZpY2VJZDogJycsXHJcbiAgIH07XHJcbiAgIHByaXZhdGUgdXBsb2FkZXI6IFVwbG9hZGVyO1xyXG4gICBwcml2YXRlIGRvd25sb2FkRlBTID0gbmV3IEZQUygpO1xyXG5cclxuICAgcHJpdmF0ZSBicmlnaHRuZXNzOiBTbGlkZXI7XHJcbiAgIHByaXZhdGUgY29udHJhc3Q6IFNsaWRlcjtcclxuICAgcHJpdmF0ZSBzYXR1cmF0ZTogU2xpZGVyO1xyXG4gICBwcml2YXRlIGJsdXI6IFNsaWRlcjtcclxuICAgcHJpdmF0ZSB6b29tOiBTbGlkZXI7XHJcbiAgIHByaXZhdGUgcXVhbGl0eTogU2xpZGVyO1xyXG4gICBwcml2YXRlIHJlc29sdXRpb246IFNsaWRlcjtcclxuICAgcHJpdmF0ZSBjYW1lcmFDdHJsczogSUN0cmxbXSA9IFtdO1xyXG5cclxuICAgcHJpdmF0ZSB4T2Zmc2V0ID0gMDtcclxuICAgcHJpdmF0ZSB5T2Zmc2V0ID0gMDtcclxuXHJcbiAgIHByaXZhdGUgaW1nU2l6ZSA9IDA7XHJcbiAgIHByaXZhdGUgc3F1aW50OiBTcXVpbnQ7XHJcbiAgIHByaXZhdGUgc2Vzc2lvbk5hbWUgPSAnJztcclxuXHJcbiAgIHByaXZhdGUgc3RhcnREaWFsb2c6IFN0YXJ0RGlhbG9nO1xyXG4gICBwcml2YXRlIGNvbnNvbGVDYXB0dXJlID0gbmV3IENvbnNvbGVDYXB0dXJlKCk7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICBkb2N1bWVudC50aXRsZSArPSAoJyAnICsgVmVyc2lvbi5CdWlsZCk7XHJcbiAgICAgIC8vYWxlcnQoZG9jdW1lbnQudGl0bGUpO1xyXG4gICAgICBsZXQgbXNnID0gJyc7XHJcbiAgICAgIGlmIChpT1MoKSkge1xyXG4gICAgICAgICBtc2cgKz0gJy4gUnVubmluZyBvbiBBcHBsZSc7XHJcbiAgICAgIH1cclxuICAgICAgbXNnICs9ICdcXG51c2VyQWdlbnQ6ICcgKyBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gICAgICBtc2cgKz0gJ1xcbnBsYXRmb3JtOiAnICsgbmF2aWdhdG9yLnBsYXRmb3JtO1xyXG4gICAgICBjb25zb2xlLmxvZyhtc2cpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY3JlYXRlKGRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHJcbiAgICAgIGRpdi5pZCA9ICdTcXVpbnRBcHAnO1xyXG4gICAgICB0aGlzLnNxdWludCA9IG5ldyBTcXVpbnQoKTtcclxuICAgICAgdGhpcy5zcXVpbnQub25JbWFnZSA9IChibG9iKSA9PiB0aGlzLm9uRG93bmxvYWQoYmxvYik7XHJcblxyXG4gICAgICB0aGlzLnNxdWludC5vbkNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICBhbGVydCgnU3F1aW50IGNvbm5lY3Rpb24gY2xvc2VkLicpO1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnU3F1aW5nIGNvbm5lY3Rpb24gY2xvc2VkLicpO1xyXG4gICAgICAgICB0aGlzLnN0b3BVcGxvYWRlcigpO1xyXG4gICAgICAgICB0aGlzLmVuYWJsZVZpZGVvKGZhbHNlKTtcclxuICAgICAgICAgdGhpcy5zdGFydERpYWxvZy52aXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgIGxldCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc3F1aW50Lm9uRXJyb3IgPSAobXNnKSA9PiBhbGVydCgnb25FcnJvcjogJyArIG1zZyk7XHJcblxyXG4gICAgICB0aGlzLnN0YXJ0RGlhbG9nID0gbmV3IFN0YXJ0RGlhbG9nKFxyXG4gICAgICAgICBkaXYsXHJcbiAgICAgICAgIHRoaXMuc3F1aW50LFxyXG4gICAgICAgICAoY29ubmVjdGlvbklkKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3F1aW50LnN1YnNjcmliZShjb25uZWN0aW9uSWQpO1xyXG4gICAgICAgICB9LFxyXG4gICAgICAgICAoc2Vzc2lvbk5hbWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXNzaW9uTmFtZSA9IHNlc3Npb25OYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZVZpZGVvKHRydWUpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLmRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmRpdi5jbGFzc05hbWUgPSAnRmxleENvbnRhaW5lcic7XHJcbiAgICAgIGRpdi5hcHBlbmRDaGlsZCh0aGlzLmRpdik7XHJcblxyXG4gICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICB0aGlzLmNhbnZhcy5pZCA9ICdDYW52YXMnO1xyXG4gICAgICB0aGlzLmRpdi5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XHJcblxyXG4gICAgICB0aGlzLnZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgdGhpcy52aWRlby5pZCA9ICdWaWRlbyc7XHJcbiAgICAgIHRoaXMudmlkZW8uYXV0b3BsYXkgPSB0cnVlO1xyXG4gICAgICB0aGlzLnZpZGVvLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAndHJ1ZScpOyAvLyBuZWVkZWQgZm9yIGlQaG9uZXNcclxuICAgICAgdGhpcy52aWRlby5vbmVycm9yID0gKGVycikgPT4ge1xyXG4gICAgICAgICBhbGVydCgndmlkZW8ub25lcnJvcigpOiAnICsgZXJyKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRpdi5hcHBlbmRDaGlsZCh0aGlzLnZpZGVvKTtcclxuICAgICAgdGhpcy52aWRlby5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgdGhpcy5oYW5kbGVyID0gbmV3IFBvaW50ZXJFdmVudEhhbmRsZXIodGhpcy5jYW52YXMpO1xyXG4gICAgICB0aGlzLmhhbmRsZXIub25TY2FsZSA9IChzY2FsZTogbnVtYmVyLCBjaGFuZ2U6IG51bWJlcikgPT4gdGhpcy5vblNjYWxlKHNjYWxlLCBjaGFuZ2UpO1xyXG4gICAgICB0aGlzLmhhbmRsZXIub25UcmFuc2xhdGUgPSAoZGVsdGE6IFZlYzIpID0+IHRoaXMub25UcmFuc2xhdGUoZGVsdGEpO1xyXG4gICAgICB0aGlzLmhhbmRsZXIub25EcmFnID0gKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpID0+IHRoaXMub25EcmFnKHBvcywgZGVsdGEpO1xyXG5cclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMub25SZXNpemUoKSk7XHJcbiAgICAgIHRoaXMudXBkYXRlU2l6ZXMoKTtcclxuXHJcbiAgICAgIHRoaXMuc3RhcnREaWFsb2cudmlzaWJsZSA9IHRydWU7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgc3RhcnRTZXNzaW9uKCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnY3JlYXRpbmcgc2Vzc2lvbiBcXCcnICsgdGhpcy5zZXNzaW9uTmFtZSArICdcXCcgb24gJyArIFNxdWludC51cmwpO1xyXG4gICAgICB0aGlzLnNxdWludC5jcmVhdGVTZXNzaW9uKHRoaXMuc2Vzc2lvbk5hbWUpXHJcbiAgICAgICAgIC50aGVuKChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXNzaW9uIGNyZWF0ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFVwbG9hZGVyKCk7XHJcbiAgICAgICAgIH0pXHJcbiAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCdGYWlsZWQgdG8gY3JlYXRlIHNlc3Npb246ICcgKyBlcnIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0RGlhbG9nLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZVZpZGVvKGZhbHNlKTtcclxuICAgICAgICAgfSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgc3RhcnRVcGxvYWRlcigpIHtcclxuICAgICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nIHVwbG9hZGVyLCB2aWRlby5yZWFkeVN0YXRlPScgKyB0aGlzLnZpZGVvLnJlYWR5U3RhdGUpO1xyXG4gICAgICB0aGlzLnVwbG9hZGVyID0gbmV3IFVwbG9hZGVyKFxyXG4gICAgICAgICB0aGlzLnNxdWludCxcclxuICAgICAgICAgKCkgPT4gdGhpcy50YWtlUGljdHVyZSgpXHJcbiAgICAgICk7XHJcbiAgIH1cclxuICAgcHJpdmF0ZSBzdG9wVXBsb2FkZXIoKSB7XHJcbiAgICAgIGlmICh0aGlzLnVwbG9hZGVyKSB7XHJcbiAgICAgICAgIHRoaXMudXBsb2FkZXIuc3RvcCgpO1xyXG4gICAgICAgICB0aGlzLnVwbG9hZGVyID0gbnVsbDtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG5cclxuXHJcblxyXG4gICBwcml2YXRlIGVuYWJsZUNhbWVyYUN0cmxzKGZsYWc6IGJvb2xlYW4pIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNhbWVyYUN0cmxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIHRoaXMuY2FtZXJhQ3RybHNbaV0uZW5hYmxlZCA9IGZsYWc7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIGJ1aWxkTWVudShtZW51YmFyOiBNZW51YmFyKSB7XHJcblxyXG4gICAgICBsZXQgdmlld01lbnUgPSBtZW51YmFyLmFkZFN1Yk1lbnUoJ1ZpZXcnKTtcclxuXHJcbiAgICAgIHRoaXMuYnJpZ2h0bmVzcyA9IHZpZXdNZW51LmFkZFNsaWRlcih7XHJcbiAgICAgICAgIGxhYmVsOiAnQnJpZ2h0bmVzcycsXHJcbiAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgbWF4OiAyMDAsXHJcbiAgICAgICAgIHZhbHVlOiAxMDAsXHJcbiAgICAgICAgIG9uaW5wdXQ6ICgpID0+IHRoaXMuZHJhd0ltZygpLFxyXG4gICAgICAgICBnZXRUZXh0OiAoc2xpZGVyKSA9PiBzbGlkZXIudmFsdWUudG9GaXhlZCgwKSArICclJyxcclxuICAgICAgfSlcclxuXHJcbiAgICAgIHRoaXMuY29udHJhc3QgPSB2aWV3TWVudS5hZGRTbGlkZXIoe1xyXG4gICAgICAgICBsYWJlbDogJ0NvbnRyYXN0JyxcclxuICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICBtYXg6IDIwMCxcclxuICAgICAgICAgdmFsdWU6IDEwMCxcclxuICAgICAgICAgb25pbnB1dDogKCkgPT4gdGhpcy5kcmF3SW1nKCksXHJcbiAgICAgICAgIGdldFRleHQ6IChzbGlkZXIpID0+IHNsaWRlci52YWx1ZS50b0ZpeGVkKDApICsgJyUnLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuc2F0dXJhdGUgPSB2aWV3TWVudS5hZGRTbGlkZXIoe1xyXG4gICAgICAgICBsYWJlbDogJ0Nocm9tYScsXHJcbiAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgbWF4OiAyMDAsXHJcbiAgICAgICAgIHZhbHVlOiAxMDAsXHJcbiAgICAgICAgIG9uaW5wdXQ6ICgpID0+IHRoaXMuZHJhd0ltZygpLFxyXG4gICAgICAgICBnZXRUZXh0OiAoc2xpZGVyKSA9PiBzbGlkZXIudmFsdWUudG9GaXhlZCgwKSArICclJyxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLmJsdXIgPSB2aWV3TWVudS5hZGRTbGlkZXIoe1xyXG4gICAgICAgICBsYWJlbDogJ0JsdXInLFxyXG4gICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgIG1heDogMTAsXHJcbiAgICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgICBvbmlucHV0OiAoKSA9PiB0aGlzLmRyYXdJbWcoKSxcclxuICAgICAgICAgZ2V0VGV4dDogKHNsaWRlcikgPT4gc2xpZGVyLnZhbHVlLnRvRml4ZWQoMCksXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy56b29tID0gdmlld01lbnUuYWRkU2xpZGVyKHtcclxuICAgICAgICAgbGFiZWw6ICdab29tJyxcclxuICAgICAgICAgbWluOiAwLjEsXHJcbiAgICAgICAgIG1heDogNSxcclxuICAgICAgICAgdmFsdWU6IDEsXHJcbiAgICAgICAgIG9uaW5wdXQ6ICgpID0+IHRoaXMuZHJhd0ltZygpLFxyXG4gICAgICAgICBnZXRUZXh0OiAoc2xpZGVyKSA9PiAoMTAwICogc2xpZGVyLnZhbHVlKS50b0ZpeGVkKDApICsgJyUnLFxyXG4gICAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICBsZXQgY2FtZXJhTWVudSA9IG1lbnViYXIuYWRkU3ViTWVudSgnQ2FtZXJhJyk7XHJcblxyXG4gICAgICBsZXQgZmlyc3RJdGVtID0gdHJ1ZTtcclxuICAgICAgVmlkZW8uZ2V0Q2FtZXJhcygocmVzb2x1dGlvbikgPT4ge1xyXG5cclxuICAgICAgICAgbGV0IHJhZGlvQnV0dG9uID0gY2FtZXJhTWVudS5hZGRSYWRpb2J1dHRvbihcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICBsYWJlbDogcmVzb2x1dGlvbi5sYWJlbCxcclxuICAgICAgICAgICAgICAgb25jaGVjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRlc2lyZWQgPSByZXNvbHV0aW9uO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZVZpZGVvKHRydWUpO1xyXG4gICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICBjaGVja2VkOiBmaXJzdEl0ZW0sXHJcbiAgICAgICAgICAgICAgIGdyb3VwOiAnQ2FtZXJhc0dyb3VwJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgIGlmIChmaXJzdEl0ZW0pIHtcclxuICAgICAgICAgICAgdGhpcy5kZXNpcmVkID0gcmVzb2x1dGlvbjtcclxuICAgICAgICAgICAgZmlyc3RJdGVtID0gZmFsc2U7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIHRoaXMuY2FtZXJhQ3RybHMucHVzaChyYWRpb0J1dHRvbik7XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBsZXQgYnV0dG9uID0gY2FtZXJhTWVudS5hZGRJdGVtKCdDYXBhYmlsaXRpZXMuLi4nLCAoKSA9PiB7XHJcbiAgICAgICAgIGlmICh0aGlzLnZpZGVvLnNyY09iamVjdCkge1xyXG4gICAgICAgICAgICBsZXQgc3RyZWFtID0gdGhpcy52aWRlby5zcmNPYmplY3QgYXMgTWVkaWFTdHJlYW07XHJcbiAgICAgICAgICAgIGxldCB0cmFjayA9IHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xyXG4gICAgICAgICAgICBpZiAodHJhY2suZ2V0Q2FwYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgIGxldCBjYXBhYmlsaXRpZXMgPSB0cmFjay5nZXRDYXBhYmlsaXRpZXMoKTtcclxuICAgICAgICAgICAgICAgbGV0IG1zZyA9ICdDYW1lcmEgQ2FwYWJpbGl0aWVzOlxcbic7XHJcbiAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBjYXBhYmlsaXRpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2RldmljZUlkJyB8fCBrZXkgPT09ICdncm91cElkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBtc2cgKz0gdGhpcy5jYXBhYmlsaXR5VG9TdHJpbmcoY2FwYWJpbGl0aWVzLCBrZXkpICsgJ1xcbic7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgYWxlcnQobXNnKTtcclxuICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoY2FwYWJpbGl0aWVzLCBudWxsLCAnICcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICB0aGlzLnF1YWxpdHkgPSBjYW1lcmFNZW51LmFkZFNsaWRlcih7XHJcbiAgICAgICAgIGxhYmVsOiAnSlBlZyBQaG90byBRdWFsaXR5JyxcclxuICAgICAgICAgbWluOiAwLjEsXHJcbiAgICAgICAgIG1heDogMSxcclxuICAgICAgICAgdmFsdWU6IDAuNSxcclxuICAgICAgICAgZ2V0VGV4dDogKHNsaWRlcikgPT4gKDEwMCAqIHNsaWRlci52YWx1ZSkudG9GaXhlZCgpICsgJyUnLFxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5jYW1lcmFDdHJscy5wdXNoKHRoaXMucXVhbGl0eSk7XHJcblxyXG4gICAgICB0aGlzLnJlc29sdXRpb24gPSBjYW1lcmFNZW51LmFkZFNsaWRlcih7XHJcbiAgICAgICAgIGxhYmVsOiAnQ2FtZXJhIFJlc29sdXRpb24nLFxyXG4gICAgICAgICBtaW46IDAuMSxcclxuICAgICAgICAgbWF4OiAxLFxyXG4gICAgICAgICB2YWx1ZTogMC41LFxyXG4gICAgICAgICBnZXRUZXh0OiAoc2xpZGVyKSA9PiAoMTAwICogc2xpZGVyLnZhbHVlKS50b0ZpeGVkKCkgKyAnJScsXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmNhbWVyYUN0cmxzLnB1c2godGhpcy5yZXNvbHV0aW9uKTtcclxuXHJcbiAgICAgIHRoaXMuZW5hYmxlQ2FtZXJhQ3RybHMoZmFsc2UpO1xyXG5cclxuICAgICAgbGV0IHNlc3Npb25NZW51ID0gbWVudWJhci5hZGRTdWJNZW51KCdTZXNzaW9uJyk7XHJcblxyXG4gICAgICBzZXNzaW9uTWVudS5hZGRJdGVtKCdTdG9wJywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnNxdWludC5jbG9zZSgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGxldCBpdGVtID0gc2Vzc2lvbk1lbnUuYWRkSXRlbSgnU2hvdyBMb2cnLCAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMuY29uc29sZUNhcHR1cmUuc2hvdyA9ICF0aGlzLmNvbnNvbGVDYXB0dXJlLnNob3c7XHJcbiAgICAgICAgIGl0ZW0uaW5uZXJUZXh0ID0gdGhpcy5jb25zb2xlQ2FwdHVyZS5zaG93ID8gJ0hpZGUgTG9nJyA6ICdTaG93IExvZyc7XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG51bVRvU3RyaW5nKG51bTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobnVtKSkge1xyXG4gICAgICAgICByZXR1cm4gbnVtLnRvU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHJldHVybiBudW0udG9GaXhlZCgzKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNhcGFiaWxpdHlUb1N0cmluZyhjYXBhYmlsaXRpZXM6IE1lZGlhVHJhY2tDYXBhYmlsaXRpZXMsIG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgIGxldCBvYmogPSAoPGFueT5jYXBhYmlsaXRpZXMpW25hbWVdO1xyXG4gICAgICBsZXQgc3RyID0gbmFtZSArICc6ICc7XHJcbiAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICBpZiAob2JqWydtaW4nXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHN0ciArPSB0aGlzLm51bVRvU3RyaW5nKG9ialsnbWluJ10gYXMgbnVtYmVyKSArICcgdG8gJyArIHRoaXMubnVtVG9TdHJpbmcob2JqWydtYXgnXSBhcyBudW1iZXIpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICBzdHIgKz0gJywgJztcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBzdHIgKz0gSlNPTi5zdHJpbmdpZnkob2JqW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdHIgKz0gSlNPTi5zdHJpbmdpZnkob2JqKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICBzdHIgKz0gSlNPTi5zdHJpbmdpZnkob2JqKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc3RyO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG9uRG93bmxvYWQoYmxvYjogQmxvYikge1xyXG5cclxuICAgICAgaWYgKCFibG9iKSB7XHJcbiAgICAgICAgIGRlYnVnKCdvbkRvd25sb2FkKCkgYmxvYiBpcyBudWxsJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGxldCB0aGUgc2VydmVyIGtub3cgd2UncmUgcmVhZHkgZm9yIHRoZSBuZXh0IGRvd25sb2FkXHJcbiAgICAgIHRoaXMuc3F1aW50LnJlcXVlc3ROZXh0SW1hZ2UoKTtcclxuICAgICAgdGhpcy5kcmF3QmxvYihibG9iKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBkcmF3QmxvYihibG9iOiBCbG9iKSB7XHJcbiAgICAgIHRoaXMuZG93bmxvYWRGUFMudGljaygpO1xyXG4gICAgICBsZXQgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMuaW1nID0gaW1nO1xyXG4gICAgICAgICB0aGlzLmltZ1NpemUgPSBibG9iLnNpemU7XHJcbiAgICAgICAgIHRoaXMuZHJhd0ltZygpO1xyXG4gICAgICB9XHJcbiAgICAgIGltZy5vbmVycm9yID0gKHJlYXNvbikgPT4ge1xyXG4gICAgICAgICBhbGVydCgnY2Fubm90IGxvYWQgaW1hZ2U6ICcgKyByZWFzb24pO1xyXG4gICAgICB9XHJcbiAgICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHNldENvbnN0cmFpbnRzKCkge1xyXG5cclxuICAgICAgbGV0IGNvbnN0cmFpbnRzOiBhbnk7XHJcbiAgICAgIGlmICh0aGlzLmRlc2lyZWQuZGV2aWNlSWQgJiYgdGhpcy5kZXNpcmVkLmRldmljZUlkLnRyaW0oKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgIGNvbnN0cmFpbnRzID0ge1xyXG4gICAgICAgICAgICB2aWRlbzoge1xyXG4gICAgICAgICAgICAgICB3aWR0aDogeyBpZGVhbDogMTAgKiAxMDAwIH0sXHJcbiAgICAgICAgICAgICAgIGhlaWdodDogeyBpZGVhbDogMTAgKiAxMDAwIH0sXHJcbiAgICAgICAgICAgICAgIGRldmljZUlkOiB0aGlzLmRlc2lyZWQuZGV2aWNlSWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGF1ZGlvOiBmYWxzZSxcclxuICAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgLy9kZWJ1Zygnbm8gZGV2aWNlIGlkLCBmYWxsaW5nIGJhY2sgdG8gYW55IGNhbWVyYScpO1xyXG4gICAgICAgICBjb25zdHJhaW50cyA9IHtcclxuICAgICAgICAgICAgdmlkZW86IHtcclxuICAgICAgICAgICAgICAgd2lkdGg6IHsgaWRlYWw6IDEwICogMTAwMCB9LFxyXG4gICAgICAgICAgICAgICBoZWlnaHQ6IHsgaWRlYWw6IDEwICogMTAwMCB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhdWRpbzogZmFsc2UsXHJcbiAgICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCctLS1nZXRVc2VyTWVkaWEoKSByZXF1ZXN0aW5nXFxuJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzLCBudWxsLCAnICcpKTtcclxuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpXHJcbiAgICAgICAgIC50aGVuKChzdHJlYW0pID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLWdldFVzZXJNZWRpYSgpLnRoZW4oKSAnICsgc3RyZWFtKTtcclxuICAgICAgICAgICAgLy9hbGVydCgnLS0tZ2V0VXNlck1lZGlhKCkudGhlbigpICcgKyBzdHJlYW0gKyAnICcgKyBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXS5nZXRTZXR0aW5ncygpLndpZHRoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdHJlYW0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgYWxlcnQoJ0NvdWxkIG5vdCBjcmVhdGUgdmlkZW8gc3RyZWFtJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgIGxldCB0cmFjayA9IHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xyXG4gICAgICAgICAgICAgICBsZXQgc2V0dGluZ3MgPSB0cmFjay5nZXRTZXR0aW5ncygpO1xyXG5cclxuICAgICAgICAgICAgICAgaWYgKE1hdGgubWF4KHNldHRpbmdzLndpZHRoLCBzZXR0aW5ncy5oZWlnaHQpID4gMTAwMCkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdXRpb24udmFsdWUgPSBNYXRoLm1pbigxMDAwIC8gc2V0dGluZ3Mud2lkdGgsIDEwMDAgLyBzZXR0aW5ncy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYWN0dWFsIHZpZGVvIHNpemU6ICcgKyBzZXR0aW5ncy53aWR0aCArICcgeCAnICsgc2V0dGluZ3MuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWRlb1NpemUoc2V0dGluZ3Mud2lkdGgsIHNldHRpbmdzLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2V0dGluZyB2aWRlby5zcmNPYmplY3QgdG8gJyArIHN0cmVhbSk7XHJcbiAgICAgICAgICAgICAgIHRoaXMudmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xyXG4gICAgICAgICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKVxyXG4gICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5aW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmlkZW9TaXplKHRoaXMudmlkZW8udmlkZW9XaWR0aCwgdGhpcy52aWRlby52aWRlb0hlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBwbGF5aW5nOiAnICsgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIGlmICghdGhpcy51cGxvYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U2Vzc2lvbigpO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSlcclxuICAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcclxuICAgICAgICAgICAgYWxlcnQoJ3ZpZGVvIGVycm9yOiAnICsgcmVhc29uKTtcclxuICAgICAgICAgfSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZW5hYmxlVmlkZW8oZW5hYmxlOiBib29sZWFuKSB7XHJcblxyXG4gICAgICAvLyBzdG9wIHRoZSBsYXN0IHZpZGVvXHJcbiAgICAgIHRoaXMuc3RvcFRyYWNrcygpO1xyXG5cclxuICAgICAgdGhpcy5lbmFibGVDYW1lcmFDdHJscyhlbmFibGUpO1xyXG5cclxuICAgICAgaWYgKGVuYWJsZSkge1xyXG4gICAgICAgICB0aGlzLnZpZGVvLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICB0aGlzLnNldENvbnN0cmFpbnRzKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuc3RvcFVwbG9hZGVyKCk7XHJcbiAgICAgICAgIHRoaXMudmlkZW8uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHN0b3BUcmFja3MoKSB7XHJcbiAgICAgIGlmICh0aGlzLnZpZGVvLnNyY09iamVjdCkge1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnc3RvcHBpbmcgdHJhY2tzJyk7XHJcbiAgICAgICAgIC8vIFVzaW5nIHRoZSBjYW1lcmEgaXMgbm90IHJvYnVzdC4gQXBwbHlpbmcgY29uc3RyYWludHMgdG8gY2hhbmdlIHRoaW5nc1xyXG4gICAgICAgICAvLyBsaWtlIHdoaWNoIGNhbWVyYSBpcyBpbiB1c2Ugb25seSB3b3JrcyBzb21ldGltZXMuIFRoZSBtb3N0IHJvYnVzdCBJIGNhblxyXG4gICAgICAgICAvLyBtYWtlIGl0IGlzIHRvIGNsb3NlIHRoZSB2aWRlbyBlbGVtZW50IGFuZCBjcmVhdGUgYSBuZXcgb25lLlxyXG4gICAgICAgICBsZXQgc3RyZWFtID0gdGhpcy52aWRlby5zcmNPYmplY3QgYXMgTWVkaWFTdHJlYW07XHJcbiAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjazogTWVkaWFTdHJlYW1UcmFjaykgPT4ge1xyXG4gICAgICAgICAgICB0cmFjay5zdG9wKCk7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgdGFrZVBpY3R1cmUoKTogUHJvbWlzZTxCbG9iPiB7XHJcblxyXG4gICAgICBpZiAoIXRoaXMuc3F1aW50LmNvbm5lY3RlZCkge1xyXG4gICAgICAgICBjb25zb2xlLmVycm9yKCd0YWtlUGljdHVyZSgpIGFmdGVyIGNsb3NlJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLnZpZGVvLnJlYWR5U3RhdGUgIT0gNCkge1xyXG4gICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoU3F1aW50U3RyaW5ncy5DQU1FUkFfTk9UX1JFQURZKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICBjYW52YXMud2lkdGggPSB0aGlzLnZpZGVvLnZpZGVvV2lkdGggKiB0aGlzLnJlc29sdXRpb24udmFsdWU7XHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLnZpZGVvLnZpZGVvSGVpZ2h0ICogdGhpcy5yZXNvbHV0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgLy9jb25zb2xlLmxvZygnY2FwdHVyaW5nIGltYWdlOiAnICsgY2FudmFzLndpZHRoICsgJ3gnICsgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy52aWRlbywgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgIC8vIHVwbG9hZFxyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8QmxvYj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICBjYW52YXMudG9CbG9iKFxyXG4gICAgICAgICAgICAoYmxvYikgPT4ge1xyXG4gICAgICAgICAgICAgICAvLyBkcmF3IHdoYXQgd2FzIHVwbG9hZGVkLCBpLmUuIHNpbXVsYXRlIGEgZG93bmxvYWRcclxuICAgICAgICAgICAgICAgdGhpcy5kcmF3QmxvYihibG9iKTtcclxuXHJcbiAgICAgICAgICAgICAgIHJlc29sdmUoYmxvYilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2ltYWdlL2pwZWcnLFxyXG4gICAgICAgICAgICB0aGlzLnF1YWxpdHkudmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvblJlc2l6ZSgpIHtcclxuICAgICAgdGhpcy51cGRhdGVTaXplcygpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHVwZGF0ZVZpZGVvU2l6ZSh2aWRlb1dpZHRoOiBudW1iZXIsIHZpZGVvSGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUodGhpcy52aWRlbykuZGlzcGxheSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgIGxldCB2aWRlb1NpemUgPSBNYXRoLm1heCh0aGlzLnZpZGVvLmNsaWVudFdpZHRoLCB0aGlzLnZpZGVvLmNsaWVudEhlaWdodCk7XHJcbiAgICAgICAgIGlmICh2aWRlb1dpZHRoID4gdmlkZW9IZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy52aWRlby5zdHlsZS53aWR0aCA9IHZpZGVvU2l6ZSArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW8uc3R5bGUuaGVpZ2h0ID0gKHZpZGVvU2l6ZSAqIHZpZGVvSGVpZ2h0IC8gdmlkZW9XaWR0aCkgKyAncHgnO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvLnN0eWxlLmhlaWdodCA9IHZpZGVvU2l6ZSArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW8uc3R5bGUud2lkdGggPSAodmlkZW9TaXplICogdmlkZW9XaWR0aCAvIHZpZGVvSGVpZ2h0KSArICdweCc7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHVwZGF0ZVNpemVzKCkge1xyXG4gICAgICBsZXQgbWVudWJhckhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdNZW51YmFyJykuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgICAgdGhpcy5jb25zb2xlQ2FwdHVyZS5zZXRFZGdlcygwLCAwLCBtZW51YmFySGVpZ2h0LCAwKTtcclxuICAgICAgbGV0IHZpZXdXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgICAgbGV0IHZpZXdIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB2aWV3V2lkdGg7XHJcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHZpZXdIZWlnaHQgLSBtZW51YmFySGVpZ2h0O1xyXG5cclxuICAgICAgdGhpcy5kcmF3SW1nKCk7XHJcbiAgIH1cclxuXHJcblxyXG5cclxuICAgcHJpdmF0ZSBkcmF3SW1nKCkge1xyXG5cclxuICAgICAgaWYgKCF0aGlzLnNxdWludC5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgY29uc29sZS5lcnJvcignZHJhd0ltZygpIGFmdGVyIGNsb3NlJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5pbWcpIHtcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgY2FudmFzV2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aDtcclxuICAgICAgbGV0IGNhbnZhc0hlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcclxuICAgICAgbGV0IGNhbnZhc0FSID0gY2FudmFzV2lkdGggLyBjYW52YXNIZWlnaHQ7XHJcblxyXG4gICAgICBsZXQgaW1nV2lkdGggPSB0aGlzLmltZy53aWR0aDtcclxuICAgICAgbGV0IGltZ0hlaWdodCA9IHRoaXMuaW1nLmhlaWdodDtcclxuICAgICAgbGV0IGltZ0FSID0gaW1nV2lkdGggLyBpbWdIZWlnaHQ7XHJcblxyXG4gICAgICBsZXQgd2lkdGg6IG51bWJlcjtcclxuICAgICAgbGV0IGhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgICAgaWYgKGNhbnZhc0FSID4gaW1nQVIpIHtcclxuICAgICAgICAgaGVpZ2h0ID0gdGhpcy56b29tLnZhbHVlICogY2FudmFzSGVpZ2h0O1xyXG4gICAgICAgICB3aWR0aCA9IGhlaWdodCAqIGltZ0FSO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB3aWR0aCA9IHRoaXMuem9vbS52YWx1ZSAqIGNhbnZhc1dpZHRoO1xyXG4gICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIGltZ0FSO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKlxyXG4gICAgICBpZiAoY2FudmFzQVIgPiBpbWdBUikge1xyXG4gICAgICAgICBoZWlnaHQgPSB0aGlzLnpvb20udmFsdWUgKiBpbWdIZWlnaHQ7XHJcbiAgICAgICAgIHdpZHRoID0gaGVpZ2h0ICogaW1nQVI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHdpZHRoID0gdGhpcy56b29tLnZhbHVlICogaW1nV2lkdGg7XHJcbiAgICAgICAgIGhlaWdodCA9IHdpZHRoIC8gaW1nQVI7XHJcbiAgICAgIH1cclxuICAgICAgKi9cclxuXHJcbiAgICAgIGxldCB4ID0gKGNhbnZhc1dpZHRoIC0gd2lkdGgpIC8gMi4wICsgdGhpcy54T2Zmc2V0O1xyXG4gICAgICBsZXQgeSA9IChjYW52YXNIZWlnaHQgLSBoZWlnaHQpIC8gMi4wIC0gdGhpcy55T2Zmc2V0O1xyXG5cclxuICAgICAgbGV0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgY3R4LmltYWdlU21vb3RoaW5nUXVhbGl0eSA9ICdoaWdoJztcclxuXHJcbiAgICAgIGN0eC5maWx0ZXIgPVxyXG4gICAgICAgICAnYnJpZ2h0bmVzcygnICsgdGhpcy5icmlnaHRuZXNzLnZhbHVlICsgJyUpICcgK1xyXG4gICAgICAgICAnY29udHJhc3QoJyArIHRoaXMuY29udHJhc3QudmFsdWUgKyAnJSkgJyArXHJcbiAgICAgICAgICdzYXR1cmF0ZSgnICsgdGhpcy5zYXR1cmF0ZS52YWx1ZSArICclKSAnICtcclxuICAgICAgICAgJ2JsdXIoJyArIHRoaXMuYmx1ci52YWx1ZSArICdweCkgJztcclxuXHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgbGV0IG1zZzogc3RyaW5nO1xyXG5cclxuICAgICAgY3R4LmZvbnQgPSAnMTBweCBzYW5zLXNlcmlmJztcclxuICAgICAgY3R4LmZpbGxUZXh0KFNxdWludC51cmwsIDAsIDEwKTtcclxuXHJcbiAgICAgIGxldCBmb250U2l6ZSA9IGlzTW9iaWxlID8gMjAgOiAxMDtcclxuICAgICAgY3R4LmZvbnQgPSBmb250U2l6ZSArICdweCBzYW5zLXNlcmlmJztcclxuXHJcbiAgICAgIG1zZyA9IGltZ1dpZHRoICsgJ3gnICsgaW1nSGVpZ2h0O1xyXG4gICAgICBjdHguZmlsbFRleHQobXNnLCAwLCBjYW52YXNIZWlnaHQgLSAoMyAqIGZvbnRTaXplICsgNSkpO1xyXG5cclxuICAgICAgaWYgKHRoaXMudXBsb2FkZXIpIHtcclxuICAgICAgICAgbXNnID0gJ3VwbG9hZDogJyArIHRoaXMudXBsb2FkZXIuZnBzLnRvRml4ZWQoMSk7XHJcbiAgICAgICAgIGN0eC5maWxsVGV4dChtc2csIDAsIGNhbnZhc0hlaWdodCAtICgyICogZm9udFNpemUgKyA1KSk7XHJcblxyXG4gICAgICAgICBsZXQgYmFuZHdpZHRoID0gdGhpcy51cGxvYWRlci5iYW5kd2lkdGg7XHJcbiAgICAgICAgIGlmIChiYW5kd2lkdGggPCA1KSB7XHJcbiAgICAgICAgICAgIG1zZyA9ICdiYW5kd2lkdGg6ICcgKyB0aGlzLnVwbG9hZGVyLmJhbmR3aWR0aC50b0ZpeGVkKDIpICsgJyBNYnNwJztcclxuICAgICAgICAgfVxyXG4gICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbXNnID0gJ2JhbmR3aWR0aDogJyArIHRoaXMudXBsb2FkZXIuYmFuZHdpZHRoLnRvRml4ZWQoMSkgKyAnIE1ic3AnO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGN0eC5maWxsVGV4dChtc2csIDAsIGNhbnZhc0hlaWdodCAtIChmb250U2l6ZSArIDUpKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgbXNnID0gJ2Rvd25sb2FkOiAnICsgdGhpcy5kb3dubG9hZEZQUy5yYXRlLnRvRml4ZWQoMSk7XHJcbiAgICAgICAgIGN0eC5maWxsVGV4dChtc2csIDAsIGNhbnZhc0hlaWdodCAtIChmb250U2l6ZSArIDUpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbXNnID0gdG9TaXplU3RyKHRoaXMuaW1nU2l6ZSk7XHJcbiAgICAgIGN0eC5maWxsVGV4dChtc2csIDAsIGNhbnZhc0hlaWdodCAtIDUpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG9uU2NhbGUoc2NhbGU6IG51bWJlciwgY2hhbmdlOiBudW1iZXIpIHtcclxuXHJcbiAgICAgIC8vIFRPRE86IGNlbnRlciBzY2FsaW5nIGFib3V0IHlvdXIgdHdvIGZpbmdlcnNcclxuXHJcbiAgICAgIGxldCBmYWN0b3IgPSBjaGFuZ2U7XHJcbiAgICAgIGlmICh0aGlzLnpvb20udmFsdWUgPiAyKSB7XHJcbiAgICAgICAgIDEgKyAoY2hhbmdlIC0gMSkgLyAodGhpcy56b29tLnZhbHVlIC8gMik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy56b29tLnZhbHVlICo9IGZhY3RvcjtcclxuICAgICAgdGhpcy54T2Zmc2V0ICo9IGZhY3RvcjtcclxuICAgICAgdGhpcy55T2Zmc2V0ICo9IGZhY3RvcjtcclxuXHJcbiAgICAgIHRoaXMuZHJhd0ltZygpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG9uVHJhbnNsYXRlKGRlbHRhOiBWZWMyKSB7XHJcblxyXG4gICAgICAvL2xldCBmYWN0b3IgPSAxO1xyXG4gICAgICAvL2lmIChpc01vYmlsZSkge1xyXG4gICAgICAvLyAgIGZhY3RvciA9IDI7XHJcbiAgICAgIC8vfVxyXG5cclxuICAgICAgdGhpcy54T2Zmc2V0ICs9IGRlbHRhLng7XHJcbiAgICAgIHRoaXMueU9mZnNldCArPSBkZWx0YS55O1xyXG5cclxuICAgICAgdGhpcy5kcmF3SW1nKCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb25EcmFnKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpIHtcclxuICAgICAgLy8gVE9ETyBkZWx0YSBpcyBvcHBvc2l0ZSBvZiB0cmFuc2xhdGUgaW4gWSBkaXJlY3Rpb25cclxuICAgICAgdGhpcy54T2Zmc2V0ICs9IGRlbHRhLng7XHJcbiAgICAgIHRoaXMueU9mZnNldCAtPSBkZWx0YS55O1xyXG5cclxuICAgICAgdGhpcy5kcmF3SW1nKCk7XHJcbiAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMaXN0Qm94IH0gZnJvbSBcIi4uLy4uL0dVSS9MaXN0Qm94XCI7XHJcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tIFwiLi9WZXJzaW9uXCI7XHJcbmltcG9ydCB7IFNxdWludCwgSVNlc3Npb24gfSBmcm9tIFwiLi9TcXVpbnRcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFZpZXdTZXNzaW9uSGFuZGxlciA9IChjb25uZWN0aW9uSWQ6IHN0cmluZykgPT4gdm9pZDtcclxuZXhwb3J0IHR5cGUgU3RhcnRTZXNzaW9uSGFuZGxlciA9IChzZXNzaW9uTmFtZTogc3RyaW5nKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXJ0RGlhbG9nIHtcclxuICAgcHJpdmF0ZSB2aWV3TGlzdEJveDogTGlzdEJveDxzdHJpbmc+O1xyXG4gICBwcml2YXRlIGJhY2tncm91bmREaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICBwcml2YXRlIGJvZHlEaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICBwcml2YXRlIGNvbm5lY3RpbmdEaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICBwcml2YXRlIGNvbm5lY3RpbmdBbmltYXRpb25EaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICBwcml2YXRlIHNlc3Npb25OYW1lSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgIHByaXZhdGUgc3F1aW50OiBTcXVpbnQ7XHJcbiAgIHByaXZhdGUgb25TdGFydFZpZXc6IFZpZXdTZXNzaW9uSGFuZGxlcjtcclxuICAgcHJpdmF0ZSBvblN0YXJ0U2Vzc2lvbjogU3RhcnRTZXNzaW9uSGFuZGxlcjtcclxuXHJcbiAgIHB1YmxpYyBnZXQgZW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gKGdldENvbXB1dGVkU3R5bGUodGhpcy5ib2R5RGl2KS5wb2ludGVyRXZlbnRzID09PSAnbm9uZScpO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBzZXQgZW5hYmxlKGZsYWc6IGJvb2xlYW4pIHtcclxuICAgICAgLy8gVE9ETyBtb3ZlIHRoaXMgYWxsIHRvIGFuIFwiRW5hYmxlZFwiIHN0eWxlXHJcbiAgICAgIHRoaXMuYm9keURpdi5zdHlsZS5wb2ludGVyRXZlbnRzID0gZmxhZyA/ICdhdXRvJyA6ICdub25lJztcclxuICAgICAgdGhpcy5ib2R5RGl2LnN0eWxlLmZpbHRlciA9IGZsYWcgPyAnJyA6ICdncmF5c2NhbGUoMSkgY29udHJhc3QoMC40KSc7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgdmlzaWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIChnZXRDb21wdXRlZFN0eWxlKHRoaXMuYmFja2dyb3VuZERpdikuZGlzcGxheSA9PT0gJ2Jsb2NrJyk7XHJcbiAgIH1cclxuICAgcHVibGljIHNldCB2aXNpYmxlKGZsYWc6IGJvb2xlYW4pIHtcclxuICAgICAgaWYgKGZsYWcgPT09IHRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChmbGFnKSB7XHJcbiAgICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XHJcbiAgICAgICAgIHRoaXMuYmFja2dyb3VuZERpdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgdGhpcy5jb25uZWN0KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuYmFja2dyb3VuZERpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgICAgcGFyZW50OiBIVE1MRGl2RWxlbWVudCxcclxuICAgICAgc3F1aW50OiBTcXVpbnQsXHJcbiAgICAgIG9uVmlld1Nlc3Npb246IFZpZXdTZXNzaW9uSGFuZGxlcixcclxuICAgICAgb25TdGFydFNlc3Npb246IFN0YXJ0U2Vzc2lvbkhhbmRsZXIsXHJcbiAgICkge1xyXG4gICAgICB0aGlzLnNxdWludCA9IHNxdWludDtcclxuICAgICAgdGhpcy5zcXVpbnQub25TZXNzaW9uTGlzdCA9IChzZXNzaW9ucykgPT4gdGhpcy5vblNlc3Npb25MaXN0KHNlc3Npb25zKTtcclxuICAgICAgdGhpcy5vblN0YXJ0VmlldyA9IG9uVmlld1Nlc3Npb247XHJcbiAgICAgIHRoaXMub25TdGFydFNlc3Npb24gPSBvblN0YXJ0U2Vzc2lvbjtcclxuXHJcbiAgICAgIHRoaXMuYmFja2dyb3VuZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmJhY2tncm91bmREaXYuY2xhc3NOYW1lID0gJ0RpYWxvZ0JhY2tncm91bmQnO1xyXG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5iYWNrZ3JvdW5kRGl2KTtcclxuXHJcbiAgICAgIGxldCBkaWFsb2dEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgZGlhbG9nRGl2LmlkID0gJ0RpYWxvZ0Rpdic7XHJcbiAgICAgIHRoaXMuYmFja2dyb3VuZERpdi5hcHBlbmRDaGlsZChkaWFsb2dEaXYpO1xyXG5cclxuICAgICAgbGV0IGRpYWxvZ1RpdGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGRpYWxvZ1RpdGxlRGl2LmlkID0gJ0RpYWxvZ1RpdGxlRGl2JztcclxuICAgICAgZGlhbG9nRGl2LmFwcGVuZENoaWxkKGRpYWxvZ1RpdGxlRGl2KTtcclxuXHJcbiAgICAgIGxldCB0aXRsZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aXRsZURpdi5pZCA9ICdUaXRsZURpdic7XHJcbiAgICAgIHRpdGxlRGl2LmlubmVyVGV4dCA9ICdTcXVpbnQgVicgKyBWZXJzaW9uLkJ1aWxkO1xyXG4gICAgICBkaWFsb2dUaXRsZURpdi5hcHBlbmRDaGlsZCh0aXRsZURpdik7XHJcblxyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5jb25uZWN0aW5nRGl2LmlkID0gJ0Nvbm5lY3RpbmdUZXh0JztcclxuICAgICAgdGhpcy5jb25uZWN0aW5nRGl2LmlubmVyVGV4dCA9ICdjb25uZWN0aW5nLi4uJztcclxuICAgICAgZGlhbG9nVGl0bGVEaXYuYXBwZW5kQ2hpbGQodGhpcy5jb25uZWN0aW5nRGl2KTtcclxuXHJcbiAgICAgIHRoaXMuY29ubmVjdGluZ0FuaW1hdGlvbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdBbmltYXRpb25EaXYuaWQgPSAnQ29ubmVjdGluZ0FuaW1hdGlvbic7XHJcbiAgICAgIHRoaXMuY29ubmVjdGluZ0FuaW1hdGlvbkRpdi5jbGFzc05hbWUgPSAnbGRzLXJpbmcnO1xyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdBbmltYXRpb25EaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdBbmltYXRpb25EaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdBbmltYXRpb25EaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdBbmltYXRpb25EaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICBkaWFsb2dUaXRsZURpdi5hcHBlbmRDaGlsZCh0aGlzLmNvbm5lY3RpbmdBbmltYXRpb25EaXYpO1xyXG5cclxuICAgICAgdGhpcy5ib2R5RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRoaXMuYm9keURpdi5pZCA9ICdEaWFsb2dCb2R5RGl2JztcclxuICAgICAgZGlhbG9nRGl2LmFwcGVuZENoaWxkKHRoaXMuYm9keURpdik7XHJcblxyXG4gICAgICAvL1xyXG4gICAgICAvLyBWaWV3IGEgc2Vzc2lvbiBwYW5lbFxyXG4gICAgICAvL1xyXG4gICAgICBsZXQgdmlld1BhbmVsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZpZXdQYW5lbERpdi5pZCA9ICdWaWV3UGFuZWxEaXYnO1xyXG4gICAgICB0aGlzLmJvZHlEaXYuYXBwZW5kQ2hpbGQodmlld1BhbmVsRGl2KTtcclxuXHJcbiAgICAgIGxldCB2aWV3SGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZpZXdIZWFkZXIuaWQgPSAnVmlld0hlYWRlcic7XHJcbiAgICAgIHZpZXdIZWFkZXIuY2xhc3NOYW1lID0gJ0hlYWRlcic7XHJcbiAgICAgIHZpZXdIZWFkZXIuaW5uZXJUZXh0ID0gJ1ZpZXcgYSBjYW1lcmEuLi4nO1xyXG4gICAgICB2aWV3UGFuZWxEaXYuYXBwZW5kQ2hpbGQodmlld0hlYWRlcik7XHJcblxyXG4gICAgICB0aGlzLnZpZXdMaXN0Qm94ID0gbmV3IExpc3RCb3g8c3RyaW5nPihcclxuICAgICAgICAgdmlld1BhbmVsRGl2LCB7XHJcbiAgICAgICAgIGlkOiAnVmlld0xpc3RCb3gnXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXdMaXN0Qm94Lm9uU2VsZWN0ZWRDaGFuZ2VkID0gKCkgPT4ge1xyXG4gICAgICAgICBnb1ZpZXdCdXR0b24uZGlzYWJsZWQgPSAodGhpcy52aWV3TGlzdEJveC5zZWxlY3RlZCA9PT0gbnVsbCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBidXR0b25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgYnV0dG9uRGl2LmNsYXNzTmFtZSA9ICdCdXR0b25EaXYnO1xyXG4gICAgICB2aWV3UGFuZWxEaXYuYXBwZW5kQ2hpbGQoYnV0dG9uRGl2KTtcclxuXHJcbiAgICAgIGxldCBnb1ZpZXdCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgZ29WaWV3QnV0dG9uLmlkID0gJ1ZpZXdCdXR0b24nO1xyXG4gICAgICBnb1ZpZXdCdXR0b24uaW5uZXJUZXh0ID0gJ0dvJztcclxuICAgICAgZ29WaWV3QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgYnV0dG9uRGl2LmFwcGVuZENoaWxkKGdvVmlld0J1dHRvbik7XHJcblxyXG4gICAgICBnb1ZpZXdCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgIGxldCBjb25uZWN0aW9uSWQgPSB0aGlzLnZpZXdMaXN0Qm94LnNlbGVjdGVkO1xyXG4gICAgICAgICB0aGlzLm9uU3RhcnRWaWV3KGNvbm5lY3Rpb25JZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIE9yIHBhbmVsXHJcbiAgICAgIC8vXHJcbiAgICAgIGxldCBvclBhcmVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBvclBhcmVudERpdi5pZCA9ICdPclBhcmVudERpdic7XHJcbiAgICAgIHRoaXMuYm9keURpdi5hcHBlbmRDaGlsZChvclBhcmVudERpdik7XHJcblxyXG4gICAgICBsZXQgb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgb3JEaXYuaWQgPSAnT3JEaXYnO1xyXG4gICAgICBvckRpdi5pbm5lclRleHQgPSAnT1InO1xyXG4gICAgICBvclBhcmVudERpdi5hcHBlbmRDaGlsZChvckRpdik7XHJcblxyXG5cclxuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIEhvc3QgYSBzZXNzaW9uIHBhbmVsXHJcbiAgICAgIC8vXHJcbiAgICAgIGxldCBob3N0UGFuZWxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgaG9zdFBhbmVsRGl2LmlkID0gJ0hvc3RQYW5lbERpdic7XHJcbiAgICAgIHRoaXMuYm9keURpdi5hcHBlbmRDaGlsZChob3N0UGFuZWxEaXYpO1xyXG5cclxuICAgICAgbGV0IGhvc3RIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgaG9zdEhlYWRlci5pZCA9ICdIb3N0SGVhZGVyJztcclxuICAgICAgaG9zdEhlYWRlci5jbGFzc05hbWUgPSAnSGVhZGVyJztcclxuICAgICAgaG9zdEhlYWRlci5pbm5lclRleHQgPSAnSG9zdCBhIGNhbWVyYS4uLic7XHJcbiAgICAgIGhvc3RQYW5lbERpdi5hcHBlbmRDaGlsZChob3N0SGVhZGVyKTtcclxuXHJcbiAgICAgIGxldCBzZXNzaW9uTmFtZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBzZXNzaW9uTmFtZURpdi5pZCA9ICdTZXNzaW9uTmFtZURpdic7XHJcbiAgICAgIHNlc3Npb25OYW1lRGl2LmNsYXNzTGlzdC5hZGQoJ1N0cmV0Y2gnKTtcclxuICAgICAgaG9zdFBhbmVsRGl2LmFwcGVuZENoaWxkKHNlc3Npb25OYW1lRGl2KTtcclxuXHJcbiAgICAgIGxldCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gICAgICBuYW1lTGFiZWwuaW5uZXJUZXh0ID0gJ05hbWU6JztcclxuICAgICAgbmFtZUxhYmVsLmh0bWxGb3IgPSAnTmFtZUlucHV0VGV4dCc7XHJcbiAgICAgIHNlc3Npb25OYW1lRGl2LmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7XHJcblxyXG4gICAgICB0aGlzLnNlc3Npb25OYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICB0aGlzLnNlc3Npb25OYW1lSW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgdGhpcy5zZXNzaW9uTmFtZUlucHV0LmlkID0gJ05hbWVJbnB1dFRleHQnO1xyXG4gICAgICB0aGlzLnNlc3Npb25OYW1lSW5wdXQucGxhY2Vob2xkZXIgPSAnWW91ciBOYW1lJztcclxuICAgICAgc2Vzc2lvbk5hbWVEaXYuYXBwZW5kQ2hpbGQodGhpcy5zZXNzaW9uTmFtZUlucHV0KTtcclxuICAgICAgdGhpcy5zZXNzaW9uTmFtZUlucHV0Lm9uaW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgIGdvSG9zdEJ1dHRvbi5kaXNhYmxlZCA9ICh0aGlzLnNlc3Npb25OYW1lSW5wdXQudmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBidXR0b25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgYnV0dG9uRGl2LmNsYXNzTGlzdC5hZGQoJ0J1dHRvbkRpdicsICdOb1N0cmV0Y2gnKTtcclxuICAgICAgaG9zdFBhbmVsRGl2LmFwcGVuZENoaWxkKGJ1dHRvbkRpdik7XHJcblxyXG4gICAgICBsZXQgZ29Ib3N0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgIGdvSG9zdEJ1dHRvbi5pZCA9ICdIb3N0T2tCdXR0b24nO1xyXG4gICAgICBnb0hvc3RCdXR0b24uaW5uZXJUZXh0ID0gJ0dvJztcclxuICAgICAgZ29Ib3N0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgYnV0dG9uRGl2LmFwcGVuZENoaWxkKGdvSG9zdEJ1dHRvbik7XHJcblxyXG4gICAgICBnb0hvc3RCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHJcbiAgICAgICAgIHRoaXMub25TdGFydFNlc3Npb24odGhpcy5zZXNzaW9uTmFtZUlucHV0LnZhbHVlKTtcclxuICAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBjb25uZWN0KCkge1xyXG4gICAgICB0aGlzLmNvbm5lY3RpbmdEaXYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgIHRoaXMuY29ubmVjdGluZ0FuaW1hdGlvbkRpdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgdGhpcy52aWV3TGlzdEJveC5jbGVhcigpO1xyXG4gICAgICB0aGlzLnNlc3Npb25OYW1lSW5wdXQudmFsdWUgPSAnJztcclxuXHJcbiAgICAgIHRoaXMuc3F1aW50LmNvbm5lY3QoU3F1aW50LnVybClcclxuICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNxdWludC5vblNlc3Npb25MaXN0ID0gKHNlc3Npb25zOiBJU2Vzc2lvbltdKSA9PiB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25TZXNzaW9uTGlzdChzZXNzaW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW5nRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGluZ0FuaW1hdGlvbkRpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IHRydWU7XHJcbiAgICAgICAgIH0pXHJcbiAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGFsZXJ0KGVycik7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QoKTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG9uU2Vzc2lvbkxpc3Qoc2Vzc2lvbnM6IElTZXNzaW9uW10pIHtcclxuXHJcbiAgICAgIHRoaXMudmlld0xpc3RCb3guY2xlYXIoKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXNzaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICB0aGlzLnZpZXdMaXN0Qm94LmFkZEl0ZW0oc2Vzc2lvbnNbaV0ubmFtZSwgc2Vzc2lvbnNbaV0uY29ubmVjdGlvbklkKTtcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBTdG9wd2F0Y2ggfSBmcm9tIFwiLi4vLi4vVXRpbC9TdG9wd2F0Y2hcIjtcclxuaW1wb3J0IHsgQXZlcmFnZXIgfSBmcm9tIFwiLi4vLi4vVXRpbC9BdmVyYWdlclwiO1xyXG5cclxuY29uc3QgTUFYX0ZQUyA9IDEwO1xyXG5cclxuY2xhc3MgVXBsb2FkcyB7XHJcbiAgIHByaXZhdGUgX2J5dGVzID0gMDtcclxuICAgcHJpdmF0ZSBfbnVtVXBsb2FkcyA9IDA7XHJcbiAgIHByaXZhdGUgX2xhc3RVcGxvYWRCeXRlcyA9IDA7XHJcblxyXG4gICBwdWJsaWMgZ2V0IG51bVVwbG9hZHMoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX251bVVwbG9hZHM7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgYnl0ZXMoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2J5dGVzO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGxhc3RVcGxvYWRCeXRlcygpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbGFzdFVwbG9hZEJ5dGVzO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICAgIHRoaXMuX2J5dGVzID0gMDtcclxuICAgICAgdGhpcy5fbnVtVXBsb2FkcyA9IDA7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBvblVwbG9hZChieXRlczogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuX2J5dGVzICs9IGJ5dGVzO1xyXG4gICAgICB0aGlzLl9udW1VcGxvYWRzKys7XHJcbiAgICAgIHRoaXMuX2xhc3RVcGxvYWRCeXRlcyA9IGJ5dGVzO1xyXG4gICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIG1vbml0b3JzIHRoZSB1cGxvYWQgcmF0ZSBhbmQgcmVjb21tZW5kcyBhIGZyYW1lIHJhdGUgdG8gbWF0Y2guIFdlXHJcbiAqIGNhbiB0aGVuIHVzZSB0aGlzIHRvIHBhY2Ugb3VyIHVwbG9hZHMgdG8gbWF0Y2ggYXZhaWxhYmxlIGJhbmR3aWR0aC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRSYXRlVHJhY2tlciB7XHJcblxyXG4gICBwcml2YXRlIGJ1ZmZlckZ1bGwgPSBmYWxzZTtcclxuICAgcHJpdmF0ZSB1cGxvYWRUaW1lcjogU3RvcHdhdGNoO1xyXG4gICBwcml2YXRlIHVwbG9hZHMgPSBuZXcgVXBsb2FkcygpO1xyXG4gICBwcml2YXRlIGJhbmR3aWR0aEF2ZXJhZ2VyID0gbmV3IEF2ZXJhZ2VyKDIwKTtcclxuICAgcHJpdmF0ZSBib29zdEZwcyA9IGZhbHNlO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIFRoZSBudW1iZXIgb2YgbXMgdGhhdCBzaG91bGQgb2NjdXIgYmV0d2VlbiB1cGxvYWQgYXR0ZW1wdHNcclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgcmVjb21tZW5kZWRNc1BlckZyYW1lKCk6IG51bWJlciB7XHJcbiAgICAgIC8vIGlmIHdlIGhhdmVuJ3QgY29tcHV0ZWQgYSBiYW5kd2lkdGggeWV0LCBqdXN0IGdvIHdpdGggMTAgRlBTXHJcbiAgICAgIGlmICh0aGlzLmJhbmR3aWR0aEF2ZXJhZ2VyLm51bVNhbXBsZXMgPT09IDApIHtcclxuICAgICAgICAgcmV0dXJuIDEwMDAgLyBNQVhfRlBTO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBjb252ZXJ0IGJ5dGVzIHRvIGJpdHMgdG8gZ2V0IE1icHNcclxuICAgICAgbGV0IGxhc3RTaXplQml0cyA9IDggKiB0aGlzLnVwbG9hZHMubGFzdFVwbG9hZEJ5dGVzO1xyXG4gICAgICBsZXQgbWVnYUJpdHNQZXJNcyA9ICgxMDAwICogMTAwMCAqIHRoaXMuYmFuZHdpZHRoQXZlcmFnZXIuYXZlcmFnZSkgLyAxMDAwO1xyXG5cclxuICAgICAgbGV0IGNhbGNNcyA9IGxhc3RTaXplQml0cyAvIG1lZ2FCaXRzUGVyTXM7XHJcblxyXG4gICAgICBpZiAodGhpcy5ib29zdEZwcykge1xyXG4gICAgICAgICBjYWxjTXMgPSAwLjkgKiBjYWxjTXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHRoZSBhY3R1YWwgcmF0ZSwgb3IgYSBtYXggRlBTIG9mIDEwXHJcbiAgICAgIHJldHVybiBNYXRoLm1heCgxMDAwIC8gTUFYX0ZQUywgY2FsY01zKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCByZWNvbW1lbmRlZEZQUygpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gMTAwMCAvIHRoaXMucmVjb21tZW5kZWRNc1BlckZyYW1lO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogVXBsb2FkIGJhbmR3aWR0aCwgTWJwc1xyXG4gICAgKi9cclxuICAgcHVibGljIGdldCBiYW5kd2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgaWYgKHRoaXMuYmFuZHdpZHRoQXZlcmFnZXIubnVtU2FtcGxlcyA9PT0gMCkge1xyXG4gICAgICAgICByZXR1cm4gKCh0aGlzLnVwbG9hZHMubGFzdFVwbG9hZEJ5dGVzICogOCkgLyAoMTAwMCAqIDEwMDApKSAqIE1BWF9GUFM7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLmJhbmR3aWR0aEF2ZXJhZ2VyLmF2ZXJhZ2U7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENhbGwgdGhpcyB3aGVuIHRoZSBidWZmZXIgZ2V0cyBmdWxsXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgb25CdWZmZXJGdWxsKCkge1xyXG4gICAgICB0aGlzLmJ1ZmZlckZ1bGwgPSB0cnVlO1xyXG4gICAgICB0aGlzLmJvb3N0RnBzID0gZmFsc2U7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDYWxsIHRoaXMgd2hlbiB0aGUgYnVmZmVyIGVtcHRpZXMgYW5kIGlzIHJlYWR5IGFnYWluXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgb25SZWFkeSgpIHtcclxuXHJcbiAgICAgIC8vIGlmIHdlIGhpdCBhIHNpdHVhdGlvbiB3aGVyZSB0aGUgYnVmZmVyIGZpbGxlZCB1cCwgd2Uga25vdyB3ZSBoYXZlIGEgc2l0dWF0aW9uXHJcbiAgICAgIC8vIHdoZXJlIHdlIGNhbiBhY2N1cmF0ZWx5IG1lYXN1cmUgYmFuZHdpZHRoXHJcbiAgICAgIGlmICh0aGlzLmJ1ZmZlckZ1bGwpIHtcclxuICAgICAgICAgLy8gZmlyc3Qgc3VjY2Vzc2Z1bCBzZW5kIHNpbmNlIHRoZSBidWZmZXIgZmlsbGVkIHVwLiBXZSBjYW4gbm93IG1lYXN1cmUgYmFuZHdpZHRoXHJcbiAgICAgICAgIGxldCBiYW5kd2lkdGggPSA4ICogKHRoaXMudXBsb2Fkcy5ieXRlcyAvIHRoaXMudXBsb2FkVGltZXIuZWxhcHNlZFMpIC8gKDEwMDAgKiAxMDAwKTtcclxuICAgICAgICAgdGhpcy5iYW5kd2lkdGhBdmVyYWdlci5wdXNoKGJhbmR3aWR0aCk7XHJcblxyXG4gICAgICAgICAvLyByZXNldCB0cmFja2luZyBvZiB1cGxvYWRzXHJcbiAgICAgICAgIHRoaXMudXBsb2Fkcy5yZXNldCgpO1xyXG4gICAgICAgICB0aGlzLnVwbG9hZFRpbWVyID0gbnVsbDtcclxuICAgICAgICAgdGhpcy5idWZmZXJGdWxsID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgIC8vIGNvbmRpdGlvbnMgdGhhdCBtdXN0IGJlIG1ldCBiZWZvcmUgaW5jcmVhc2luZyByZXF1ZXN0ZWQgZnJhbWVyYXRlXHJcbiAgICAgICAgIHRoaXMudXBsb2Fkcy5udW1VcGxvYWRzID4gNSAmJlxyXG4gICAgICAgICB0aGlzLnVwbG9hZHMuYnl0ZXMgPiAzMDAgKiAxMDAwICYmXHJcbiAgICAgICAgIHRoaXMucmVjb21tZW5kZWRGUFMgPCBNQVhfRlBTXHJcbiAgICAgICkge1xyXG4gICAgICAgICAvLyBzaWduYWwgdGhhdCB3ZSB3YW50IGEgYmV0dGVyIHJhdGVcclxuICAgICAgICAgdGhpcy5ib29zdEZwcyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENhbGwgdGhpcyBlYWNoIHRpbWUgYW4gdXBsb2FkIGlzIHBlcmZvcm1lZFxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGFtb3VudCBUaGUgc2l6ZSBvZiB0aGUgdXBsb2FkIGluIGJ5dGVzXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgb25VcGxvYWQoYW1vdW50OiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5vblJlYWR5KCk7XHJcblxyXG4gICAgICB0aGlzLnVwbG9hZHMub25VcGxvYWQoYW1vdW50KTtcclxuXHJcbiAgICAgIGlmICghdGhpcy51cGxvYWRUaW1lcikge1xyXG4gICAgICAgICB0aGlzLnVwbG9hZFRpbWVyID0gbmV3IFN0b3B3YXRjaCgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxufSIsImltcG9ydCB7IEZQUyB9IGZyb20gXCIuLi8uLi9VdGlsL0ZQU1wiO1xyXG5pbXBvcnQgeyBkZWJ1ZywgU3F1aW50U3RyaW5ncyB9IGZyb20gXCIuL1NxdWludEFwcFwiO1xyXG5pbXBvcnQgeyBTcXVpbnQgfSBmcm9tIFwiLi9TcXVpbnRcIjtcclxuaW1wb3J0IHsgU3RvcHdhdGNoIH0gZnJvbSBcIi4uLy4uL1V0aWwvU3RvcHdhdGNoXCI7XHJcbmltcG9ydCB7IFVwbG9hZFJhdGVUcmFja2VyIH0gZnJvbSBcIi4vVXBsb2FkUmF0ZVRyYWNrZXJcIjtcclxuXHJcbmV4cG9ydCB0eXBlIERhdGFOZWVkZWRIYW5kbGVyID0gKCkgPT4gUHJvbWlzZTxCbG9iPjtcclxuXHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRlciB7XHJcbiAgIHByaXZhdGUgb25EYXRhTmVlZGVkOiBEYXRhTmVlZGVkSGFuZGxlcjtcclxuICAgcHJpdmF0ZSBmcHNUcmFja2VyID0gbmV3IEZQUygpO1xyXG5cclxuICAgcHJpdmF0ZSBydW5uaW5nID0gdHJ1ZTtcclxuICAgcHJpdmF0ZSBidXN5ID0gZmFsc2U7XHJcbiAgIHByaXZhdGUgc3F1aW50OiBTcXVpbnQ7XHJcbiAgIHByaXZhdGUgdGltZXIgPSBuZXcgU3RvcHdhdGNoKCk7XHJcbiAgIHByaXZhdGUgdXBsb2FkVHJhY2tlciA9IG5ldyBVcGxvYWRSYXRlVHJhY2tlcigpO1xyXG5cclxuICAgcHVibGljIGdldCBmcHMoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZnBzVHJhY2tlci5yYXRlO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGJhbmR3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy51cGxvYWRUcmFja2VyLmJhbmR3aWR0aDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHNxdWludDogU3F1aW50LCBvbkRhdGFOZWVkZWQ6IERhdGFOZWVkZWRIYW5kbGVyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyB1cGxvYWRlcicpO1xyXG4gICAgICB0aGlzLnNxdWludCA9IHNxdWludDtcclxuICAgICAgdGhpcy5vbkRhdGFOZWVkZWQgPSBvbkRhdGFOZWVkZWQ7XHJcblxyXG4gICAgICB0aGlzLnVwbG9hZCgpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3RvcCgpIHtcclxuICAgICAgaWYgKHRoaXMucnVubmluZykge1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnc3RvcHBpbmcgdXBsb2FkZXInKTtcclxuICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSB1cGxvYWQoZGVsYXkgPSAwKSB7XHJcblxyXG4gICAgICBpZiAoIXRoaXMucnVubmluZykge1xyXG4gICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuYnVzeSkge1xyXG4gICAgICAgICBjb25zb2xlLmVycm9yKCd1cGxvYWQoKSBjYWxsZWQgYmVmb3JlIHByZXZpb3VzIGNhbGwgcmV0dXJuZWQnKTtcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkZWxheSA+IDApIHtcclxuICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBsb2FkKDApO1xyXG4gICAgICAgICB9LCBkZWxheSk7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5zcXVpbnQuY29ubmVjdGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnRpbWVyLmVsYXBzZWRNcyA8IHRoaXMudXBsb2FkVHJhY2tlci5yZWNvbW1lbmRlZE1zUGVyRnJhbWUpIHtcclxuICAgICAgICAgdGhpcy51cGxvYWQodGhpcy51cGxvYWRUcmFja2VyLnJlY29tbWVuZGVkTXNQZXJGcmFtZSAtIHRoaXMudGltZXIuZWxhcHNlZE1zKTtcclxuICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLnRpbWVyLnJlc3RhcnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF0aGlzLnNxdWludC5idWZmZXJSZWFkeSkge1xyXG4gICAgICAgICB0aGlzLnVwbG9hZFRyYWNrZXIub25CdWZmZXJGdWxsKCk7XHJcbiAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHRoaXMudXBsb2FkKCkgfSk7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy51cGxvYWRUcmFja2VyLm9uUmVhZHkoKTtcclxuICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgIHRoaXMub25EYXRhTmVlZGVkKClcclxuICAgICAgICAgICAgLnRoZW4oKGJsb2I6IEJsb2IpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLnNxdWludC5jb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zcXVpbnQuc2VuZEltYWdlKGJsb2IpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZFRyYWNrZXIub25VcGxvYWQoYmxvYi5zaXplKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5mcHNUcmFja2VyLnRpY2soKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHRoaXMudXBsb2FkKCkgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICBpZiAoZXJyID09PSBTcXVpbnRTdHJpbmdzLkNBTUVSQV9OT1RfUkVBRFkpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gdGhpcyBoYXBwZW5zIHdoZW4gdGhlIGNhbWVyYSBpcyBiZWluZyBpbml0aWFsaXplZC4gSnVzdCB0cnlcclxuICAgICAgICAgICAgICAgICAgLy8gYWdhaW4gaW4gYSBzZWNvbmRcclxuICAgICAgICAgICAgICAgICAgdGhpcy5idXN5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGRlYnVnKCdDYW5ub3QgZ2VuZXJhdGUgaW1hZ2UgZnJvbSB2aWRlbzogJyArIGVycik7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIGV4Y2VwdGlvbiBpbiBVcGxvYWRlci5vbkRhdGFOZWVkZWQoKTogJyArIGVycik7XHJcbiAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBWZXJzaW9uIHtcclxuICAgcHVibGljIHN0YXRpYyBNYWpvciA9IDA7XHJcbiAgIHB1YmxpYyBzdGF0aWMgTWlub3IgPSAwO1xyXG4gICBwdWJsaWMgc3RhdGljIEJ1aWxkID0gNDc7XHJcbn0iLCJpbXBvcnQgeyBkZWJ1ZyB9IGZyb20gXCIuL1NxdWludEFwcFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVmlkZW9SZXNvbHV0aW9uIHtcclxuICAgbGFiZWw6IHN0cmluZyxcclxuICAgd2lkdGg/OiBudW1iZXIsXHJcbiAgIGhlaWdodD86IG51bWJlcixcclxuICAgZnJhbWVSYXRlPzogbnVtYmVyLFxyXG4gICBkZXZpY2VJZDogc3RyaW5nLFxyXG4gICBmYWNpbmdNb2RlPzogc3RyaW5nLFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmlkZW8ge1xyXG5cclxuICAgcHVibGljIHN0YXRpYyBnZXRDYW1lcmFzKG9uRm91bmQ6IChyZXNvbHV0aW9uOiBJVmlkZW9SZXNvbHV0aW9uKSA9PiB2b2lkKSB7XHJcbiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpXHJcbiAgICAgICAgIC50aGVuKChkZXZpY2VzKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzdHIgPSAnJztcclxuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgIGxldCBkZXZpY2UgPSBkZXZpY2VzW2ldO1xyXG4gICAgICAgICAgICAgICBpZiAoZGV2aWNlLmtpbmQgPT09ICd2aWRlb2lucHV0Jykge1xyXG4gICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICBzdHIgKz0gJ1wiJyArIGRldmljZS5kZXZpY2VJZCArICdcIjogJyArIGRldmljZS5sYWJlbCArICdcXG4nO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyID0gY291bnQgKyAnIGNhbWVyYXMgZm91bmQuXFxuJyArIHN0cjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VudW1lcmF0ZURldmljZXMoKVxcbicgKyBzdHIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNhbWVyYUNvdW50ID0gMTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgIGxldCBkZXZpY2UgPSBkZXZpY2VzW2ldO1xyXG4gICAgICAgICAgICAgICBpZiAoZGV2aWNlLmtpbmQgPT09ICd2aWRlb2lucHV0Jykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgbGV0IGFjdHVhbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdjYW1lcmEgJyArIGNhbWVyYUNvdW50KyssXHJcbiAgICAgICAgICAgICAgICAgICAgIGRldmljZUlkOiBkZXZpY2UuZGV2aWNlSWQsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIG9uRm91bmQoYWN0dWFsKVxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSlcclxuICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgZGVidWcoJ0Nhbm5vdCBlbnVtZXJhdGUgdmlkZW8gZGV2aWNlczogJyArIGVycik7XHJcbiAgICAgICAgIH0pO1xyXG4gICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgZ2xPYmplY3QgfSBmcm9tIFwiLi9nbE9iamVjdFwiO1xyXG5pbXBvcnQgeyBWZWMzLCBWZWMyIH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9WZWNcIjtcclxuaW1wb3J0IHsgSVBlcnNwZWN0aXZlUHJvdmlkZXIgfSBmcm9tIFwiLi9QZXJzcGVjdGl2ZUN0cmxcIjtcclxuaW1wb3J0IHsgSU5JVElBTF9FWUUgfSBmcm9tIFwiLi9SZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9NYXRcIjtcclxuaW1wb3J0IHsgdG9EZWcgfSBmcm9tIFwiLi4vLi4vVXRpbC9HbG9iYWxzXCI7XHJcbmltcG9ydCB7IGdsU3BhY2UgfSBmcm9tIFwiLi4vLi4vZ2wvZ2xTcGFjZVwiO1xyXG5cclxuLy8gV2hlbiB2aWV3aW5nIGFuIG9iamVjdCwgdmlldyB0aGlzIG11Y2ggbW9yZSB0aGFuIHRoZSBvYmplY3RcclxuY29uc3QgQlVGRkVSX0ZBQ1RPUiA9IDEuMTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNpemVQcm92aWRlciB7XHJcbiAgIHJlYWRvbmx5IG1heFdpZHRoOiBudW1iZXI7XHJcbiAgIHJlYWRvbmx5IG1heEhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT2JqU2l6ZVByb3ZpZGVyIGltcGxlbWVudHMgSVNpemVQcm92aWRlciB7XHJcbiAgIHByaXZhdGUgb2JqOiBnbE9iamVjdDtcclxuXHJcbiAgIHB1YmxpYyBnZXQgbWF4V2lkdGgoKSB7XHJcbiAgICAgIC8vbGV0IHhCb3ggPSB0aGlzLm9iai5nZXRCb3VuZGluZ1B0cygpO1xyXG4gICAgICBsZXQgeEJveCA9IHRoaXMub2JqLmdldEJvdW5kaW5nQm94KCk7XHJcbiAgICAgIHJldHVybiBCVUZGRVJfRkFDVE9SICogTWF0aC5zcXJ0KHhCb3gud2lkdGggKiB4Qm94LndpZHRoICsgeEJveC5kZXB0aCAqIHhCb3guZGVwdGgpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IG1heEhlaWdodCgpIHtcclxuICAgICAgbGV0IHhCb3ggPSB0aGlzLm9iai5nZXRCb3VuZGluZ0JveCgpO1xyXG4gICAgICByZXR1cm4gQlVGRkVSX0ZBQ1RPUiAqIE1hdGguc3FydCh4Qm94LmhlaWdodCAqIHhCb3guaGVpZ2h0ICsgeEJveC5kZXB0aCAqIHhCb3guZGVwdGgpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3Iob2JqOiBnbE9iamVjdCkge1xyXG4gICAgICB0aGlzLm9iaiA9IG9iajtcclxuICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRml4ZWRTaXplUHJvdmlkZXIgaW1wbGVtZW50cyBJU2l6ZVByb3ZpZGVyIHtcclxuICAgcHVibGljIHJlYWRvbmx5IG1heFdpZHRoOiBudW1iZXI7XHJcbiAgIHB1YmxpYyByZWFkb25seSBtYXhIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtYXhXaWR0aDogbnVtYmVyLCBtYXhIZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XHJcbiAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNhbWVyYVNldHRpbmdzIHtcclxuICAgc2l6ZVByb3ZpZGVyPzogSVNpemVQcm92aWRlcixcclxuICAgZXllPzogVmVjMyxcclxuICAgbG9va0F0PzogVmVjMyxcclxuICAgem9vbUZhY3Rvcj86IG51bWJlcixcclxuICAgdXNlT3J0aG9ncmFwaGljPzogYm9vbGVhbixcclxuICAgZm92PzogbnVtYmVyLFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FtZXJhIGltcGxlbWVudHMgSVBlcnNwZWN0aXZlUHJvdmlkZXIge1xyXG5cclxuICAgcHVibGljIGV5ZSA9IG5ldyBWZWMzKElOSVRJQUxfRVlFKTtcclxuICAgcHVibGljIGxvb2tBdCA9IFZlYzMub3JpZ2luO1xyXG4gICBwdWJsaWMgem9vbUZhY3RvciA9IDE7XHJcbiAgIHB1YmxpYyB1c2VPcnRob2dyYXBoaWMgPSBmYWxzZTtcclxuICAgcHVibGljIGZvdjogbnVtYmVyO1xyXG4gICBwdWJsaWMgc2l6ZVByb3ZpZGVyOiBJU2l6ZVByb3ZpZGVyO1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHNldHRpbmdzPzogSUNhbWVyYVNldHRpbmdzKSB7XHJcbiAgICAgIGlmIChzZXR0aW5ncykge1xyXG4gICAgICAgICB0aGlzLnNpemVQcm92aWRlciA9IHNldHRpbmdzLnNpemVQcm92aWRlciA/PyB0aGlzLnNpemVQcm92aWRlcjtcclxuICAgICAgICAgdGhpcy5leWUgPSBzZXR0aW5ncy5leWUgPz8gdGhpcy5leWU7XHJcbiAgICAgICAgIHRoaXMubG9va0F0ID0gc2V0dGluZ3MubG9va0F0ID8/IHRoaXMubG9va0F0O1xyXG4gICAgICAgICB0aGlzLnpvb21GYWN0b3IgPSBzZXR0aW5ncy56b29tRmFjdG9yID8/IHRoaXMuem9vbUZhY3RvcjtcclxuICAgICAgICAgdGhpcy51c2VPcnRob2dyYXBoaWMgPSBzZXR0aW5ncy51c2VPcnRob2dyYXBoaWMgPz8gdGhpcy51c2VPcnRob2dyYXBoaWM7XHJcbiAgICAgICAgIHRoaXMuZm92ID0gc2V0dGluZ3MuZm92ID8/IHRoaXMuZm92O1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXRQcm9qZWN0aW9uKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBNYXQ0IHtcclxuXHJcbiAgICAgIGxldCBwcm9qZWN0aW9uOiBNYXQ0O1xyXG4gICAgICBsZXQgc3BhY2UgPSB0aGlzLmdldFZpZXdTcGFjZShnbCk7XHJcblxyXG4gICAgICBpZiAodGhpcy51c2VPcnRob2dyYXBoaWMpIHtcclxuICAgICAgICAgcHJvamVjdGlvbiA9IE1hdDQubWFrZU9ydGhvKFxyXG4gICAgICAgICAgICBzcGFjZS5taW4ueCxcclxuICAgICAgICAgICAgc3BhY2UubWF4LngsXHJcbiAgICAgICAgICAgIHNwYWNlLm1pbi55LFxyXG4gICAgICAgICAgICBzcGFjZS5tYXgueSxcclxuICAgICAgICAgICAgc3BhY2UubWluLnosXHJcbiAgICAgICAgICAgIHNwYWNlLm1heC56XHJcbiAgICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIGxldCBleWUgPSB0aGlzLmV5ZTtcclxuICAgICAgICAgbGV0IHVwID0gbmV3IFZlYzMoWzAsIDEsIDBdKTtcclxuICAgICAgICAgbGV0IG1hdCA9IE1hdDQubWFrZUxvb2tBdChleWUsIHRoaXMubG9va0F0LCB1cCk7XHJcblxyXG4gICAgICAgICB0aGlzLmZvdiA9IDIgKiB0b0RlZyhNYXRoLmF0YW4yKHNwYWNlLmhlaWdodCAvIDIsIGV5ZS56KSk7XHJcbiAgICAgICAgIGxldCBuZWFyID0gMC4xO1xyXG4gICAgICAgICBsZXQgZmFyID0gMjA7XHJcbiAgICAgICAgIGxldCBhciA9IHNwYWNlLndpZHRoIC8gc3BhY2UuaGVpZ2h0O1xyXG4gICAgICAgICBwcm9qZWN0aW9uID0gTWF0NC5tYWtlUGVyc3BlY3RpdmUodGhpcy5mb3YsIGFyLCBuZWFyLCBmYXIpLm11bHRNKG1hdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwcm9qZWN0aW9uO1xyXG4gICB9XHJcblxyXG4gICAvL1xyXG4gICAvLyBUaGUgZnVuY3Rpb25zIGJlbG93IGNoYW5nZSBvdXIgdmlldyBvZiB0aGUgbW9kZWxcclxuICAgLy9cclxuICAgcHVibGljIHpvb20oem9vbTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuem9vbUZhY3RvciAqPSB6b29tO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgdHJhbnNsYXRlKGRlbHRhOiBWZWMyKSB7XHJcbiAgICAgIHRoaXMuZXllLnggLT0gZGVsdGEueCAvIHRoaXMuem9vbUZhY3RvcjtcclxuICAgICAgdGhpcy5leWUueSAtPSBkZWx0YS55IC8gdGhpcy56b29tRmFjdG9yO1xyXG4gICAgICB0aGlzLmxvb2tBdC54IC09IGRlbHRhLnggLyB0aGlzLnpvb21GYWN0b3I7XHJcbiAgICAgIHRoaXMubG9va0F0LnkgLT0gZGVsdGEueSAvIHRoaXMuem9vbUZhY3RvcjtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENsaXBzcGFjZSBpcyBkZWZpbmVkIGFzIGEgcmFuZ2Ugb2YgWy0xLDFdIGluIHRoZSBzbWFsbGVyIG9mIHRoZSB3aWR0aCBhbmQgaGVpZ2h0LlxyXG4gICAgKiBUaGUgb3RoZXIgZGltZW5zaW9ucyBpcyBzY2FsZWQgdG8gbWF0Y2ggdGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgY2FudmFzXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0Q2xpcFNwYWNlKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBnbFNwYWNlIHtcclxuXHJcbiAgICAgIGxldCBhciA9IGdsLmNhbnZhcy53aWR0aCAvIGdsLmNhbnZhcy5oZWlnaHQ7XHJcblxyXG4gICAgICBpZiAoYXIgPiAxKSB7XHJcbiAgICAgICAgIHJldHVybiBuZXcgZ2xTcGFjZShuZXcgVmVjMyhbLWFyLCAtMSwgMTAwXSksIG5ldyBWZWMzKFthciwgMSwgLTEwMF0pKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIG5ldyBnbFNwYWNlKG5ldyBWZWMzKFstMSwgLSgxIC8gYXIpLCAxMDBdKSwgbmV3IFZlYzMoWzEsICgxIC8gYXIpLCAtMTAwXSkpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBWaWV3IHNwYWNlIGlzIHRoZSB3b3JsZCBjb29yZGluYXRlIHNwYWNlIG9mIHdoYXQgY2FuIGJlIGN1cnJlbnRseSB2aWV3ZWQuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0Vmlld1NwYWNlKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBnbFNwYWNlIHtcclxuICAgICAgbGV0IHdpbkFSID0gZ2wuY2FudmFzLndpZHRoIC8gZ2wuY2FudmFzLmhlaWdodDtcclxuXHJcbiAgICAgIGxldCBvYmpNYXhXaWR0aCA9IHRoaXMuc2l6ZVByb3ZpZGVyLm1heFdpZHRoO1xyXG4gICAgICBsZXQgb2JqTWF4SGVpZ2h0ID0gdGhpcy5zaXplUHJvdmlkZXIubWF4SGVpZ2h0O1xyXG4gICAgICBsZXQgb2JqQVIgPSBvYmpNYXhXaWR0aCAvIG9iak1heEhlaWdodDtcclxuXHJcbiAgICAgIGxldCBkZXNpcmVkV2lkdGg7XHJcbiAgICAgIGxldCBkZXNpcmVkSGVpZ2h0O1xyXG4gICAgICBpZiAob2JqQVIgPCB3aW5BUikge1xyXG4gICAgICAgICAvLyBtYWtlIHRoZSBvYmplY3QgaGVpZ2h0IGZpdFxyXG4gICAgICAgICBkZXNpcmVkSGVpZ2h0ID0gb2JqTWF4SGVpZ2h0O1xyXG4gICAgICAgICBkZXNpcmVkV2lkdGggPSBvYmpNYXhIZWlnaHQgKiB3aW5BUjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgLy8gbWFrZSB0aGUgb2JqZWN0IHdpZHRoIGZpdFxyXG4gICAgICAgICBkZXNpcmVkSGVpZ2h0ID0gb2JqTWF4V2lkdGggLyB3aW5BUjtcclxuICAgICAgICAgZGVzaXJlZFdpZHRoID0gb2JqTWF4V2lkdGg7XHJcbiAgICAgIH1cclxuICAgICAgZGVzaXJlZEhlaWdodCAvPSB0aGlzLnpvb21GYWN0b3I7XHJcbiAgICAgIGRlc2lyZWRXaWR0aCAvPSB0aGlzLnpvb21GYWN0b3I7XHJcblxyXG4gICAgICBsZXQgY2xpcFNwYWNlID0gdGhpcy5nZXRDbGlwU3BhY2UoZ2wpO1xyXG4gICAgICBsZXQgbWluID0gbmV3IFZlYzMoW1xyXG4gICAgICAgICAtZGVzaXJlZFdpZHRoIC8gMiAtIHRoaXMubG9va0F0LngsXHJcbiAgICAgICAgIC1kZXNpcmVkSGVpZ2h0IC8gMiAtIHRoaXMubG9va0F0LnksXHJcbiAgICAgICAgIGNsaXBTcGFjZS5uZWFyICsgdGhpcy5sb29rQXQueixcclxuICAgICAgXSk7XHJcbiAgICAgIGxldCBtYXggPSBuZXcgVmVjMyhbXHJcbiAgICAgICAgIGRlc2lyZWRXaWR0aCAvIDIgLSB0aGlzLmxvb2tBdC54LFxyXG4gICAgICAgICBkZXNpcmVkSGVpZ2h0IC8gMiAtIHRoaXMubG9va0F0LnksXHJcbiAgICAgICAgIGNsaXBTcGFjZS5mYXIgKyB0aGlzLmxvb2tBdC56LFxyXG4gICAgICBdKVxyXG4gICAgICByZXR1cm4gbmV3IGdsU3BhY2UobWluLCBtYXgpO1xyXG4gICB9XHJcbn1cclxuIiwiLy8gc3BlY2lmeSBsb2FkZXIgYW5kIG9wdGlvbnMgaGVyZS4gVGhpcyB2YWx1ZSBtdXN0IG1hdGNoIHRoZVxyXG4vLyBjb250ZW50cyBvZiB3b3JrZXIuZC50c1xyXG5pbXBvcnQgTG9hZGVyV29ya2VyIGZyb20gJ3dvcmtlci1sb2FkZXI/bmFtZT1Mb2FkZXJXb3JrZXIud29ya2VyLmpzIS4vTG9hZGVyV29ya2VyJztcclxuaW1wb3J0IHsgU3RhdHVzRnVuY3Rpb24sIHRvUmFkIH0gZnJvbSAnLi4vLi4vVXRpbC9HbG9iYWxzJztcclxuaW1wb3J0IHsgVHJpYW5nbGVPYmogfSBmcm9tICcuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmonO1xyXG5pbXBvcnQgeyBnbE9iamVjdCB9IGZyb20gJy4vZ2xPYmplY3QnO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciBkb2luZyB0aGUgd29yayBvZiBsb2FkaW5nIGEgZmlsZSBpbnRvIGEgZ2xPYmplY3RcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb2RlbExvYWRlciB7XHJcblxyXG4gICBwcml2YXRlIF9sb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAvKipcclxuICAgICogUmV0dXJucyB0cnVlIGlmIGEgZmlsZSBpcyBjdXJyZW50bHkgYmVpbmcgbG9hZGVkXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IGxvYWRpbmcoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkaW5nO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogVGhlIFdlYldvcmtlciB0aGF0IGRvZXMgdGhlIGRvd25sb2FkIGFuZCBwcm9jZXNzaW5nXHJcbiAgICAqL1xyXG4gICBwcml2YXRlIHdvcmtlcjogTG9hZGVyV29ya2VyO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIExvYWRzIGEgZmlsZVxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGZpbGUgVGhlIGZpbGUgdXJsIHRvIGxvYWRcclxuICAgICogQHBhcmFtIHVwZGF0ZVN0YXR1cyBDYWxsYmFjayB0aGF0IGlzIG5vdGlmaWVkIG9mIHByb2dyZXNzXHJcbiAgICAqIEByZXR1cm5zIFRyaWFuZ2xlT2JqIHByb21pc2VcclxuICAgICovXHJcbiAgIHB1YmxpYyBsb2FkTW9kZWxGaWxlKGZpbGU6IHN0cmluZywgdXBkYXRlU3RhdHVzOiBTdGF0dXNGdW5jdGlvbik6IFByb21pc2U8VHJpYW5nbGVPYmo+IHtcclxuXHJcbiAgICAgIHRoaXMuX2xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFRyaWFuZ2xlT2JqPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgICAvLyBpZiBhIHByZXZpb3VzIHdvcmtlciBleGlzdHMsIGNsb3NlIGl0XHJcbiAgICAgICAgIGlmICh0aGlzLndvcmtlcikge1xyXG4gICAgICAgICAgICB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcclxuICAgICAgICAgICAgdGhpcy53b3JrZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIHRoaXMud29ya2VyID0gbmV3IExvYWRlcldvcmtlcigpO1xyXG4gICAgICAgICBsZXQgdFN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgdGhpcy53b3JrZXIub25tZXNzYWdlID0gKHsgZGF0YSB9OiB7IGRhdGE6IGFueSB9KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgIC8vIGF2b2lkIGZsYXNoaW5nIG1lc3NhZ2VzIGZvciB0aGluZ3MgdGhhdCBoYXBwZW4gdmVyeSBxdWlja2x5LlxyXG4gICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRTdGFydCA+IDUwMCkge1xyXG4gICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoZGF0YSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgdGhpcy5fbG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgbGV0IHRPYmogPSBUcmlhbmdsZU9iai5mcm9tRGF0YShkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cygnJyk7XHJcblxyXG4gICAgICAgICAgICAgICB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcclxuICAgICAgICAgICAgICAgdGhpcy53b3JrZXIgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICAgICByZXNvbHZlKHRPYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH07XHJcblxyXG4gICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZShmaWxlKTtcclxuICAgICAgfSk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBvcmllbnQobW9kZWw6IGdsT2JqZWN0KSB7XHJcblxyXG4gICAgICAvLyBvcmllbnQgZWFjaCBmaWxlIHNvIHRoYXQgaXQgaXMgZmFjaW5nIGZvcndhcmRcclxuICAgICAgbGV0IG5hbWUgPSBtb2RlbC5uYW1lLnNwbGl0KCcuJylbMF0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgc3dpdGNoIChuYW1lKSB7XHJcbiAgICAgICAgIGNhc2UgJ3dvbGYnOlxyXG4gICAgICAgICAgICBtb2RlbC5ub3JtYWxpemUucm90WSh0b1JhZCgtMTQwKSk7XHJcbiAgICAgICAgICAgIG1vZGVsLm5vcm1hbGl6ZS5yb3RYKHRvUmFkKDUpKTtcclxuICAgICAgICAgICAgbW9kZWwubm9ybWFsaXplLnJvdFkodG9SYWQoMTgwKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgY2FzZSAnc2hlZXBoZWFkJzpcclxuICAgICAgICAgICAgbW9kZWwubm9ybWFsaXplLnJvdFkodG9SYWQoMjApKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBNZW51YmFyIH0gZnJvbSBcIi4uLy4uL0dVSS9NZW51XCI7XHJcblxyXG50eXBlIExvYWRNb2RlbEZ1bmN0aW9uID0gKGZpbGU6IHN0cmluZykgPT4gdm9pZDtcclxuXHJcbmludGVyZmFjZSBpU3ViTWVudSB7XHJcbiAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgIGlkOiBzdHJpbmcsXHJcbiAgIG1lbnVJdGVtczogKGlTdWJNZW51IHwgSU1lbnVJdGVtU2V0dXApW11cclxufVxyXG5pbnRlcmZhY2UgSU1lbnVJdGVtU2V0dXAge1xyXG4gICBsYWJlbDogc3RyaW5nLFxyXG4gICBmaWxlOiBzdHJpbmcsXHJcbn1cclxuXHJcbmxldCBtZW51SXRlbXM6IChpU3ViTWVudSB8IElNZW51SXRlbVNldHVwKVtdID0gW1xyXG4gICB7XHJcbiAgICAgIGxhYmVsOiAnT2JqZWN0cycsIGlkOiAnT2JqZWN0c1N1Yk1lbnUnLCBtZW51SXRlbXM6IFtcclxuICAgICAgICAgeyBsYWJlbDogJ1NwaGVyZScsIGZpbGU6ICdTcGhlcmUnIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdGb290YmFsbCcsIGZpbGU6ICdGb290YmFsbC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUGlsbCcsIGZpbGU6ICdQaWxsLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdQaWxsIEJvdHRsZScsIGZpbGU6ICdQaWxsQm90dGxlLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdTb2RhIENhbicsIGZpbGU6ICdTb2RhQ2FuLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdTb2NjZXIgQmFsbCcsIGZpbGU6ICdTb2NjZXJCYWxsLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdTcG9vbicsIGZpbGU6ICdTcG9vbi5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnVGVhcG90JywgZmlsZTogJ1RlYXBvdC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnVG9ydXMgKERvbnV0KScsIGZpbGU6ICdUb3J1cy5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnVG9ydXMgS25vdCcsIGZpbGU6ICdUb3J1c0tub3QuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1Zhc2UnLCBmaWxlOiAnVmFzZS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnVml0YW1pbicsIGZpbGU6ICdWaXRhbWluLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdXaW5lIEJvdHRsZScsIGZpbGU6ICdXaW5lQm90dGxlLmJsb2InIH0sXHJcbiAgICAgIF1cclxuICAgfSxcclxuICAge1xyXG4gICAgICBsYWJlbDogJ1NjdWxwdHVyZXMnLCBpZDogJ1NjdWxwdHVyZXNTdWJNZW51JywgbWVudUl0ZW1zOiBbXHJcbiAgICAgICAgIHsgbGFiZWw6ICdCZWx2ZWRlcmUgVG9yc28nLCBmaWxlOiAnQmVsdmVkZXJlVG9yc28uYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ0RhdmlkJywgZmlsZTogJ0RhdmlkLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdIZWFkIG9mIERhdmlkJywgZmlsZTogJ0hlYWRPZkRhdmlkLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdMYWNvb24gYW5kIEhpcyBTb25zJywgZmlsZTogJ0xhb2Nvb25BbmRIaXNTb25zLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdOZWZlcnRpdGknLCBmaWxlOiAnTmVmZXJ0aXRpLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdUaGlua2VyJywgZmlsZTogJ1RoaW5rZXIuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1ZlbnVzIGRlIE1pbG8nLCBmaWxlOiAnVmVudXNEZU1pbG8uYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1ZlbnVzIG9mIFdpbGxlbmRvcmYnLCBmaWxlOiAnVmVudXNPZldpbGxlbmRvcmYuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1dpbmdlZCBWaWN0b3J5IG9mIFNhbW90aHJhY2UnLCBmaWxlOiAnV2luZ2VkVmljdG9yeS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnV2luZ2VkIFZpY3Rvcnkgb2YgU2Ftb3RocmFjZSB3L0Jhc2UnLCBmaWxlOiAnV2luZ2VkVmljdG9yeVdpdGhCYXNlLmJsb2InIH0sXHJcbiAgICAgIF1cclxuICAgfSxcclxuICAge1xyXG4gICAgICBsYWJlbDogJ0FuYXRvbXknLCBpZDogJ0FuYXRvbXlTdWJNZW51JywgbWVudUl0ZW1zOiBbXHJcbiAgICAgICAgIHsgbGFiZWw6ICdTa3VsbCAxJywgZmlsZTogJ1NrdWxsMS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnU2t1bGwgMicsIGZpbGU6ICdTa3VsbDIuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1NrdWxsIDMnLCBmaWxlOiAnU2t1bGwzLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdTa3VsbCA0JywgZmlsZTogJ1NrdWxsNC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUGVsdmlzJywgZmlsZTogJ1BlbHZpcy5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnQ2xhdmljbGUnLCBmaWxlOiAnQ2xhdmljbGUuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1NjYXB1bGEnLCBmaWxlOiAnU2NhcHVsYS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnSHVtZXJ1cycsIGZpbGU6ICdIdW1lcnVzLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdIZWFkIEVjb3JjaGUnLCBmaWxlOiAnSGVhZEVjb3JjaGUuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ0hlYWQgRWNvcmNoZSAyJywgZmlsZTogJ0hlYWRFY29yY2hlMi5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnSGVhZCBFY29yY2hlIDMnLCBmaWxlOiAnSGVhZEVjb3JjaGUzLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdIZWFkIEVjb3JjaGUgNCcsIGZpbGU6ICdIZWFkRWNvcmNoZTQuYmxvYicgfSxcclxuICAgICAgXVxyXG4gICB9LFxyXG4gICB7XHJcbiAgICAgIGxhYmVsOiAnUG9zZXMnLCBpZDogJ1Bvc2VzU3ViTWVudScsIG1lbnVJdGVtczogW1xyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxJywgZmlsZTogJ1Bvc2VfMDEuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1Bvc2UgMicsIGZpbGU6ICdQb3NlXzAyLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdQb3NlIDMnLCBmaWxlOiAnUG9zZV8wMy5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSA0JywgZmlsZTogJ1Bvc2VfMDQuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1Bvc2UgNScsIGZpbGU6ICdQb3NlXzA1LmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdQb3NlIDYnLCBmaWxlOiAnUG9zZV8wNi5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSA3JywgZmlsZTogJ1Bvc2VfMDcuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ1Bvc2UgOCcsIGZpbGU6ICdQb3NlXzA4LmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdQb3NlIDknLCBmaWxlOiAnUG9zZV8wOS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxMCcsIGZpbGU6ICdQb3NlXzAxMC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxMScsIGZpbGU6ICdQb3NlXzAxMS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxMicsIGZpbGU6ICdQb3NlXzAxMi5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxMycsIGZpbGU6ICdQb3NlXzAxMy5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxNCcsIGZpbGU6ICdQb3NlXzAxNC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxNScsIGZpbGU6ICdQb3NlXzAxNS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnUG9zZSAxNicsIGZpbGU6ICdQb3NlXzAxNi5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnRmVtYWxlIFBvc2UnLCBmaWxlOiAnUG9zZTEuYmxvYicgfSxcclxuICAgICAgXVxyXG4gICB9LFxyXG4gICB7XHJcbiAgICAgIGxhYmVsOiAnSGVhZHMnLCBpZDogJ0hlYWRzU3ViTWVudScsIG1lbnVJdGVtczogW1xyXG4gICAgICAgICB7IGxhYmVsOiAnSGVhZCAxJywgZmlsZTogJ0hlYWQxLmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdIZWFkIDInLCBmaWxlOiAnSGVhZDIuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ0hlYWQgMycsIGZpbGU6ICdIZWFkMy5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnSGVhZCA0JywgZmlsZTogJ0hlYWQ0LmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdIZWFkIDUnLCBmaWxlOiAnSGVhZDUuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ0hlYWQgNicsIGZpbGU6ICdIZWFkNi5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnSGVhZCA3JywgZmlsZTogJ0hlYWQ3LmJsb2InIH0sXHJcbiAgICAgICAgIHsgbGFiZWw6ICdIZWFkIDgnLCBmaWxlOiAnSGVhZDguYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ0hlYWQgOScsIGZpbGU6ICdIZWFkOS5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnSGVhZCAxMCcsIGZpbGU6ICdIZWFkMTAuYmxvYicgfSxcclxuICAgICAgICAgeyBsYWJlbDogJ0hlYWQgMTEnLCBmaWxlOiAnSGVhZC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnRmVtYWxlIEhlYWQnLCBmaWxlOiAnRmVtYWxlSGVhZC5ibG9iJyB9LFxyXG4gICAgICAgICB7IGxhYmVsOiAnQXJub2xkJywgZmlsZTogJ0Fybm9sZC5ibG9iJyB9LFxyXG4gICAgICBdXHJcbiAgIH0sXHJcbiAgIHtcclxuICAgICAgbGFiZWw6ICdFeHByZXNzaW9ucycsIGlkOiAnRXhwcmVzc2lvbnNTdWJNZW51JywgbWVudUl0ZW1zOiBbXHJcbiAgICAgICAgIHtcclxuICAgICAgICAgICAgbGFiZWw6ICdOZXV0cmFsJywgaWQ6ICdOZXV0cmFsU3ViTWVudScsIG1lbnVJdGVtczogW1xyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnTmV1dHJhbCcsIGZpbGU6ICdNYWxlXzAyXzAxX05ldXRyYWwuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ05ldXRyYWwsIEV5ZXMgQ2xvc2VkJywgZmlsZTogJ01hbGVfMDJfMDJfTmV1dHJhbF9FeWVzX0Nsb3NlZC5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnTmV1dHJhbCwgTGlwcyBQYXJ0ZWQnLCBmaWxlOiAnTWFsZV8wMl8wMzhfTmV1dHJhbF9MaXBzX1BhcnRlZC5ibG9iJyB9LFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgIH0sXHJcbiAgICAgICAgIHtcclxuICAgICAgICAgICAgbGFiZWw6ICdFeWVzJywgaWQ6ICdFeWVzU3ViTWVudScsIG1lbnVJdGVtczogW1xyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnTG9vayBVcCcsIGZpbGU6ICdNYWxlXzAyXzA1X0xvb2tfVXAuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ0xvb2sgRG93bicsIGZpbGU6ICdNYWxlXzAyXzA2X0xvb2tfRG93bi5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnTG9vayBMZWZ0JywgZmlsZTogJ01hbGVfMDJfMDdfTG9va19MZWZ0LmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdMb29rIFJpZ2h0JywgZmlsZTogJ01hbGVfMDJfMDhfTG9va19SaWdodC5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnQnJvd3MgVXAnLCBmaWxlOiAnTWFsZV8wMl8wMTZfQnJvd3NfVXAuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ0Jyb3dzIERvd24nLCBmaWxlOiAnTWFsZV8wMl8wMTdfQnJvd3NfRG93bi5ibG9iJyB9LFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgIH0sXHJcbiAgICAgICAgIHtcclxuICAgICAgICAgICAgbGFiZWw6ICdKYXcnLCBpZDogJ0phd1N1Yk1lbnUnLCBtZW51SXRlbXM6IFtcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1dpZGUgT3BlbicsIGZpbGU6ICdNYWxlXzAyXzA5X0phd19XaWRlX09wZW4uYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1NpZGUgUmlnaHQnLCBmaWxlOiAnTWFsZV8wMl8wMThfSmF3X1NpZGVfUmlnaHQuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1NpZGUgTGVmdCcsIGZpbGU6ICdNYWxlXzAyXzAxOV9KYXdfU2lkZV9MZWZ0LmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdUaHJ1c3QnLCBmaWxlOiAnTWFsZV8wMl8wMjBfSmF3X1RocnVzdC5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnQ2xlbmNoJywgZmlsZTogJ01hbGVfMDJfMDIxX0phd19DbGVuY2guYmxvYicgfSxcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICB9LFxyXG4gICAgICAgICB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnQ2hlZWtzJywgaWQ6ICdDaGVla3NTdWJNZW51JywgbWVudUl0ZW1zOiBbXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdQdWZmJywgZmlsZTogJ01hbGVfMDJfMDIyX0NoZWVrX1B1ZmYuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1N1Y2snLCBmaWxlOiAnTWFsZV8wMl8wMjNfQ2hlZWtfU3Vjay5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnRGltcGxlJywgZmlsZTogJ01hbGVfMDJfMDI3X0RpbXBsZV9DaGVla3MuYmxvYicgfSxcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICB9LFxyXG4gICAgICAgICB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnTGlwcycsIGlkOiAnTGlwc1N1Yk1lbnUnLCBtZW51SXRlbXM6IFtcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1RpZ2h0ZW4nLCBmaWxlOiAnTWFsZV8wMl8wMTBfVGlnaHRlbiBMaXBzLmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdQdWNrZXInLCBmaWxlOiAnTWFsZV8wMl8wMTJfUHVja2VyLmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdGbGFyZScsIGZpbGU6ICdNYWxlXzAyXzAyNl9GbGFyZV9MaXBzLmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdTb3VuZHM6IFwiQ0hcIicsIGZpbGU6ICdNYWxlXzAyXzAyNF9QaG9uZW1lX0NILmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdTb3VuZHM6IFwiRlZcIicsIGZpbGU6ICdNYWxlXzAyXzAyNV9QaG9uZW1lX0ZWLmJsb2InIH0sXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgfSxcclxuICAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbDogJ0Vtb3Rpb25zJywgaWQ6ICdFbW90aW9uc1N1Yk1lbnUnLCBtZW51SXRlbXM6IFtcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1NtaWxlLCBNb3V0aCBDbG9zZWQnLCBmaWxlOiAnTWFsZV8wMl8wM19TbWlsZV9Nb3V0aF9DbG9zZWQuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1NtaWxlLCBNb3V0aCBPcGVuJywgZmlsZTogJ01hbGVfMDJfMDRfU21pbGVfTW91dGhfT3Blbi5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnU25hcmwnLCBmaWxlOiAnTWFsZV8wMl8wMTNfU25hcmwuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ0Zyb3duJywgZmlsZTogJ01hbGVfMDJfMDE0X0Zyb3duLmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdIYXBweScsIGZpbGU6ICdNYWxlXzAyXzAyOF9IYXBweS5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnU3VycHJpc2UnLCBmaWxlOiAnTWFsZV8wMl8wMjlfU3VycHJpc2UuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ1NhZCcsIGZpbGU6ICdNYWxlXzAyXzAzMF9TYWQuYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ0FuZ3J5JywgZmlsZTogJ01hbGVfMDJfMDMxX0FuZ3J5LmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdQYWluJywgZmlsZTogJ01hbGVfMDJfMDMyX1BhaW4uYmxvYicgfSxcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ0ZlYXInLCBmaWxlOiAnTWFsZV8wMl8wMzNfRmVhci5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnRGlzZ3VzdCcsIGZpbGU6ICdNYWxlXzAyXzAzNF9EaXNndXN0LmJsb2InIH0sXHJcbiAgICAgICAgICAgICAgIHsgbGFiZWw6ICdTaG9jaycsIGZpbGU6ICdNYWxlXzAyXzAzNV9TaG9jay5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnUmFnZScsIGZpbGU6ICdNYWxlXzAyXzAzNl9SYWdlLmJsb2InIH0sXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgfSxcclxuICAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbDogJ090aGVyJywgaWQ6ICdPdGhlclN1Yk1lbnUnLCBtZW51SXRlbXM6IFtcclxuICAgICAgICAgICAgICAgeyBsYWJlbDogJ0ZhY2UgQ29tcHJlc3Npb24nLCBmaWxlOiAnTWFsZV8wMl8wMTFfRmFjZV9Db21wcmVzc2lvbi5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnTmVjayBUaWdodGVuJywgZmlsZTogJ01hbGVfMDJfMDE1X05lY2tfVGlnaHRlbi5ibG9iJyB9LFxyXG4gICAgICAgICAgICAgICB7IGxhYmVsOiAnVG9uZ3VlJywgZmlsZTogJ01hbGVfMDJfMDM3X1Rvbmd1ZS5ibG9iJyB9LFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgIH0sXHJcbiAgICAgIF1cclxuICAgfSxcclxuXHJcbl07XHJcblxyXG5mdW5jdGlvbiBhZGRJdGVtcyhtZW51OiBNZW51YmFyLCBpdGVtczogKElNZW51SXRlbVNldHVwIHwgaVN1Yk1lbnUpW10sIGxvYWRNb2RlbDogTG9hZE1vZGVsRnVuY3Rpb24pIHtcclxuICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBpZiAoJ21lbnVJdGVtcycgaW4gaXRlbSkge1xyXG4gICAgICAgICBsZXQgc3ViTWVudSA9IG1lbnUuYWRkU3ViTWVudShpdGVtLmxhYmVsLCBpdGVtLmlkKTtcclxuICAgICAgICAgYWRkSXRlbXMoc3ViTWVudSwgaXRlbS5tZW51SXRlbXMsIGxvYWRNb2RlbCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIG1lbnUuYWRkSXRlbShpdGVtLmxhYmVsLCAoKSA9PiB7IGxvYWRNb2RlbChpdGVtLmZpbGUpIH0pO1xyXG4gICAgICB9XHJcbiAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9kZWxzTWVudShtZW51YmFyOiBNZW51YmFyLCBsb2FkTW9kZWw6IExvYWRNb2RlbEZ1bmN0aW9uKSB7XHJcblxyXG4gICBsZXQgbWVudSA9IG1lbnViYXIuYWRkU3ViTWVudSgnTW9kZWxzJywgJ01vZGVscycpO1xyXG5cclxuICAgYWRkSXRlbXMobWVudSwgbWVudUl0ZW1zLCBsb2FkTW9kZWwpO1xyXG59XHJcbiIsImltcG9ydCB7IFZlYzMsIFZlYzIgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL1ZlY1wiO1xyXG5pbXBvcnQgeyBPdmVybGF5Q2FudmFzIH0gZnJvbSBcIi4uLy4uL0dVSS9PdmVybGF5Q2FudmFzXCI7XHJcbmltcG9ydCB7IFBvaW50ZXJFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vR1VJL1BvaW50ZXJFdmVudEhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi9SZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBDYW1lcmEsIEZpeGVkU2l6ZVByb3ZpZGVyIH0gZnJvbSBcIi4vQ2FtZXJhXCI7XHJcbmltcG9ydCB7IE1hdDQgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL01hdFwiO1xyXG5pbXBvcnQgeyB0b1JhZCwgY2xhbXAsIGlzTW9iaWxlLCB0b0RlZyB9IGZyb20gXCIuLi8uLi9VdGlsL0dsb2JhbHNcIjtcclxuaW1wb3J0IHsgZ2xTcGFjZSB9IGZyb20gXCIuLi8uLi9nbC9nbFNwYWNlXCI7XHJcbmltcG9ydCB7IFRyaWFuZ2xlT2JqIH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9UcmlhbmdsZU9ialwiO1xyXG5cclxuZXhwb3J0IHR5cGUgUGVyc3BlY3RpdmVDaGFuZ2VGdW5jdGlvbiA9ICgpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQZXJzcGVjdGl2ZVByb3ZpZGVyIHtcclxuICAgcmVhZG9ubHkgZm92OiBudW1iZXI7XHJcbiAgIGV5ZTogVmVjMztcclxuICAgcmVhZG9ubHkgbG9va0F0OiBWZWMzO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGVyc3BlY3RpdmVDdHJsIHtcclxuICAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gICBwcml2YXRlIG92ZXJsYXk6IE92ZXJsYXlDYW52YXM7XHJcbiAgIHByaXZhdGUgaGFuZGxlcjogUG9pbnRlckV2ZW50SGFuZGxlcjtcclxuICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXI7XHJcbiAgIHByaXZhdGUgcHJvdmlkZXI6IElQZXJzcGVjdGl2ZVByb3ZpZGVyO1xyXG5cclxuICAgcHVibGljIG9uQ2hhbmdlOiBQZXJzcGVjdGl2ZUNoYW5nZUZ1bmN0aW9uO1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICBwYXJlbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgICBwcm92aWRlcjogSVBlcnNwZWN0aXZlUHJvdmlkZXJcclxuICAgKSB7XHJcblxyXG4gICAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXI7XHJcblxyXG4gICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgIGNhbnZhcy5pZCA9ICdQZXJzcGVjdGl2ZUNhbnZhcyc7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG5cclxuICAgICAgLy8gZG9uJ3QgdHJ5IHRvIG1ha2UgdGhlIGNhbnZhcyB0cmFuc3BhcmVudCB0byB0aGUgdW5kZXJseWluZyBodG1sLiBUaGlzXHJcbiAgICAgIC8vIHNlZW1zIHRvIGxpbWl0IHRoZSBhbHBoYSB2YWx1ZXMgd2UgY2FuIHVzZSBpbiBvdXIgc2NlbmUuXHJcbiAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgeyBhbHBoYTogZmFsc2UgfSkgYXMgV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG5cclxuICAgICAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICAgICAgIC8vIFRPRE8gZGlzcGxheSBhIG1lc3NhZ2UgYWJvdXQgbm90IGJlaW5nIGFibGUgdG8gY3JlYXRlIGEgV2ViR0wgY29udGV4dFxyXG4gICAgICAgICBjb25zb2xlLmxvZyhcIlVuYWJsZSB0byBnZXQgV2ViR0wgY29udGV4dFwiKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdsID0gY29udGV4dDtcclxuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcihjb250ZXh0KTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zaG93TWluaVZpZXcgPSBmYWxzZTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zaG93QmFsbCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhID0gbmV3IENhbWVyYSh7XHJcbiAgICAgICAgIHNpemVQcm92aWRlcjogbmV3IEZpeGVkU2l6ZVByb3ZpZGVyKDIsIDIpXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLnVzZU9ydGhvZ3JhcGhpYyA9IHRydWU7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuc2hvd0Zsb29yID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLm92ZXJsYXkgPSBuZXcgT3ZlcmxheUNhbnZhcyhwYXJlbnQsICdQZXJzcGVjdGl2ZU92ZXJsYXlDYW52YXMnKTtcclxuXHJcbiAgICAgIHRoaXMuaGFuZGxlciA9IG5ldyBQb2ludGVyRXZlbnRIYW5kbGVyKGNhbnZhcyk7XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vbkRvd24gPSAocG9zOiBWZWMyKSA9PiB0aGlzLm9uRG93bihwb3MpO1xyXG4gICAgICB0aGlzLmhhbmRsZXIub25EcmFnID0gKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpID0+IHRoaXMub25EcmFnKHBvcywgZGVsdGEpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZGVsZXRlKCkge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmRlbGV0ZSgpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHNldEV5ZVBvcyhwb3M6IFZlYzIpIHtcclxuXHJcbiAgICAgIC8vIGNvbnZlcnQgdG8gbW9kZWwgc3BhY2VcclxuICAgICAgdGhpcy5wcm92aWRlci5leWUgPSB0aGlzLmZyb21TY3JlZW4ocG9zKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgIHRoaXMub25DaGFuZ2UoKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG9uRG93bihwb3M6IFZlYzIpIHtcclxuICAgICAgdGhpcy5zZXRFeWVQb3MocG9zKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvbkRyYWcocG9zOiBWZWMyLCBkZWx0YTogVmVjMikge1xyXG4gICAgICB0aGlzLnNldEV5ZVBvcyhwb3MpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICBnbC5jYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgZ2wuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHJlbmRlcihtb2RlbE1hdDogTWF0NCkge1xyXG4gICAgICAvLyBzZXQgdGhlIG1vZGVsIG1hdHJpeCBvZiB0aGUgb2JqZWN0IHRvIHRoYXQgb2YgdGhlIHByaW1hcnlcclxuICAgICAgLy8gb2JqIHdpdGggYW4gYWRkaXRpb25hbCA5MCBkZWcgcm90YXRpb25cclxuICAgICAgdGhpcy5yZW5kZXJlci5vYmoubW9kZWwgPSBtb2RlbE1hdC5jbG9uZSgpLnJvdFkodG9SYWQoOTApKTtcclxuXHJcbiAgICAgIC8vIHNoaWZ0IHRoZSB2aWV3IHNvIHRoYXQgdGhlIG9iamVjdCBpcyBvbiB0aGUgZmFyIHJpZ2h0LiBGYXIgZW5vdWdoIHRoYXQgdGhlcmUgaXNcclxuICAgICAgLy8gYSBzcXVhcmUgc3BhY2Ugb24gdGhlIGVuZCB0aGF0IGNvbnRhaW5zIHRoZSBvcmlnaW4gKGNlbnRlciBvZiBvYmplY3Qgd2UncmUgdmlld2luZylcclxuICAgICAgbGV0IHZpZXdTcGFjZSA9IHRoaXMucmVuZGVyZXIub3B0aW9ucy5jYW1lcmEuZ2V0Vmlld1NwYWNlKHRoaXMuZ2wpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLmxvb2tBdCA9IG5ldyBWZWMzKFstdmlld1NwYWNlLndpZHRoIC8gMiArIHZpZXdTcGFjZS5oZWlnaHQgLyAyLCAwLCAwXSk7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcigpO1xyXG5cclxuICAgICAgdGhpcy5kcmF3RXllKCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZnJvbVNjcmVlbihwdDogVmVjMik6IFZlYzMge1xyXG4gICAgICBsZXQgY2FudmFzID0gdGhpcy5nbC5jYW52YXM7XHJcbiAgICAgIGxldCBhciA9IGNhbnZhcy53aWR0aCAvIGNhbnZhcy5oZWlnaHQ7XHJcblxyXG4gICAgICAvLyB0aGUgc3BhY2Ugd2UncmUgdmlld2luZyBpcyBhIDJ4MiBib3ggb24gdGhlIHJpZ2h0XHJcbiAgICAgIGxldCB3aWR0aCA9IDIgKiBhcjsgLy8gc3BhY2Uud2lkdGggKiAoMi4wIC8gc3BhY2UuaGVpZ2h0KTtcclxuICAgICAgbGV0IGhlaWdodCA9IDIuMDtcclxuICAgICAgbGV0IHNwYWNlID0gbmV3IGdsU3BhY2UobmV3IFZlYzMoWy13aWR0aCAvIDIsIC1oZWlnaHQgLyAyLCAtMTAwXSksIG5ldyBWZWMzKFt3aWR0aCAvIDIsIGhlaWdodCAvIDIsIDEwMF0pKTtcclxuXHJcbiAgICAgIGxldCBib3hTaXplID0gc3BhY2UuaGVpZ2h0O1xyXG4gICAgICBsZXQgeiA9IGNsYW1wKCgxIC0gcHQueCAvIGNhbnZhcy53aWR0aCkgKiBzcGFjZS53aWR0aCAtIGJveFNpemUgLyAyLCBib3hTaXplIC8gMiwgMTAwKTtcclxuICAgICAgbGV0IHkgPSBjbGFtcChzcGFjZS5ib3R0b20gKyAoMSAtIHB0LnkgLyBjYW52YXMuaGVpZ2h0KSAqIHNwYWNlLmhlaWdodCwgLTEsIDEpO1xyXG5cclxuICAgICAgcmV0dXJuIG5ldyBWZWMzKFt0aGlzLnByb3ZpZGVyLmV5ZS54LCB5LCB6XSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgdG9TY3JlZW4ocHQ6IFZlYzMpOiBWZWMyIHtcclxuICAgICAgbGV0IGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzO1xyXG4gICAgICBsZXQgYXIgPSBjYW52YXMud2lkdGggLyBjYW52YXMuaGVpZ2h0O1xyXG5cclxuICAgICAgLy8gdGhlIHNwYWNlIHdlJ3JlIHZpZXdpbmcgaXMgYSAyeDIgYm94IG9uIHRoZSByaWdodFxyXG4gICAgICBsZXQgd2lkdGggPSAyICogYXI7IC8vIHNwYWNlLndpZHRoICogKDIuMCAvIHNwYWNlLmhlaWdodCk7XHJcbiAgICAgIGxldCBoZWlnaHQgPSAyLjA7XHJcbiAgICAgIGxldCBzcGFjZSA9IG5ldyBnbFNwYWNlKG5ldyBWZWMzKFstd2lkdGggLyAyLCAtaGVpZ2h0IC8gMiwgLTEwMF0pLCBuZXcgVmVjMyhbd2lkdGggLyAyLCBoZWlnaHQgLyAyLCAxMDBdKSk7XHJcblxyXG4gICAgICBsZXQgYm94U2l6ZSA9IHNwYWNlLmhlaWdodDtcclxuICAgICAgbGV0IHggPSAoMSAtIChwdC56ICsgYm94U2l6ZSAvIDIpIC8gc3BhY2Uud2lkdGgpICogY2FudmFzLndpZHRoO1xyXG4gICAgICBsZXQgeSA9ICgxIC0gKHB0LnkgLSBzcGFjZS5ib3R0b20pIC8gc3BhY2UuaGVpZ2h0KSAqIGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjMihbeCwgeV0pO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGRyYXdMaW5lKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBwdDE6IFZlYzMsIHB0MjogVmVjMykge1xyXG4gICAgICBsZXQgcDEgPSB0aGlzLnRvU2NyZWVuKHB0MSk7XHJcbiAgICAgIGxldCBwMiA9IHRoaXMudG9TY3JlZW4ocHQyKTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHgubW92ZVRvKHAxLngsIHAxLnkpO1xyXG4gICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xyXG4gICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZHJhd0V5ZSgpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgbGV0IGN0eCA9IHRoaXMub3ZlcmxheS5jb250ZXh0O1xyXG4gICAgICBjdHguY2FudmFzLndpZHRoID0gZ2wuY2FudmFzLndpZHRoO1xyXG4gICAgICBjdHguY2FudmFzLmhlaWdodCA9IGdsLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xyXG5cclxuICAgICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgICAgIGN0eC5saW5lV2lkdGggPSAyICogY3R4LmxpbmVXaWR0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmdsLmNhbnZhcy53aWR0aCwgdGhpcy5nbC5jYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgIGxldCBzcGFjZSA9IHRoaXMucmVuZGVyZXIub3B0aW9ucy5jYW1lcmEuZ2V0Vmlld1NwYWNlKHRoaXMuZ2wpO1xyXG4gICAgICAvLyBkcmF3IHRoZSBmcm9udCAndmlldycgbGluZVxyXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjIpJztcclxuICAgICAgdGhpcy5kcmF3TGluZShjdHgsIG5ldyBWZWMzKFswLCBzcGFjZS50b3AsIHNwYWNlLmhlaWdodCAvIDJdKSwgbmV3IFZlYzMoWzAsIHNwYWNlLmJvdHRvbSwgc3BhY2UuaGVpZ2h0IC8gMl0pKTtcclxuXHJcbiAgICAgIC8vIGRyYXcgbGluZSBmcm9tIHRoZSBleWUgdG8gdGhlIGxvb2sgYXQgY2VudGVyXHJcbiAgICAgIHRoaXMuZHJhd0xpbmUoY3R4LCB0aGlzLnByb3ZpZGVyLmV5ZSwgdGhpcy5wcm92aWRlci5sb29rQXQpO1xyXG5cclxuICAgICAgbGV0IHAxID0gdGhpcy50b1NjcmVlbih0aGlzLnByb3ZpZGVyLmV5ZSk7XHJcbiAgICAgIGxldCBwMiA9IHRoaXMudG9TY3JlZW4odGhpcy5wcm92aWRlci5sb29rQXQpO1xyXG5cclxuICAgICAgbGV0IGFuZ2xlID0gdG9EZWcoTWF0aC5hdGFuMihwMi55IC0gcDEueSwgcDIueCAtIHAxLngpKTtcclxuXHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcclxuICAgICAgcDIueCA9IHAxLnggKyBjdHguY2FudmFzLndpZHRoICogTWF0aC5jb3ModG9SYWQoYW5nbGUgKyB0aGlzLnByb3ZpZGVyLmZvdiAvIDIpKTtcclxuICAgICAgcDIueSA9IHAxLnkgKyBjdHguY2FudmFzLndpZHRoICogTWF0aC5zaW4odG9SYWQoYW5nbGUgKyB0aGlzLnByb3ZpZGVyLmZvdiAvIDIpKTtcclxuICAgICAgY3R4LmxpbmVUbyhwMi54LCBwMi55KTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XHJcbiAgICAgIHAyLnggPSBwMS54ICsgY3R4LmNhbnZhcy53aWR0aCAqIE1hdGguY29zKHRvUmFkKGFuZ2xlIC0gdGhpcy5wcm92aWRlci5mb3YgLyAyKSk7XHJcbiAgICAgIHAyLnkgPSBwMS55ICsgY3R4LmNhbnZhcy53aWR0aCAqIE1hdGguc2luKHRvUmFkKGFuZ2xlIC0gdGhpcy5wcm92aWRlci5mb3YgLyAyKSk7XHJcbiAgICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAgIGxldCBjZW50ZXIgPSB0aGlzLnRvU2NyZWVuKHRoaXMucHJvdmlkZXIuZXllKTtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3doaXRlJztcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNiknO1xyXG5cclxuICAgICAgLy8gZHJhdyB0aGUgYWN0dWFsIGV5ZVxyXG4gICAgICBsZXQgb3BlbkFuZ2xlID0gNzA7XHJcbiAgICAgIGxldCByYWRpdXMgPSAwLjEyICogY3R4LmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIGxldCBzdGFydEFuZ2xlID0gYW5nbGUgKyBvcGVuQW5nbGUgLyAyO1xyXG4gICAgICBsZXQgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKDM2MCAtIG9wZW5BbmdsZSk7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4Lm1vdmVUbyhjZW50ZXIueCwgY2VudGVyLnkpO1xyXG4gICAgICBjdHguYXJjKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzLCB0b1JhZChzdGFydEFuZ2xlKSwgdG9SYWQoZW5kQW5nbGUpKTtcclxuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjdHguZmlsbCgpXHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICd0cmFuc3BhcmVudCc7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjMpJztcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHgubW92ZVRvKGNlbnRlci54LCBjZW50ZXIueSk7XHJcbiAgICAgIGN0eC5hcmMoY2VudGVyLngsIGNlbnRlci55LCByYWRpdXMsIHRvUmFkKHN0YXJ0QW5nbGUpLCB0b1JhZChlbmRBbmdsZSksIHRydWUpO1xyXG4gICAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsKClcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgLy8gZHJhdyB0aGUgbG9vayBhdCBwb2ludCAoY2VudGVyIG9mIG9iamVjdClcclxuICAgICAgY2VudGVyID0gdGhpcy50b1NjcmVlbih0aGlzLnByb3ZpZGVyLmxvb2tBdCk7XHJcbiAgICAgIHJhZGl1cyA9IDI7XHJcblxyXG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguYXJjKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzLCAwLCB0b1JhZCgzNjApKTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNldE1vZGVsKHRPYmo6IFRyaWFuZ2xlT2JqKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0TW9kZWwodE9iaik7XHJcbiAgIH1cclxufSIsImltcG9ydCB7IFBhbmVsIH0gZnJvbSBcIi4uLy4uL0dVSS9QYW5lbFwiO1xyXG5pbXBvcnQgeyBQZXJzcGVjdGl2ZUN0cmwsIFBlcnNwZWN0aXZlQ2hhbmdlRnVuY3Rpb24gfSBmcm9tIFwiLi9QZXJzcGVjdGl2ZUN0cmxcIjtcclxuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIi4vQ2FtZXJhXCI7XHJcbmltcG9ydCB7IE1hdDQgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL01hdFwiO1xyXG5pbXBvcnQgeyBUcmlhbmdsZU9iaiB9IGZyb20gXCIuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmpcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQZXJzcGVjdGl2ZVBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICAgcHJpdmF0ZSBwZXJzcGVjdGl2ZUN0cmw6IFBlcnNwZWN0aXZlQ3RybDtcclxuICAgcHJpdmF0ZSByZXNpemVMaXN0ZW5lciA9ICgpID0+IHRoaXMub25SZXNpemUoKTtcclxuXHJcbiAgIHB1YmxpYyBvbkNoYW5nZTogUGVyc3BlY3RpdmVDaGFuZ2VGdW5jdGlvbjtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50LCBpZDogc3RyaW5nLCBjYW1lcmE6IENhbWVyYSkge1xyXG4gICAgICBzdXBlcihwYXJlbnQsIGlkKTtcclxuXHJcbiAgICAgIHRoaXMucGVyc3BlY3RpdmVDdHJsID0gbmV3IFBlcnNwZWN0aXZlQ3RybCh0aGlzLmRpdiwgY2FtZXJhKTtcclxuICAgICAgdGhpcy5wZXJzcGVjdGl2ZUN0cmwub25DaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZXNpemVMaXN0ZW5lcik7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZUxpc3RlbmVyKTtcclxuICAgICAgdGhpcy5wZXJzcGVjdGl2ZUN0cmwuZGVsZXRlKCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyByZW5kZXIobW9kZWw6IE1hdDQpIHtcclxuICAgICAgdGhpcy5wZXJzcGVjdGl2ZUN0cmwucmVuZGVyKG1vZGVsKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNldE1vZGVsKHRPYmo6IFRyaWFuZ2xlT2JqKSB7XHJcbiAgICAgIHRoaXMucGVyc3BlY3RpdmVDdHJsLnNldE1vZGVsKHRPYmopO1xyXG4gICB9XHJcblxyXG4gICBwcm90ZWN0ZWQgc2hvdyh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICBpZiAodmFsdWUgPT09IHRydWUpIHtcclxuICAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb25SZXNpemUoKSB7XHJcbiAgICAgIHRoaXMucGVyc3BlY3RpdmVDdHJsLnNldFNpemUodGhpcy5kaXYuY2xpZW50V2lkdGgsIHRoaXMuZGl2LmNsaWVudEhlaWdodCk7XHJcbiAgIH1cclxufSIsImltcG9ydCB7IFZlYzMgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL1ZlY1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBwbGFuZSBkZWZpbmVkIGJ5IGEqeCArIGIqeSArIGMqeiA9IGRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQbGFuZSB7XHJcbiAgIHByaXZhdGUgYTogbnVtYmVyO1xyXG4gICBwcml2YXRlIGI6IG51bWJlcjtcclxuICAgcHJpdmF0ZSBjOiBudW1iZXI7XHJcbiAgIHByaXZhdGUgZDogbnVtYmVyO1xyXG4gICBwcml2YXRlIG9yaWdpbjogVmVjMztcclxuICAgcHJpdmF0ZSBkaXN0YW5jZVRlcm06IG51bWJlcjtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gcHQgQSBwb2ludCBvbiB0aGUgcGxhbmUgcGVycGVuZGljdWxhciB0byB0aGUgb3JpZ2luXHJcbiAgICAqIEBwYXJhbSBvcmlnaW4gSWYgdGhlIHBlcnBlbmRpY3VsYXIgcG9pbnQgaXMgbm90IHRoZSBvcmlnaW4sIHNwZWNpZnkgaXQgaGVyZVxyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHB0OiBWZWMzLCBvcmlnaW4/OiBWZWMzKSB7XHJcbiAgICAgIGlmICghb3JpZ2luKSB7XHJcbiAgICAgICAgIG9yaWdpbiA9IFZlYzMub3JpZ2luO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xyXG4gICAgICB0aGlzLmEgPSBvcmlnaW4ueCAtIHB0Lng7XHJcbiAgICAgIHRoaXMuYiA9IG9yaWdpbi55IC0gcHQueTtcclxuICAgICAgdGhpcy5jID0gb3JpZ2luLnogLSBwdC56O1xyXG4gICAgICB0aGlzLmQgPSB0aGlzLmEgKiB0aGlzLmEgKyB0aGlzLmIgKiB0aGlzLmIgKyB0aGlzLmMgKiB0aGlzLmM7XHJcbiAgICAgIHRoaXMuZGlzdGFuY2VUZXJtID0gTWF0aC5zcXJ0KHRoaXMuZCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDb21wdXRlcyB0aGUgZGlzdGFuY2UgdG8gYSBwb2ludC5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBwdCBUaGUgcG9pbnQuXHJcbiAgICAqIEByZXR1cm5zIHRoZSBEaXN0YW5jZS5cclxuICAgICovXHJcbiAgIHB1YmxpYyBkaXN0VG9QdChwdDogVmVjMyk6IG51bWJlciB7XHJcbiAgICAgIGxldCB4ID0gcHQueCAtIHRoaXMub3JpZ2luLng7XHJcbiAgICAgIGxldCB5ID0gcHQueSAtIHRoaXMub3JpZ2luLnk7XHJcbiAgICAgIGxldCB6ID0gcHQueiAtIHRoaXMub3JpZ2luLno7XHJcbiAgICAgIHJldHVybiBNYXRoLmFicyh0aGlzLmEgKiB4ICsgdGhpcy5iICogeSArIHRoaXMuYyAqIHogKyB0aGlzLmQpIC8gdGhpcy5kaXN0YW5jZVRlcm07XHJcbiAgIH1cclxufSIsImltcG9ydCB2ZXJ0ZXhTb3VyY2UgZnJvbSAnLi4vLi4vc2hhZGVycy9WaWV3ZXJWZXJ0ZXguZ2xzbCc7XHJcbmltcG9ydCBmcmFnbWVudFNvdXJjZSBmcm9tICcuLi8uLi9zaGFkZXJzL1ZpZXdlckZyYWdtZW50Lmdsc2wnO1xyXG5pbXBvcnQgeyBWZWMzLCBWZWM0IH0gZnJvbSAnLi4vLi4vVXRpbDNEL1ZlYyc7XHJcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi8uLi9VdGlsM0QvTWF0JztcclxuaW1wb3J0IHsgZ2xDb2xvcjMgfSBmcm9tICcuLi8uLi9nbC9nbENvbG9yJztcclxuaW1wb3J0IHsgVmFsdWVSYW5nZSB9IGZyb20gJy4vVmFsdWVSYW5nZSc7XHJcbmltcG9ydCB7IENhbWVyYSwgRml4ZWRTaXplUHJvdmlkZXIsIE9ialNpemVQcm92aWRlciB9IGZyb20gJy4vQ2FtZXJhJztcclxuaW1wb3J0IHsgZ2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vZ2wvZ2xQcm9ncmFtJztcclxuaW1wb3J0IHsgaHRtbENvbG9yIH0gZnJvbSAnLi4vLi4vVXRpbC9odG1sQ29sb3InO1xyXG5pbXBvcnQgeyBnbE9iamVjdCB9IGZyb20gJy4vZ2xPYmplY3QnO1xyXG5pbXBvcnQgeyBnbEZyYW1lQnVmZmVyIH0gZnJvbSAnLi4vLi4vZ2wvZ2xGcmFtZUJ1ZmZlcic7XHJcbmltcG9ydCB7IGdsVGV4dHVyZSwgZ2xUZXh0dXJlU3R5bGUgfSBmcm9tICcuLi8uLi9nbC9nbFRleHR1cmUnO1xyXG5pbXBvcnQgeyBUcmlhbmdsZU9iakJ1aWxkZXIgfSBmcm9tICcuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmpCdWlsZGVyJztcclxuaW1wb3J0IHsgTm9ybWFsVHlwZSwgVHJpYW5nbGVPYmogfSBmcm9tICcuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmonO1xyXG5pbXBvcnQgeyBnbFVuaWZvcm0gfSBmcm9tICcuLi8uLi9nbC9nbFVuaWZvcm0nO1xyXG5pbXBvcnQgeyBJTWluTWF4IH0gZnJvbSAnLi4vLi4vVXRpbDNEL0JvdW5kaW5nQm94JztcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tICcuL1BsYW5lJztcclxuaW1wb3J0IHsgVGV4dHVyZVJlbmRlcmVyIH0gZnJvbSAnLi9UZXh0dXJlUmVuZGVyZXInO1xyXG5pbXBvcnQgeyB0b1JhZCB9IGZyb20gJy4uLy4uL1V0aWwvR2xvYmFscyc7XHJcblxyXG5jb25zdCBCQUxMX1JBRElVUyA9IDAuNTtcclxuY29uc3QgSU5JVElBTF9MSUdIVF9QT1MgPSBuZXcgVmVjMyhbLTEuMCwgMS4wLCAxLjVdKTtcclxuY29uc3QgSU5JVElBTF9WSUVXID0gTWF0NC5pZGVudGl0eTtcclxuY29uc3QgSU5JVElBTF9TSElOSU5FU1MgPSAxNTtcclxuY29uc3QgSU5JVElBTF9MSUdIVF9JTlRFTlNJVFkgPSAxLjA7XHJcbmNvbnN0IElOSVRJQUxfRkFMTE9GRiA9IDAuNTtcclxuZXhwb3J0IGNvbnN0IElOSVRJQUxfRVlFID0gWzAsIDAsIDZdOyAvLyAzIHRpbWVzIHRoZSBtYXggb2JqZWN0IGRpbWVuc2lvbiBvZiAyLiBGb3IgYSBtb2RlbCwgYWJvdXQgMTUgZnQgYXdheVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRvdXIge1xyXG4gICBwdWJsaWMgY29sb3I6IGdsQ29sb3IzO1xyXG4gICBwdWJsaWMgYW5nbGU6IG51bWJlcjsgLy8gZGVncmVlc1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbG9yOiBnbENvbG9yMyB8IG51bWJlciwgYW5nbGU6IG51bWJlcikge1xyXG5cclxuICAgICAgaWYgKGNvbG9yIGluc3RhbmNlb2YgZ2xDb2xvcjMpIHtcclxuICAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLmNvbG9yID0gbmV3IGdsQ29sb3IzKFtjb2xvciwgY29sb3IsIGNvbG9yXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuICAgfVxyXG59XHJcblxyXG4vLyBSZW5kZXJpbmcgbW9kZXMuIE11c3QgbWF0Y2ggdmFsdWVzIGluIFZpZXdlckZyYWdtZW50Lmdsc2xcclxuZXhwb3J0IGVudW0gUmVuZGVyTW9kZSB7XHJcbiAgIE5vcm1hbCA9IDAsXHJcbiAgIENvbnRvdXJQbGFuZXMgPSAxLFxyXG4gICBDb250b3VyVmFsdWVzID0gMixcclxuICAgTGlnaHRBbmRTaGFkb3cgPSAzLFxyXG4gICBIaWdobGlnaHRUZXJtaW5hdG9yID0gNCxcclxuICAgSGlnaGxpZ2h0U2hhZG93ID0gNSxcclxuICAgRW1waGFzaXplSGlnaGxpZ2h0cyA9IDYsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFJlc2V0IHtcclxuICAgQWxsLFxyXG4gICBWaWV3LFxyXG4gICBMaWdodHMsXHJcbiAgIFJlbmRlcmluZ1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBMaWdodFR5cGUge1xyXG4gICBQb2ludCxcclxuICAgRGlyZWN0aW9uYWxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUmVuZGVyT3B0aW9ucyB7XHJcbiAgIHZpZXc6IE1hdDQ7XHJcbiAgIHZhbHVlUmFuZ2U6IFZhbHVlUmFuZ2U7XHJcbiAgIGxpZ2h0UG9zOiBWZWMzO1xyXG4gICBsaWdodFR5cGU6IExpZ2h0VHlwZTtcclxuICAgZmFsbG9mZjogbnVtYmVyO1xyXG4gICBsaWdodEludGVuc2l0eTogbnVtYmVyO1xyXG4gICBjb250b3VyczogQ29udG91cltdO1xyXG4gICB1c2VDdWxsaW5nOiBib29sZWFuO1xyXG4gICBzaG93SGlnaGxpZ2h0czogYm9vbGVhbjtcclxuICAgc2hpbmluZXNzOiBudW1iZXI7XHJcbiAgIGNhbWVyYTogQ2FtZXJhO1xyXG4gICByZW5kZXJNb2RlOiBSZW5kZXJNb2RlO1xyXG4gICB3aGl0ZUNvbG9yOiBnbENvbG9yMztcclxuICAgYmxhY2tDb2xvcjogZ2xDb2xvcjM7XHJcbiAgIHVzZVNoYWRvd3M6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IHJlbmRlcnMgdHJpYW5nbGVzIGFuZCBhIGxpZ2h0IHNvdXJjZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyIHtcclxuXHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwcml2YXRlIHByb2dyYW06IGdsUHJvZ3JhbTtcclxuICAgcHVibGljIHJlYWRvbmx5IHllbGxvdyA9IG5ldyBnbENvbG9yMyhbMS4wLCAwLjksIDAuN10pO1xyXG5cclxuICAgcHVibGljIG9wdGlvbnM6IElSZW5kZXJPcHRpb25zID0ge1xyXG4gICAgICB2aWV3OiBNYXQ0LmlkZW50aXR5LFxyXG4gICAgICB2YWx1ZVJhbmdlOiBWYWx1ZVJhbmdlLlN0YW5kYXJkLFxyXG4gICAgICBsaWdodFBvczogSU5JVElBTF9MSUdIVF9QT1MuY2xvbmUoKSxcclxuICAgICAgbGlnaHRUeXBlOiBMaWdodFR5cGUuUG9pbnQsXHJcbiAgICAgIGZhbGxvZmY6IElOSVRJQUxfRkFMTE9GRixcclxuICAgICAgbGlnaHRJbnRlbnNpdHk6IElOSVRJQUxfTElHSFRfSU5URU5TSVRZLFxyXG4gICAgICBjb250b3VyczogW10sXHJcblxyXG4gICAgICB1c2VDdWxsaW5nOiB0cnVlLFxyXG4gICAgICBzaG93SGlnaGxpZ2h0czogdHJ1ZSxcclxuICAgICAgc2hpbmluZXNzOiBJTklUSUFMX1NISU5JTkVTUyxcclxuICAgICAgY2FtZXJhOiBuZXcgQ2FtZXJhKCksXHJcbiAgICAgIHdoaXRlQ29sb3I6IGdsQ29sb3IzLm1vZGVsV2hpdGUsXHJcbiAgICAgIGJsYWNrQ29sb3I6IGdsQ29sb3IzLm1vZGVsQmxhY2ssXHJcbiAgICAgIHVzZVNoYWRvd3M6IHRydWUsXHJcblxyXG4gICAgICByZW5kZXJNb2RlOiBSZW5kZXJNb2RlLk5vcm1hbCxcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBhcnJvd09wdGlvbnM6IElSZW5kZXJPcHRpb25zID0ge1xyXG4gICAgICB2aWV3OiBNYXQ0LmlkZW50aXR5LFxyXG4gICAgICB2YWx1ZVJhbmdlOiBuZXcgVmFsdWVSYW5nZSgxLjAsIDAuNCwgMC4xKSxcclxuICAgICAgbGlnaHRQb3M6IG5ldyBWZWMzKFstMSwgMC41LCAwLjVdKSxcclxuICAgICAgbGlnaHRUeXBlOiBMaWdodFR5cGUuRGlyZWN0aW9uYWwsXHJcbiAgICAgIGZhbGxvZmY6IDAuMCxcclxuICAgICAgbGlnaHRJbnRlbnNpdHk6IElOSVRJQUxfTElHSFRfSU5URU5TSVRZLFxyXG4gICAgICBjb250b3VyczogW10sXHJcbiAgICAgIHVzZUN1bGxpbmc6IHRydWUsXHJcbiAgICAgIHNob3dIaWdobGlnaHRzOiBmYWxzZSxcclxuICAgICAgc2hpbmluZXNzOiBJTklUSUFMX1NISU5JTkVTUyxcclxuICAgICAgY2FtZXJhOiBuZXcgQ2FtZXJhKHtcclxuICAgICAgICAgc2l6ZVByb3ZpZGVyOiBuZXcgRml4ZWRTaXplUHJvdmlkZXIoMiwgMiksXHJcbiAgICAgICAgIHVzZU9ydGhvZ3JhcGhpYzogdHJ1ZSxcclxuICAgICAgfSksXHJcbiAgICAgIHdoaXRlQ29sb3I6IHRoaXMueWVsbG93LFxyXG4gICAgICBibGFja0NvbG9yOiBodG1sQ29sb3IuYmxhY2sudG9HbENvbG9yKCksXHJcbiAgICAgIHVzZVNoYWRvd3M6IGZhbHNlLFxyXG5cclxuICAgICAgcmVuZGVyTW9kZTogUmVuZGVyTW9kZS5Ob3JtYWwsXHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgYmFsbE9wdGlvbnM6IElSZW5kZXJPcHRpb25zID0ge1xyXG4gICAgICB2aWV3OiBNYXQ0LmlkZW50aXR5LFxyXG4gICAgICB2YWx1ZVJhbmdlOiBWYWx1ZVJhbmdlLlN0YW5kYXJkLFxyXG4gICAgICBsaWdodFBvczogbmV3IFZlYzMoWy0xLCAwLjUsIDAuNV0pLFxyXG4gICAgICBsaWdodFR5cGU6IExpZ2h0VHlwZS5EaXJlY3Rpb25hbCxcclxuICAgICAgZmFsbG9mZjogMC4wLFxyXG4gICAgICBsaWdodEludGVuc2l0eTogSU5JVElBTF9MSUdIVF9JTlRFTlNJVFksXHJcbiAgICAgIGNvbnRvdXJzOiBbXSxcclxuICAgICAgdXNlQ3VsbGluZzogdHJ1ZSxcclxuICAgICAgc2hvd0hpZ2hsaWdodHM6IGZhbHNlLFxyXG4gICAgICBzaGluaW5lc3M6IElOSVRJQUxfU0hJTklORVNTLFxyXG4gICAgICBjYW1lcmE6IG5ldyBDYW1lcmEoe1xyXG4gICAgICAgICBzaXplUHJvdmlkZXI6IG5ldyBGaXhlZFNpemVQcm92aWRlcigyLCAyKSxcclxuICAgICAgICAgdXNlT3J0aG9ncmFwaGljOiB0cnVlLFxyXG4gICAgICB9KSxcclxuICAgICAgd2hpdGVDb2xvcjogZ2xDb2xvcjMubW9kZWxXaGl0ZSxcclxuICAgICAgYmxhY2tDb2xvcjogZ2xDb2xvcjMubW9kZWxCbGFjayxcclxuICAgICAgdXNlU2hhZG93czogZmFsc2UsXHJcblxyXG4gICAgICByZW5kZXJNb2RlOiBSZW5kZXJNb2RlLk5vcm1hbCxcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNldCBiYWxsQ29sb3IoY29sb3I6IGdsQ29sb3IzKSB7XHJcbiAgICAgIHRoaXMuYmFsbE9wdGlvbnMud2hpdGVDb2xvciA9IGNvbG9yO1xyXG4gICB9XHJcblxyXG4gICAvLyBzaXplIG9mIHRoZSBzbWFsbGVyIHZpZXdcclxuICAgcHVibGljIHJlYWRvbmx5IG1pbmlTaXplID0gMC4yO1xyXG5cclxuICAgcHJpdmF0ZSBiYWxsOiBnbE9iamVjdDtcclxuICAgcHJpdmF0ZSBhcnJvdzogZ2xPYmplY3Q7XHJcbiAgIHB1YmxpYyBmbG9vcjogZ2xPYmplY3Q7XHJcbiAgIHB1YmxpYyBvYmo6IGdsT2JqZWN0O1xyXG5cclxuICAgcHJpdmF0ZSBsaWdodFZpZXc6IE1hdDQ7XHJcbiAgIHByaXZhdGUgc2hhZG93RnJhbWVCdWZmZXI6IGdsRnJhbWVCdWZmZXI7XHJcbiAgIHByaXZhdGUgc2hhZG93Q29sb3JUZXh0dXJlOiBnbFRleHR1cmU7XHJcbiAgIHByaXZhdGUgc2hhZG93RGVwdGhUZXh0dXJlOiBnbFRleHR1cmU7XHJcblxyXG4gICBwdWJsaWMgc2hvd1NoYWRvd01hcCA9IGZhbHNlO1xyXG4gICBwdWJsaWMgc2hvd01pbmlWaWV3ID0gdHJ1ZTtcclxuICAgcHVibGljIHNob3dCYWxsID0gdHJ1ZTtcclxuICAgcHVibGljIHNob3dGbG9vciA9IHRydWU7XHJcbiAgIHB1YmxpYyBzaG93R3JpZCA9IGZhbHNlO1xyXG4gICBwdWJsaWMgbWluaVZpZXdTaG93Q29udG91cnMgPSBmYWxzZTtcclxuICAgcHVibGljIGxvY2tGbG9vciA9IGZhbHNlO1xyXG5cclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihnbEN0eDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcblxyXG4gICAgICB0aGlzLmdsID0gZ2xDdHg7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcblxyXG4gICAgICAvLyBlbmFibGUgei1idWZmZXJcclxuICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG5cclxuICAgICAgLy8gZW5hYmxlIGFscGhhIHZhbHVlc1xyXG4gICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xyXG4gICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbiAgICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBnbFByb2dyYW0oZ2wsIHZlcnRleFNvdXJjZSwgZnJhZ21lbnRTb3VyY2UpO1xyXG5cclxuICAgICAgbGV0IHRCYWxsID0gbmV3IFRyaWFuZ2xlT2JqQnVpbGRlcignQmFsbCcpO1xyXG4gICAgICB0QmFsbC5hZGRTcGhlcmUoNTAsIEJBTExfUkFESVVTLCBuZXcgVmVjMyhbMCwgMCwgMF0pKTtcclxuICAgICAgdEJhbGwub3B0aW1pemUoTm9ybWFsVHlwZS5TbW9vdGgpO1xyXG4gICAgICB0aGlzLmJhbGwgPSBuZXcgZ2xPYmplY3QoZ2wsIHRCYWxsLCB0aGlzLnByb2dyYW0pO1xyXG5cclxuICAgICAgbGV0IHRBcnJvdyA9IG5ldyBUcmlhbmdsZU9iakJ1aWxkZXIoJ0xpZ2h0IEFycm93Jyk7XHJcbiAgICAgIHRBcnJvdy5hZGRBcnJvdygpO1xyXG4gICAgICB0aGlzLmFycm93ID0gbmV3IGdsT2JqZWN0KGdsLCB0QXJyb3csIHRoaXMucHJvZ3JhbSk7XHJcbiAgICAgIHRoaXMuYXJyb3dPcHRpb25zLmNhbWVyYS51c2VPcnRob2dyYXBoaWMgPSB0cnVlO1xyXG5cclxuICAgICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSg8RWxlbWVudD5nbC5jYW52YXMpO1xyXG4gICAgICBsZXQgY29sb3IgPSBodG1sQ29sb3IuZnJvbUNzcyhzdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvR2xDb2xvcigpO1xyXG4gICAgICBnbC5jbGVhckNvbG9yKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIDEpO1xyXG4gICAgICBnbC5jbGVhcihnbC5ERVBUSF9CVUZGRVJfQklUIHwgZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG5cclxuICAgICAgLy8gdGVzdHNcclxuICAgICAgLypcclxuICAgICAgbGV0IGxpZ2h0ID0gbmV3IFZlYzMoWzAsIDEwLCAwXSk7XHJcbiAgICAgIGxldCBwdCA9IG5ldyBWZWMzKFsyLCAwLCAwXSk7XHJcbiAgICAgIGxldCBtYXQgPSBuZXcgTWF0NCgpO1xyXG4gICAgICBtYXQudHJhbnNsYXRlKG5ldyBWZWMzKFswLCAtMTAwLCAwXSkpO1xyXG4gICAgICBtYXQuc2NhbGUoMC41KTtcclxuICAgICAgbWF0LnJvdFoodG9SYWQoLTkwKSk7XHJcbiAgICAgIG1hdC5yb3RZKHRvUmFkKDQ1KSk7XHJcbiAgICAgIGxldCB4cHQgPSBtYXQubXVsdFZlYzMocHQpO1xyXG4gICAgICBsZXQgeExpZ2h0ID0gbWF0LmludmVyc2UoKS5tdWx0VmVjMyhsaWdodCk7XHJcbiAgICAgIGxldCB4T3JpZ2luID0gbWF0LmludmVyc2UoKS5tdWx0VmVjMyhuZXcgVmVjMyhbMCwgMCwgMF0pKTtcclxuICAgICAgbGV0IHBsYW5lID0gbmV3IFBsYW5lKGxpZ2h0KTtcclxuICAgICAgbGV0IHBsYW5lMiA9IG5ldyBQbGFuZSh4TGlnaHQsIHhPcmlnaW4pO1xyXG4gICAgICBjb25zb2xlLmxvZygnXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xyXG4gICAgICBjb25zb2xlLmxvZygncHQ6ICcgKyBwdC50b1N0cmluZygyKSArICcgICAgICB4bGlnaHQ6ICcgKyB4TGlnaHQudG9TdHJpbmcoMikgKyAnICAgJyArIChwbGFuZTIuZGlzdFRvUHQocHQpICogbWF0LnNjYWxlRmFjdG9ycy54KSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd4cHQ6ICcgKyB4cHQudG9TdHJpbmcoMikgKyAnICAgIGxpZ2h0OiAnICsgbGlnaHQudG9TdHJpbmcoMikgKyAnICAgJyArIHBsYW5lLmRpc3RUb1B0KHhwdCkpO1xyXG4gICAgICBjb25zb2xlLmxvZygneE9yaWdpbjogJyArIHhPcmlnaW4udG9TdHJpbmcoMikpO1xyXG4gICAgICAqL1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZGVsZXRlKCkge1xyXG4gICAgICB0aGlzLm9iai5kZWxldGUoKTtcclxuICAgICAgdGhpcy5mbG9vci5kZWxldGUoKTtcclxuICAgICAgdGhpcy5iYWxsLmRlbGV0ZSgpO1xyXG4gICAgICB0aGlzLmFycm93LmRlbGV0ZSgpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuc2hhZG93RnJhbWVCdWZmZXIpIHtcclxuICAgICAgICAgdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlci5kZWxldGUoKTtcclxuICAgICAgICAgdGhpcy5zaGFkb3dDb2xvclRleHR1cmUuZGVsZXRlKCk7XHJcbiAgICAgICAgIHRoaXMuc2hhZG93RGVwdGhUZXh0dXJlLmRlbGV0ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLm9iaiA9IG51bGw7XHJcbiAgICAgIHRoaXMuZmxvb3IgPSBudWxsO1xyXG4gICAgICB0aGlzLmJhbGwgPSBudWxsO1xyXG4gICAgICB0aGlzLmFycm93ID0gbnVsbDtcclxuICAgICAgdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIHRoaXMuc2hhZG93Q29sb3JUZXh0dXJlID0gbnVsbDtcclxuICAgICAgdGhpcy5zaGFkb3dEZXB0aFRleHR1cmUgPSBudWxsO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmVuZGVyTW9kZUNhblRvZ2dsZUhpZ2hsaWdodHMoKTogYm9vbGVhbiB7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVuZGVyTW9kZSA9PT0gUmVuZGVyTW9kZS5FbXBoYXNpemVIaWdobGlnaHRzIHx8IHRoaXMub3B0aW9ucy5yZW5kZXJNb2RlID09PSBSZW5kZXJNb2RlLkxpZ2h0QW5kU2hhZG93KSB7XHJcbiAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHJvdFgoYW5nbGU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLm9iai5yb3RYKGFuZ2xlKTtcclxuICAgICAgaWYgKHRoaXMubG9ja0Zsb29yID09IGZhbHNlKSB7XHJcbiAgICAgICAgIHRoaXMuZmxvb3Iucm90WChhbmdsZSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBwdWJsaWMgcm90WShhbmdsZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMub2JqLnJvdFkoYW5nbGUpO1xyXG4gICAgICBpZiAodGhpcy5sb2NrRmxvb3IgPT0gZmFsc2UpIHtcclxuICAgICAgICAgdGhpcy5mbG9vci5yb3RZKGFuZ2xlKTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgIHB1YmxpYyByb3RaKGFuZ2xlOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5vYmoucm90WihhbmdsZSk7XHJcbiAgICAgIGlmICh0aGlzLmxvY2tGbG9vciA9PSBmYWxzZSkge1xyXG4gICAgICAgICB0aGlzLmZsb29yLnJvdFooYW5nbGUpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgcHVibGljIHByZVJvdFgoYW5nbGU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLm9iai5wcmVSb3RYKGFuZ2xlKTtcclxuICAgICAgaWYgKHRoaXMubG9ja0Zsb29yID09IGZhbHNlKSB7XHJcbiAgICAgICAgIHRoaXMuZmxvb3IucHJlUm90WChhbmdsZSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBwdWJsaWMgcHJlUm90WShhbmdsZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMub2JqLnByZVJvdFkoYW5nbGUpO1xyXG4gICAgICBpZiAodGhpcy5sb2NrRmxvb3IgPT0gZmFsc2UpIHtcclxuICAgICAgICAgdGhpcy5mbG9vci5wcmVSb3RZKGFuZ2xlKTtcclxuICAgICAgfVxyXG4gICB9XHJcbiAgIHB1YmxpYyBwcmVSb3RaKGFuZ2xlOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5vYmoucHJlUm90WihhbmdsZSk7XHJcbiAgICAgIGlmICh0aGlzLmxvY2tGbG9vciA9PSBmYWxzZSkge1xyXG4gICAgICAgICB0aGlzLmZsb29yLnByZVJvdFooYW5nbGUpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgcHVibGljIHNjYWxlKHNjYWxlOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5vYmouc2NhbGUoc2NhbGUpO1xyXG4gICAgICBpZiAodGhpcy5sb2NrRmxvb3IgPT0gZmFsc2UpIHtcclxuICAgICAgICAgdGhpcy5mbG9vci5zY2FsZShzY2FsZSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG4gICBwdWJsaWMgdHJhbnNsYXRlKG9mZnNldDogVmVjMykge1xyXG4gICAgICB0aGlzLm9iai50cmFuc2xhdGUob2Zmc2V0KTtcclxuICAgICAgaWYgKHRoaXMubG9ja0Zsb29yID09IGZhbHNlKSB7XHJcbiAgICAgICAgIHRoaXMuZmxvb3IudHJhbnNsYXRlKG9mZnNldCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHJvdGF0ZUxpZ2h0KHhSYWQ6IG51bWJlciwgeVJhZDogbnVtYmVyKSB7XHJcbiAgICAgIGxldCBtYXRYID0gTWF0NC5mcm9tUm90WCh5UmFkKTtcclxuICAgICAgbGV0IG1hdFkgPSBNYXQ0LmZyb21Sb3RZKHhSYWQpO1xyXG4gICAgICBsZXQgdmVjID0gVmVjNC5mcm9tVmVjMyh0aGlzLm9wdGlvbnMubGlnaHRQb3MsIDEpO1xyXG4gICAgICB2ZWMgPSBtYXRYLm11bHRWKHZlYyk7XHJcbiAgICAgIHZlYyA9IG1hdFkubXVsdFYodmVjKTtcclxuICAgICAgdGhpcy5vcHRpb25zLmxpZ2h0UG9zID0gdmVjLnh5ejtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCB0T2JqKCk6IFRyaWFuZ2xlT2JqIHtcclxuICAgICAgcmV0dXJuIHRoaXMub2JqLnRPYmo7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzZXRNb2RlbCh0T2JqOiBUcmlhbmdsZU9iaikge1xyXG4gICAgICBpZiAodGhpcy5vYmopIHtcclxuICAgICAgICAgdGhpcy5vYmouZGVsZXRlKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vYmogPSBuZXcgZ2xPYmplY3QodGhpcy5nbCwgdE9iaiwgdGhpcy5wcm9ncmFtKTtcclxuICAgICAgdGhpcy5vcHRpb25zLmNhbWVyYS5zaXplUHJvdmlkZXIgPSBuZXcgT2JqU2l6ZVByb3ZpZGVyKHRoaXMub2JqKTtcclxuXHJcbiAgICAgIC8vIG1vdmUgdGhlIG9iamVjdCBzbyB0aGF0IHRoZSBjZW50ZXIgaXMgYXQgWzAsMCwwXSBhbmQgaXQgaXMgc2NhbGVkXHJcbiAgICAgIC8vIHNvIHRoYXQgaXQncyBkaWFnb25hbCBpcyAyIHVuaXRzIGFjcm9zc1xyXG4gICAgICBsZXQgb2JqU2NhbGUgPSAyLjAgLyB0T2JqLmRpYWdvbmFsO1xyXG4gICAgICB0aGlzLm9iai5hdXRvU2l6ZShuZXcgVmVjMyhbMCwgMCwgMF0pLCAyKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmZsb29yKSB7XHJcbiAgICAgICAgIHRoaXMuZmxvb3IuZGVsZXRlO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCB0Rmxvb3IgPSBuZXcgVHJpYW5nbGVPYmpCdWlsZGVyKCdGbG9vcicpO1xyXG5cclxuICAgICAgLy8gbWFrZSB0aGUgZmxvb3Igc2l6ZSBzbGlnaHRseSBsYXJnZXIgdGhhbiB0aGUgb2JqZWN0LCBjZW50ZXJlZCBhdCB0aGUgYm90dG9tXHJcbiAgICAgIGxldCByYWRpdXMgPSA0O1xyXG4gICAgICBsZXQgcG9zID0gbmV3IFZlYzMoWzAsIC1vYmpTY2FsZSAqIHRPYmouaGVpZ2h0IC8gMiwgMF0pO1xyXG4gICAgICB0Rmxvb3IuYWRkRGlzayg1MCwgcmFkaXVzLCBwb3MpO1xyXG4gICAgICB0aGlzLmZsb29yID0gbmV3IGdsT2JqZWN0KHRoaXMuZ2wsIHRGbG9vciwgdGhpcy5wcm9ncmFtKTtcclxuXHJcbiAgICAgIGxldCB1bmkgPSBuZXcgZ2xVbmlmb3JtKHRoaXMuZ2wsIHRoaXMucHJvZ3JhbSk7XHJcbiAgICAgIHVuaS5zZXQoJ3VGbG9vckNlbnRlcicsIHRGbG9vci5jZW50ZXIpO1xyXG4gICAgICB1bmkuc2V0KCd1Rmxvb3JSYWRpdXMnLCByYWRpdXMpO1xyXG5cclxuICAgICAgLy8gcmVzZXQgdGhlIHZpZXcgYW5kIHRoZSBsaWdodFxyXG4gICAgICB0aGlzLnJlc2V0KFJlc2V0LkFsbCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyByZXNldCh3aGF0OiBSZXNldCkge1xyXG4gICAgICBzd2l0Y2ggKHdoYXQpIHtcclxuICAgICAgICAgY2FzZSBSZXNldC5BbGw6XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXQoUmVzZXQuTGlnaHRzKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNldChSZXNldC5SZW5kZXJpbmcpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0KFJlc2V0LlZpZXcpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIGNhc2UgUmVzZXQuTGlnaHRzOlxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubGlnaHRQb3MgPSBJTklUSUFMX0xJR0hUX1BPUy5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZmFsbG9mZiA9IElOSVRJQUxfRkFMTE9GRjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxpZ2h0SW50ZW5zaXR5ID0gSU5JVElBTF9MSUdIVF9JTlRFTlNJVFk7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZVJhbmdlLmFtYmllbnRJbnRlbnNpdHkgPSBWYWx1ZVJhbmdlLlN0YW5kYXJkLmFtYmllbnRJbnRlbnNpdHk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgY2FzZSBSZXNldC5WaWV3OlxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmlldyA9IElOSVRJQUxfVklFVy5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm9iai5jbGVhclRyYW5zZm9ybXMoKTtcclxuICAgICAgICAgICAgdGhpcy5mbG9vci5jbGVhclRyYW5zZm9ybXMoKTtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNhbWVyYS5leWUgPSBuZXcgVmVjMyhJTklUSUFMX0VZRSk7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jYW1lcmEubG9va0F0ID0gVmVjMy5vcmlnaW47XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jYW1lcmEuem9vbUZhY3RvciA9IDE7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgIGNhc2UgUmVzZXQuUmVuZGVyaW5nOlxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyTW9kZSA9IFJlbmRlck1vZGUuTm9ybWFsO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd0hpZ2hsaWdodHMgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2hpbmluZXNzID0gSU5JVElBTF9TSElOSU5FU1M7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZVJhbmdlID0gVmFsdWVSYW5nZS5TdGFuZGFyZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcclxuXHJcbiAgICAgIHRoaXMucHJvZ3JhbS51c2UoKTtcclxuICAgICAgdGhpcy5yZW5kZXJUb1NoYWRvd01hcCgpO1xyXG4gICAgICB0aGlzLnJlbmRlclRvU2NyZWVuKCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgc2V0VmFsdWVSYW5nZVVuaWZvcm1zKHZhbHVlUmFuZ2U6IFZhbHVlUmFuZ2UpIHtcclxuICAgICAgbGV0IHVuaSA9IG5ldyBnbFVuaWZvcm0odGhpcy5nbCwgdGhpcy5wcm9ncmFtKTtcclxuICAgICAgdW5pLnNldCgndURpZmZ1c2VJbnRlbnNpdHknLCB2YWx1ZVJhbmdlLmRpZmZ1c2VJbnRlbnNpdHkpO1xyXG4gICAgICB1bmkuc2V0KCd1QW1iaWVudEludGVuc2l0eScsIHZhbHVlUmFuZ2Uuc2hhZG93KTtcclxuICAgICAgdW5pLnNldCgndVNwZWN1bGFySW50ZW5zaXR5JywgdmFsdWVSYW5nZS5zcGVjdWxhckludGVuc2l0eSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgc2V0T3B0aW9ucyhvcHRpb25zOiBJUmVuZGVyT3B0aW9ucyk6IGdsVW5pZm9ybSB7XHJcblxyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICBvcHRpb25zLnVzZUN1bGxpbmcgPyBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKSA6IGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcclxuICAgICAgZ2wuY3VsbEZhY2UoZ2wuQkFDSyk7XHJcblxyXG4gICAgICBsZXQgdW5pID0gbmV3IGdsVW5pZm9ybSh0aGlzLmdsLCB0aGlzLnByb2dyYW0pO1xyXG4gICAgICB1bmkuc2V0KCd2aWV3Jywgb3B0aW9ucy52aWV3KTtcclxuICAgICAgdW5pLnNldCgnbGlnaHRWaWV3JywgdGhpcy5saWdodFZpZXcpO1xyXG4gICAgICB1bmkuc2V0KCdwcm9qZWN0aW9uJywgb3B0aW9ucy5jYW1lcmEuZ2V0UHJvamVjdGlvbih0aGlzLmdsKSk7XHJcbiAgICAgIHVuaS5zZXQoJ3VFeWUnLCBvcHRpb25zLmNhbWVyYS5leWUpO1xyXG4gICAgICB1bmkuc2V0KCd1T3J0aG9ncmFwaGljJywgb3B0aW9ucy5jYW1lcmEudXNlT3J0aG9ncmFwaGljKTtcclxuICAgICAgdW5pLnNldCgndVVzZVNoYWRvd3MnLCBvcHRpb25zLnVzZVNoYWRvd3MpO1xyXG4gICAgICB1bmkuc2V0aSgndVJlbmRlck1vZGUnLCBvcHRpb25zLnJlbmRlck1vZGUpO1xyXG4gICAgICB1bmkuc2V0KCd1U2hvd0hpZ2hsaWdodHMnLCBvcHRpb25zLnNob3dIaWdobGlnaHRzIHx8IG9wdGlvbnMucmVuZGVyTW9kZSA9PT0gUmVuZGVyTW9kZS5FbXBoYXNpemVIaWdobGlnaHRzKTtcclxuICAgICAgdW5pLnNldCgndVNoaW5pbmVzcycsIG9wdGlvbnMuc2hpbmluZXNzKTtcclxuXHJcbiAgICAgIGxldCB2YWx1ZVJhbmdlO1xyXG4gICAgICBpZiAob3B0aW9ucy5yZW5kZXJNb2RlID09PSBSZW5kZXJNb2RlLkVtcGhhc2l6ZUhpZ2hsaWdodHMpIHtcclxuICAgICAgICAgdmFsdWVSYW5nZSA9IFZhbHVlUmFuZ2UuRW1waGFzaXplSGlnaGxpZ2h0cztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdmFsdWVSYW5nZSA9IG9wdGlvbnMudmFsdWVSYW5nZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNldFZhbHVlUmFuZ2VVbmlmb3Jtcyh2YWx1ZVJhbmdlKTtcclxuXHJcbiAgICAgIHVuaS5zZXQoJ3VXaGl0ZUNvbG9yJywgb3B0aW9ucy53aGl0ZUNvbG9yKTtcclxuICAgICAgdW5pLnNldCgndUJsYWNrQ29sb3InLCBvcHRpb25zLmJsYWNrQ29sb3IpO1xyXG5cclxuICAgICAgdW5pLnNldGkoJ3VOdW1Db250b3VycycsIG9wdGlvbnMuY29udG91cnMubGVuZ3RoKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmNvbnRvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIHVuaS5zZXQoJ3VDb250b3VyQ29sb3JzWycgKyBpICsgJ10nLCBvcHRpb25zLmNvbnRvdXJzW2ldLmNvbG9yKTtcclxuICAgICAgICAgdW5pLnNldCgndUNvbnRvdXJBbmdsZXNbJyArIGkgKyAnXScsIG9wdGlvbnMuY29udG91cnNbaV0uYW5nbGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB1bmkuc2V0KCd1UG9pbnRMaWdodCcsIG9wdGlvbnMubGlnaHRUeXBlID09PSBMaWdodFR5cGUuUG9pbnQpO1xyXG4gICAgICB1bmkuc2V0KCd1RmFsbG9mZicsIG9wdGlvbnMuZmFsbG9mZik7XHJcbiAgICAgIHVuaS5zZXQoJ3VMaWdodEludGVuc2l0eScsIG9wdGlvbnMubGlnaHRJbnRlbnNpdHkpO1xyXG4gICAgICBpZiAob3B0aW9ucy5mYWxsb2ZmID09PSAwKSB7XHJcbiAgICAgICAgIHVuaS5zZXQoJ3VMaWdodFBvcycsIG9wdGlvbnMubGlnaHRQb3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICAvLyBjb21wdXRlIHRoZSBtaW5pbXVtIGRpc3RhbmNlIHRvIHRoZSBsaWdodC4gV2UnbGwgdXNlIHRoaXMgdmFsdWUgdG8gYXV0by1hZGp1c3RcclxuICAgICAgICAgLy8gdGhlIGxpZ2h0XHJcbiAgICAgICAgIGxldCBkaXN0OiBJTWluTWF4O1xyXG5cclxuICAgICAgICAgLy8gV2UgY2FuIGdldCB0aGUgZGlzdGFuY2UgaW4gdHdvIHdheXMuIDE6IHRyYW5zZm9ybSBhbGwgdGhlIHBvaW50cyBieSB0aGUgbW9kZWxcclxuICAgICAgICAgLy8gbWF0cml4IGFuZCBjb21wdXRlIGRpc3RhbmNlcy4gVGhpcyBpcyBleHBlbnNpdmUgc2luY2Ugd2UgaGF2ZSB0byB0cmFuc2Zvcm0gZWFjaFxyXG4gICAgICAgICAvLyBwb2ludCBzbyB3ZSBpbnN0ZWFkLCAyOiBkbyB0aGUgaW52ZXJzZSB0cmFuc2Zvcm0gdG8gdGhlIGxpZ2h0IGFuZCBjb21wdXRlIHRoZVxyXG4gICAgICAgICAvLyBkaXN0YW5jZSB0byB0aGUgdW50cmFuc2Zvcm1lZCBwb2ludHMuXHJcbiAgICAgICAgIGxldCBib3VuZGluZ1B0cyA9IHRoaXMub2JqLnRPYmouZ2V0Qm91bmRpbmdQdHMoKTtcclxuXHJcbiAgICAgICAgIC8vIGdldCB0aGUgaW52ZXJzZSB0cmFuc2Zvcm0gb2YgdGhlIGxpZ2h0IHBvc2l0aW9uXHJcbiAgICAgICAgIGxldCBvYmogPSB0aGlzLm9iajtcclxuICAgICAgICAgbGV0IG1hdCA9IG9iai5tb2RlbC5tdWx0TShvYmoubm9ybWFsaXplKTtcclxuICAgICAgICAgbGV0IGludmVyc2UgPSBtYXQuaW52ZXJzZSgpO1xyXG4gICAgICAgICBsZXQgeExpZ2h0UG9zID0gaW52ZXJzZS5tdWx0VmVjMyhvcHRpb25zLmxpZ2h0UG9zKTtcclxuXHJcbiAgICAgICAgIGlmIChvcHRpb25zLmxpZ2h0VHlwZSA9PT0gTGlnaHRUeXBlLlBvaW50KSB7XHJcblxyXG4gICAgICAgICAgICBkaXN0ID0gYm91bmRpbmdQdHMuZGlzdFRvUG9pbnQoeExpZ2h0UG9zKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZmlndXJlIG91dCB0aGUgbGlnaHQgcGxhbmUgZm9yIHRoZSBpbnZlcnNlIGxpZ2h0XHJcbiAgICAgICAgICAgIGxldCB4T3JpZ2luID0gaW52ZXJzZS5tdWx0VmVjMyhWZWMzLm9yaWdpbik7XHJcbiAgICAgICAgICAgIGxldCB4UGxhbmUgPSBuZXcgUGxhbmUoeExpZ2h0UG9zLCB4T3JpZ2luKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGRpc3RhbmNlIHRvIHRoZSByYXcgb2JqZWN0IHBvaW50c1xyXG4gICAgICAgICAgICBkaXN0ID0gYm91bmRpbmdQdHMuZGlzdFRvUGxhbmUoeFBsYW5lKTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgLy8gdG8gZ2V0IHRoZSBhY3R1YWwgZGlzdGFuY2UsIHdlIG5vdyBuZWVkIHRvIHJlYXBwbHkgdGhlIHNjYWxlIGZhY3RvciB0b1xyXG4gICAgICAgICAvLyBnZXQgdGhlIHRydWUgZGlzdGFuY2UuIFRoZSBzY2FsZSBmYWN0b3IgaXMgdGhlIHNhbWUgaW4gYWxsIGRpcmVjdGlvbnNcclxuICAgICAgICAgLy8gc28ganVzdCB1c2UgdGhlIHggdmFsdWVcclxuICAgICAgICAgbGV0IHMgPSBvYmoubW9kZWwubXVsdE0ob2JqLm5vcm1hbGl6ZSkuc2NhbGVGYWN0b3JzLng7XHJcbiAgICAgICAgIGRpc3QgPSB7XHJcbiAgICAgICAgICAgIG1pbjogZGlzdC5taW4gKiBzLFxyXG4gICAgICAgICAgICBtYXg6IGRpc3QubWF4ICogcyxcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgLy8gd2UgbmVlZCB0byBjb21wdXRlIHRoZSBkaXN0YW5jZSB0byB0aGUgbGlnaHQgYW5kIHRoZSBsaWdodCBpbnRlbnNpdHkgc3VjaCB0aGF0XHJcbiAgICAgICAgIC8vIHRoZSBjbG9zZXN0IHBvaW50IGdldHMgbGl0IHdpdGggdmFsdWUgMSBhbmQgdGhlIGZ1cnRoZXN0IHBvaW50IG1hdGNoZXMgdGhlXHJcbiAgICAgICAgIC8vIHRhcmdldCBmYWxsb2ZmLlxyXG4gICAgICAgICAvL1xyXG4gICAgICAgICAvLyAtIGQgaXMgdGhlIGRpc3RhbmNlIHRoZSBsaWdodCBuZWVkcyB0byBiZSBmcm9tIHRoZSBjbG9zZXN0IHBvaW50LiBMaWdodCBmYWxscyBvZmZcclxuICAgICAgICAgLy8gd2l0aCB0aGUgc3F1YXJlIG9mIGRpc3RhbmNlLlxyXG4gICAgICAgICAvLyAtIGZhbGxvZmZEaXN0YW5jZSBpcyB0aGUgc2l6ZSBvZiB0aGUgb2JqZWN0XHJcbiAgICAgICAgIGxldCBmYWxsb2ZmRGlzdGFuY2UgPSBkaXN0Lm1heCAtIGRpc3QubWluO1xyXG4gICAgICAgICBsZXQgZCA9IChmYWxsb2ZmRGlzdGFuY2UgKiBNYXRoLnNxcnQoMS4wIC0gb3B0aW9ucy5mYWxsb2ZmKSkgLyAoMS4wIC0gTWF0aC5zcXJ0KDEuMCAtIG9wdGlvbnMuZmFsbG9mZikpO1xyXG5cclxuICAgICAgICAgLy8gaW50ZW5zaXR5ID0gZF4yIHNvIHRoYXQgaW50ZW5zaXR5IGF0IGQgKDEvZF4yKSA9IDEuMFxyXG4gICAgICAgICBsZXQgbGlnaHRJbnRlbnNpdHlBdFNvdXJjZSA9IGQgKiBkO1xyXG4gICAgICAgICB1bmkuc2V0KCd1TGlnaHRJbnRlbnNpdHlBdFNvdXJjZScsIGxpZ2h0SW50ZW5zaXR5QXRTb3VyY2UpO1xyXG5cclxuICAgICAgICAgLy8gYWN0dWFsIGxpZ2h0IHBvc2l0aW9uIGlzIG1lYXN1cmVkIGZyb20gdGhlIG9iamVjdCwgbm90IHRoZSBvcmlnaW4uIFNoaWZ0IFxyXG4gICAgICAgICAvLyBpdCBiYWNrXHJcbiAgICAgICAgIGxldCBvYmpUb09yaWdpbiA9IG9wdGlvbnMubGlnaHRQb3MubWFnbml0dWRlKCkgLSBkaXN0Lm1pbjtcclxuICAgICAgICAgb3B0aW9ucy5saWdodFBvcyA9IG9wdGlvbnMubGlnaHRQb3Mubm9ybWFsaXplKCkubXVsdChkICsgb2JqVG9PcmlnaW4pO1xyXG4gICAgICAgICB1bmkuc2V0KCd1TGlnaHRQb3MnLCBvcHRpb25zLmxpZ2h0UG9zKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHVuaTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSByZW5kZXJUb1NoYWRvd01hcCgpOiB2b2lkIHtcclxuXHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIGxldCBtYXhUZXh0dXJlU2l6ZSA9IE1hdGgubWluKGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9TSVpFKSk7XHJcbiAgICAgIGxldCBkZXNpcmVkU2l6ZSA9IHRoaXMub3B0aW9ucy5jYW1lcmEuem9vbUZhY3RvciAqIE1hdGgubWluKGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgIGxldCBzaXplID0gMjU2O1xyXG4gICAgICB3aGlsZSAoc2l6ZSA8IGRlc2lyZWRTaXplICYmIHNpemUgKiAyIDw9IG1heFRleHR1cmVTaXplKSB7XHJcbiAgICAgICAgIHNpemUgKj0gMjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF0aGlzLnNoYWRvd0ZyYW1lQnVmZmVyIHx8IHNpemUgIT09IHRoaXMuc2hhZG93RnJhbWVCdWZmZXIuc2l6ZSkge1xyXG5cclxuICAgICAgICAgaWYgKHRoaXMuc2hhZG93RnJhbWVCdWZmZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlci5kZWxldGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zaGFkb3dDb2xvclRleHR1cmUuZGVsZXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hhZG93RGVwdGhUZXh0dXJlLmRlbGV0ZSgpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICB0aGlzLnNoYWRvd0ZyYW1lQnVmZmVyID0gbmV3IGdsRnJhbWVCdWZmZXIoZ2wsIHNpemUsIHNpemUpO1xyXG4gICAgICAgICB0aGlzLnNoYWRvd0NvbG9yVGV4dHVyZSA9IHRoaXMuc2hhZG93RnJhbWVCdWZmZXIuY3JlYXRlVGV4dHVyZShnbFRleHR1cmVTdHlsZS5Db2xvcik7XHJcbiAgICAgICAgIHRoaXMuc2hhZG93RGVwdGhUZXh0dXJlID0gdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlci5jcmVhdGVUZXh0dXJlKGdsVGV4dHVyZVN0eWxlLkRlcHRoKTtcclxuXHJcbiAgICAgICAgIHRoaXMuc2hhZG93RnJhbWVCdWZmZXIuYXR0YWNoVGV4dHVyZShnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgdGhpcy5zaGFkb3dDb2xvclRleHR1cmUpO1xyXG4gICAgICAgICB0aGlzLnNoYWRvd0ZyYW1lQnVmZmVyLmF0dGFjaFRleHR1cmUoZ2wuREVQVEhfQVRUQUNITUVOVCwgdGhpcy5zaGFkb3dEZXB0aFRleHR1cmUpO1xyXG5cclxuICAgICAgICAgdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlci5jaGVjaygpO1xyXG4gICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZ2wudmlld3BvcnQoMCwgMCwgdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlci53aWR0aCwgdGhpcy5zaGFkb3dGcmFtZUJ1ZmZlci5oZWlnaHQpO1xyXG4gICAgICB0aGlzLnNoYWRvd0ZyYW1lQnVmZmVyLmJpbmQoKTtcclxuXHJcbiAgICAgIGdsLmNsZWFyKGdsLkRFUFRIX0JVRkZFUl9CSVQgfCBnbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgIGxldCBjZW50ZXIgPSBuZXcgVmVjMyhbMCwgMCwgMF0pO1xyXG4gICAgICBsZXQgdXAgPSBuZXcgVmVjMyhbMCwgMSwgMF0pO1xyXG4gICAgICBsZXQgZXllID0gdGhpcy5vcHRpb25zLmxpZ2h0UG9zO1xyXG4gICAgICBsZXQgbWF0ID0gTWF0NC5tYWtlTG9va0F0KGV5ZSwgY2VudGVyLCB1cCk7XHJcbiAgICAgIG1hdC5zZXQoMCwgMywgMCk7XHJcbiAgICAgIG1hdC5zZXQoMSwgMywgMCk7XHJcbiAgICAgIG1hdC5zZXQoMiwgMywgMCk7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubGlnaHRUeXBlID09PSBMaWdodFR5cGUuRGlyZWN0aW9uYWwpIHtcclxuICAgICAgICAgLy8gdG8gYXZvaWQgY2xpcHBpbmcsIGV4cGFuZCB0aGUgeiByYW5nZSB0byBhbGxvdyBmdWxsIHJvdGF0aW9uIG9mXHJcbiAgICAgICAgIC8vIGFueXRoaW5nIGluIGEgMy0zLTMgY3ViZS5cclxuICAgICAgICAgbGV0IG1heFNpemUgPSBNYXRoLnNxcnQoMjcpO1xyXG4gICAgICAgICBtYXQgPSBNYXQ0Lm1ha2VPcnRobygtMSwgMSwgLTEsIDEsIG1heFNpemUsIC1tYXhTaXplKS5tdWx0TShtYXQpO1xyXG4gICAgICAgICB0aGlzLmxpZ2h0VmlldyA9IG1hdDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgLy8gVE9ETyBtYWtlIHBvaW50IGxpZ2h0IHNvdXJjZXMgd29yayBmb3Igc2hhZG93IG1hcHNcclxuICAgICAgICAgLypcclxuICAgICAgICAgbGV0IGZvdiA9IDIgKiB0b0RlZyhNYXRoLmF0YW4yKDMgLyAyLCBleWUueikpO1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnZm92PScgKyBmb3YpO1xyXG4gICAgICAgICBtYXQgPSBNYXQ0Lm1ha2VQZXJzcGVjdGl2ZShmb3YsIDEsIDAuMSwgMjApLm11bHRNKG1hdCk7XHJcbiAgICAgICAgIHRoaXMubGlnaHRWaWV3ID0gbWF0O1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgICBsZXQgbWF4U2l6ZSA9IE1hdGguc3FydCgyNyk7XHJcbiAgICAgICAgIG1hdCA9IE1hdDQubWFrZU9ydGhvKC0xLCAxLCAtMSwgMSwgbWF4U2l6ZSwgLW1heFNpemUpLm11bHRNKG1hdCk7XHJcbiAgICAgICAgIHRoaXMubGlnaHRWaWV3ID0gbWF0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgdW5pID0gdGhpcy5zZXRPcHRpb25zKHRoaXMub3B0aW9ucyk7XHJcblxyXG4gICAgICAvLyBjaGFuZ2UgdGhlIHZpZXcgbWF0cml4IHNvIHRoYXQgb3VyIHZpZXcgaXMgZnJvbSB0aGUgbGlnaHRcclxuICAgICAgdW5pLnNldCgndmlldycsIHRoaXMubGlnaHRWaWV3KTtcclxuICAgICAgdW5pLnNldCgncHJvamVjdGlvbicsIE1hdDQuaWRlbnRpdHkpO1xyXG5cclxuICAgICAgLy8gZG9uJ3QgdHJ5IHRvIHVzZSB0aGUgc2hhZG93IHRleHR1cmUgd2hpbGUgd2UncmUgY3JlYXRpbmcgaXRcclxuICAgICAgdW5pLnNldCgndVVzZVNoYWRvd3MnLCBmYWxzZSk7XHJcbiAgICAgIHVuaS5zZXRpKCd1UmVuZGVyTW9kZScsIFJlbmRlck1vZGUuTm9ybWFsKTtcclxuXHJcbiAgICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcclxuXHJcbiAgICAgIHRoaXMub2JqLmRyYXcoKTtcclxuXHJcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xyXG4gICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHJlbmRlclRvU2NyZWVuKCk6IHZvaWQge1xyXG5cclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAvLyBkaXNwbGF5IHRoZSBkZXB0aCBidWZmZXIgZm9yIHRlc3RpbmcgcHVycG9zZXNcclxuICAgICAgaWYgKHRoaXMuc2hvd1NoYWRvd01hcCkge1xyXG4gICAgICAgICBnbC5kaXNhYmxlKGdsLkNVTExfRkFDRSk7XHJcbiAgICAgICAgIGxldCB0ciA9IG5ldyBUZXh0dXJlUmVuZGVyZXIoZ2wpO1xyXG4gICAgICAgICB0ci5yZW5kZXIoXHJcbiAgICAgICAgICAgIHRoaXMuc2hhZG93RGVwdGhUZXh0dXJlLFxyXG4gICAgICAgICAgICB0aGlzLnNoYWRvd0ZyYW1lQnVmZmVyLndpZHRoLFxyXG4gICAgICAgICAgICB0aGlzLnNoYWRvd0ZyYW1lQnVmZmVyLmhlaWdodFxyXG4gICAgICAgICApO1xyXG4gICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy5zaGFkb3dEZXB0aFRleHR1cmUuYmluZCgpO1xyXG5cclxuICAgICAgICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSg8RWxlbWVudD5nbC5jYW52YXMpO1xyXG4gICAgICAgICBsZXQgY29sb3IgPSBodG1sQ29sb3IuZnJvbUNzcyhzdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvR2xDb2xvcigpO1xyXG4gICAgICAgICBnbC5jbGVhckNvbG9yKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIDEpO1xyXG4gICAgICAgICBnbC5jbGVhcihnbC5ERVBUSF9CVUZGRVJfQklUIHwgZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG4gICAgICAgICB0aGlzLmRyYXdGbG9vcigpO1xyXG5cclxuICAgICAgICAgLy8gZHJhdyB0aGUgbWFpbiBvYmplY3RcclxuICAgICAgICAgdGhpcy5zZXRPcHRpb25zKHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgIHRoaXMub2JqLmRyYXcoKTtcclxuXHJcbiAgICAgICAgIGdsLmNsZWFyKGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xyXG5cclxuICAgICAgICAgdGhpcy5kcmF3TWluaVZpZXcoKTtcclxuICAgICAgICAgdGhpcy5kcmF3QmFsbCgpO1xyXG5cclxuICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XHJcbiAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBkcmF3Rmxvb3IoKSB7XHJcbiAgICAgIGlmICh0aGlzLnNob3dGbG9vcikge1xyXG5cclxuICAgICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgbGV0IHVuaSA9IHRoaXMuc2V0T3B0aW9ucyh0aGlzLm9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgLy8gc2V0IHRoZSBzcGVjaWFsIG1vZGUgZm9yIHRoZSBmbG9vclxyXG4gICAgICAgICB1bmkuc2V0KCd1UmVuZGVyaW5nRmxvb3InLCB0cnVlKTtcclxuICAgICAgICAgdW5pLnNldCgndVNob3dHcmlkJywgdGhpcy5zaG93R3JpZCk7XHJcblxyXG4gICAgICAgICAvLyBjdWxsIHBvbHlnb25zIHNvIHdlIGRvbid0IHNlZSB0aGUgZmxvb3IgZnJvbSBiZWxvd1xyXG4gICAgICAgICBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKTtcclxuICAgICAgICAgZ2wuY3VsbEZhY2UoZ2wuQkFDSyk7XHJcbiAgICAgICAgIHVuaS5zZXRpKCd1UmVuZGVyTW9kZScsIFJlbmRlck1vZGUuTm9ybWFsKTtcclxuICAgICAgICAgLy90aGlzLnNldFZhbHVlUmFuZ2VVbmlmb3JtcyhWYWx1ZVJhbmdlLlN0YW5kYXJkKTtcclxuXHJcbiAgICAgICAgIHRoaXMuZmxvb3IuZHJhdygpO1xyXG5cclxuICAgICAgICAgdW5pLnNldCgndVJlbmRlcmluZ0Zsb29yJywgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZHJhd01pbmlWaWV3KCkge1xyXG5cclxuICAgICAgaWYgKHRoaXMuc2hvd01pbmlWaWV3KSB7XHJcbiAgICAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xyXG5cclxuICAgICAgICAgbGV0IHVuaSA9IHRoaXMuc2V0T3B0aW9ucyh0aGlzLm9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgbGV0IGNsaXBTcGFjZSA9IHRoaXMub3B0aW9ucy5jYW1lcmEuZ2V0Q2xpcFNwYWNlKGdsKTtcclxuICAgICAgICAgbGV0IHByb2plY3Rpb24gPSBNYXQ0Lm1ha2VPcnRobyhcclxuICAgICAgICAgICAgY2xpcFNwYWNlLmxlZnQsXHJcbiAgICAgICAgICAgIGNsaXBTcGFjZS5yaWdodCxcclxuICAgICAgICAgICAgY2xpcFNwYWNlLmJvdHRvbSxcclxuICAgICAgICAgICAgY2xpcFNwYWNlLnRvcCxcclxuICAgICAgICAgICAgY2xpcFNwYWNlLm5lYXIsXHJcbiAgICAgICAgICAgIGNsaXBTcGFjZS5mYXJcclxuICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgIHVuaS5zZXQoJ3Byb2plY3Rpb24nLCBwcm9qZWN0aW9uKTtcclxuICAgICAgICAgdW5pLnNldCgndU90aHJvZ3JhcGhpYycsIHRydWUpO1xyXG5cclxuICAgICAgICAgLy8gZHJhdyB0aGUgb2JqZWN0IGluIHRoZSB1cHBlciByaWdodCBhdCBhIHJlZHVjZWQgc2l6ZVxyXG4gICAgICAgICBsZXQgdmlldyA9IE1hdDQuaWRlbnRpdHk7XHJcbiAgICAgICAgIHZpZXcuc2NhbGUodGhpcy5taW5pU2l6ZSk7XHJcbiAgICAgICAgIHZpZXcudHJhbnNsYXRlKG5ldyBWZWMzKFtjbGlwU3BhY2UubWF4LnggLSB0aGlzLm1pbmlTaXplLCBjbGlwU3BhY2UubWF4LnkgLSB0aGlzLm1pbmlTaXplLCAwXSkpO1xyXG4gICAgICAgICB1bmkuc2V0KCd2aWV3Jywgdmlldyk7XHJcbiAgICAgICAgIHVuaS5zZXRpKCd1UmVuZGVyTW9kZScsIHRoaXMubWluaVZpZXdTaG93Q29udG91cnMgPyBSZW5kZXJNb2RlLkNvbnRvdXJQbGFuZXMgOiBSZW5kZXJNb2RlLk5vcm1hbCk7XHJcbiAgICAgICAgIHRoaXMub2JqLmRyYXcoKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGRyYXdCYWxsKCkge1xyXG5cclxuICAgICAgaWYgKHRoaXMuc2hvd0JhbGwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBhIHZpZXcgbWF0cml4IHRoYXQgcmVuZGVycyBpbiB0aGUgdXBwZXIgbGVmdFxyXG4gICAgICBsZXQgY2xpcFNwYWNlID0gdGhpcy5vcHRpb25zLmNhbWVyYS5nZXRDbGlwU3BhY2UoZ2wpO1xyXG4gICAgICBsZXQgdmlldyA9IE1hdDQuaWRlbnRpdHk7XHJcbiAgICAgIHZpZXcuc2NhbGUodGhpcy5taW5pU2l6ZSk7XHJcbiAgICAgIHZpZXcudHJhbnNsYXRlKG5ldyBWZWMzKFtjbGlwU3BhY2UubWluLnggKyB0aGlzLm1pbmlTaXplLCBjbGlwU3BhY2UubWF4LnkgLSB0aGlzLm1pbmlTaXplLCAwXSkpO1xyXG4gICAgICB0aGlzLmJhbGxPcHRpb25zLnZpZXcgPSB2aWV3LmNsb25lKCk7XHJcblxyXG4gICAgICB0aGlzLmJhbGxPcHRpb25zLnZhbHVlUmFuZ2UgPSB0aGlzLm9wdGlvbnMudmFsdWVSYW5nZS5jbG9uZSgpO1xyXG4gICAgICB0aGlzLmJhbGxPcHRpb25zLmxpZ2h0UG9zID0gdGhpcy5vcHRpb25zLmxpZ2h0UG9zLmNsb25lKCk7XHJcbiAgICAgIHRoaXMuYmFsbE9wdGlvbnMubGlnaHRUeXBlID0gdGhpcy5vcHRpb25zLmxpZ2h0VHlwZTtcclxuICAgICAgdGhpcy5iYWxsT3B0aW9ucy5mYWxsb2ZmID0gdGhpcy5vcHRpb25zLmZhbGxvZmY7XHJcblxyXG4gICAgICAvLyBUT0RPIGNvbXB1dGUgZGlzdGFuY2UgYW5kIGludGVuc2l0eSBmb3IgbGlnaHQgZm9yIHRoZSBiYWxsXHJcbiAgICAgIHRoaXMuYmFsbE9wdGlvbnMubGlnaHRJbnRlbnNpdHkgPSB0aGlzLm9wdGlvbnMubGlnaHRJbnRlbnNpdHk7XHJcblxyXG4gICAgICB0aGlzLmJhbGxPcHRpb25zLnNob3dIaWdobGlnaHRzID0gdGhpcy5vcHRpb25zLnNob3dIaWdobGlnaHRzO1xyXG4gICAgICB0aGlzLmJhbGxPcHRpb25zLnNoaW5pbmVzcyA9IHRoaXMub3B0aW9ucy5zaGluaW5lc3M7XHJcbiAgICAgIHRoaXMuYmFsbE9wdGlvbnMucmVuZGVyTW9kZSA9IHRoaXMub3B0aW9ucy5yZW5kZXJNb2RlO1xyXG4gICAgICB0aGlzLmJhbGxPcHRpb25zLmNvbnRvdXJzID0gdGhpcy5vcHRpb25zLmNvbnRvdXJzO1xyXG4gICAgICBsZXQgdW5pID0gdGhpcy5zZXRPcHRpb25zKHRoaXMuYmFsbE9wdGlvbnMpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuYmFsbE9wdGlvbnMuZmFsbG9mZiA+IDApIHtcclxuICAgICAgICAgLy8gVE9ETyB0aGlzIGNvZGUgaXMgc2ltaWxhciB0byB0aGUgY29kZSBpbiBzZXRPcHRpb25zLiBDb21iaW5lIGl0LlxyXG4gICAgICAgICBsZXQgZmFsbG9mZkRpc3RhbmNlID0gMS4wOyAvLyBiYWxsIGRpYW1ldGVyXHJcbiAgICAgICAgIGxldCBkID0gKGZhbGxvZmZEaXN0YW5jZSAqIE1hdGguc3FydCgxLjAgLSB0aGlzLmJhbGxPcHRpb25zLmZhbGxvZmYpKSAvICgxLjAgLSBNYXRoLnNxcnQoMS4wIC0gdGhpcy5iYWxsT3B0aW9ucy5mYWxsb2ZmKSk7XHJcblxyXG4gICAgICAgICAvLyBpbnRlbnNpdHkgPSBkXjIgc28gdGhhdCBpbnRlbnNpdHkgYXQgZCAoMS9kXjIpID0gMS4wXHJcbiAgICAgICAgIGxldCBsaWdodEludGVuc2l0eUF0U291cmNlID0gZCAqIGQ7XHJcbiAgICAgICAgIHVuaS5zZXQoJ3VMaWdodEludGVuc2l0eUF0U291cmNlJywgbGlnaHRJbnRlbnNpdHlBdFNvdXJjZSk7XHJcblxyXG4gICAgICAgICAvLyBhY3R1YWwgbGlnaHQgcG9zaXRpb24gaXMgbWVhc3VyZWQgZnJvbSB0aGUgb2JqZWN0LCBub3QgdGhlIG9yaWdpbi4gU2hpZnQgXHJcbiAgICAgICAgIC8vIGl0IGJhY2tcclxuICAgICAgICAgbGV0IG9ialRvT3JpZ2luID0gMC41O1xyXG4gICAgICAgICB0aGlzLmJhbGxPcHRpb25zLmxpZ2h0UG9zID0gdGhpcy5iYWxsT3B0aW9ucy5saWdodFBvcy5ub3JtYWxpemUoKS5tdWx0KGQgKyBvYmpUb09yaWdpbik7XHJcbiAgICAgICAgIHVuaS5zZXQoJ3VMaWdodFBvcycsIHRoaXMuYmFsbE9wdGlvbnMubGlnaHRQb3MpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmJhbGwuZHJhdygpO1xyXG5cclxuICAgICAgLy8gYmFjayBvdXQgYW5nbGVzIGFzIGlmIGxvb2tpbmcgZG93biB0aGUgei1heGlzXHJcbiAgICAgIGxldCB4ID0gLXRoaXMub3B0aW9ucy5saWdodFBvcy54O1xyXG4gICAgICBsZXQgeSA9IC10aGlzLm9wdGlvbnMubGlnaHRQb3MueTtcclxuICAgICAgbGV0IHogPSAtdGhpcy5vcHRpb25zLmxpZ2h0UG9zLno7XHJcblxyXG4gICAgICAvLyBzdGFydCBieSBsb29raW5nIGRvd24gZnJvbSB0aGUgWiBkaXJlY3Rpb25cclxuICAgICAgbGV0IHJhZGl1cyA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG4gICAgICBsZXQgZWxldmF0aW9uQW5nbGUgPSBNYXRoLmFjb3MoeiAvIHJhZGl1cyk7XHJcbiAgICAgIGxldCByb3RhdGlvbkFuZ2xlID0gTWF0aC5hdGFuMih5LCB4KTtcclxuXHJcbiAgICAgIC8vIGZpcnN0IHJlc2V0IHRoaW5ncyBzbyB0aGF0IHdlJ3JlIGxvb2tpbmcgZG93biB0aGUgei1heGlzXHJcbiAgICAgIHRoaXMuYXJyb3cuY2xlYXJUcmFuc2Zvcm1zKCk7XHJcbiAgICAgIHRoaXMuYXJyb3cudHJhbnNsYXRlKG5ldyBWZWMzKFswLjAsIDAuNTUsIDAuMF0pKTtcclxuICAgICAgdGhpcy5hcnJvdy5yb3RYKHRvUmFkKDkwKSk7XHJcblxyXG4gICAgICAvLyByb3RhdGUgdG8gbWF0Y2ggdGhlIGxpZ2h0IHNvdXJjZVxyXG4gICAgICB0aGlzLmFycm93LnJvdFkoLWVsZXZhdGlvbkFuZ2xlKTtcclxuICAgICAgdGhpcy5hcnJvdy5yb3RaKC1yb3RhdGlvbkFuZ2xlKTtcclxuXHJcbiAgICAgIHRoaXMuYXJyb3dPcHRpb25zLnZpZXcgPSB2aWV3LmNsb25lKCk7XHJcbiAgICAgIHRoaXMuc2V0T3B0aW9ucyh0aGlzLmFycm93T3B0aW9ucyk7XHJcbiAgICAgIHRoaXMuYXJyb3cuZHJhdygpO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgdmVydGV4U291cmNlIGZyb20gJy4uLy4uL3NoYWRlcnMvVGV4dHVyZVJlbmRlcmVyVmVydGV4Lmdsc2wnO1xyXG5pbXBvcnQgZnJhZ21lbnRTb3VyY2UgZnJvbSAnLi4vLi4vc2hhZGVycy9UZXh0dXJlUmVuZGVyZXJGcmFnbWVudC5nbHNsJztcclxuaW1wb3J0IHsgZ2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vZ2wvZ2xQcm9ncmFtJztcclxuaW1wb3J0IHsgZ2xCdWZmZXIgfSBmcm9tICcuLi8uLi9nbC9nbEJ1ZmZlcic7XHJcbmltcG9ydCB7IGdsVGV4dHVyZSB9IGZyb20gJy4uLy4uL2dsL2dsVGV4dHVyZSc7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCBkb2VzIHRoZSB3b3JrIG9mIGJ1aWxkaW5nIHRoZSBQYXRoIFRyYWNlZCB0ZXh0dXJlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGV4dHVyZVJlbmRlcmVyIHtcclxuXHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwcml2YXRlIHByb2dyYW06IGdsUHJvZ3JhbTtcclxuICAgcHJpdmF0ZSB2ZXJ0ZXhCdWZmZXI6IGdsQnVmZmVyO1xyXG5cclxuICAgcHJpdmF0ZSB2ZXJ0aWNlcyA9IFtcclxuICAgICAgLTEsIC0xLFxyXG4gICAgICAtMSwgKzEsXHJcbiAgICAgICsxLCAtMSxcclxuICAgICAgKzEsICsxXHJcbiAgIF07XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoZ2xDdHg6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpIHtcclxuXHJcbiAgICAgIHRoaXMuZ2wgPSBnbEN0eDtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBzaGFkZXJcclxuICAgICAgdGhpcy5wcm9ncmFtID0gbmV3IGdsUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgdmVydGV4IGJ1ZmZlciAtIHRoZSBibG9jayB3ZSdsbCBkcmF3IG91ciByZW5kZXJlZCB0ZXh0dXJlIG9uXHJcbiAgICAgIHRoaXMudmVydGV4QnVmZmVyID0gbmV3IGdsQnVmZmVyKGdsLCB0aGlzLnByb2dyYW0sICd2ZXJ0ZXgnKTtcclxuICAgICAgdGhpcy52ZXJ0ZXhCdWZmZXIudXBsb2FkKHRoaXMudmVydGljZXMpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmVuZGVyKHRleHR1cmU6IGdsVGV4dHVyZSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuXHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcblxyXG4gICAgICBnbC52aWV3cG9ydChcclxuICAgICAgICAgKGdsLmNhbnZhcy53aWR0aCAtIHdpZHRoKSAvIDIsXHJcbiAgICAgICAgIChnbC5jYW52YXMuaGVpZ2h0IC0gaGVpZ2h0KSAvIDIsXHJcbiAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICBoZWlnaHRcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMucHJvZ3JhbS51c2UoKTtcclxuICAgICAgdGV4dHVyZS5iaW5kKCk7XHJcbiAgICAgIHRoaXMudmVydGV4QnVmZmVyLmJpbmQoMik7XHJcblxyXG4gICAgICAvLyBkaXNwbGF5IHRoZSBtYWluIHNjcmVlblxyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxuICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBWYWx1ZVJhbmdlIH0gZnJvbSBcIi4vVmFsdWVSYW5nZVwiO1xyXG5pbXBvcnQgeyBjbGFtcCwgbWl4LCB0b1JhZCB9IGZyb20gXCIuLi8uLi9VdGlsL0dsb2JhbHNcIjtcclxuXHJcbmV4cG9ydCBsZXQgREVGQVVMVF9USFJFU0hPTEQxID0gNDA7XHJcbmV4cG9ydCBsZXQgREVGQVVMVF9USFJFU0hPTEQyID0gNzA7XHJcblxyXG4vKipcclxuICogS2VlcHMgdHJhY2sgb2YgMyB2YWx1ZXMgaW4gdGhlIGxpZ2h0IGJhc2VkIG9uIHRocmVzaG9sZCBhbmdsZXNcclxuICogZm9yIHRoZSBwbGFuZXMgKHN0b3JlZCBpbiBkZWdyZWVzKSBhbmQgdGhlIGxpZ2h0IHJhbmdlIChoaWdobGlnaHRcclxuICogdG8gc2hhZG93IGNvbG9ycykuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmFsdWVQbGFuZXMge1xyXG4gICBwcml2YXRlIF90aHJlc2hvbGQxID0gREVGQVVMVF9USFJFU0hPTEQxO1xyXG4gICBwcml2YXRlIF90aHJlc2hvbGQyID0gREVGQVVMVF9USFJFU0hPTEQyO1xyXG4gICBwcml2YXRlIHZhbHVlUmFuZ2U6IFZhbHVlUmFuZ2U7XHJcblxyXG4gICBwcml2YXRlIF9saWdodExpZ2h0OiBudW1iZXI7XHJcbiAgIHByaXZhdGUgX21pZExpZ2h0OiBudW1iZXI7XHJcbiAgIHByaXZhdGUgX2RhcmtMaWdodDogbnVtYmVyO1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHZhbHVlUmFuZ2U6IFZhbHVlUmFuZ2UpIHtcclxuICAgICAgdGhpcy52YWx1ZVJhbmdlID0gdmFsdWVSYW5nZTtcclxuICAgICAgdGhpcy5jb21wdXRlQ29sb3JzKCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgdGhyZXNob2xkMSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fdGhyZXNob2xkMTtcclxuICAgfVxyXG4gICBwdWJsaWMgc2V0IHRocmVzaG9sZDEoYW5nbGVJbkRlZzogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuX3RocmVzaG9sZDEgPSBhbmdsZUluRGVnO1xyXG4gICAgICB0aGlzLl90aHJlc2hvbGQyID0gTWF0aC5tYXgodGhpcy5fdGhyZXNob2xkMiwgYW5nbGVJbkRlZyk7XHJcbiAgICAgIHRoaXMuY29tcHV0ZUNvbG9ycygpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IHRocmVzaG9sZDIoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3RocmVzaG9sZDI7XHJcbiAgIH1cclxuICAgcHVibGljIHNldCB0aHJlc2hvbGQyKGFuZ2xlSW5EZWc6IG51bWJlcikge1xyXG4gICAgICB0aGlzLl90aHJlc2hvbGQyID0gYW5nbGVJbkRlZztcclxuICAgICAgdGhpcy5fdGhyZXNob2xkMSA9IE1hdGgubWluKHRoaXMuX3RocmVzaG9sZDEsIGFuZ2xlSW5EZWcpO1xyXG4gICAgICB0aGlzLmNvbXB1dGVDb2xvcnMoKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBoaWdobGlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVSYW5nZS5tYXhJbnRlbnNpdHk7XHJcbiAgIH1cclxuICAgcHVibGljIHNldCBoaWdobGlnaHQodmFsOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy52YWx1ZVJhbmdlLm1heEludGVuc2l0eSA9IHZhbDtcclxuICAgICAgdGhpcy5jb21wdXRlQ29sb3JzKCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgc2hhZG93KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlUmFuZ2UuYW1iaWVudEludGVuc2l0eTtcclxuICAgfVxyXG4gICBwdWJsaWMgc2V0IHNoYWRvdyh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlUmFuZ2UuYW1iaWVudEludGVuc2l0eSA9IHZhbDtcclxuICAgICAgdGhpcy5jb21wdXRlQ29sb3JzKCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgbGlnaHRMaWdodCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbGlnaHRMaWdodDtcclxuICAgfVxyXG4gICBwdWJsaWMgZ2V0IG1pZExpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9taWRMaWdodDtcclxuICAgfVxyXG4gICBwdWJsaWMgZ2V0IGRhcmtMaWdodCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fZGFya0xpZ2h0O1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNvbG9yQXQoZGVnOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICBkZWcgPSBjbGFtcChkZWcsIDAsIDkwKTtcclxuICAgICAgcmV0dXJuIG1peCh0aGlzLnNoYWRvdywgdGhpcy5oaWdobGlnaHQgLSB0aGlzLnZhbHVlUmFuZ2Uuc3BlY3VsYXJJbnRlbnNpdHksIE1hdGguY29zKHRvUmFkKGRlZykpKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNvbXB1dGVDb2xvcnMoKSB7XHJcbiAgICAgIHRoaXMuX2xpZ2h0TGlnaHQgPSB0aGlzLmNvbG9yQXQoMC41ICogdGhpcy50aHJlc2hvbGQxKTtcclxuICAgICAgdGhpcy5fbWlkTGlnaHQgPSB0aGlzLmNvbG9yQXQobWl4KHRoaXMudGhyZXNob2xkMSwgdGhpcy50aHJlc2hvbGQyLCAwLjUpKTtcclxuICAgICAgdGhpcy5fZGFya0xpZ2h0ID0gdGhpcy5jb2xvckF0KCh0aGlzLnRocmVzaG9sZDIgKyA5MCkgLyAyKTtcclxuICAgfVxyXG59IiwiaW1wb3J0IHZlcnRleFNvdXJjZSBmcm9tICcuLi8uLi9zaGFkZXJzL1ZpZXdlclZlcnRleC5nbHNsJztcclxuaW1wb3J0IGZyYWdtZW50U291cmNlIGZyb20gJy4uLy4uL3NoYWRlcnMvVmlld2VyRnJhZ21lbnQuZ2xzbCc7XHJcbmltcG9ydCB7IFZlYzMsIFZlYzIgfSBmcm9tICcuLi8uLi9VdGlsM0QvVmVjJztcclxuaW1wb3J0IHsgZ2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vZ2wvZ2xQcm9ncmFtJztcclxuaW1wb3J0IHsgUG9pbnRlckV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uL0dVSS9Qb2ludGVyRXZlbnRIYW5kbGVyJztcclxuaW1wb3J0IHsgVmFsdWVQbGFuZXMgfSBmcm9tICcuL1ZhbHVlUGxhbmVzJztcclxuaW1wb3J0IHsgZ2xPYmplY3QgfSBmcm9tICcuL2dsT2JqZWN0JztcclxuaW1wb3J0IHsgaXNNb2JpbGUsIGNsYW1wLCB0b0RlZywgdG9SYWQgfSBmcm9tICcuLi8uLi9VdGlsL0dsb2JhbHMnO1xyXG5pbXBvcnQgeyBUcmlhbmdsZU9iakJ1aWxkZXIgfSBmcm9tICcuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmpCdWlsZGVyJztcclxuaW1wb3J0IHsgTm9ybWFsVHlwZSB9IGZyb20gJy4uLy4uL1V0aWwzRC9UcmlhbmdsZU9iaic7XHJcbmltcG9ydCB7IGdsQ29sb3IzIH0gZnJvbSAnLi4vLi4vZ2wvZ2xDb2xvcic7XHJcbmltcG9ydCB7IGdsVW5pZm9ybSB9IGZyb20gJy4uLy4uL2dsL2dsVW5pZm9ybSc7XHJcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi8uLi9VdGlsM0QvTWF0JztcclxuaW1wb3J0IHsgVmFsdWVSYW5nZSB9IGZyb20gJy4vVmFsdWVSYW5nZSc7XHJcbmltcG9ydCB7IFJlbmRlck1vZGUgfSBmcm9tICcuL1JlbmRlcmVyJztcclxuaW1wb3J0IHsgaHRtbENvbG9yIH0gZnJvbSAnLi4vLi4vVXRpbC9odG1sQ29sb3InO1xyXG5cclxuZXhwb3J0IHR5cGUgVGhyZXNob2xkQ2hhbmdlRnVuY3Rpb24gPSAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbmNvbnN0IEJBTExfUkFESVVTID0gMC44NzU7XHJcbmNvbnN0IEJBTExfQ0VOVEVSID0gbmV3IFZlYzMoWy0wLjYsIC0wLjYsIDBdKTtcclxuXHJcblxyXG5sZXQgQ1RSTF9TSVpFID0gMTUwO1xyXG5jb25zdCBOT01JTkFMX0RJU1BMQVlfU0laRSA9IDE1MDtcclxuY29uc3QgTk9NSU5BTF9LTk9CX0xFTkdUSCA9IDI1O1xyXG5jb25zdCBOT01JTkFMX0tOT0JfUkFESVVTID0gMTA7XHJcblxyXG5leHBvcnQgY2xhc3MgVmFsdWVQbGFuZXNDdHJsIHtcclxuICAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gICBwcml2YXRlIHByb2dyYW06IGdsUHJvZ3JhbTtcclxuICAgcHJpdmF0ZSBvdmVybGF5OiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgcHJpdmF0ZSBtb3VzZU9mZnNldCA9IG5ldyBWZWMyKCk7XHJcbiAgIHByaXZhdGUgaGl0ID0gMDtcclxuICAgcHJpdmF0ZSBoYW5kbGVyOiBQb2ludGVyRXZlbnRIYW5kbGVyO1xyXG4gICBwcml2YXRlIHByb3ZpZGVyOiBWYWx1ZVBsYW5lcztcclxuXHJcbiAgIHByaXZhdGUgYmFsbDogZ2xPYmplY3Q7XHJcbiAgIHByaXZhdGUgYXJyb3c6IGdsT2JqZWN0O1xyXG4gICBwcml2YXRlIGJhbGxDZW50ZXI6IFZlYzI7XHJcbiAgIHByaXZhdGUgcDE6IFZlYzI7XHJcbiAgIHByaXZhdGUgcDI6IFZlYzI7XHJcblxyXG4gICBwcml2YXRlIG9uVGhyZXNob2xkMUNoYW5nZTogVGhyZXNob2xkQ2hhbmdlRnVuY3Rpb247XHJcbiAgIHByaXZhdGUgb25UaHJlc2hvbGQyQ2hhbmdlOiBUaHJlc2hvbGRDaGFuZ2VGdW5jdGlvbjtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgICAgcGFyZW50OiBIVE1MRWxlbWVudCxcclxuICAgICAgcHJvdmlkZXI6IFZhbHVlUGxhbmVzLFxyXG4gICAgICBvblRocmVzaG9sZDFDaGFuZ2U6IFRocmVzaG9sZENoYW5nZUZ1bmN0aW9uLFxyXG4gICAgICBvblRocmVzaG9sZDJDaGFuZ2U6IFRocmVzaG9sZENoYW5nZUZ1bmN0aW9uXHJcbiAgICkge1xyXG5cclxuICAgICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgICAgIENUUkxfU0laRSA9IDMwMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xyXG4gICAgICB0aGlzLm9uVGhyZXNob2xkMUNoYW5nZSA9IG9uVGhyZXNob2xkMUNoYW5nZTtcclxuICAgICAgdGhpcy5vblRocmVzaG9sZDJDaGFuZ2UgPSBvblRocmVzaG9sZDJDaGFuZ2U7XHJcblxyXG4gICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgIGNhbnZhcy5pZCA9ICdWYWx1ZVBsYW5lc0NhbnZhcyc7XHJcbiAgICAgIGNhbnZhcy53aWR0aCA9IENUUkxfU0laRTtcclxuICAgICAgY2FudmFzLmhlaWdodCA9IENUUkxfU0laRTtcclxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcblxyXG4gICAgICAvLyBkb24ndCB0cnkgdG8gbWFrZSB0aGUgY2FudmFzIHRyYW5zcGFyZW50IHRvIHRoZSB1bmRlcmx5aW5nIGh0bWwuIFRoaXNcclxuICAgICAgLy8gc2VlbXMgdG8gbGltaXQgdGhlIGFscGhhIHZhbHVlcyB3ZSBjYW4gdXNlIGluIG91ciBzY2VuZS5cclxuICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcblxyXG4gICAgICBpZiAoIWNvbnRleHQpIHtcclxuICAgICAgICAgLy8gVE9ETyBkaXNwbGF5IGEgbWVzc2FnZSBhYm91dCBub3QgYmVpbmcgYWJsZSB0byBjcmVhdGUgYSBXZWJHTCBjb250ZXh0XHJcbiAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5hYmxlIHRvIGdldCBXZWJHTCBjb250ZXh0XCIpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2wgPSBjb250ZXh0O1xyXG5cclxuICAgICAgdGhpcy5vdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5pZCA9ICdWYWx1ZVBsYW5lc092ZXJsYXlDYW52YXMnO1xyXG4gICAgICB0aGlzLm92ZXJsYXkud2lkdGggPSBDVFJMX1NJWkU7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5oZWlnaHQgPSBDVFJMX1NJWkU7XHJcblxyXG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5KTtcclxuXHJcbiAgICAgIHRoaXMuaGFuZGxlciA9IG5ldyBQb2ludGVyRXZlbnRIYW5kbGVyKHRoaXMub3ZlcmxheSk7XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vbkRvd24gPSAocG9zOiBWZWMyKSA9PiB0aGlzLm9uRG93bihwb3MpO1xyXG4gICAgICB0aGlzLmhhbmRsZXIub25EcmFnID0gKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpID0+IHRoaXMub25EcmFnKHBvcywgZGVsdGEpO1xyXG5cclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG5cclxuICAgICAgdGhpcy5wcm9ncmFtID0gbmV3IGdsUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XHJcblxyXG4gICAgICBsZXQgdEJhbGwgPSBuZXcgVHJpYW5nbGVPYmpCdWlsZGVyKCdCYWxsJyk7XHJcbiAgICAgIHRCYWxsLmFkZFNwaGVyZSg1MCwgQkFMTF9SQURJVVMsIEJBTExfQ0VOVEVSKTtcclxuICAgICAgdEJhbGwub3B0aW1pemUoTm9ybWFsVHlwZS5TbW9vdGgpO1xyXG4gICAgICB0aGlzLmJhbGwgPSBuZXcgZ2xPYmplY3QoZ2wsIHRCYWxsLCB0aGlzLnByb2dyYW0pO1xyXG5cclxuICAgICAgbGV0IHRBcnJvdyA9IG5ldyBUcmlhbmdsZU9iakJ1aWxkZXIoJ0xpZ2h0IEFycm93Jyk7XHJcbiAgICAgIHRBcnJvdy5hZGRBcnJvdygpO1xyXG4gICAgICB0aGlzLmFycm93ID0gbmV3IGdsT2JqZWN0KGdsLCB0QXJyb3csIHRoaXMucHJvZ3JhbSk7XHJcblxyXG4gICAgICB0aGlzLmRyYXcoKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvbkRvd24ocG9zOiBWZWMyKSB7XHJcblxyXG4gICAgICB0aGlzLmhpdFRlc3QocG9zKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBoaXRUZXN0KHBvczogVmVjMikge1xyXG4gICAgICBsZXQgZDEgPSB0aGlzLnAxLmRpc3RhbmNlKHBvcyk7XHJcbiAgICAgIGxldCBkMiA9IHRoaXMucDIuZGlzdGFuY2UocG9zKTtcclxuXHJcbiAgICAgIGNvbnN0IEhJVF9SQURJVVMgPSBOT01JTkFMX0tOT0JfUkFESVVTICogKENUUkxfU0laRSAvIE5PTUlOQUxfRElTUExBWV9TSVpFKTtcclxuICAgICAgaWYgKGQxIDwgSElUX1JBRElVUyAmJiBkMSA8PSBkMikge1xyXG4gICAgICAgICB0aGlzLmhpdCA9IDE7XHJcbiAgICAgICAgIHRoaXMubW91c2VPZmZzZXQgPSBuZXcgVmVjMihbdGhpcy5wMS54IC0gcG9zLngsIHRoaXMucDEueSAtIHBvcy55XSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoZDIgPCBISVRfUkFESVVTICYmIGQyIDw9IGQxKSB7XHJcbiAgICAgICAgIHRoaXMuaGl0ID0gMjtcclxuICAgICAgICAgdGhpcy5tb3VzZU9mZnNldCA9IG5ldyBWZWMyKFt0aGlzLnAyLnggLSBwb3MueCwgdGhpcy5wMi55IC0gcG9zLnldKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy5oaXQgPSAwO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb25EcmFnKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpIHtcclxuICAgICAgaWYgKHRoaXMuaGl0ID4gMCkge1xyXG4gICAgICAgICBsZXQgaGl0UHQgPSBuZXcgVmVjMihbcG9zLnggKyB0aGlzLm1vdXNlT2Zmc2V0LngsIHBvcy55ICsgdGhpcy5tb3VzZU9mZnNldC55XSk7XHJcbiAgICAgICAgIGhpdFB0LnggPSBNYXRoLm1heChoaXRQdC54LCB0aGlzLmJhbGxDZW50ZXIueCk7XHJcbiAgICAgICAgIGhpdFB0LnkgPSBNYXRoLm1pbihoaXRQdC55LCB0aGlzLmJhbGxDZW50ZXIueSk7XHJcbiAgICAgICAgIGxldCByYWRpdXMgPSB0aGlzLmJhbGxDZW50ZXIuZGlzdGFuY2UoaGl0UHQpO1xyXG4gICAgICAgICBsZXQgYW5nbGUgPSBjbGFtcCh0b0RlZyhNYXRoLmFzaW4oKGhpdFB0LnggLSB0aGlzLmJhbGxDZW50ZXIueCkgLyByYWRpdXMpKSwgMCwgOTApO1xyXG4gICAgICAgICBpZiAodGhpcy5oaXQgPT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLnRocmVzaG9sZDEgPSBhbmdsZTtcclxuICAgICAgICAgICAgdGhpcy5vblRocmVzaG9sZDFDaGFuZ2UoYW5nbGUpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLnRocmVzaG9sZDIgPSBhbmdsZTtcclxuICAgICAgICAgICAgdGhpcy5vblRocmVzaG9sZDJDaGFuZ2UoYW5nbGUpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHRvR0xDb2xvcih2YWw6IG51bWJlcik6IGdsQ29sb3IzIHtcclxuICAgICAgcmV0dXJuIG5ldyBnbENvbG9yMyhbdmFsLCB2YWwsIHZhbF0pO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHNldFN0ZFVuaWZvcm1zKCk6IGdsVW5pZm9ybSB7XHJcblxyXG4gICAgICBsZXQgdW5pID0gbmV3IGdsVW5pZm9ybSh0aGlzLmdsLCB0aGlzLnByb2dyYW0pO1xyXG4gICAgICB1bmkuc2V0KCd2aWV3JywgTWF0NC5pZGVudGl0eSk7XHJcbiAgICAgIHVuaS5zZXQoJ3Byb2plY3Rpb24nLCBNYXQ0Lm9ydGhvKTtcclxuICAgICAgdW5pLnNldCgndUV5ZScsIG5ldyBWZWMzKFswLCAwLCAxXSkpO1xyXG4gICAgICB1bmkuc2V0KCd1T3J0aG9ncmFwaGljJywgdHJ1ZSk7XHJcblxyXG4gICAgICB1bmkuc2V0KCd1RGlmZnVzZUludGVuc2l0eScsIFZhbHVlUmFuZ2UuU3RhbmRhcmQuZGlmZnVzZUludGVuc2l0eSk7XHJcbiAgICAgIHVuaS5zZXQoJ3VBbWJpZW50SW50ZW5zaXR5JywgVmFsdWVSYW5nZS5TdGFuZGFyZC5zaGFkb3cpO1xyXG4gICAgICB1bmkuc2V0KCd1U3BlY3VsYXJJbnRlbnNpdHknLCBWYWx1ZVJhbmdlLlN0YW5kYXJkLnNwZWN1bGFySW50ZW5zaXR5KTtcclxuICAgICAgdW5pLnNldCgndUxpZ2h0SW50ZW5zaXR5JywgMS4wKTtcclxuICAgICAgdW5pLnNldCgndUZhbGxvZmYnLCAwKTtcclxuXHJcbiAgICAgIHVuaS5zZXQoJ3VXaGl0ZUNvbG9yJywgZ2xDb2xvcjMubW9kZWxXaGl0ZSk7XHJcbiAgICAgIHVuaS5zZXQoJ3VCbGFja0NvbG9yJywgZ2xDb2xvcjMubW9kZWxCbGFjayk7XHJcblxyXG4gICAgICBsZXQgY29udG91ckNvbG9ycyA9IFtcclxuICAgICAgICAgdGhpcy50b0dMQ29sb3IodGhpcy5wcm92aWRlci5saWdodExpZ2h0KSxcclxuICAgICAgICAgdGhpcy50b0dMQ29sb3IodGhpcy5wcm92aWRlci5taWRMaWdodCksXHJcbiAgICAgICAgIHRoaXMudG9HTENvbG9yKHRoaXMucHJvdmlkZXIuZGFya0xpZ2h0KSxcclxuICAgICAgXVxyXG4gICAgICB1bmkuc2V0aSgndU51bUNvbnRvdXJzJywgY29udG91ckNvbG9ycy5sZW5ndGgpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRvdXJDb2xvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgdW5pLnNldCgndUNvbnRvdXJDb2xvcnNbJyArIGkgKyAnXScsIGNvbnRvdXJDb2xvcnNbaV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB1bmkuc2V0KCd1Q29udG91ckFuZ2xlc1swXScsIHRoaXMucHJvdmlkZXIudGhyZXNob2xkMSk7XHJcbiAgICAgIHVuaS5zZXQoJ3VDb250b3VyQW5nbGVzWzFdJywgdGhpcy5wcm92aWRlci50aHJlc2hvbGQyKTtcclxuICAgICAgdW5pLnNldCgndUNvbnRvdXJBbmdsZXNbMl0nLCA5MCk7XHJcblxyXG4gICAgICByZXR1cm4gdW5pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZHJhdygpIHtcclxuXHJcbiAgICAgIHRoaXMuZHJhd0JhbGwoKTtcclxuICAgICAgdGhpcy5kcmF3T3ZlcmxheSgpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGRyYXdCYWxsKCkge1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgIGxldCB1bmkgPSB0aGlzLnNldFN0ZFVuaWZvcm1zKCk7XHJcblxyXG4gICAgICAvLyBhbHdheXMgcmVuZGVyIHdpdGggYmFuZHNcclxuICAgICAgdW5pLnNldGkoJ3VSZW5kZXJNb2RlJywgUmVuZGVyTW9kZS5Db250b3VyUGxhbmVzKTtcclxuXHJcbiAgICAgIC8vIHNob290IHRoZSBsaWdodCBzdHJhaWdodCBkb3duXHJcbiAgICAgIHVuaS5zZXQoJ3VMaWdodFBvcycsIG5ldyBWZWMzKFswLCAxLCAwXSkpO1xyXG5cclxuICAgICAgLy8gZG9uJ3QgY2FzdCBzaGFkb3dzXHJcbiAgICAgIHVuaS5zZXQoJ3VVc2VTaGFkb3dzJywgZmFsc2UpO1xyXG5cclxuICAgICAgLy8gcmVuZGVyIHRoZSBiYWxsXHJcbiAgICAgIHRoaXMuYmFsbC5kcmF3KCk7XHJcblxyXG4gICAgICAvLyBkcmF3IHRoZSBhcnJvd1xyXG4gICAgICB1bmkuc2V0KCd1TGlnaHRQb3MnLCBuZXcgVmVjMyhbLTEsIC0wLjUsIDAuNV0pKTtcclxuICAgICAgdW5pLnNldGkoJ3VSZW5kZXJNb2RlJywgUmVuZGVyTW9kZS5Ob3JtYWwpO1xyXG5cclxuICAgICAgLy8gZmlyc3QgcmVzZXQgdGhpbmdzIHNvIHRoYXQgd2UncmUgbG9va2luZyBkb3duIHRoZSB6LWF4aXNcclxuICAgICAgdGhpcy5hcnJvdy5jbGVhclRyYW5zZm9ybXMoKTtcclxuICAgICAgdGhpcy5hcnJvdy5zY2FsZSgxLjI1KVxyXG4gICAgICB0aGlzLmFycm93LnRyYW5zbGF0ZShuZXcgVmVjMyhbQkFMTF9DRU5URVIueCwgQkFMTF9DRU5URVIueSArIEJBTExfUkFESVVTICsgMC4xLCAwLjBdKSk7XHJcblxyXG4gICAgICB1bmkuc2V0KCd1V2hpdGVDb2xvcicsIG5ldyBnbENvbG9yMyhbMS4wLCAxLjAsIDAuNV0pKTtcclxuICAgICAgdW5pLnNldCgndUJsYWNrQ29sb3InLCBodG1sQ29sb3IuYmxhY2sudG9HbENvbG9yKCkpO1xyXG4gICAgICB1bmkuc2V0KCd1QW1iaWVudEludGVuc2l0eScsIDAuNCk7XHJcbiAgICAgIHVuaS5zZXQoJ3VEaWZmdXNlSW50ZW5zaXR5JywgMC42KTtcclxuICAgICAgdGhpcy5hcnJvdy5kcmF3KCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZHJhd092ZXJsYXkoKSB7XHJcbiAgICAgIGxldCBjdHggPSB0aGlzLm92ZXJsYXkuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgdGhpcy5iYWxsQ2VudGVyID0gbmV3IFZlYzIoW1xyXG4gICAgICAgICBDVFJMX1NJWkUgKiAoMSArIEJBTExfQ0VOVEVSLngpIC8gMixcclxuICAgICAgICAgQ1RSTF9TSVpFICogKDEgLSBCQUxMX0NFTlRFUi55KSAvIDJcclxuICAgICAgXSk7XHJcblxyXG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIENUUkxfU0laRSwgQ1RSTF9TSVpFKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdsaW1lZ3JlZW4nO1xyXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snXHJcblxyXG4gICAgICBjb25zdCBLTk9CX0xFTkdUSCA9IE5PTUlOQUxfS05PQl9MRU5HVEggKiAoQ1RSTF9TSVpFIC8gTk9NSU5BTF9ESVNQTEFZX1NJWkUpO1xyXG4gICAgICBjb25zdCBLTk9CX1JBRElVUyA9IE5PTUlOQUxfS05PQl9SQURJVVMgKiAoQ1RSTF9TSVpFIC8gTk9NSU5BTF9ESVNQTEFZX1NJWkUpO1xyXG4gICAgICBsZXQgciA9IENUUkxfU0laRSAqIEJBTExfUkFESVVTIC8gMjtcclxuICAgICAgbGV0IHMxID0gdGhpcy5nZXRQdCh0aGlzLmJhbGxDZW50ZXIsIHRoaXMucHJvdmlkZXIudGhyZXNob2xkMSwgcik7XHJcbiAgICAgIHRoaXMucDEgPSB0aGlzLmdldFB0KHRoaXMuYmFsbENlbnRlciwgdGhpcy5wcm92aWRlci50aHJlc2hvbGQxLCByICsgS05PQl9MRU5HVEgpO1xyXG4gICAgICBsZXQgczIgPSB0aGlzLmdldFB0KHRoaXMuYmFsbENlbnRlciwgdGhpcy5wcm92aWRlci50aHJlc2hvbGQyLCByKTtcclxuICAgICAgdGhpcy5wMiA9IHRoaXMuZ2V0UHQodGhpcy5iYWxsQ2VudGVyLCB0aGlzLnByb3ZpZGVyLnRocmVzaG9sZDIsIHIgKyBLTk9CX0xFTkdUSCk7XHJcblxyXG4gICAgICBjdHgubGluZVdpZHRoID0gKDEgLyAxNTApICogQ1RSTF9TSVpFO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5tb3ZlVG8oczEueCwgczEueSk7XHJcbiAgICAgIGN0eC5saW5lVG8odGhpcy5wMS54LCB0aGlzLnAxLnkpO1xyXG4gICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5hcmModGhpcy5wMS54LCB0aGlzLnAxLnksIEtOT0JfUkFESVVTLCAwLCB0b1JhZCgzNjApKTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHgubW92ZVRvKHMyLngsIHMyLnkpO1xyXG4gICAgICBjdHgubGluZVRvKHRoaXMucDIueCwgdGhpcy5wMi55KTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguYXJjKHRoaXMucDIueCwgdGhpcy5wMi55LCBLTk9CX1JBRElVUywgMCwgdG9SYWQoMzYwKSk7XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBnZXRQdChjZW50ZXI6IFZlYzIsIHRocmVzaG9sZDogbnVtYmVyLCByYWRpdXM6IG51bWJlcik6IFZlYzIge1xyXG5cclxuICAgICAgbGV0IG95ID0gcmFkaXVzICogTWF0aC5zaW4odG9SYWQoOTAgLSB0aHJlc2hvbGQpKTtcclxuICAgICAgbGV0IG94ID0gcmFkaXVzICogTWF0aC5jb3ModG9SYWQoOTAgLSB0aHJlc2hvbGQpKTtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgVmVjMihbY2VudGVyLnggKyBveCwgY2VudGVyLnkgLSBveV0pO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBQYW5lbCB9IGZyb20gXCIuLi8uLi9HVUkvUGFuZWxcIjtcclxuaW1wb3J0IHsgVmFsdWVQbGFuZXMgfSBmcm9tIFwiLi9WYWx1ZVBsYW5lc1wiO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiLi4vLi4vR1VJL1NsaWRlclwiO1xyXG5pbXBvcnQgeyBWYWx1ZVBsYW5lc0N0cmwgfSBmcm9tIFwiLi9WYWx1ZVBsYW5lc0N0cmxcIjtcclxuaW1wb3J0IHsgVmFsdWVSYW5nZSB9IGZyb20gXCIuL1ZhbHVlUmFuZ2VcIjtcclxuaW1wb3J0IHsgZ2xDb2xvcjMgfSBmcm9tIFwiLi4vLi4vZ2wvZ2xDb2xvclwiO1xyXG5pbXBvcnQgeyBSZW5kZXJlciwgQ29udG91ciB9IGZyb20gXCIuL1JlbmRlcmVyXCI7XHJcblxyXG5leHBvcnQgdHlwZSBWYWx1ZVBsYW5lc0NoYW5nZUZ1bmN0aW9uID0gKHBhbmVsOiBWYWx1ZVBsYW5lc1BhbmVsKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZhbHVlUGxhbmVzUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gICBwdWJsaWMgdmFsdWVQbGFuZXM6IFZhbHVlUGxhbmVzO1xyXG4gICBwcml2YXRlIGhpZ2hsaWdodFNsaWRlcjogU2xpZGVyXHJcbiAgIHByaXZhdGUgbGlnaHRMaWdodFNsaWRlcjogU2xpZGVyO1xyXG4gICBwcml2YXRlIG1pZExpZ2h0U2xpZGVyOiBTbGlkZXI7XHJcbiAgIHByaXZhdGUgZGFya0xpZ2h0U2xpZGVyOiBTbGlkZXI7XHJcbiAgIHByaXZhdGUgc2hhZG93U2xpZGVyOiBTbGlkZXI7XHJcbiAgIHByaXZhdGUgdmFsdWVQbGFuZXNDdHJsOiBWYWx1ZVBsYW5lc0N0cmw7XHJcbiAgIHB1YmxpYyBvbkNoYW5nZTogVmFsdWVQbGFuZXNDaGFuZ2VGdW5jdGlvbjtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50LCBpZDogc3RyaW5nLCB2YWx1ZVJhbmdlOiBWYWx1ZVJhbmdlKSB7XHJcbiAgICAgIHN1cGVyKHBhcmVudCwgaWQpO1xyXG5cclxuICAgICAgdGhpcy52YWx1ZVBsYW5lcyA9IG5ldyBWYWx1ZVBsYW5lcyh2YWx1ZVJhbmdlKTtcclxuXHJcbiAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgZGl2LmNsYXNzTmFtZSA9ICdTbGlkZXJzRGl2JztcclxuICAgICAgdGhpcy5kaXYuYXBwZW5kQ2hpbGQoZGl2KTtcclxuXHJcbiAgICAgIHRoaXMuY3JlYXRlQ3RybHNFbGVtZW50cyhkaXYpO1xyXG5cclxuICAgICAgdGhpcy52YWx1ZVBsYW5lc0N0cmwgPSBuZXcgVmFsdWVQbGFuZXNDdHJsKFxyXG4gICAgICAgICB0aGlzLmRpdixcclxuICAgICAgICAgdGhpcy52YWx1ZVBsYW5lcyxcclxuICAgICAgICAgKHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJzKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSxcclxuICAgICAgICAgKHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJzKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNyZWF0ZUN0cmxzRWxlbWVudHMocGFyZW50OiBIVE1MRWxlbWVudCkge1xyXG5cclxuICAgICAgdGhpcy5oaWdobGlnaHRTbGlkZXIgPSBuZXcgU2xpZGVyKHBhcmVudCwge1xyXG4gICAgICAgICBpZDogJ0hpZ2hsaWdodCcsXHJcbiAgICAgICAgIGxhYmVsOiAnSGlnaGxpZ2h0JyxcclxuICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICBtYXg6IDEsXHJcbiAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlUGxhbmVzLmhpZ2hsaWdodCxcclxuICAgICAgICAgY29sb3JzOiBbZ2xDb2xvcjMubW9kZWxCbGFjay50b0h0bWxDb2xvcigpLCBnbENvbG9yMy5tb2RlbFdoaXRlLnRvSHRtbENvbG9yKCldLFxyXG4gICAgICAgICBvbmlucHV0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVQbGFuZXMuaGlnaGxpZ2h0ID0gdGhpcy5oaWdobGlnaHRTbGlkZXIudmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2xpZGVycygpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlUGxhbmVzQ3RybC5kcmF3KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSxcclxuICAgICAgICAgZ2V0VGV4dDogKHNsaWRlcjogU2xpZGVyKSA9PiB7IHJldHVybiAoMTAwICogc2xpZGVyLnZhbHVlKS50b0ZpeGVkKDApICsgXCIlXCIgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMubGlnaHRMaWdodFNsaWRlciA9IG5ldyBTbGlkZXIocGFyZW50LCB7XHJcbiAgICAgICAgIGlkOiAnTGlnaHRMaWdodCcsXHJcbiAgICAgICAgIGxhYmVsOiAnTGlnaHQgTGlnaHQnLFxyXG4gICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgIG1heDogMSxcclxuICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVQbGFuZXMubGlnaHRMaWdodCxcclxuICAgICAgICAgY29sb3JzOiBbZ2xDb2xvcjMubW9kZWxCbGFjay50b0h0bWxDb2xvcigpLCBnbENvbG9yMy5tb2RlbFdoaXRlLnRvSHRtbENvbG9yKCldLFxyXG4gICAgICAgICBnZXRUZXh0OiAoc2xpZGVyOiBTbGlkZXIpID0+IHsgcmV0dXJuICgxMDAgKiBzbGlkZXIudmFsdWUpLnRvRml4ZWQoMCkgKyBcIiVcIiB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmxpZ2h0TGlnaHRTbGlkZXIucmFuZ2UuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy5taWRMaWdodFNsaWRlciA9IG5ldyBTbGlkZXIocGFyZW50LCB7XHJcbiAgICAgICAgIGlkOiAnTWlkTGlnaHQnLFxyXG4gICAgICAgICBsYWJlbDogJ01pZCBMaWdodCcsXHJcbiAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgbWF4OiAxLFxyXG4gICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVBsYW5lcy5taWRMaWdodCxcclxuICAgICAgICAgY29sb3JzOiBbZ2xDb2xvcjMubW9kZWxCbGFjay50b0h0bWxDb2xvcigpLCBnbENvbG9yMy5tb2RlbFdoaXRlLnRvSHRtbENvbG9yKCldLFxyXG4gICAgICAgICBnZXRUZXh0OiAoc2xpZGVyOiBTbGlkZXIpID0+IHsgcmV0dXJuICgxMDAgKiBzbGlkZXIudmFsdWUpLnRvRml4ZWQoMCkgKyBcIiVcIiB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLm1pZExpZ2h0U2xpZGVyLnJhbmdlLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgIHRoaXMuZGFya0xpZ2h0U2xpZGVyID0gbmV3IFNsaWRlcihwYXJlbnQsIHtcclxuICAgICAgICAgaWQ6ICdEYXJrTGlnaHQnLFxyXG4gICAgICAgICBsYWJlbDogJ0RhcmsgTGlnaHQnLFxyXG4gICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgIG1heDogMSxcclxuICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVQbGFuZXMuZGFya0xpZ2h0LFxyXG4gICAgICAgICBjb2xvcnM6IFtnbENvbG9yMy5tb2RlbEJsYWNrLnRvSHRtbENvbG9yKCksIGdsQ29sb3IzLm1vZGVsV2hpdGUudG9IdG1sQ29sb3IoKV0sXHJcbiAgICAgICAgIGdldFRleHQ6IChzbGlkZXI6IFNsaWRlcikgPT4geyByZXR1cm4gKDEwMCAqIHNsaWRlci52YWx1ZSkudG9GaXhlZCgwKSArIFwiJVwiIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuZGFya0xpZ2h0U2xpZGVyLnJhbmdlLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgIHRoaXMuc2hhZG93U2xpZGVyID0gbmV3IFNsaWRlcihwYXJlbnQsIHtcclxuICAgICAgICAgaWQ6ICdTaGFkb3cnLFxyXG4gICAgICAgICBsYWJlbDogJ1NoYWRvdycsXHJcbiAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgbWF4OiAxLFxyXG4gICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVBsYW5lcy5zaGFkb3csXHJcbiAgICAgICAgIGNvbG9yczogW2dsQ29sb3IzLm1vZGVsQmxhY2sudG9IdG1sQ29sb3IoKSwgZ2xDb2xvcjMubW9kZWxXaGl0ZS50b0h0bWxDb2xvcigpXSxcclxuICAgICAgICAgb25pbnB1dDogKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlUGxhbmVzLnNoYWRvdyA9IHRoaXMuc2hhZG93U2xpZGVyLnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlcnMoKTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZVBsYW5lc0N0cmwuZHJhdygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH0sXHJcbiAgICAgICAgIGdldFRleHQ6IChzbGlkZXI6IFNsaWRlcikgPT4geyByZXR1cm4gKDEwMCAqIHNsaWRlci52YWx1ZSkudG9GaXhlZCgwKSArIFwiJVwiIH1cclxuICAgICAgfSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgdXBkYXRlU2xpZGVycygpIHtcclxuICAgICAgdGhpcy5oaWdobGlnaHRTbGlkZXIudmFsdWUgPSB0aGlzLnZhbHVlUGxhbmVzLmhpZ2hsaWdodDtcclxuICAgICAgdGhpcy5saWdodExpZ2h0U2xpZGVyLnZhbHVlID0gdGhpcy52YWx1ZVBsYW5lcy5saWdodExpZ2h0O1xyXG4gICAgICB0aGlzLm1pZExpZ2h0U2xpZGVyLnZhbHVlID0gdGhpcy52YWx1ZVBsYW5lcy5taWRMaWdodDtcclxuICAgICAgdGhpcy5kYXJrTGlnaHRTbGlkZXIudmFsdWUgPSB0aGlzLnZhbHVlUGxhbmVzLmRhcmtMaWdodDtcclxuICAgICAgdGhpcy5zaGFkb3dTbGlkZXIudmFsdWUgPSB0aGlzLnZhbHVlUGxhbmVzLnNoYWRvdztcclxuICAgfVxyXG5cclxuICAgcHVibGljIHRvUmVuZGVyZXIocmVuZGVyZXI6IFJlbmRlcmVyKSB7XHJcbiAgICAgIHJlbmRlcmVyLm9wdGlvbnMuY29udG91cnMgPSBbXHJcbiAgICAgICAgIG5ldyBDb250b3VyKHRoaXMudmFsdWVQbGFuZXMubGlnaHRMaWdodCwgdGhpcy52YWx1ZVBsYW5lcy50aHJlc2hvbGQxKSxcclxuICAgICAgICAgbmV3IENvbnRvdXIodGhpcy52YWx1ZVBsYW5lcy5taWRMaWdodCwgdGhpcy52YWx1ZVBsYW5lcy50aHJlc2hvbGQyKSxcclxuICAgICAgICAgbmV3IENvbnRvdXIodGhpcy52YWx1ZVBsYW5lcy5kYXJrTGlnaHQsIDkwKVxyXG4gICAgICBdO1xyXG4gICAgICByZW5kZXJlci5vcHRpb25zLnZhbHVlUmFuZ2UgPSBuZXcgVmFsdWVSYW5nZShcclxuICAgICAgICAgdGhpcy52YWx1ZVBsYW5lcy5oaWdobGlnaHQsXHJcbiAgICAgICAgIHRoaXMudmFsdWVQbGFuZXMuc2hhZG93LFxyXG4gICAgICAgICB0aGlzLnZhbHVlUGxhbmVzLmhpZ2hsaWdodCAtIHRoaXMudmFsdWVQbGFuZXMubGlnaHRMaWdodFxyXG4gICAgICApO1xyXG5cclxuICAgfVxyXG59IiwiLyoqXHJcbiAqIEtlZXBzIHRyYWNrIG9mIGEgdmFsdWUgcmFuZ2UgLSBoaWdobGlnaHQgdG8gc2hhZG93IGNvbG9yLiBBIG1pbmltdW1cclxuICogZGlmZmVyZW50aWFsIGlzIGtlcHQgYmV0d2VlbiB0aGUgdHdvIHdoZW4gb25lIGlzIGNoYW5nZWRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZVJhbmdlIHtcclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgZ2V0IFN0YW5kYXJkKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFZhbHVlUmFuZ2UoMS4wLCAwLjIsIDAuMSk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgZ2V0IEVtcGhhc2l6ZUhpZ2hsaWdodHMoKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmFsdWVSYW5nZSgxLjAsIDAuMiwgMC43NSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgX21heEludGVuc2l0eTogbnVtYmVyO1xyXG4gICBwcml2YXRlIF9hbWJpZW50SW50ZW5zaXR5OiBudW1iZXI7XHJcbiAgIHByaXZhdGUgX3NwZWN1bGFySW50ZW5zaXR5OiBudW1iZXI7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgIG1heEludGVuc2l0eTogbnVtYmVyLFxyXG4gICAgICBhbWJpZW50SW50ZW5zaXR5OiBudW1iZXIsXHJcbiAgICAgIHNwZWN1bGFySW50ZW5zaXR5OiBudW1iZXJcclxuICAgKSB7XHJcbiAgICAgIHRoaXMuX21heEludGVuc2l0eSA9IG1heEludGVuc2l0eTtcclxuICAgICAgdGhpcy5fYW1iaWVudEludGVuc2l0eSA9IGFtYmllbnRJbnRlbnNpdHk7XHJcbiAgICAgIHRoaXMuX3NwZWN1bGFySW50ZW5zaXR5ID0gc3BlY3VsYXJJbnRlbnNpdHk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjbG9uZSgpOiBWYWx1ZVJhbmdlIHtcclxuICAgICAgcmV0dXJuIG5ldyBWYWx1ZVJhbmdlKFxyXG4gICAgICAgICB0aGlzLm1heEludGVuc2l0eSxcclxuICAgICAgICAgdGhpcy5hbWJpZW50SW50ZW5zaXR5LFxyXG4gICAgICAgICB0aGlzLnNwZWN1bGFySW50ZW5zaXR5XHJcbiAgICAgICk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgc3BlY3VsYXJJbnRlbnNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3NwZWN1bGFySW50ZW5zaXR5O1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IG1heEludGVuc2l0eSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbWF4SW50ZW5zaXR5O1xyXG4gICB9XHJcbiAgIHB1YmxpYyBzZXQgbWF4SW50ZW5zaXR5KHZhbDogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuX21heEludGVuc2l0eSA9IE1hdGgubWluKE1hdGgubWF4KHZhbCwgdGhpcy5fc3BlY3VsYXJJbnRlbnNpdHkpLCAxLjApO1xyXG4gICAgICB0aGlzLl9hbWJpZW50SW50ZW5zaXR5ID0gTWF0aC5taW4odGhpcy5fYW1iaWVudEludGVuc2l0eSwgdGhpcy5fbWF4SW50ZW5zaXR5IC0gdGhpcy5fc3BlY3VsYXJJbnRlbnNpdHkpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGFtYmllbnRJbnRlbnNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2FtYmllbnRJbnRlbnNpdHk7XHJcbiAgIH1cclxuICAgcHVibGljIHNldCBhbWJpZW50SW50ZW5zaXR5KHZhbDogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuc2hhZG93ID0gdmFsO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IHNoYWRvdygpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fYW1iaWVudEludGVuc2l0eTtcclxuICAgfVxyXG4gICBwdWJsaWMgc2V0IHNoYWRvdyh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLl9hbWJpZW50SW50ZW5zaXR5ID0gTWF0aC5tYXgoTWF0aC5taW4odmFsLCAxIC0gdGhpcy5fc3BlY3VsYXJJbnRlbnNpdHkpLCAwKTtcclxuICAgICAgdGhpcy5fbWF4SW50ZW5zaXR5ID0gTWF0aC5tYXgodGhpcy5fbWF4SW50ZW5zaXR5LCB0aGlzLl9hbWJpZW50SW50ZW5zaXR5ICsgdGhpcy5fc3BlY3VsYXJJbnRlbnNpdHkpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGRpZmZ1c2VJbnRlbnNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWF4SW50ZW5zaXR5IC0gdGhpcy5fYW1iaWVudEludGVuc2l0eSAtIHRoaXMuX3NwZWN1bGFySW50ZW5zaXR5O1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBDb250b3VyLCBSZW5kZXJlciwgTGlnaHRUeXBlLCBSZXNldCwgUmVuZGVyTW9kZSB9IGZyb20gXCIuL1JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IGdsQ29sb3IzIH0gZnJvbSBcIi4uLy4uL2dsL2dsQ29sb3JcIjtcclxuaW1wb3J0IHsgSUFwcCB9IGZyb20gXCIuLi8uLi9JQXBwXCI7XHJcbmltcG9ydCB7IE92ZXJsYXlDYW52YXMsIFRleHRMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9HVUkvT3ZlcmxheUNhbnZhc1wiO1xyXG5pbXBvcnQgeyBQb2ludGVyRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4uLy4uL0dVSS9Qb2ludGVyRXZlbnRIYW5kbGVyXCI7XHJcbmltcG9ydCB7IFBlcnNwZWN0aXZlUGFuZWwgfSBmcm9tIFwiLi9QZXJzcGVjdGl2ZVBhbmVsXCI7XHJcbmltcG9ydCB7IFZhbHVlUGxhbmVzUGFuZWwgfSBmcm9tIFwiLi9WYWx1ZVBsYW5lc1BhbmVsXCI7XHJcbmltcG9ydCB7IGhzdkNvbG9yIH0gZnJvbSBcIi4uLy4uL1V0aWwvaHN2Q29sb3JcIjtcclxuaW1wb3J0IHsgRlBTIH0gZnJvbSBcIi4uLy4uL1V0aWwvRlBTXCI7XHJcbmltcG9ydCB7IE1vZGVsTG9hZGVyIH0gZnJvbSBcIi4vTW9kZWxMb2FkZXJcIjtcclxuaW1wb3J0IHsgaHRtbENvbG9yIH0gZnJvbSBcIi4uLy4uL1V0aWwvaHRtbENvbG9yXCI7XHJcbmltcG9ydCB7IFZlYzIsIFZlYzMsIFZlYzQgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL1ZlY1wiO1xyXG5pbXBvcnQgeyB0b1JhZCwgaXNNb2JpbGUgfSBmcm9tIFwiLi4vLi4vVXRpbC9HbG9iYWxzXCI7XHJcbmltcG9ydCB7IE5vcm1hbFR5cGUgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL1RyaWFuZ2xlT2JqXCI7XHJcbmltcG9ydCB7IFBhbmVsIH0gZnJvbSBcIi4uLy4uL0dVSS9QYW5lbFwiO1xyXG5pbXBvcnQgeyBWYWx1ZVJhbmdlIH0gZnJvbSBcIi4vVmFsdWVSYW5nZVwiO1xyXG5pbXBvcnQgeyBNZW51YmFyLCBTdWJNZW51IH0gZnJvbSBcIi4uLy4uL0dVSS9NZW51XCI7XHJcbmltcG9ydCB7IGNyZWF0ZU1vZGVsc01lbnUgfSBmcm9tIFwiLi9Nb2RlbHNNZW51XCI7XHJcbmltcG9ydCB7IFJhZGlvYnV0dG9uIH0gZnJvbSBcIi4uLy4uL0dVSS9SYWRpb2J1dHRvblwiO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiLi4vLi4vR1VJL1NsaWRlclwiO1xyXG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gXCIuLi8uLi9HVUkvQ2hlY2tib3hcIjtcclxuaW1wb3J0IHsgVHJpYW5nbGVPYmpCdWlsZGVyIH0gZnJvbSBcIi4uLy4uL1V0aWwzRC9UcmlhbmdsZU9iakJ1aWxkZXJcIjtcclxuXHJcbmVudW0gUG9pbnRlck1vZGUge1xyXG4gICBWaWV3LFxyXG4gICBMaWdodCxcclxufVxyXG5cclxuY29uc3QgQ09MT1JfQ09OVE9VUlMgPSBbXHJcbiAgIG5ldyBDb250b3VyKG5ldyBnbENvbG9yMyhbMS4wMCwgMC4yMCwgMC4yMF0pLCAxMCksIC8vIHJlZFxyXG4gICBuZXcgQ29udG91cihuZXcgZ2xDb2xvcjMoWzEuMDAsIDAuNTUsIDAuMjVdKSwgMjApLCAvLyBvcmFuZ2VcclxuICAgbmV3IENvbnRvdXIobmV3IGdsQ29sb3IzKFsxLjAwLCAwLjgxLCAwLjI1XSksIDMwKSwgLy8gbGlnaHQgb3JhbmdlXHJcbiAgIG5ldyBDb250b3VyKG5ldyBnbENvbG9yMyhbMS4wMCwgMS4wMCwgMC4wMF0pLCA0MCksIC8vIHllbGxvd1xyXG4gICBuZXcgQ29udG91cihuZXcgZ2xDb2xvcjMoWzAuMzAsIDEuMDAsIDAuMTBdKSwgNTApLCAvLyBncmVlblxyXG4gICBuZXcgQ29udG91cihuZXcgZ2xDb2xvcjMoWzAuMjUsIDAuOTAsIDAuOTBdKSwgNjApLCAvLyBjeWFuXHJcbiAgIG5ldyBDb250b3VyKG5ldyBnbENvbG9yMyhbMC41MCwgMC41MCwgMS4wMF0pLCA3MCksIC8vIGxpZ2h0IGJsdWVcclxuICAgbmV3IENvbnRvdXIobmV3IGdsQ29sb3IzKFswLjIwLCAwLjIwLCAxLjAwXSksIDgwKSwgLy8gYmx1ZVxyXG4gICBuZXcgQ29udG91cihuZXcgZ2xDb2xvcjMoWzAuMzAsIDAuMTEsIDAuNDBdKSwgOTApLCAvLyBwdXJwbGVcclxuXVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3ZXJBcHAgaW1wbGVtZW50cyBJQXBwIHtcclxuICAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCA9IG51bGw7XHJcbiAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyO1xyXG4gICBwcml2YXRlIHBvaW50ZXJNb2RlOiBQb2ludGVyTW9kZSA9IFBvaW50ZXJNb2RlLlZpZXc7XHJcbiAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheUNhbnZhcztcclxuICAgcHJpdmF0ZSBoYW5kbGVyOiBQb2ludGVyRXZlbnRIYW5kbGVyO1xyXG4gICBwcml2YXRlIHJvdGF0ZUxpZ2h0V2l0aE9iamVjdCA9IGZhbHNlO1xyXG4gICBwcml2YXRlIHBlcnNwZWN0aXZlUGFuZWw6IFBlcnNwZWN0aXZlUGFuZWw7XHJcbiAgIHByaXZhdGUgdmFsdWVQbGFuZXNQYW5lbDogVmFsdWVQbGFuZXNQYW5lbDtcclxuICAgcHJpdmF0ZSBiYXNlQmFja2dyb3VuZENvbG9yOiBoc3ZDb2xvcjtcclxuXHJcbiAgIHByaXZhdGUgZGlydHk6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICBwcml2YXRlIGFuaW1hdGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgcHJpdmF0ZSBhbmltYXRpb25GcmFtZTogbnVtYmVyO1xyXG4gICBwcml2YXRlIGZwcyA9IG5ldyBGUFMoKTtcclxuXHJcbiAgIHByaXZhdGUgcXVlcnk6IHN0cmluZztcclxuXHJcbiAgIHByaXZhdGUgbG9hZGVyID0gbmV3IE1vZGVsTG9hZGVyKCk7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IocXVlcnk6IHN0cmluZykge1xyXG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjcmVhdGUoZGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG5cclxuICAgICAgZGl2LmlkID0gJ1ZpZXdlckFwcCc7XHJcblxyXG4gICAgICBjb25zdCB2aWV3Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZpZXdDb250YWluZXIuaWQgPSAnVmlld0NvbnRhaW5lcic7XHJcbiAgICAgIHZpZXdDb250YWluZXIuY2xhc3NOYW1lID0gJ0NvbnRhaW5lcic7XHJcbiAgICAgIGRpdi5hcHBlbmRDaGlsZCh2aWV3Q29udGFpbmVyKTtcclxuXHJcbiAgICAgIHRoaXMuY3JlYXRlVmlld0VsZW1lbnRzKHZpZXdDb250YWluZXIpO1xyXG4gICAgICB0aGlzLmNyZWF0ZVBlcnNwZWN0aXZlUGFuZWwoZGl2KTtcclxuICAgICAgdGhpcy5jcmVhdGVWYWx1ZVBsYW5lc1BhbmVsKGRpdik7XHJcbiAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG5cclxuICAgICAgdGhpcy5sb2FkTW9kZWwodGhpcy5xdWVyeSk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpO1xyXG4gICAgICB0aGlzLnBlcnNwZWN0aXZlUGFuZWwuZGVsZXRlKCk7XHJcbiAgICAgIHRoaXMudmFsdWVQbGFuZXNQYW5lbC5kZWxldGUoKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBjcmVhdGVWaWV3RWxlbWVudHMocGFyZW50OiBIVE1MRWxlbWVudCkge1xyXG5cclxuICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICBjYW52YXMuaWQgPSAnTWFpbkNhbnZhcyc7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG5cclxuICAgICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xyXG4gICAgICB0aGlzLmJhc2VCYWNrZ3JvdW5kQ29sb3IgPSBoc3ZDb2xvci5mcm9tSHRtbENvbG9yKGh0bWxDb2xvci5mcm9tQ3NzKHN0eWxlLmJhY2tncm91bmRDb2xvcikpO1xyXG5cclxuICAgICAgdGhpcy5vdmVybGF5ID0gbmV3IE92ZXJsYXlDYW52YXMocGFyZW50KTtcclxuXHJcbiAgICAgIC8vIGRvbid0IHRyeSB0byBtYWtlIHRoZSBjYW52YXMgdHJhbnNwYXJlbnQgdG8gdGhlIHVuZGVybHlpbmcgaHRtbC4gVGhpc1xyXG4gICAgICAvLyBzZWVtcyB0byBsaW1pdCB0aGUgYWxwaGEgdmFsdWVzIHdlIGNhbiB1c2UgaW4gb3VyIHNjZW5lLlxyXG4gICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIHsgYWxwaGE6IGZhbHNlIH0pIGFzIFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgICAgIGlmICghY29udGV4dCkge1xyXG4gICAgICAgICAvLyBUT0RPIGRpc3BsYXkgYSBtZXNzYWdlIGFib3V0IG5vdCBiZWluZyBhYmxlIHRvIGNyZWF0ZSBhIFdlYkdMIGNvbnRleHRcclxuICAgICAgICAgY29uc29sZS5sb2coXCJVbmFibGUgdG8gZ2V0IFdlYkdMIGNvbnRleHRcIik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5nbCA9IGNvbnRleHQ7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKHRoaXMuZ2wpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnNob3dNaW5pVmlldyA9IGZhbHNlO1xyXG5cclxuICAgICAgdGhpcy5oYW5kbGVyID0gbmV3IFBvaW50ZXJFdmVudEhhbmRsZXIoY2FudmFzKTtcclxuICAgICAgdGhpcy5oYW5kbGVyLm9uRHJhZyA9IChwb3M6IFZlYzIsIGRlbHRhOiBWZWMyKSA9PiB0aGlzLm9uRHJhZyhwb3MsIGRlbHRhKTtcclxuICAgICAgdGhpcy5oYW5kbGVyLm9uRG93biA9ICgpID0+IHtcclxuICAgICAgICAgdGhpcy5hbmltYXRlID0gZmFsc2U7XHJcbiAgICAgICAgIHRoaXMub3ZlcmxheS5jbGVhcigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vbkNsaWNrID0gKHBvczogVmVjMikgPT4gdGhpcy5vbkNsaWNrKHBvcyk7XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vbkRibENsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLmFuaW1hdGUgPSB0cnVlO1xyXG4gICAgICAgICB0aGlzLmZwcyA9IG5ldyBGUFMoKTtcclxuICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vblNjYWxlID0gKHNjYWxlOiBudW1iZXIsIGNoYW5nZTogbnVtYmVyKSA9PiB0aGlzLm9uU2NhbGUoc2NhbGUsIGNoYW5nZSk7XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vblJvdGF0ZSA9IChhbmdsZTogbnVtYmVyLCBkZWx0YTogbnVtYmVyKSA9PiB0aGlzLm9uUm90YXRlKGFuZ2xlLCBkZWx0YSk7XHJcbiAgICAgIHRoaXMuaGFuZGxlci5vblRyYW5zbGF0ZSA9IChkZWx0YTogVmVjMikgPT4gdGhpcy5vblRyYW5zbGF0ZShkZWx0YSk7XHJcblxyXG4gICAgICBkb2N1bWVudC5vbmtleWRvd24gPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICAgbGV0IGFuZ2xlID0gOTA7XHJcbiAgICAgICAgIGlmIChldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIGFuZ2xlID0gMTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxyXG4gICAgICAgICAgICAgICB0aGlzLnJvdGF0ZU9iamVjdHModG9SYWQoYW5nbGUpLCAwKTtcclxuICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM4OiAvLyB1cFxyXG4gICAgICAgICAgICAgICB0aGlzLnJvdGF0ZU9iamVjdHMoMCwgdG9SYWQoYW5nbGUpKTtcclxuICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM5OiAvLyByaWdodFxyXG4gICAgICAgICAgICAgICB0aGlzLnJvdGF0ZU9iamVjdHModG9SYWQoLWFuZ2xlKSwgMCk7XHJcbiAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0MDogLy8gZG93blxyXG4gICAgICAgICAgICAgICB0aGlzLnJvdGF0ZU9iamVjdHMoMCwgdG9SYWQoLWFuZ2xlKSk7XHJcbiAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBkb2N1bWVudC5vbmtleXByZXNzID0gYXN5bmMgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vYmouYXBwbHlYRm9ybSgpO1xyXG4gICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdkJzpcclxuICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zaG93U2hhZG93TWFwID0gIXRoaXMucmVuZGVyZXIuc2hvd1NoYWRvd01hcDtcclxuICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnZyc6XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2hvd0dyaWQgPSAhdGhpcy5yZW5kZXJlci5zaG93R3JpZDtcclxuICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5zaG93SGlnaGxpZ2h0cyA9ICF0aGlzLnJlbmRlcmVyLm9wdGlvbnMuc2hvd0hpZ2hsaWdodHM7XHJcbiAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2knOlxyXG4gICAgICAgICAgICAgICBhbGVydChcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50T2JqLm5hbWUgKyAnXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICdOdW0gVHJpYW5nbGVzOiAnICsgdGhpcy5yZW5kZXJlci50T2JqLm51bVRyaWFuZ2xlcy50b0xvY2FsZVN0cmluZygpICsgJ1xcbicgK1xyXG4gICAgICAgICAgICAgICAgICAnTnVtIFZlcnRpY2VzOiAnICsgdGhpcy5yZW5kZXJlci50T2JqLm51bVZlcnRpY2VzLnRvTG9jYWxlU3RyaW5nKCkgKyAnXFxuJ1xyXG4gICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlci5vcHRpb25zLmxpZ2h0VHlwZSA9PT0gTGlnaHRUeXBlLlBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5saWdodFR5cGUgPSBMaWdodFR5cGUuRGlyZWN0aW9uYWw7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5saWdodFR5cGUgPSBMaWdodFR5cGUuUG9pbnQ7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnbyc6XHJcbiAgICAgICAgICAgICAgIHRoaXMub3B0aW1pemUoTm9ybWFsVHlwZS5TbW9vdGgpO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3AnOlxyXG4gICAgICAgICAgICAgICB0aGlzLm9wdGltaXplKE5vcm1hbFR5cGUuRmxhdCk7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAncic6XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudE9iai5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub2JqLnVwbG9hZFRyaWFuZ2xlcygpO1xyXG4gICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdzJzpcclxuICAgICAgICAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAndCc6XHJcbiAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLnVzZU9ydGhvZ3JhcGhpYyA9ICF0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLnVzZU9ydGhvZ3JhcGhpYztcclxuICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuXHJcbiAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgY3JlYXRlUGVyc3BlY3RpdmVQYW5lbChkaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblxyXG4gICAgICB0aGlzLnBlcnNwZWN0aXZlUGFuZWwgPSBuZXcgUGVyc3BlY3RpdmVQYW5lbChkaXYsICdQZXJzcGVjdGl2ZVBhbmVsJywgdGhpcy5yZW5kZXJlci5vcHRpb25zLmNhbWVyYSk7XHJcbiAgICAgIHRoaXMucGVyc3BlY3RpdmVQYW5lbC5vblNob3cgPSAocGFuZWw6IFBhbmVsKSA9PiB7XHJcbiAgICAgICAgIHRoaXMudmFsdWVQbGFuZXNQYW5lbC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnBlcnNwZWN0aXZlUGFuZWwub25IaWRlID0gKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgdGhpcy5wb2ludGVyTW9kZSA9IFBvaW50ZXJNb2RlLlZpZXc7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnBlcnNwZWN0aXZlUGFuZWwub25DaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgY3JlYXRlVmFsdWVQbGFuZXNQYW5lbChkaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblxyXG4gICAgICB0aGlzLnZhbHVlUGxhbmVzUGFuZWwgPSBuZXcgVmFsdWVQbGFuZXNQYW5lbChkaXYsICdWYWx1ZVBsYW5lc1BhbmVsJywgdGhpcy5yZW5kZXJlci5vcHRpb25zLnZhbHVlUmFuZ2UpO1xyXG4gICAgICB0aGlzLnZhbHVlUGxhbmVzUGFuZWwub25TaG93ID0gKHBhbmVsOiBQYW5lbCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnBlcnNwZWN0aXZlUGFuZWwudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID0gUmVuZGVyTW9kZS5Db250b3VyUGxhbmVzO1xyXG4gICAgICAgICB0aGlzLnZhbHVlUGxhbmVzUGFuZWwudG9SZW5kZXJlcih0aGlzLnJlbmRlcmVyKTtcclxuXHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudmFsdWVQbGFuZXNQYW5lbC5vbkhpZGUgPSAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9IFJlbmRlck1vZGUuTm9ybWFsO1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMudmFsdWVSYW5nZSA9IFZhbHVlUmFuZ2UuU3RhbmRhcmQ7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudmFsdWVQbGFuZXNQYW5lbC5vbkNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICAgdGhpcy52YWx1ZVBsYW5lc1BhbmVsLnRvUmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBidWlsZE1lbnUobWVudWJhcjogTWVudWJhcikge1xyXG4gICAgICBjcmVhdGVNb2RlbHNNZW51KG1lbnViYXIsIChmaWxlKSA9PiB0aGlzLmxvYWRNb2RlbChmaWxlKSk7XHJcblxyXG4gICAgICBsZXQgc3ViTWVudTogU3ViTWVudTtcclxuICAgICAgc3ViTWVudSA9IG1lbnViYXIuYWRkU3ViTWVudSgnVG9vbHMnLCAnVG9vbHMnKTtcclxuXHJcbiAgICAgIGxldCBjb250b3Vyc1N1Yk1lbnUgPSBzdWJNZW51LmFkZFN1Yk1lbnUoJ0NvbG9yIENvbnRvdXJzJyk7XHJcbiAgICAgIGNvbnRvdXJzU3ViTWVudS5hZGRSYWRpb2J1dHRvbih7XHJcbiAgICAgICAgIGxhYmVsOiAnTm9uZScsXHJcbiAgICAgICAgIGdyb3VwOiAnQ29udG91ckdyb3VwJyxcclxuICAgICAgICAgY2hlY2tlZDogKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlci5vcHRpb25zLnJlbmRlck1vZGUgPT09IFJlbmRlck1vZGUuQ29udG91clBsYW5lcyB8fFxyXG4gICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9PT0gUmVuZGVyTW9kZS5Db250b3VyVmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSxcclxuICAgICAgICAgb25jaGVjazogKGJ1dHRvbjogUmFkaW9idXR0b24pID0+IHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZVBsYW5lc1BhbmVsLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLnJlbmRlck1vZGUgPSBSZW5kZXJNb2RlLk5vcm1hbDtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnRvdXJzU3ViTWVudS5hZGRSYWRpb2J1dHRvbih7XHJcbiAgICAgICAgIGxhYmVsOiAnUGxhbmVzJyxcclxuICAgICAgICAgZ3JvdXA6ICdDb250b3VyR3JvdXAnLFxyXG4gICAgICAgICBjaGVja2VkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5yZW5kZXJlci5vcHRpb25zLnJlbmRlck1vZGUgPT09IFJlbmRlck1vZGUuQ29udG91clBsYW5lcyAmJiB0aGlzLnZhbHVlUGxhbmVzUGFuZWwudmlzaWJsZSA9PT0gZmFsc2UpO1xyXG4gICAgICAgICB9LFxyXG4gICAgICAgICBvbmNoZWNrOiAoYnV0dG9uOiBSYWRpb2J1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlUGxhbmVzUGFuZWwudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY29udG91cnMgPSBDT0xPUl9DT05UT1VSUztcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLnJlbmRlck1vZGUgPSBidXR0b24uY2hlY2tlZCA/IFJlbmRlck1vZGUuQ29udG91clBsYW5lcyA6IFJlbmRlck1vZGUuTm9ybWFsO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgY29udG91cnNTdWJNZW51LmFkZFJhZGlvYnV0dG9uKHtcclxuICAgICAgICAgbGFiZWw6ICdWYWx1ZXMnLFxyXG4gICAgICAgICBncm91cDogJ0NvbnRvdXJHcm91cCcsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9PT0gUmVuZGVyTW9kZS5Db250b3VyVmFsdWVzICYmIHRoaXMudmFsdWVQbGFuZXNQYW5lbC52aXNpYmxlID09PSBmYWxzZSk7XHJcbiAgICAgICAgIH0sXHJcbiAgICAgICAgIG9uY2hlY2s6IChidXR0b246IFJhZGlvYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVQbGFuZXNQYW5lbC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5jb250b3VycyA9IENPTE9SX0NPTlRPVVJTO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9IGJ1dHRvbi5jaGVja2VkID8gUmVuZGVyTW9kZS5Db250b3VyVmFsdWVzIDogUmVuZGVyTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IGhpZ2hsaWdodFN1Yk1lbnUgPSBzdWJNZW51LmFkZFN1Yk1lbnUoJ0hpZ2hsaWdodHMnKTtcclxuXHJcbiAgICAgIGhpZ2hsaWdodFN1Yk1lbnUuYWRkUmFkaW9idXR0b24oe1xyXG4gICAgICAgICBsYWJlbDogJ1Nob3cnLFxyXG4gICAgICAgICBncm91cDogJ0hpZ2hsaWdodHNHcm91cCcsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHRoaXMucmVuZGVyZXIub3B0aW9ucy5zaG93SGlnaGxpZ2h0cyAmJiB0aGlzLnJlbmRlcmVyLnJlbmRlck1vZGVDYW5Ub2dnbGVIaWdobGlnaHRzKCksXHJcbiAgICAgICAgIG9uY2hlY2s6IChidXR0b246IFJhZGlvYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5zaG93SGlnaGxpZ2h0cyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9PT0gUmVuZGVyTW9kZS5FbXBoYXNpemVIaWdobGlnaHRzKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID0gUmVuZGVyTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBoaWdobGlnaHRTdWJNZW51LmFkZFJhZGlvYnV0dG9uKHtcclxuICAgICAgICAgbGFiZWw6ICdIaWRlJyxcclxuICAgICAgICAgZ3JvdXA6ICdIaWdobGlnaHRzR3JvdXAnLFxyXG4gICAgICAgICBjaGVja2VkOiAoKSA9PiAhdGhpcy5yZW5kZXJlci5vcHRpb25zLnNob3dIaWdobGlnaHRzICYmIHRoaXMucmVuZGVyZXIucmVuZGVyTW9kZUNhblRvZ2dsZUhpZ2hsaWdodHMoKSxcclxuICAgICAgICAgb25jaGVjazogKGJ1dHRvbjogUmFkaW9idXR0b24pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLnNob3dIaWdobGlnaHRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9PT0gUmVuZGVyTW9kZS5FbXBoYXNpemVIaWdobGlnaHRzKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID0gUmVuZGVyTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBoaWdobGlnaHRTdWJNZW51LmFkZFJhZGlvYnV0dG9uKHtcclxuICAgICAgICAgbGFiZWw6ICdFbXBoYXNpemUnLFxyXG4gICAgICAgICBncm91cDogJ0hpZ2hsaWdodHNHcm91cCcsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID09PSBSZW5kZXJNb2RlLkVtcGhhc2l6ZUhpZ2hsaWdodHMsXHJcbiAgICAgICAgIG9uY2hlY2s6IChidXR0b246IFJhZGlvYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5zaG93SGlnaGxpZ2h0cyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID0gUmVuZGVyTW9kZS5FbXBoYXNpemVIaWdobGlnaHRzO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGhpZ2hsaWdodFN1Yk1lbnUuYWRkU2xpZGVyKHtcclxuICAgICAgICAgbGFiZWw6ICdTaGluaW5lc3MnLFxyXG4gICAgICAgICBtaW46IDEsXHJcbiAgICAgICAgIG1heDogNTAsXHJcbiAgICAgICAgIHZhbHVlOiB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuc2hpbmluZXNzLFxyXG4gICAgICAgICBvbmlucHV0OiAoc2xpZGVyOiBTbGlkZXIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLnNoaW5pbmVzcyA9IHNsaWRlci52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IHNoYWRvd3NTdWJNZW51ID0gc3ViTWVudS5hZGRTdWJNZW51KCdTaGFkb3dzJyk7XHJcbiAgICAgIHNoYWRvd3NTdWJNZW51LmFkZFJhZGlvYnV0dG9uKHtcclxuICAgICAgICAgbGFiZWw6ICdOb3JtYWwnLFxyXG4gICAgICAgICBncm91cDogJ1NoYWRvd0dyb3VwJyxcclxuICAgICAgICAgY2hlY2tlZDogKCkgPT4gdGhpcy5yZW5kZXJlci5vcHRpb25zLnJlbmRlck1vZGUgPT0gUmVuZGVyTW9kZS5Ob3JtYWwsXHJcbiAgICAgICAgIG9uY2hlY2s6IChidXR0b246IFJhZGlvYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID0gUmVuZGVyTW9kZS5Ob3JtYWw7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBzaGFkb3dzU3ViTWVudS5hZGRSYWRpb2J1dHRvbih7XHJcbiAgICAgICAgIGxhYmVsOiAnSGlnaGxpZ2h0IFRlcm1pbmF0b3InLFxyXG4gICAgICAgICBncm91cDogJ1NoYWRvd0dyb3VwJyxcclxuICAgICAgICAgY2hlY2tlZDogKCkgPT4gdGhpcy5yZW5kZXJlci5vcHRpb25zLnJlbmRlck1vZGUgPT0gUmVuZGVyTW9kZS5IaWdobGlnaHRUZXJtaW5hdG9yLFxyXG4gICAgICAgICBvbmNoZWNrOiAoYnV0dG9uOiBSYWRpb2J1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9IFJlbmRlck1vZGUuSGlnaGxpZ2h0VGVybWluYXRvcjtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHNoYWRvd3NTdWJNZW51LmFkZFJhZGlvYnV0dG9uKHtcclxuICAgICAgICAgbGFiZWw6ICdIaWdobGlnaHQgU2hhZG93JyxcclxuICAgICAgICAgZ3JvdXA6ICdTaGFkb3dHcm91cCcsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHRoaXMucmVuZGVyZXIub3B0aW9ucy5yZW5kZXJNb2RlID09IFJlbmRlck1vZGUuSGlnaGxpZ2h0U2hhZG93LFxyXG4gICAgICAgICBvbmNoZWNrOiAoYnV0dG9uOiBSYWRpb2J1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9IFJlbmRlck1vZGUuSGlnaGxpZ2h0U2hhZG93O1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgc2hhZG93c1N1Yk1lbnUuYWRkUmFkaW9idXR0b24oe1xyXG4gICAgICAgICBsYWJlbDogJ0xpZ2h0IGFuZCBTaGFkb3cgT25seScsXHJcbiAgICAgICAgIGdyb3VwOiAnU2hhZG93R3JvdXAnLFxyXG4gICAgICAgICBjaGVja2VkOiAoKSA9PiB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9PSBSZW5kZXJNb2RlLkxpZ2h0QW5kU2hhZG93LFxyXG4gICAgICAgICBvbmNoZWNrOiAoYnV0dG9uOiBSYWRpb2J1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucmVuZGVyTW9kZSA9IFJlbmRlck1vZGUuTGlnaHRBbmRTaGFkb3c7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc3ViTWVudS5hZGRJdGVtKCdQZXJzcGVjdGl2ZS4uLicsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5wZXJzcGVjdGl2ZVBhbmVsLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHN1Yk1lbnUuYWRkSXRlbSgnVmFsdWUgUGxhbmVzLi4uJywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnZhbHVlUGxhbmVzUGFuZWwudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IGxpZ2h0U3ViTWVudSA9IHN1Yk1lbnUuYWRkU3ViTWVudSgnTGlnaHQnKTtcclxuICAgICAgbGlnaHRTdWJNZW51LmFkZFJhZGlvYnV0dG9uKHtcclxuICAgICAgICAgbGFiZWw6ICdEaXJlY3Rpb25hbCBMaWdodCcsXHJcbiAgICAgICAgIGdyb3VwOiAnTGlnaHRUeXBlR3JvdXAnLFxyXG4gICAgICAgICBjaGVja2VkOiAoKSA9PiB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubGlnaHRUeXBlID09PSBMaWdodFR5cGUuRGlyZWN0aW9uYWwsXHJcbiAgICAgICAgIG9uY2hlY2s6IChidXR0b246IFJhZGlvYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy5saWdodFR5cGUgPSBMaWdodFR5cGUuRGlyZWN0aW9uYWw7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBsaWdodFN1Yk1lbnUuYWRkUmFkaW9idXR0b24oe1xyXG4gICAgICAgICBsYWJlbDogJ1BvaW50IExpZ2h0JyxcclxuICAgICAgICAgZ3JvdXA6ICdMaWdodFR5cGVHcm91cCcsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHRoaXMucmVuZGVyZXIub3B0aW9ucy5saWdodFR5cGUgPT09IExpZ2h0VHlwZS5Qb2ludCxcclxuICAgICAgICAgb25jaGVjazogKGJ1dHRvbjogUmFkaW9idXR0b24pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLmxpZ2h0VHlwZSA9IExpZ2h0VHlwZS5Qb2ludDtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGxpZ2h0U3ViTWVudS5hZGRTbGlkZXIoe1xyXG4gICAgICAgICBsYWJlbDogJ0ZhbGxvZmYnLFxyXG4gICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgIG1heDogMC45LFxyXG4gICAgICAgICB2YWx1ZTogdGhpcy5yZW5kZXJlci5vcHRpb25zLmZhbGxvZmYsXHJcbiAgICAgICAgIG9uaW5wdXQ6IChzbGlkZXI6IFNsaWRlcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuZmFsbG9mZiA9IHNsaWRlci52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGlnaHRTdWJNZW51LmFkZFNsaWRlcih7XHJcbiAgICAgICAgIGxhYmVsOiAnSW50ZW5zaXR5JyxcclxuICAgICAgICAgbWluOiAwLjUsXHJcbiAgICAgICAgIG1heDogMS41LFxyXG4gICAgICAgICB2YWx1ZTogdGhpcy5yZW5kZXJlci5vcHRpb25zLmxpZ2h0SW50ZW5zaXR5LFxyXG4gICAgICAgICBvbmlucHV0OiAoc2xpZGVyOiBTbGlkZXIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLmxpZ2h0SW50ZW5zaXR5ID0gc2xpZGVyLnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBsaWdodFN1Yk1lbnUuYWRkU2xpZGVyKHtcclxuICAgICAgICAgbGFiZWw6ICdBbWJpZW50IEludGVuc2l0eScsXHJcbiAgICAgICAgIG1pbjogMC4wLFxyXG4gICAgICAgICBtYXg6IDAuNCxcclxuICAgICAgICAgdmFsdWU6IHRoaXMucmVuZGVyZXIub3B0aW9ucy52YWx1ZVJhbmdlLmFtYmllbnRJbnRlbnNpdHksXHJcbiAgICAgICAgIG9uaW5wdXQ6IChzbGlkZXI6IFNsaWRlcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMudmFsdWVSYW5nZS5hbWJpZW50SW50ZW5zaXR5ID0gc2xpZGVyLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gMC42O1xyXG4gICAgICAgICAgICBsZXQgYmFzZVZhbCA9IHRoaXMuYmFzZUJhY2tncm91bmRDb2xvci52O1xyXG4gICAgICAgICAgICBsZXQgbmV3VmFsID0gKGJhc2VWYWwgLSByYW5nZSAvIDIpICsgcmFuZ2UgKiBzbGlkZXIudmFsdWVBc1BlcmNlbnQ7XHJcbiAgICAgICAgICAgIGxldCBuZXdDb2xvciA9IG5ldyBoc3ZDb2xvcihbdGhpcy5iYXNlQmFja2dyb3VuZENvbG9yLmgsIHRoaXMuYmFzZUJhY2tncm91bmRDb2xvci5zLCBuZXdWYWxdKTtcclxuICAgICAgICAgICAgKDxIVE1MQ2FudmFzRWxlbWVudD50aGlzLmdsLmNhbnZhcykuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gbmV3Q29sb3IudG9IdG1sQ29sb3IoKS50b0NzcygpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc3ViTWVudSA9IG1lbnViYXIuYWRkU3ViTWVudSgnT3B0aW9ucycsICdPcHRpb25zJyk7XHJcblxyXG4gICAgICBsZXQgcmVzZXRTdWJNZW51ID0gc3ViTWVudS5hZGRTdWJNZW51KCdSZXNldCcpO1xyXG4gICAgICByZXNldFN1Yk1lbnUuYWRkSXRlbSgnQWxsJywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLnJlc2V0KFJlc2V0LkFsbCk7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9KTtcclxuICAgICAgcmVzZXRTdWJNZW51LmFkZEl0ZW0oJ0xpZ2h0cycsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5yZXNldChSZXNldC5MaWdodHMpO1xyXG4gICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJlc2V0U3ViTWVudS5hZGRJdGVtKCdWaWV3JywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLnJlc2V0KFJlc2V0LlZpZXcpO1xyXG4gICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJlc2V0U3ViTWVudS5hZGRJdGVtKCdSZW5kZXJpbmcnLCAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIucmVzZXQoUmVzZXQuUmVuZGVyaW5nKTtcclxuICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IGZsb29yU3ViTWVudSA9IHN1Yk1lbnUuYWRkU3ViTWVudSgnRmxvb3InKTtcclxuICAgICAgZmxvb3JTdWJNZW51LmFkZENoZWNrYm94KHtcclxuICAgICAgICAgbGFiZWw6ICdTaG93IEZsb29yJyxcclxuICAgICAgICAgY2hlY2tlZDogKCkgPT4gdGhpcy5yZW5kZXJlci5zaG93Rmxvb3IsXHJcbiAgICAgICAgIG9uY2hlY2s6IChjaGVja2JveDogQ2hlY2tib3gpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zaG93Rmxvb3IgPSBjaGVja2JveC5jaGVja2VkO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgZmxvb3JTdWJNZW51LmFkZENoZWNrYm94KHtcclxuICAgICAgICAgbGFiZWw6ICdTaG93IEdyaWQnLFxyXG4gICAgICAgICBjaGVja2VkOiAoKSA9PiB0aGlzLnJlbmRlcmVyLnNob3dHcmlkLFxyXG4gICAgICAgICBvbmNoZWNrOiAoY2hlY2tib3g6IENoZWNrYm94KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2hvd0dyaWQgPSBjaGVja2JveC5jaGVja2VkO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgc3ViTWVudS5hZGRJdGVtKCdSZXZlcnNlIE9iamVjdCcsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci50T2JqLnJldmVyc2UoKTtcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5vYmoudXBsb2FkVHJpYW5nbGVzKCk7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGxldCByb3RhdGVTdWJNZW51ID0gc3ViTWVudS5hZGRTdWJNZW51KCdSb3RhdGlvbicpO1xyXG4gICAgICByb3RhdGVTdWJNZW51LmFkZENoZWNrYm94KHtcclxuICAgICAgICAgbGFiZWw6ICdLZWVwIHRoZSBsaWdodCBwb2ludGluZyBhdCB0aGUgc2FtZSBzcG90IG9uIHRoZSBtb2RlbCcsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHRoaXMucm90YXRlTGlnaHRXaXRoT2JqZWN0LFxyXG4gICAgICAgICBvbmNoZWNrOiAoY2hlY2tib3g6IENoZWNrYm94KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlTGlnaHRXaXRoT2JqZWN0ID0gY2hlY2tib3guY2hlY2tlZDtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcm90YXRlU3ViTWVudS5hZGRDaGVja2JveCh7XHJcbiAgICAgICAgIGxhYmVsOiAnUm90YXRlIG1vZGVsIGluZGVwZW5kZW50IG9mIHRoZSBmbG9vcicsXHJcbiAgICAgICAgIGNoZWNrZWQ6ICgpID0+IHRoaXMucmVuZGVyZXIubG9ja0Zsb29yLFxyXG4gICAgICAgICBvbmNoZWNrOiAoY2hlY2tib3g6IENoZWNrYm94KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubG9ja0Zsb29yID0gY2hlY2tib3guY2hlY2tlZDtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvcHRpbWl6ZShub3JtYWxUeXBlOiBOb3JtYWxUeXBlKSB7XHJcblxyXG4gICAgICBsZXQgb2JqID0gdGhpcy5yZW5kZXJlci5vYmo7XHJcbiAgICAgIGxldCBvbGROdW1WZXJ0aWNlcyA9IG9iai50T2JqLm51bVZlcnRpY2VzO1xyXG5cclxuICAgICAgb2JqLm9wdGltaXplKG5vcm1hbFR5cGUpO1xyXG5cclxuICAgICAgbGV0IG5ld051bVZlcnRpY2VzID0gb2JqLnRPYmoubnVtVmVydGljZXM7XHJcblxyXG4gICAgICAvL2xldCBtc2cgPSAnT3B0aW1pemVkIC5PQkogY29udGVudCBjb3BpZWQgdG8gY2xpcGJvYXJkXFxuXFxuJztcclxuICAgICAgbGV0IG1zZyA9ICdPcHRpbWl6ZWQgLk9CSiBjb250ZW50XFxuXFxuJztcclxuICAgICAgbXNnICs9ICdOdW0gVHJpYW5nbGVzOiAnICsgb2JqLnRPYmoubnVtVHJpYW5nbGVzICsgJ1xcbic7XHJcbiAgICAgIG1zZyArPSAnTnVtIFZlcnRpY2VzOiAnICsgb2xkTnVtVmVydGljZXMgKyAnIHRvICcgKyBuZXdOdW1WZXJ0aWNlcyArICcsICcgKyAoMTAwICogbmV3TnVtVmVydGljZXMgLyBvbGROdW1WZXJ0aWNlcykudG9GaXhlZCgpICsgJyAlXFxuJztcclxuICAgICAgYWxlcnQobXNnKTtcclxuXHJcbiAgICAgIC8vbGV0IHN0ciA9IG9iai50T2JqLnRvT2JqU3RyaW5nKDYpO1xyXG4gICAgICAvL25hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHN0cikudGhlbigoKSA9PiB7IGFsZXJ0KG1zZykgfSk7XHJcblxyXG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSB1cGRhdGVTaXplKCkge1xyXG5cclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGxldCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICBsZXQgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICBsZXQgbWVudWJhckhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdNZW51YmFyJykuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgICAgbGV0IHBhbmVsSGVpZ2h0ID0gMDtcclxuICAgICAgaWYgKHRoaXMucGVyc3BlY3RpdmVQYW5lbC52aXNpYmxlKSB7XHJcbiAgICAgICAgIHBhbmVsSGVpZ2h0ID0gdGhpcy5wZXJzcGVjdGl2ZVBhbmVsLmRpdi5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAodGhpcy52YWx1ZVBsYW5lc1BhbmVsLnZpc2libGUpIHtcclxuICAgICAgICAgcGFuZWxIZWlnaHQgPSB0aGlzLnZhbHVlUGxhbmVzUGFuZWwuZGl2LmNsaWVudEhlaWdodDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZ2wuY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgIGdsLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgLSBtZW51YmFySGVpZ2h0IC0gcGFuZWxIZWlnaHQ7XHJcbiAgICAgIHRoaXMub3ZlcmxheS53aWR0aCA9IGdsLmNhbnZhcy53aWR0aDtcclxuICAgICAgdGhpcy5vdmVybGF5LmhlaWdodCA9IGdsLmNhbnZhcy5oZWlnaHQ7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgbG9hZE1vZGVsKHF1ZXJ5OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgIC8vIGlmIG5vdGhpbmcgd2FzIHNwZWNpZmllZCwgbG9hZCBhbiBpbnRlcmVzdGluZyBtb2RlbFxyXG4gICAgICBpZiAoIXF1ZXJ5KSB7XHJcbiAgICAgICAgIGxldCBudW0gPSBNYXRoLnJvdW5kKDAuNSArIDE2ICogTWF0aC5yYW5kb20oKSk7XHJcbiAgICAgICAgIHF1ZXJ5ID0gJ1Bvc2VfMCcgKyBudW0gKyAnLmJsb2InO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbGMgPSBxdWVyeS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBpZiAobGMuZW5kc1dpdGgoJy5vYmonKSB8fCBsYy5lbmRzV2l0aCgnLmJsb2InKSkge1xyXG5cclxuICAgICAgICAgbGV0IHN0YXR1c0Z1bmMgPSAoc3RhdHVzOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5LmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheS5maWxsVGV4dChzdGF0dXMpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICB0aGlzLmxvYWRlci5sb2FkTW9kZWxGaWxlKHF1ZXJ5LCBzdGF0dXNGdW5jKVxyXG4gICAgICAgICAgICAudGhlbigodE9iaikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgdGhpcy5wZXJzcGVjdGl2ZVBhbmVsLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgdGhpcy52YWx1ZVBsYW5lc1BhbmVsLnZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0TW9kZWwodE9iaik7XHJcbiAgICAgICAgICAgICAgIHRoaXMucGVyc3BlY3RpdmVQYW5lbC5zZXRNb2RlbCh0T2JqKTtcclxuICAgICAgICAgICAgICAgdGhpcy5sb2FkZXIub3JpZW50KHRoaXMucmVuZGVyZXIub2JqKTtcclxuXHJcbiAgICAgICAgICAgICAgIGlmIChxdWVyeS5zdGFydHNXaXRoKCdIZWFkJykgfHwgcXVlcnkuc3RhcnRzV2l0aCgnVGVhcG90JykgfHwgcXVlcnkuc3RhcnRzV2l0aCgnTWFsZV8wMicpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub3B0aW9ucy51c2VDdWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyTW9kZSA9IFBvaW50ZXJNb2RlLlZpZXc7XHJcbiAgICAgICAgICAgICAgIGlmICghdGhpcy5hbmltYXRpb25GcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudGljaygpKTtcclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgbGV0IGJveCA9IEJvdW5kaW5nQm94LmluZmluaXRlO1xyXG4gICAgICAgICAgICAgICBib3gubWF4LnggPSA2Mi4xO1xyXG4gICAgICAgICAgICAgICB0aGlzLnRyaW0odE9iaiwgYm94KTtcclxuXHJcbiAgICAgICAgICAgICAgIHRoaXMubG9hZGVyLmxvYWRNb2RlbEZpbGUoJ1N1YlRvb2wzLmJsb2InLCBzdGF0dXNGdW5jKS50aGVuKCh0T2JqMikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0T2JqLmNvbWJpbmUodE9iajIpO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdE9iajtcclxuICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0TW9kZWwodE9iaik7XHJcblxyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudGljaygpKTtcclxuICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKGxjID09PSAnc3BoZXJlJykge1xyXG4gICAgICAgICBsZXQgdE9iaiA9IG5ldyBUcmlhbmdsZU9iakJ1aWxkZXIoKTtcclxuICAgICAgICAgdE9iai5hZGRTcGhlcmUoMTAwLCAxLCBuZXcgVmVjMyhbMCwgMCwgMF0pKTtcclxuICAgICAgICAgdE9iai5vcHRpbWl6ZShOb3JtYWxUeXBlLlNtb290aCk7XHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0TW9kZWwodE9iaik7XHJcbiAgICAgICAgIHRoaXMucGVyc3BlY3RpdmVQYW5lbC5zZXRNb2RlbCh0T2JqKTtcclxuICAgICAgICAgdGhpcy5hbmltYXRlID0gZmFsc2U7XHJcbiAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICB0aGlzLnBvaW50ZXJNb2RlID0gUG9pbnRlck1vZGUuVmlldztcclxuICAgICAgICAgaWYgKCF0aGlzLmFuaW1hdGlvbkZyYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICAvLyBUT0RPIG11bHRpIGxpbmUgZXJyb3IgbWVzc2FnZXMgbm90IHN1cHBvcnRlZFxyXG4gICAgICAgICB0aGlzLm92ZXJsYXkuY2xlYXIoKTtcclxuICAgICAgICAgdGhpcy5vdmVybGF5LmZpbGxUZXh0KCdVbmtub3duIE1vZGVsOicgKyBxdWVyeSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSB0b2dnbGVNb2RlKCkge1xyXG4gICAgICBzd2l0Y2ggKHRoaXMucG9pbnRlck1vZGUpIHtcclxuICAgICAgICAgY2FzZSBQb2ludGVyTW9kZS5WaWV3OlxyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJNb2RlID0gUG9pbnRlck1vZGUuTGlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYmFsbENvbG9yID0gdGhpcy5yZW5kZXJlci55ZWxsb3c7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgY2FzZSBQb2ludGVyTW9kZS5MaWdodDpcclxuICAgICAgICAgICAgdGhpcy5wb2ludGVyTW9kZSA9IFBvaW50ZXJNb2RlLlZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYmFsbENvbG9yID0gZ2xDb2xvcjMubW9kZWxXaGl0ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgcm90YXRlTGlnaHQoeFJhZDogbnVtYmVyLCB5UmFkOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5yb3RhdGVMaWdodCh4UmFkLCB5UmFkKTtcclxuXHJcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHJvdGF0ZU9iamVjdHMoeFJhZDogbnVtYmVyLCB5UmFkOiBudW1iZXIpIHtcclxuXHJcbiAgICAgIC8vIGdldCB0aGUgbGlnaHQgdmVjdG9yIHdpdGggbW9kZWwgdHJhbnNmb3JtYXRpb24gdW5kb25lXHJcbiAgICAgIGxldCB2ZWMgPSBWZWM0LmZyb21WZWMzKHRoaXMucmVuZGVyZXIub3B0aW9ucy5saWdodFBvcywgMSk7XHJcbiAgICAgIHZlYyA9IHRoaXMucmVuZGVyZXIub2JqLm1vZGVsLmludmVyc2UoKS5tdWx0Vih2ZWMpO1xyXG5cclxuICAgICAgaWYgKHRoaXMucmVuZGVyZXIubG9ja0Zsb29yKSB7XHJcblxyXG4gICAgICAgICAvLyByb3RhdGUgaW4gYWxsIGRpcmVjdGlvbnMgaWYgd2UncmUganVzdCByb3RhdGluZyB0aGUgb2JqZWN0IGluIHNwYWNlXHJcbiAgICAgICAgIHRoaXMucmVuZGVyZXIucm90WCh5UmFkKTtcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5yb3RZKHhSYWQpO1xyXG5cclxuICAgICAgICAgaWYgKHRoaXMucm90YXRlTGlnaHRXaXRoT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIC8vIGFwcGx5IHRoZSBjaGFuZ2VzIHRvIHRoZSBsaWdodFxyXG4gICAgICAgICAgICB2ZWMgPSB0aGlzLnJlbmRlcmVyLm9iai5tb2RlbC5tdWx0Vih2ZWMpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubGlnaHRQb3MgPSB2ZWMueHl6O1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAvLyBpZiB0aGUgZmxvb3IgbW92ZXMgd2l0aCB0aGUgb2JqZWN0LCB0aGVuIHVwLWRvd24gbW92ZW1lbnQgdGlsdHMgdGhlXHJcbiAgICAgICAgIC8vIHdob2xlIHNjZW5lIHdoaWxlIGxlZnQtcmlnaHQgbW92ZW1lbnQgb25seSBzcGlucyB0aGUgbW9kZWxcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5yb3RYKHlSYWQpO1xyXG5cclxuICAgICAgICAgaWYgKHRoaXMucm90YXRlTGlnaHRXaXRoT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucHJlUm90WSh4UmFkKTtcclxuICAgICAgICAgICAgdmVjID0gdGhpcy5yZW5kZXJlci5vYmoubW9kZWwubXVsdFYodmVjKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmVjID0gdGhpcy5yZW5kZXJlci5vYmoubW9kZWwubXVsdFYodmVjKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5wcmVSb3RZKHhSYWQpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAvLyBhcHBseSB0aGUgY2hhbmdlcyB0byB0aGUgbGlnaHRcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zLmxpZ2h0UG9zID0gdmVjLnh5ejtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG9uRHJhZyhwb3M6IFZlYzIsIGRlbHRhOiBWZWMyKSB7XHJcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG5cclxuICAgICAgaWYgKHRoaXMucG9pbnRlck1vZGUgPT09IFBvaW50ZXJNb2RlLlZpZXcpIHtcclxuICAgICAgICAgdGhpcy5yb3RhdGVPYmplY3RzKC1kZWx0YS54ICogMC4wMSwgLWRlbHRhLnkgKiAwLjAxKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICh0aGlzLnBvaW50ZXJNb2RlID09PSBQb2ludGVyTW9kZS5MaWdodCkge1xyXG4gICAgICAgICB0aGlzLnJvdGF0ZUxpZ2h0KC1kZWx0YS54ICogMC4wMSwgLWRlbHRhLnkgKiAwLjAxKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogUHJvY2Vzc2VzIGEgY2xpY2svdG91Y2ggZXZlbnQgYXQgdGhlIGRlc2lnbmF0ZWQgY29vcmRpbmF0ZXMuXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0geCBUaGUgeCBjb29yZGluYXRlLlxyXG4gICAgKiBAcGFyYW0geSBUaGUgeSBjb29yZGluYXRlLlxyXG4gICAgKiBAcmV0dXJucyB0cnVlIGlmIGEgaGl0IG9uIG9uZSBvZiB0aGUgdmlld3Mgb2NjdXJzLlxyXG4gICAgKi9cclxuICAgcHJpdmF0ZSBvbkNsaWNrKHBvczogVmVjMik6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgbGV0IGNhbnZhc1dpZHRoID0gdGhpcy5nbC5jYW52YXMud2lkdGg7XHJcbiAgICAgIGxldCBjYW52YXNIZWlnaHQgPSB0aGlzLmdsLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIGxldCBjbGlwU3BhY2UgPSB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLmdldENsaXBTcGFjZSh0aGlzLmdsKTtcclxuICAgICAgbGV0IG1pbmlXaWR0aCA9IHRoaXMucmVuZGVyZXIubWluaVNpemUgKiAoMiAvIGNsaXBTcGFjZS53aWR0aCkgKiBjYW52YXNXaWR0aDtcclxuICAgICAgbGV0IG1pbmlIZWlnaHQgPSB0aGlzLnJlbmRlcmVyLm1pbmlTaXplICogKDIgLyBjbGlwU3BhY2UuaGVpZ2h0KSAqIGNhbnZhc0hlaWdodDtcclxuXHJcbiAgICAgIGlmIChwb3MueCA8IG1pbmlXaWR0aCAmJiBwb3MueSA8IG1pbmlIZWlnaHQpIHtcclxuICAgICAgICAgdGhpcy50b2dnbGVNb2RlKCk7XHJcbiAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBub3QgaGFuZGxlZFxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb25TY2FsZShzY2FsZTogbnVtYmVyLCBjaGFuZ2U6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLnpvb20oY2hhbmdlKTtcclxuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb25Sb3RhdGUoYW5nbGU6IG51bWJlciwgZGVsdGE6IG51bWJlcikge1xyXG4gICAgICAvLyBnZXQgdGhlIGxpZ2h0IHZlY3RvciB3aXRoIG1vZGVsIHRyYW5zZm9ybWF0aW9uIHVuZG9uZVxyXG4gICAgICBsZXQgdmVjID0gVmVjNC5mcm9tVmVjMyh0aGlzLnJlbmRlcmVyLm9wdGlvbnMubGlnaHRQb3MsIDEpO1xyXG4gICAgICB2ZWMgPSB0aGlzLnJlbmRlcmVyLm9iai5tb2RlbC5pbnZlcnNlKCkubXVsdFYodmVjKTtcclxuXHJcbiAgICAgIHRoaXMucmVuZGVyZXIucm90WihkZWx0YSk7XHJcblxyXG4gICAgICAvLyBhcHBseSB0aGUgdXBkYXRlZCB0cmFuc2Zvcm0gXHJcbiAgICAgIGlmICh0aGlzLnJvdGF0ZUxpZ2h0V2l0aE9iamVjdCkge1xyXG4gICAgICAgICB2ZWMgPSB0aGlzLnJlbmRlcmVyLm9iai5tb2RlbC5tdWx0Vih2ZWMpO1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubGlnaHRQb3MgPSB2ZWMueHl6O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvblRyYW5zbGF0ZShkZWx0YTogVmVjMikge1xyXG5cclxuICAgICAgLy8gVE9ETyBob3cgY2FuIHRoaXMgc2NhbGluZyBiZSBkZXRlY3RlZCBmcm9tIGphdmFzY3JpcHQ/XHJcbiAgICAgIGxldCBmYWN0b3IgPSAxO1xyXG4gICAgICBpZiAoaXNNb2JpbGUpIHtcclxuICAgICAgICAgZmFjdG9yID0gMjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGNsaXBTcGFjZSA9IHRoaXMucmVuZGVyZXIub3B0aW9ucy5jYW1lcmEuZ2V0Q2xpcFNwYWNlKHRoaXMuZ2wpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuY2FtZXJhLnRyYW5zbGF0ZShuZXcgVmVjMihbXHJcbiAgICAgICAgIGZhY3RvciAqIGNsaXBTcGFjZS53aWR0aCAqIGRlbHRhLnggLyB0aGlzLmdsLmNhbnZhcy53aWR0aCxcclxuICAgICAgICAgZmFjdG9yICogY2xpcFNwYWNlLmhlaWdodCAqIGRlbHRhLnkgLyB0aGlzLmdsLmNhbnZhcy5oZWlnaHRcclxuICAgICAgXSkpO1xyXG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHRpY2soKSB7XHJcblxyXG4gICAgICB0aGlzLmZwcy50aWNrKCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5kaXJ0eSkge1xyXG4gICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcigpO1xyXG4gICAgICAgICBpZiAodGhpcy5wZXJzcGVjdGl2ZVBhbmVsLnZpc2libGUpIHtcclxuICAgICAgICAgICAgLy8gc3luY2hyb25pemUgdGhlIHJvdGF0aW9uIG1hdHJpY2VzXHJcbiAgICAgICAgICAgIHRoaXMucGVyc3BlY3RpdmVQYW5lbC5yZW5kZXIodGhpcy5yZW5kZXJlci5vYmoubW9kZWwuY2xvbmUoKSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5hbmltYXRlKSB7XHJcbiAgICAgICAgIGlmICh0aGlzLmxvYWRlci5sb2FkaW5nID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5LmZpbGxUZXh0KHRoaXMuZnBzLnJhdGUudG9GaXhlZCgpICsgJyBmcHMgJyArIHRoaXMuZnBzLm1zLnRvRml4ZWQoMSkgKyAnIG1zJywgVGV4dExvY2F0aW9uLkJvdHRvbUxlZnQpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAvLyBnZXQgdGhlIGxpZ2h0IHZlY3RvciB3aXRoIG1vZGVsIHRyYW5zZm9ybWF0aW9uIHVuZG9uZVxyXG4gICAgICAgICBsZXQgdmVjID0gVmVjNC5mcm9tVmVjMyh0aGlzLnJlbmRlcmVyLm9wdGlvbnMubGlnaHRQb3MsIDEpO1xyXG4gICAgICAgICB2ZWMgPSB0aGlzLnJlbmRlcmVyLm9iai5tb2RlbC5pbnZlcnNlKCkubXVsdFYodmVjKTtcclxuXHJcbiAgICAgICAgIC8vIGFuaW1hdGVcclxuICAgICAgICAgdGhpcy5yZW5kZXJlci5wcmVSb3RZKHRvUmFkKC0xKSk7XHJcblxyXG4gICAgICAgICAvLyBhcHBseSB0aGUgdXBkYXRlZCB0cmFuc2Zvcm0gXHJcbiAgICAgICAgIGlmICh0aGlzLnJvdGF0ZUxpZ2h0V2l0aE9iamVjdCkge1xyXG4gICAgICAgICAgICB2ZWMgPSB0aGlzLnJlbmRlcmVyLm9iai5tb2RlbC5tdWx0Vih2ZWMpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMubGlnaHRQb3MgPSB2ZWMueHl6O1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudGljaygpKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBzYXZlKCkge1xyXG4gICAgICBsZXQgdE9iaiA9IHRoaXMucmVuZGVyZXIudE9iajtcclxuXHJcbiAgICAgIGxldCBuYW1lID0gdE9iai5uYW1lLnNwbGl0KCcuJylbMF0gKyAnLmJsb2InO1xyXG4gICAgICB0T2JqLm5hbWUgPSBuYW1lO1xyXG4gICAgICBzYXZlQXModE9iai50b0Jsb2IoKSwgbmFtZSk7XHJcbiAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUcmlhbmdsZU9iaiwgTm9ybWFsVHlwZSB9IGZyb20gXCIuLi8uLi9VdGlsM0QvVHJpYW5nbGVPYmpcIjtcclxuaW1wb3J0IHsgZ2xBdHRyaWJ1dGVCdWZmZXIgfSBmcm9tIFwiLi4vLi4vZ2wvZ2xBdHRyaWJ1dGVCdWZmZXJcIjtcclxuaW1wb3J0IHsgZ2xJbmRleEJ1ZmZlciB9IGZyb20gXCIuLi8uLi9nbC9nbEluZGV4QnVmZmVyXCI7XHJcbmltcG9ydCB7IE1hdDQgfSBmcm9tIFwiLi4vLi4vVXRpbDNEL01hdFwiO1xyXG5pbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gXCIuLi8uLi9VdGlsM0QvQm91bmRpbmdCb3hcIjtcclxuaW1wb3J0IHsgVmVjMywgVmVjNCB9IGZyb20gXCIuLi8uLi9VdGlsM0QvVmVjXCI7XHJcbmltcG9ydCB7IGdsVW5pZm9ybSB9IGZyb20gXCIuLi8uLi9nbC9nbFVuaWZvcm1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBnbE9iamVjdCB7XHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwdWJsaWMgcmVhZG9ubHkgdE9iajogVHJpYW5nbGVPYmo7XHJcbiAgIHByaXZhdGUgcHJvZ3JhbTogV2ViR0xQcm9ncmFtO1xyXG4gICBwcml2YXRlIHZlcnRleEJ1ZmZlcjogZ2xBdHRyaWJ1dGVCdWZmZXI7XHJcbiAgIHByaXZhdGUgbm9ybWFsQnVmZmVyOiBnbEF0dHJpYnV0ZUJ1ZmZlcjtcclxuICAgcHJpdmF0ZSBpbmRleEJ1ZmZlcjogZ2xJbmRleEJ1ZmZlcjtcclxuXHJcbiAgIC8vIHRoaXMgbWF0cml4IG5vcm1hbHMgdGhlIG9iamVjdCBzbyB0aGF0IGFsbCBvYmplY3QgYXJlIGNlbnRlcmVkXHJcbiAgIC8vIGFib3V0IHRoZSBvcmlnaW4gd2l0aCBkaWFnb25hbCBsZW5ndGggb2YgMiB1bml0c1xyXG4gICBwdWJsaWMgbm9ybWFsaXplID0gTWF0NC5pZGVudGl0eTtcclxuXHJcbiAgIC8vIHRoaXMgaXMgdGhlIHN0YW5kYXJkIFwibW9kZWxcIiBtYXRyaXhcclxuICAgcHVibGljIG1vZGVsID0gTWF0NC5pZGVudGl0eTtcclxuXHJcbiAgIHB1YmxpYyBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy50T2JqLm5hbWU7XHJcbiAgIH1cclxuXHJcbiAgIC8qXHJcbiAgIHB1YmxpYyBnZXRCb3VuZGluZ1B0cygpOiBCb3VuZGluZ1B0cyB7XHJcbiAgICAgIC8vcmV0dXJuIHRoaXMudE9iai5nZXRCb3VuZGluZ1B0cygpO1xyXG4gICAgICBsZXQgcHRzID0gdGhpcy50T2JqLmdldEJvdW5kaW5nUHRzKCk7XHJcbiAgICAgIGxldCBwID0gbmV3IFByb2ZpbGVyKCk7XHJcbiAgICAgIC8vbGV0IGJwID0gcHRzLm11bHRNKHRoaXMubm9ybWFsaXplLm11bHRNKHRoaXMubW9kZWwpKTtcclxuICAgICAgLy9sZXQgYnAgPSBwdHMubXVsdE0odGhpcy5tb2RlbC5tdWx0TSh0aGlzLm5vcm1hbGl6ZSkpO1xyXG4gICAgICBsZXQgYnAgPSBwdHMubXVsdE0odGhpcy5ub3JtYWxpemUpLm11bHRNKHRoaXMubW9kZWwpO1xyXG4gICAgICAvL3AubG9nKCdtdWx0Jyk7XHJcbiAgICAgIHJldHVybiBicDtcclxuICAgfVxyXG4gICAqL1xyXG5cclxuICAgcHVibGljIGdldEJvdW5kaW5nQm94KCk6IEJvdW5kaW5nQm94IHtcclxuICAgICAgcmV0dXJuIHRoaXMudE9iai5ib3gubXVsdE0odGhpcy5ub3JtYWxpemUpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgIGdsQ3R4OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICB0T2JqOiBUcmlhbmdsZU9iaixcclxuICAgICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtXHJcbiAgICkge1xyXG5cclxuICAgICAgdGhpcy5nbCA9IGdsQ3R4O1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgdmFyIGV4dCA9IGdsLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xyXG5cclxuICAgICAgdGhpcy50T2JqID0gdE9iajtcclxuICAgICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcclxuXHJcbiAgICAgIHRoaXMuY3JlYXRlQnVmZmVycygpO1xyXG4gICAgICB0aGlzLnVwbG9hZFRyaWFuZ2xlcygpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYXV0b1NpemUoY2VudGVyOiBWZWMzLCBzaXplOiBudW1iZXIpIHtcclxuXHJcbiAgICAgIGxldCBvYmpDZW50ZXIgPSB0aGlzLnRPYmouY2VudGVyO1xyXG4gICAgICB0aGlzLm5vcm1hbGl6ZSA9IE1hdDQuaWRlbnRpdHk7XHJcbiAgICAgIHRoaXMubm9ybWFsaXplLnRyYW5zbGF0ZShuZXcgVmVjMyhbY2VudGVyLnggLSBvYmpDZW50ZXIueCwgY2VudGVyLnkgLSBvYmpDZW50ZXIueSwgY2VudGVyLnogLSBvYmpDZW50ZXIuel0pKTtcclxuICAgICAgdGhpcy5ub3JtYWxpemUuc2NhbGUoc2l6ZSAvIHRoaXMudE9iai5kaWFnb25hbCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgY3JlYXRlQnVmZmVycygpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBidWZmZXJzIChhbmQgYXNzb2NpYXRlZCBhdHRyaWJ1dGVzKVxyXG4gICAgICB0aGlzLnZlcnRleEJ1ZmZlciA9IG5ldyBnbEF0dHJpYnV0ZUJ1ZmZlcihnbCwgdGhpcy5wcm9ncmFtLCAnYVZlcnRleCcpO1xyXG4gICAgICB0aGlzLm5vcm1hbEJ1ZmZlciA9IG5ldyBnbEF0dHJpYnV0ZUJ1ZmZlcihnbCwgdGhpcy5wcm9ncmFtLCAnYU5vcm1hbCcpO1xyXG4gICAgICB0aGlzLmluZGV4QnVmZmVyID0gbmV3IGdsSW5kZXhCdWZmZXIoZ2wpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZGVsZXRlKCkge1xyXG4gICAgICB0aGlzLnZlcnRleEJ1ZmZlci5kZWxldGUoKTtcclxuICAgICAgdGhpcy5ub3JtYWxCdWZmZXIuZGVsZXRlKCk7XHJcbiAgICAgIHRoaXMuaW5kZXhCdWZmZXIuZGVsZXRlKCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgcmVidWlsZEJ1ZmZlcnMoKSB7XHJcbiAgICAgIHRoaXMuZGVsZXRlKCk7XHJcbiAgICAgIHRoaXMuY3JlYXRlQnVmZmVycygpO1xyXG4gICAgICB0aGlzLnVwbG9hZFRyaWFuZ2xlcygpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcm90WChhbmdsZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMubW9kZWwucm90WChhbmdsZSk7XHJcbiAgIH1cclxuICAgcHVibGljIHJvdFkoYW5nbGU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLm1vZGVsLnJvdFkoYW5nbGUpO1xyXG4gICB9XHJcbiAgIHB1YmxpYyByb3RaKGFuZ2xlOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5tb2RlbC5yb3RaKGFuZ2xlKTtcclxuICAgfVxyXG4gICBwdWJsaWMgcHJlUm90WChhbmdsZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMubW9kZWwucHJlUm90WChhbmdsZSk7XHJcbiAgIH1cclxuICAgcHVibGljIHByZVJvdFkoYW5nbGU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLm1vZGVsLnByZVJvdFkoYW5nbGUpO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBwcmVSb3RaKGFuZ2xlOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5tb2RlbC5wcmVSb3RaKGFuZ2xlKTtcclxuICAgfVxyXG4gICBwdWJsaWMgc2NhbGUoc2NhbGU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLm1vZGVsLnNjYWxlKHNjYWxlKTtcclxuICAgfVxyXG4gICBwdWJsaWMgdHJhbnNsYXRlKG9mZnNldDogVmVjMykge1xyXG4gICAgICB0aGlzLm1vZGVsLnRyYW5zbGF0ZShvZmZzZXQpO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBjbGVhclRyYW5zZm9ybXMoKSB7XHJcbiAgICAgIHRoaXMubW9kZWwgPSBNYXQ0LmlkZW50aXR5O1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgdXBsb2FkVHJpYW5nbGVzKCkge1xyXG5cclxuICAgICAgdGhpcy52ZXJ0ZXhCdWZmZXIudXBsb2FkKHRoaXMudE9iai52ZXJ0aWNlcyk7XHJcbiAgICAgIHRoaXMubm9ybWFsQnVmZmVyLnVwbG9hZCh0aGlzLnRPYmoubm9ybWFscyk7XHJcbiAgICAgIHRoaXMuaW5kZXhCdWZmZXIudXBsb2FkKHRoaXMudE9iai5pbmRpY2VzKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGRyYXcoKSB7XHJcblxyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICBsZXQgdW5pID0gbmV3IGdsVW5pZm9ybShnbCwgdGhpcy5wcm9ncmFtKTtcclxuICAgICAgdW5pLnNldCgnbW9kZWwnLCB0aGlzLm1vZGVsLm11bHRNKHRoaXMubm9ybWFsaXplKSk7XHJcblxyXG4gICAgICB0aGlzLnZlcnRleEJ1ZmZlci5iaW5kKCk7XHJcbiAgICAgIHRoaXMuaW5kZXhCdWZmZXIuYmluZCgpO1xyXG4gICAgICB0aGlzLm5vcm1hbEJ1ZmZlci5iaW5kKCk7XHJcblxyXG4gICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCAzICogdGhpcy50T2JqLm51bVRyaWFuZ2xlcywgZ2wuVU5TSUdORURfSU5ULCAwKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIG9wdGltaXplKG5vcm1hbFR5cGU6IE5vcm1hbFR5cGUpIHtcclxuICAgICAgdGhpcy50T2JqLm9wdGltaXplKG5vcm1hbFR5cGUpO1xyXG4gICAgICB0aGlzLnJlYnVpbGRCdWZmZXJzKCk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgYXBwbHlUb1ZlY3Mobm9ybWFsczogYm9vbGVhbikge1xyXG5cclxuICAgICAgbGV0IHZlY3MgPSBub3JtYWxzID8gdGhpcy50T2JqLm5vcm1hbHMgOiB0aGlzLnRPYmoudmVydGljZXM7XHJcblxyXG4gICAgICAvLyBpZiB3ZSdyZSB1cGRhdGluZyBub3JtYWxzLCBpZ25vcmUgdHJhbnNsYXRpb24gYnkgc2V0dGluZyB3PTBcclxuICAgICAgbGV0IHZlYyA9IG5ldyBWZWM0KFswLCAwLCAwLCBub3JtYWxzID8gMCA6IDFdKTtcclxuXHJcbiAgICAgIGxldCB4Rm9ybSA9IHRoaXMubW9kZWwubXVsdE0odGhpcy5ub3JtYWxpemUpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlY3MubGVuZ3RoIC8gMzsgaSsrKSB7XHJcbiAgICAgICAgIHZlYy54ID0gdmVjc1szICogaSArIDBdO1xyXG4gICAgICAgICB2ZWMueSA9IHZlY3NbMyAqIGkgKyAxXTtcclxuICAgICAgICAgdmVjLnogPSB2ZWNzWzMgKiBpICsgMl07XHJcbiAgICAgICAgIHZlYyA9IHhGb3JtLm11bHRWKHZlYyk7XHJcblxyXG4gICAgICAgICBpZiAobm9ybWFscykge1xyXG4gICAgICAgICAgICB2ZWMgPSB2ZWMubm9ybWFsaXplKCk7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIHZlY3NbMyAqIGkgKyAwXSA9IHZlYy54O1xyXG4gICAgICAgICB2ZWNzWzMgKiBpICsgMV0gPSB2ZWMueTtcclxuICAgICAgICAgdmVjc1szICogaSArIDJdID0gdmVjLno7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIGFwcGx5WEZvcm0oKSB7XHJcbiAgICAgIHRoaXMuYXBwbHlUb1ZlY3MoZmFsc2UpO1xyXG4gICAgICB0aGlzLmFwcGx5VG9WZWNzKHRydWUpO1xyXG5cclxuICAgICAgdGhpcy5ub3JtYWxpemUgPSBNYXQ0LmlkZW50aXR5O1xyXG4gICAgICB0aGlzLm1vZGVsID0gTWF0NC5pZGVudGl0eTtcclxuICAgICAgdGhpcy50T2JqLmZpbmRCb3VuZHMoKTtcclxuICAgICAgdGhpcy5yZWJ1aWxkQnVmZmVycygpO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBJQ3RybCB9IGZyb20gXCIuL0lDdHJsXCI7XHJcbmltcG9ydCB7IGdldEJvb2xlYW5WYWx1ZSB9IGZyb20gXCIuLi9VdGlsL0dsb2JhbHNcIjtcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZm9yIGRhdGEgcGFzc2VkIHRvIHRoZSBDaGVja2JveCBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ2hlY2tib3hTZXR1cCB7XHJcbiAgIGlkPzogc3RyaW5nLFxyXG4gICBsYWJlbDogc3RyaW5nLFxyXG4gICBjaGVja2VkPzogYm9vbGVhbiB8ICgoKSA9PiBib29sZWFuKSxcclxuICAgb25jaGVjaz86IChjaGVja2JveDogQ2hlY2tib3gpID0+IHZvaWQsXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3ggaW1wbGVtZW50cyBJQ3RybCB7XHJcbiAgIHByaXZhdGUgYm94OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICBwcml2YXRlIGdldFN0YXRlOiAoKSA9PiBib29sZWFuO1xyXG5cclxuICAgcHVibGljIGdldCBjaGVja2VkKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3guY2hlY2tlZDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBlbmFibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gIXRoaXMuYm94LmRpc2FibGVkO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2V0IGVuYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgdGhpcy5ib3guZGlzYWJsZWQgPSAhdmFsdWU7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gcGFyZW50IFRoZSBwYXJlbnQgaHRtbCBvYmplY3QuXHJcbiAgICAqIEBwYXJhbSBzZXR1cCBUaGUgc2V0dXAgZGF0YSBvYmplY3RcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50LCBzZXR1cDogSUNoZWNrYm94U2V0dXApIHtcclxuXHJcbiAgICAgIGlmICh0eXBlb2Ygc2V0dXAuY2hlY2tlZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICB0aGlzLmdldFN0YXRlID0gc2V0dXAuY2hlY2tlZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkaXYuaWQgPSBzZXR1cC5pZDtcclxuICAgICAgZGl2LmNsYXNzTmFtZSA9ICdDaGVja2JveERpdic7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChkaXYpO1xyXG5cclxuICAgICAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgbGFiZWwuaWQgPSBzZXR1cC5pZCArICdMYWJlbCc7XHJcbiAgICAgIGxhYmVsLmNsYXNzTmFtZSA9ICdDaGVja2JveExhYmVsJztcclxuICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gc2V0dXAubGFiZWwgPz8gJyc7XHJcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICB0aGlzLmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgIHRoaXMuYm94LmNsYXNzTmFtZSA9ICdDaGVja2JveCc7XHJcbiAgICAgIHRoaXMuYm94LnR5cGUgPSAnY2hlY2tib3gnO1xyXG4gICAgICB0aGlzLmJveC5pZCA9IHNldHVwLmlkICsgJ0NoZWNrYm94JztcclxuICAgICAgdGhpcy5ib3guY2hlY2tlZCA9IGdldEJvb2xlYW5WYWx1ZShzZXR1cC5jaGVja2VkKTtcclxuICAgICAgdGhpcy5ib3gub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgIGlmIChzZXR1cC5vbmNoZWNrKSB7XHJcbiAgICAgICAgICAgIHNldHVwLm9uY2hlY2sodGhpcyk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBsYWJlbC5hcHBlbmRDaGlsZCh0aGlzLmJveCk7XHJcblxyXG4gICAgICBsZXQgbWFyayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgbWFyay5jbGFzc05hbWUgPSAnQ2hlY2ttYXJrJztcclxuICAgICAgbWFyay5pZCA9IHNldHVwLmlkICsgJ0NoZWNrbWFyayc7XHJcbiAgICAgIGxhYmVsLmFwcGVuZENoaWxkKG1hcmspO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmVmcmVzaCgpIHtcclxuICAgICAgaWYgKHRoaXMuZ2V0U3RhdGUpIHtcclxuICAgICAgICAgdGhpcy5ib3guY2hlY2tlZCA9IHRoaXMuZ2V0U3RhdGUoKTtcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBodG1sQ29sb3IgfSBmcm9tIFwiLi4vVXRpbC9odG1sQ29sb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBJbnRlcnBvbGF0ZXMgYW5kIGFycmF5IG9mIGNvbG9yc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbG9yUmFuZ2Uge1xyXG4gICAvKipcclxuICAgICogVGhlIGNvbG9yc1xyXG4gICAgKi9cclxuICAgcHJpdmF0ZSBjb2xvcnM6IGh0bWxDb2xvcltdO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbnN0cnVjdG9yXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gY29sb3JzIFRoZSBjb2xvcnMgdG8gaW50ZXJwb2xhdGVcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb2xvcnM6IGh0bWxDb2xvcltdKSB7XHJcbiAgICAgIHRoaXMuY29sb3JzID0gY29sb3JzO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyBhbiBpbnRlcnBvbGF0ZWQgY29sb3IuXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmFsdWUgQSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0KHZhbHVlOiBudW1iZXIpOiBodG1sQ29sb3Ige1xyXG5cclxuICAgICAgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5jb2xvcnNbMF07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAodmFsdWUgPj0gMSkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5jb2xvcnNbdGhpcy5jb2xvcnMubGVuZ3RoIC0gMV07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoKHRoaXMuY29sb3JzLmxlbmd0aCAtIDEpICogdmFsdWUpO1xyXG4gICAgICAgICBsZXQgcGFydGlhbCA9ICh0aGlzLmNvbG9ycy5sZW5ndGggLSAxKSAqIHZhbHVlIC0gaW5kZXg7XHJcblxyXG4gICAgICAgICBsZXQgciA9IE1hdGgucm91bmQodGhpcy5jb2xvcnNbaW5kZXhdLnIgKyBwYXJ0aWFsICogKHRoaXMuY29sb3JzW2luZGV4ICsgMV0uciAtIHRoaXMuY29sb3JzW2luZGV4XS5yKSk7XHJcbiAgICAgICAgIGxldCBnID0gTWF0aC5yb3VuZCh0aGlzLmNvbG9yc1tpbmRleF0uZyArIHBhcnRpYWwgKiAodGhpcy5jb2xvcnNbaW5kZXggKyAxXS5nIC0gdGhpcy5jb2xvcnNbaW5kZXhdLmcpKTtcclxuICAgICAgICAgbGV0IGIgPSBNYXRoLnJvdW5kKHRoaXMuY29sb3JzW2luZGV4XS5iICsgcGFydGlhbCAqICh0aGlzLmNvbG9yc1tpbmRleCArIDFdLmIgLSB0aGlzLmNvbG9yc1tpbmRleF0uYikpO1xyXG5cclxuICAgICAgICAgcmV0dXJuIG5ldyBodG1sQ29sb3IoW3IsIGcsIGJdKTtcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBJQ3RybCB9IGZyb20gXCIuL0lDdHJsXCI7XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciBkYXRhIHBhc3NlZCB0byB0aGUgTGlzdEJveCBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTGlzdEJveFNldHVwIHtcclxuICAgaWQ/OiBzdHJpbmcsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxpc3RCb3hJdGVtPFQ+IHtcclxuICAgZGl2OiBIVE1MRGl2RWxlbWVudCxcclxuICAgdXNlckRhdGE6IFQsXHJcbn1cclxuXHJcbmNvbnN0IFNUWUxFX0xJU1RfQk9YX0lURU1fU0VMRUNURUQgPSAnTGlzdEJveEl0ZW1TZWxlY3RlZCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdEJveDxUID0gYW55PiBpbXBsZW1lbnRzIElDdHJsIHtcclxuICAgcHJpdmF0ZSBib3g6IEhUTUxEaXZFbGVtZW50O1xyXG4gICBwcml2YXRlIGl0ZW1zOiBJTGlzdEJveEl0ZW08VD5bXSA9IFtdO1xyXG4gICBwdWJsaWMgb25TZWxlY3RlZENoYW5nZWQ6ICgpID0+IHZvaWQ7XHJcblxyXG4gICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCk6IFQge1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIGxldCBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgICAgICAgaWYgKGl0ZW0uZGl2LmNsYXNzTGlzdC5jb250YWlucyhTVFlMRV9MSVNUX0JPWF9JVEVNX1NFTEVDVEVEKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS51c2VyRGF0YTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBlbmFibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICBhbGVydCgnTm90IEltcGxlbWVudGVkIFlldDogTGlzdEJveC5lbmFibGVkJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNldCBlbmFibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgIGFsZXJ0KCdOb3QgSW1wbGVtZW50ZWQgWWV0OiBMaXN0Qm94LmVuYWJsZWQnKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSBwYXJlbnQgVGhlIHBhcmVudCBodG1sIG9iamVjdC5cclxuICAgICogQHBhcmFtIHNldHVwIFRoZSBzZXR1cCBkYXRhIG9iamVjdFxyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogSFRNTEVsZW1lbnQsIHNldHVwOiBJTGlzdEJveFNldHVwKSB7XHJcblxyXG4gICAgICB0aGlzLmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0aGlzLmJveC5pZCA9IHNldHVwLmlkO1xyXG4gICAgICB0aGlzLmJveC5jbGFzc05hbWUgPSAnTGlzdEJveCc7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmJveCk7XHJcblxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYWRkSXRlbShsYWJlbDogc3RyaW5nLCB1c2VyRGF0YT86IGFueSwgaWQ/OiBzdHJpbmcpIHtcclxuICAgICAgbGV0IG9sZFNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZDtcclxuXHJcbiAgICAgIGxldCBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGl0ZW0uaWQgPSBpZCA/PyB1bmRlZmluZWQ7XHJcbiAgICAgIGl0ZW0uY2xhc3NOYW1lID0gJ0xpc3RCb3hJdGVtJztcclxuICAgICAgaXRlbS5pbm5lclRleHQgPSBsYWJlbDtcclxuICAgICAgdGhpcy5ib3guYXBwZW5kQ2hpbGQoaXRlbSk7XHJcblxyXG4gICAgICBpdGVtLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgIGxldCBvbGRTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQ7XHJcblxyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5kaXYuY2xhc3NMaXN0LnJlbW92ZShTVFlMRV9MSVNUX0JPWF9JVEVNX1NFTEVDVEVEKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBpdGVtLmNsYXNzTGlzdC50b2dnbGUoU1RZTEVfTElTVF9CT1hfSVRFTV9TRUxFQ1RFRCk7XHJcblxyXG4gICAgICAgICBpZiAob2xkU2VsZWN0ZWQgIT09IHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25TZWxlY3RlZENoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdGVkQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgZGl2OiBpdGVtLFxyXG4gICAgICAgICB1c2VyRGF0YTogdXNlckRhdGEsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQgPT09IG51bGwpIHtcclxuICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFNUWUxFX0xJU1RfQk9YX0lURU1fU0VMRUNURUQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob2xkU2VsZWN0ZWQgIT09IHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgaWYgKHRoaXMub25TZWxlY3RlZENoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vblNlbGVjdGVkQ2hhbmdlZCgpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgICBsZXQgb2xkU2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkO1xyXG5cclxuICAgICAgdGhpcy5ib3guaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuXHJcbiAgICAgIGlmIChvbGRTZWxlY3RlZCAhPT0gdGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICAgICBpZiAodGhpcy5vblNlbGVjdGVkQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uU2VsZWN0ZWRDaGFuZ2VkKCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmVmcmVzaCgpIHtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgSVNsaWRlclNldHVwLCBTbGlkZXIgfSBmcm9tIFwiLi9TbGlkZXJcIjtcclxuaW1wb3J0IHsgQ2hlY2tib3gsIElDaGVja2JveFNldHVwIH0gZnJvbSBcIi4vQ2hlY2tib3hcIjtcclxuaW1wb3J0IHsgSUN0cmwgfSBmcm9tIFwiLi9JQ3RybFwiO1xyXG5pbXBvcnQgeyBJUmFkaW9idXR0b25TZXR1cCwgUmFkaW9idXR0b24gfSBmcm9tIFwiLi9SYWRpb2J1dHRvblwiO1xyXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gXCIuLi9VdGlsL0dsb2JhbHNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIE1lbnVJdGVtRnVuY3Rpb24gPSAoaXRlbT86IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkO1xyXG5leHBvcnQgdHlwZSBNZW51SXRlbUZ1bmN0aW9uQm9vbCA9ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcclxuXHJcbmVudW0gTWVudUxvY2F0aW9uIHtcclxuICAgQmVsb3csXHJcbiAgIFJpZ2h0LFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNZW51SXRlbU9wdGlvbnMge1xyXG4gICBjbG9zZU9uQ2xpY2s6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21tb24gYmFzZSBjbGFzc2VzIGZvciB0aGluZ3MgdGhhdCBhcmUgbWVudXMgLSBtZW51YmFyLCBwdWxsZG93biBtZW51LCBldGNcclxuICovXHJcbmNsYXNzIE1lbnUge1xyXG4gICBwcml2YXRlIHBhcmVudDogTWVudTtcclxuICAgcHJpdmF0ZSBjaGlsZHJlbjogTWVudVtdID0gW107XHJcbiAgIHByaXZhdGUgY3RybHM6IElDdHJsW10gPSBbXTtcclxuXHJcbiAgIC8vIHRoZSBkaXYgdGhhdCBpcyB0aGUgY29udGFpbmVyIGZvciBtZW51IGl0ZW1zXHJcbiAgIHB1YmxpYyBkaXY6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICAgcHJvdGVjdGVkIGlzTWVudUl0ZW0oZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcclxuICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcclxuICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NOYW1lID09PSAnTWVudUl0ZW0nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICB9XHJcbiAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihwYXJlbnQ6IE1lbnUsIGlkOiBzdHJpbmcsIGNsYXNzTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG5cclxuICAgICAgdGhpcy5kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5kaXYuaWQgPSBpZDtcclxuICAgICAgdGhpcy5kaXYuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG5cclxuICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICBwYXJlbnQuZGl2LmFwcGVuZENoaWxkKHRoaXMuZGl2KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFwYXJlbnQpIHtcclxuICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgcm9vdCBtZW51LCBhZGQgYSBnbG9iYWwgY2xpY2sgaGFuZGxlciBmb3IgY2xvc2luZyBtZW51c1xyXG4gICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNNZW51SXRlbShldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuaGlkZURvd24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc01lbnVJdGVtKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5oaWRlRG93bigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH0pO1xyXG5cclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2hvdygpIHtcclxuICAgICAgdGhpcy5jdHJscy5mb3JFYWNoKChjdHJsKSA9PiBjdHJsLnJlZnJlc2goKSk7XHJcbiAgICAgIGlmICh0aGlzLmRpdi5jbGFzc0xpc3QuY29udGFpbnMoJ01lbnVTaG93JykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgIHRoaXMuZGl2LmNsYXNzTGlzdC5hZGQoJ01lbnVTaG93Jyk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIGhpZGUoKSB7XHJcbiAgICAgIGlmICh0aGlzLmRpdi5jbGFzc0xpc3QuY29udGFpbnMoJ01lbnVTaG93JykpIHtcclxuICAgICAgICAgdGhpcy5kaXYuY2xhc3NMaXN0LnJlbW92ZSgnTWVudVNob3cnKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgaGlkZVVwKCkge1xyXG4gICAgICBsZXQgbWVudTogTWVudSA9IHRoaXM7XHJcbiAgICAgIHdoaWxlIChtZW51LnBhcmVudCkge1xyXG4gICAgICAgICBtZW51LmhpZGUoKTtcclxuICAgICAgICAgbWVudSA9IG1lbnUucGFyZW50O1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBoaWRlRG93bigpIHtcclxuICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICBjaGlsZC5oaWRlKCk7XHJcbiAgICAgICAgIGNoaWxkLmhpZGVEb3duKCk7XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICBwcm90ZWN0ZWQgaW50ZXJuYWxBZGRTdWJNZW51KGlubmVySHRtbDogc3RyaW5nLCBpZDogc3RyaW5nLCBsb2NhdGlvbjogTWVudUxvY2F0aW9uKTogU3ViTWVudSB7XHJcblxyXG4gICAgICBsZXQgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBpdGVtLmlkID0gaWQgKyAnTWVudUl0ZW0nO1xyXG4gICAgICBpdGVtLmNsYXNzTmFtZSA9ICdNZW51SXRlbSc7XHJcbiAgICAgIGl0ZW0uaW5uZXJIVE1MID0gaW5uZXJIdG1sO1xyXG5cclxuICAgICAgaXRlbS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnNob3dTdWJNZW51KGl0ZW0sIHN1Yk1lbnUsIGxvY2F0aW9uKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRpdi5hcHBlbmRDaGlsZChpdGVtKTtcclxuXHJcbiAgICAgIGxldCBzdWJNZW51ID0gbmV3IFN1Yk1lbnUodGhpcywgaWQpO1xyXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goc3ViTWVudSk7XHJcbiAgICAgIHJldHVybiBzdWJNZW51O1xyXG4gICB9XHJcblxyXG4gICBwcm90ZWN0ZWQgc2hvd1N1Yk1lbnUobWVudUl0ZW06IEhUTUxEaXZFbGVtZW50LCBzdWJNZW51OiBTdWJNZW51LCBsb2NhdGlvbjogTWVudUxvY2F0aW9uKSB7XHJcblxyXG4gICAgICAvLyBwb3NpdGlvbiB0aGUgbWVudSBvZmYgc2NyZWVuIHNvIHRoYXQgd2UgY2FuIHF1ZXJ5IGl0J3MgaGVpZ2h0IHdoZW5cclxuICAgICAgLy8gd2UgbWFrZSBpdCB2aXNpYmxlLiBUaGVuIHBvc2l0aW9uIGl0IHByb3Blcmx5XHJcbiAgICAgIHN1Yk1lbnUuZGl2LnN0eWxlLmxlZnQgPSAtNTAwICsgJ3B4J1xyXG4gICAgICBzdWJNZW51LmRpdi5zdHlsZS50b3AgPSAwICsgJ3B4J1xyXG5cclxuICAgICAgLy8gaGlkZSBzaWJsaW5nIG1lbnVzIHRoYXQgYXJlIG9wZW5cclxuICAgICAgdGhpcy5oaWRlRG93bigpO1xyXG5cclxuICAgICAgLy8gc2hvdyB0aGUgZGVzaXJlZCBzdWJtZW51XHJcbiAgICAgIHN1Yk1lbnUuc2hvdygpO1xyXG5cclxuICAgICAgLy8gcG9zaXRpb24gdGhlIG5ldyBtZW51XHJcbiAgICAgIGxldCBib2R5UmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGxldCBtZW51SXRlbVJlY3QgPSBtZW51SXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgbGV0IHN1Yk1lbnVSZWN0ID0gc3ViTWVudS5kaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGlmIChsb2NhdGlvbiA9PT0gTWVudUxvY2F0aW9uLkJlbG93KSB7XHJcbiAgICAgICAgIHN1Yk1lbnUuZGl2LnN0eWxlLmxlZnQgPSBtZW51SXRlbVJlY3QubGVmdCArICdweCdcclxuICAgICAgICAgc3ViTWVudS5kaXYuc3R5bGUudG9wID0gbWVudUl0ZW1SZWN0LmJvdHRvbSArICdweCdcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChsb2NhdGlvbiA9PT0gTWVudUxvY2F0aW9uLlJpZ2h0KSB7XHJcblxyXG4gICAgICAgICBsZXQgbGVmdCA9IG1lbnVJdGVtUmVjdC5sZWZ0ICsgMC41ICogbWVudUl0ZW1SZWN0LndpZHRoO1xyXG4gICAgICAgICBpZiAobGVmdCArIHN1Yk1lbnVSZWN0LndpZHRoID4gYm9keVJlY3Qud2lkdGgpIHtcclxuICAgICAgICAgICAgbGVmdCA9IG1lbnVJdGVtUmVjdC5sZWZ0IC0gc3ViTWVudVJlY3Qud2lkdGg7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgc3ViTWVudS5kaXYuc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xyXG5cclxuICAgICAgICAgbGV0IHRvcCA9IG1lbnVJdGVtUmVjdC50b3A7XHJcbiAgICAgICAgIGlmICh0b3AgKyBzdWJNZW51UmVjdC5oZWlnaHQgPiBib2R5UmVjdC5oZWlnaHQpIHtcclxuICAgICAgICAgICAgdG9wID0gYm9keVJlY3QuaGVpZ2h0IC0gc3ViTWVudVJlY3QuaGVpZ2h0O1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHN1Yk1lbnUuZGl2LnN0eWxlLnRvcCA9IHRvcCArICdweCdcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYWRkSXRlbSh0ZXh0OiBzdHJpbmcsIGNhbGxiYWNrOiBNZW51SXRlbUZ1bmN0aW9uLCBvcHRpb25zPzogSU1lbnVJdGVtT3B0aW9ucyk6IEhUTUxEaXZFbGVtZW50IHtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBhIGRpdiBmb3IgdGhpcyBpdGVtXHJcbiAgICAgIGxldCBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGl0ZW0uY2xhc3NOYW1lID0gJ01lbnVJdGVtJztcclxuICAgICAgaXRlbS5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgICBpdGVtLm9uY2xpY2sgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgICAvLyBoaWRlIG9wZW4gbWVudXMgaW4gb3VyIGhpZXJhcmNoeVxyXG4gICAgICAgICBpZiAoIShvcHRpb25zICYmIG9wdGlvbnMuY2xvc2VPbkNsaWNrID09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVVcCgpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAvLyBmaXJlIHRoZSBldmVudFxyXG4gICAgICAgICBjYWxsYmFjayhpdGVtKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRpdi5hcHBlbmRDaGlsZChpdGVtKTtcclxuXHJcbiAgICAgIGl0ZW0ub25tb3VzZWVudGVyID0gKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLmhpZGVEb3duKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYWRkU2xpZGVyKHNldHVwOiBJU2xpZGVyU2V0dXApOiBTbGlkZXIge1xyXG4gICAgICBsZXQgZGl2ID0gdGhpcy5hZGRJdGVtKFxyXG4gICAgICAgICBzZXR1cC5sYWJlbCxcclxuICAgICAgICAgKCkgPT4geyB9LCAvLyBkbyBub3RoaW5nIG9uIGNsaWNrXHJcbiAgICAgICAgIHsgY2xvc2VPbkNsaWNrOiBmYWxzZSB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBsZXQgY3RybCA9IG5ldyBTbGlkZXIoZGl2LCB7XHJcbiAgICAgICAgIGlkOiBzZXR1cC5pZCxcclxuICAgICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICAgICBtaW46IHNldHVwLm1pbixcclxuICAgICAgICAgbWF4OiBzZXR1cC5tYXgsXHJcbiAgICAgICAgIHZhbHVlOiBzZXR1cC52YWx1ZSxcclxuICAgICAgICAgb25pbnB1dDogc2V0dXAub25pbnB1dCxcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuY3RybHMucHVzaChjdHJsKTtcclxuXHJcbiAgICAgIHJldHVybiBjdHJsO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYWRkQ2hlY2tib3goc2V0dXA6IElDaGVja2JveFNldHVwKTogQ2hlY2tib3gge1xyXG4gICAgICBsZXQgZGl2ID0gdGhpcy5hZGRJdGVtKFxyXG4gICAgICAgICAnJyxcclxuICAgICAgICAgKCkgPT4geyB9LCAvLyBkbyBub3RoaW5nIG9uIGNsaWNrXHJcbiAgICAgICAgIHsgY2xvc2VPbkNsaWNrOiBmYWxzZSB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBsZXQgY3RybCA9IG5ldyBDaGVja2JveChkaXYsIHNldHVwKTtcclxuICAgICAgdGhpcy5jdHJscy5wdXNoKGN0cmwpO1xyXG5cclxuICAgICAgcmV0dXJuIGN0cmw7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBhZGRSYWRpb2J1dHRvbihzZXR1cDogSVJhZGlvYnV0dG9uU2V0dXApOiBSYWRpb2J1dHRvbiB7XHJcbiAgICAgIGxldCBkaXYgPSB0aGlzLmFkZEl0ZW0oXHJcbiAgICAgICAgICcnLFxyXG4gICAgICAgICAoKSA9PiB7IH0sIC8vIGRvIG5vdGhpbmcgb24gY2xpY2tcclxuICAgICAgICAgeyBjbG9zZU9uQ2xpY2s6IGZhbHNlIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGxldCBjdHJsID0gbmV3IFJhZGlvYnV0dG9uKGRpdiwgc2V0dXApO1xyXG4gICAgICB0aGlzLmN0cmxzLnB1c2goY3RybCk7XHJcblxyXG4gICAgICByZXR1cm4gY3RybDtcclxuICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogSG9yaXpvbnRhbCBtZW51YmFyIGFjcm9zcyB0aGUgdG9wIG9mIHRoZSBzY3JlZW5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZW51YmFyIGV4dGVuZHMgTWVudSB7XHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgIHN1cGVyKG51bGwsICdNZW51YmFyJywgJ01lbnViYXInKTtcclxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMuZGl2KTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGFkZFN1Yk1lbnUodGV4dDogc3RyaW5nLCBpZD86IHN0cmluZyk6IFN1Yk1lbnUge1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxBZGRTdWJNZW51KHRleHQsIGlkID8/ICh0ZXh0ICsgJ01lbnUnKSwgTWVudUxvY2F0aW9uLkJlbG93KTtcclxuICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBBIGNoaWxkIG1lbnUgb2YgYSBtZW51LCBpLmUuIHRoZSBpdGVtIHRoYXQgYXBwZWFycyB3aGVuIHlvdSBjbGljayBvbiBzb21ldGhpbmcgaW4gdGhlIG1lbnViYXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdWJNZW51IGV4dGVuZHMgTWVudSB7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IocGFyZW50OiBNZW51LCBpZDogc3RyaW5nKSB7XHJcbiAgICAgIHN1cGVyKHBhcmVudCwgaWQgKyAnTWVudScsICdNZW51Jyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBhZGRTdWJNZW51KHRleHQ6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiBTdWJNZW51IHtcclxuXHJcbiAgICAgIGlmICghaWQpIHtcclxuICAgICAgICAgaWQgPSB0ZXh0LnJlcGxhY2UoL1xccysvZywgJycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgc3BhbklkID0gaWQgKyAnU3Bhbic7XHJcbiAgICAgIGxldCBzdWJNZW51ID0gdGhpcy5pbnRlcm5hbEFkZFN1Yk1lbnUodGV4dCArICc8c3BhbiBpZD1cIicgKyBzcGFuSWQgKyAnXCIgc3R5bGU9XCJmbG9hdDpyaWdodFwiPj48L3NwYW4+JywgaWQsIE1lbnVMb2NhdGlvbi5SaWdodCk7XHJcblxyXG4gICAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwYW5JZCkgYXMgSFRNTFNwYW5FbGVtZW50O1xyXG4gICAgICBsZXQgZGl2ID0gc3Bhbi5wYXJlbnRFbGVtZW50IGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICBkaXYub25tb3VzZWVudGVyID0gKCkgPT4ge1xyXG4gICAgICAgICBpZiAoaXNNb2JpbGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gdGhpcyBldmVudCBpcyB0cmlnZ2VyaW5nIG9uIGEgdG91Y2hzY3JlZW4gbGFwdG9wIHdoZW4gd2UgZG9uJ3Qgd2FudCBpdCB0by5cclxuICAgICAgICAgICAgdGhpcy5oaWRlRG93bigpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dTdWJNZW51KGRpdiwgc3ViTWVudSwgTWVudUxvY2F0aW9uLlJpZ2h0KTtcclxuICAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHN1Yk1lbnU7XHJcbiAgIH1cclxufSIsImV4cG9ydCBlbnVtIFRleHRMb2NhdGlvbiB7XHJcbiAgIENlbnRlcixcclxuICAgVG9wTGVmdCxcclxuICAgVG9wUmlnaHQsXHJcbiAgIEJvdHRvbUxlZnQsXHJcbiAgIEJvdHRvbVJpZ2h0XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPdmVybGF5Q2FudmFzIHtcclxuICAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICBwcml2YXRlIHNtYWxsRm9udDogc3RyaW5nO1xyXG4gICBwcml2YXRlIGxhcmdlRm9udDogc3RyaW5nO1xyXG5cclxuICAgcHVibGljIGdldCBoZWlnaHQoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcbiAgIH1cclxuICAgcHVibGljIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB2YWx1ZTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCB3aWR0aCgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLndpZHRoO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBzZXQgd2lkdGgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHZhbHVlO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGNvbnRleHQoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IocGFyZW50OiBIVE1MRWxlbWVudCwgaWQ/OiBzdHJpbmcpIHtcclxuICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgdGhpcy5jYW52YXMuaWQgPSBpZDtcclxuICAgICAgdGhpcy5jYW52YXMuY2xhc3NOYW1lID0gJ092ZXJsYXknO1xyXG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xyXG5cclxuICAgICAgbGV0IGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChkdW1teSk7XHJcbiAgICAgIGR1bW15LmNsYXNzTmFtZSA9ICdPdmVybGF5J1xyXG4gICAgICB0aGlzLmxhcmdlRm9udCA9IGdldENvbXB1dGVkU3R5bGUoZHVtbXkpLmZvbnQ7XHJcbiAgICAgIGR1bW15LmNsYXNzTmFtZSA9ICdPdmVybGF5QW5ub3RhdGlvbic7XHJcbiAgICAgIHRoaXMuc21hbGxGb250ID0gZ2V0Q29tcHV0ZWRTdHlsZShkdW1teSkuZm9udDtcclxuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGR1bW15KTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgICBsZXQgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBmaWxsVGV4dChtc2c6IHN0cmluZywgbG9jYXRpb246IFRleHRMb2NhdGlvbiA9IFRleHRMb2NhdGlvbi5DZW50ZXIpIHtcclxuICAgICAgbGV0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gICAgICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuY2FudmFzKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IHN0eWxlLmNvbG9yO1xyXG5cclxuICAgICAgbGV0IHg6IG51bWJlcjtcclxuICAgICAgbGV0IHk6IG51bWJlcjtcclxuXHJcbiAgICAgIHN3aXRjaCAobG9jYXRpb24pIHtcclxuICAgICAgICAgY2FzZSBUZXh0TG9jYXRpb24uQ2VudGVyOlxyXG4gICAgICAgICAgICBjdHguZm9udCA9IHRoaXMubGFyZ2VGb250O1xyXG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgICAgICAgICAgeCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgICAgICB5ID0gdGhpcy5oZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgIGNhc2UgVGV4dExvY2F0aW9uLkJvdHRvbUxlZnQ6XHJcbiAgICAgICAgICAgIGN0eC5mb250ID0gdGhpcy5zbWFsbEZvbnQ7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcclxuICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgIHkgPSB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlIFRleHRMb2NhdGlvbi5Cb3R0b21SaWdodDpcclxuICAgICAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnNtYWxsRm9udDtcclxuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdyaWdodCc7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcclxuICAgICAgICAgICAgeCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgIHkgPSB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlIFRleHRMb2NhdGlvbi5Ub3BMZWZ0OlxyXG4gICAgICAgICAgICBjdHguZm9udCA9IHRoaXMuc21hbGxGb250O1xyXG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XHJcbiAgICAgICAgICAgIHggPSAwO1xyXG4gICAgICAgICAgICB5ID0gMDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlIFRleHRMb2NhdGlvbi5Ub3BSaWdodDpcclxuICAgICAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnNtYWxsRm9udDtcclxuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdyaWdodCc7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcclxuICAgICAgICAgICAgeCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgIHkgPSAwO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjdHguZmlsbFRleHQobXNnLCB4LCB5KTtcclxuICAgfVxyXG59IiwiZXhwb3J0IHR5cGUgUGFuZWxTaG93SGlkZUZ1bmN0aW9uID0gKHBhbmVsOiBQYW5lbCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYW5lbCB7XHJcblxyXG4gICBwdWJsaWMgcmVhZG9ubHkgZGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgcHVibGljIG9uU2hvdzogUGFuZWxTaG93SGlkZUZ1bmN0aW9uO1xyXG4gICBwdWJsaWMgb25IaWRlOiBQYW5lbFNob3dIaWRlRnVuY3Rpb247XHJcblxyXG4gICBwcm90ZWN0ZWQgc2hvdyh2YWx1ZTogYm9vbGVhbikge1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IHZpc2libGUoKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKHRoaXMuZGl2KS5kaXNwbGF5ID09PSAnYmxvY2snO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2V0IHZpc2libGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgdGhpcy5kaXYuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJ2Jsb2NrJyA6ICdub25lJztcclxuXHJcbiAgICAgICAgIC8vIGxldCBkZXJpdmVkIGNsYXNzZXMga25vd1xyXG4gICAgICAgICB0aGlzLnNob3codmFsdWUpO1xyXG5cclxuICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uU2hvdykge1xyXG4gICAgICAgICAgICAgICB0aGlzLm9uU2hvdyh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkhpZGUpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5vbkhpZGUodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50LCBpZDogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMuZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRoaXMuZGl2LmlkID0gaWQ7XHJcbiAgICAgIHRoaXMuZGl2LmNsYXNzTmFtZSA9ICdQYW5lbCc7XHJcbiAgICAgIHRoaXMuZGl2LmNsYXNzTGlzdC5hZGQoJ0NvbnRhaW5lcicpO1xyXG5cclxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMuZGl2KTtcclxuXHJcbiAgICAgIGxldCBleGl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGV4aXRCdXR0b24uaWQgPSAnRXhpdEJ1dHRvbic7XHJcbiAgICAgIGV4aXRCdXR0b24uY2xhc3NOYW1lID0gJ0RpdkJ1dHRvbic7XHJcbiAgICAgIGV4aXRCdXR0b24uaW5uZXJUZXh0ID0gJ1gnO1xyXG4gICAgICBleGl0QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZGl2LmFwcGVuZENoaWxkKGV4aXRCdXR0b24pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZGVsZXRlKCkge1xyXG4gICAgICAvLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGRlcml2ZWQgY2xhc3NlcyBpZiBuZWVkZWRcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgVmVjMiB9IGZyb20gXCIuLi9VdGlsM0QvVmVjXCI7XHJcblxyXG50eXBlIFBvaW50ZXJSb3RhdGVGdW5jdGlvbiA9IChhbmdsZTogbnVtYmVyLCBkZWx0YTogbnVtYmVyKSA9PiB2b2lkO1xyXG50eXBlIFBvaW50ZXJUcmFuc2xhdGVGdW5jdGlvbiA9IChkZWx0YTogVmVjMikgPT4gdm9pZDtcclxudHlwZSBQb2ludGVyU2NhbGVGdW5jdGlvbiA9IChzY2FsZTogbnVtYmVyLCBjaGFuZ2U6IG51bWJlcikgPT4gdm9pZDtcclxudHlwZSBQb2ludGVyRHJhZ0Z1bmN0aW9uID0gKHBvczogVmVjMiwgZGVsdGE6IFZlYzIpID0+IHZvaWQ7XHJcbnR5cGUgUG9pbnRlclVwRnVuY3Rpb24gPSAoKSA9PiB2b2lkO1xyXG50eXBlIFBvaW50ZXJEb3duRnVuY3Rpb24gPSAocG9zOiBWZWMyKSA9PiB2b2lkO1xyXG50eXBlIFBvaW50ZXJEYmxDbGlja0Z1bmN0aW9uID0gKHBvczogVmVjMikgPT4gYm9vbGVhbjtcclxudHlwZSBQb2ludGVyQ2xpY2tGdW5jdGlvbiA9IChwb3M6IFZlYzIpID0+IGJvb2xlYW47XHJcblxyXG5jb25zdCBEQkxfQ0xJQ0tfVElNRSA9IDMwMDsgLy8gbXNcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGNsYXNzIGZvciBtYW5hZ2luZyB0b3VjaC9tb3VzZSBldmVudHMgb3ZlciBhIGh0bWwgZWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBvaW50ZXJFdmVudEhhbmRsZXIge1xyXG5cclxuICAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgcHVibGljIG1vdXNlRG93biA9IGZhbHNlO1xyXG5cclxuICAgcHVibGljIG9uVXA6IFBvaW50ZXJVcEZ1bmN0aW9uO1xyXG4gICBwdWJsaWMgb25Eb3duOiBQb2ludGVyRG93bkZ1bmN0aW9uO1xyXG4gICBwdWJsaWMgb25TY2FsZTogUG9pbnRlclNjYWxlRnVuY3Rpb247XHJcbiAgIHB1YmxpYyBvblJvdGF0ZTogUG9pbnRlclJvdGF0ZUZ1bmN0aW9uO1xyXG4gICBwdWJsaWMgb25UcmFuc2xhdGU6IFBvaW50ZXJUcmFuc2xhdGVGdW5jdGlvbjtcclxuICAgcHVibGljIG9uQ2xpY2s6IFBvaW50ZXJDbGlja0Z1bmN0aW9uO1xyXG4gICBwdWJsaWMgb25EYmxDbGljazogUG9pbnRlckRibENsaWNrRnVuY3Rpb247XHJcbiAgIHB1YmxpYyBvbkRyYWc6IFBvaW50ZXJEcmFnRnVuY3Rpb247XHJcbiAgIHB1YmxpYyBjdHJsS2V5ID0gZmFsc2U7XHJcblxyXG4gICBwdWJsaWMgbGFzdFBvczogVmVjMjtcclxuICAgcHJpdmF0ZSBsYXN0VG91Y2hUaW1lOiBudW1iZXI7XHJcbiAgIHByaXZhdGUgcHJpbWFyeVRvdWNoSWQ6IG51bWJlciA9IC0xO1xyXG4gICBwcml2YXRlIHNlY29uZGFyeVRvdWNoSWQ6IG51bWJlciA9IC0xO1xyXG4gICBwcml2YXRlIGluaXRpYWxUb3VjaERpc3RhbmNlOiBudW1iZXI7XHJcbiAgIHByaXZhdGUgbGFzdFRvdWNoRGlzdGFuY2U6IG51bWJlcjtcclxuICAgcHJpdmF0ZSBsYXN0VG91Y2hBbmdsZTogbnVtYmVyO1xyXG4gICBwcml2YXRlIGxhc3RUb3VjaENlbnRlcjogVmVjMjtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG5cclxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuXHJcbiAgICAgIC8vIGVsZW1lbnQub250b3VjaCBpc24ndCBzdXBwb3J0ZWQgb24gZGVza3RvcCBkZXZpY2VzIHNvIHVzZSBhZGRFdmVudExpc3RlbmVyIGluc3RlYWRcclxuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgICB0aGlzLmN0cmxLZXkgPSBldmVudC5jdHJsS2V5O1xyXG5cclxuICAgICAgICAgLy8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tIHVzaW5nIHRoZSBldmVudFxyXG4gICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgZmlyc3QgdG91Y2hcclxuICAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAvLyByZWNvcmQgdGhlIHByaW1hcnkgdG91Y2ggaWRcclxuICAgICAgICAgICAgdGhpcy5wcmltYXJ5VG91Y2hJZCA9IGV2ZW50LnRvdWNoZXNbMF0uaWRlbnRpZmllcjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNlbmQgb3V0IG9uRG93bigpIGFuZCBwb3RlbnRpYWxseSBvbkRibENsaWNrKCkgZXZlbnRzXHJcbiAgICAgICAgICAgIGxldCBwb3MgPSB0aGlzLmdldFBvcyhldmVudC50b3VjaGVzWzBdKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0aW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgaWYgKHRpbWUgLSB0aGlzLmxhc3RUb3VjaFRpbWUgPCBEQkxfQ0xJQ0tfVElNRSkge1xyXG4gICAgICAgICAgICAgICB0aGlzLm91ckRibENsaWNrKHBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMub3VyT25Eb3duKHBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sYXN0VG91Y2hUaW1lID0gdGltZTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICAvLyBpZiB0aGlzIGlzIHRoZSBzZWNvbmQgdG91Y2hcclxuICAgICAgICAgZWxzZSBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDIgJiYgdGhpcy5wcmltYXJ5VG91Y2hJZCA+PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyByZWNvcmQgdGhlIHNlY29uZGFyeSB0b3VjaCBpZC4gSXQgd2lsbCBhbHdheXMgYmUgdGhlIHNlY29uZCBlbGVtZW50IHdoZW5cclxuICAgICAgICAgICAgLy8gdGhlcmUgYXJlIG9ubHkgdHdvIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5VG91Y2hJZCA9IGV2ZW50LnRvdWNoZXNbMV0uaWRlbnRpZmllcjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCB2YWx1ZXMgZm9yIGdlc3R1cmVzXHJcbiAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IHRoaXMuY29tcHV0ZVRvdWNoRGlzdGFuY2UoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxUb3VjaERpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFRvdWNoRGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0VG91Y2hBbmdsZSA9IHRoaXMuY29tcHV0ZVRvdWNoQW5nbGUoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RUb3VjaENlbnRlciA9IHRoaXMuY29tcHV0ZVRvdWNoQ2VudGVyKGV2ZW50KTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgICB0aGlzLmN0cmxLZXkgPSBldmVudC5jdHJsS2V5O1xyXG5cclxuICAgICAgICAgLy8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tIHVzaW5nIHRoZSBldmVudFxyXG4gICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgLy8gaWYgdGhlIGluaXRpYWwgdHdvIHRvdWNoZXMgYXJlIGFjdGl2ZVxyXG4gICAgICAgICBpZiAodGhpcy5wcmltYXJ5VG91Y2hJZCA+PSAwICYmIHRoaXMuc2Vjb25kYXJ5VG91Y2hJZCA+PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBzZW5kIG91dCBnZXN0dXJlIGV2ZW50c1xyXG4gICAgICAgICAgICBsZXQgZGlzdGFuY2UgPSB0aGlzLmNvbXB1dGVUb3VjaERpc3RhbmNlKGV2ZW50KTtcclxuICAgICAgICAgICAgbGV0IHNjYWxlID0gZGlzdGFuY2UgLyB0aGlzLmluaXRpYWxUb3VjaERpc3RhbmNlO1xyXG4gICAgICAgICAgICBsZXQgY2hhbmdlID0gZGlzdGFuY2UgLyB0aGlzLmxhc3RUb3VjaERpc3RhbmNlO1xyXG4gICAgICAgICAgICB0aGlzLm91ck9uU2NhbGUoc2NhbGUsIGNoYW5nZSk7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFRvdWNoRGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBhbmdsZSA9IHRoaXMuY29tcHV0ZVRvdWNoQW5nbGUoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLm91ck9uUm90YXRlKGFuZ2xlLCBhbmdsZSAtIHRoaXMubGFzdFRvdWNoQW5nbGUpO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RUb3VjaEFuZ2xlID0gYW5nbGU7XHJcblxyXG4gICAgICAgICAgICBsZXQgY2VudGVyID0gdGhpcy5jb21wdXRlVG91Y2hDZW50ZXIoZXZlbnQpO1xyXG4gICAgICAgICAgICAvLyByZXZlcnNlIFkgdmFsdWVzIHNvIHRoZSBib3R0b20gaXMgemVybyBpbnN0ZWFkIG9mIHRoZSB0b3BcclxuICAgICAgICAgICAgbGV0IGRlbHRhID0gW2NlbnRlci54IC0gdGhpcy5sYXN0VG91Y2hDZW50ZXIueCwgdGhpcy5sYXN0VG91Y2hDZW50ZXIueSAtIGNlbnRlci55XTtcclxuICAgICAgICAgICAgdGhpcy5vdXJPblRyYW5zbGF0ZShuZXcgVmVjMihkZWx0YSkpO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RUb3VjaENlbnRlciA9IGNlbnRlcjtcclxuICAgICAgICAgfVxyXG4gICAgICAgICAvLyBpZiBvbmx5IHRoZSBpbml0aWFsIHRvdWNoIGlzIGFjdGl2ZVxyXG4gICAgICAgICBlbHNlIGlmICh0aGlzLnByaW1hcnlUb3VjaElkID49IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIHNlbmQgb3V0IHRoZSBkcmFnIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICAgICBsZXQgdG91Y2ggPSB0aGlzLmdldFRvdWNoKGV2ZW50LCB0aGlzLnByaW1hcnlUb3VjaElkKTtcclxuICAgICAgICAgICAgICAgbGV0IHBvcyA9IHRoaXMuZ2V0UG9zKHRvdWNoKTtcclxuICAgICAgICAgICAgICAgdGhpcy5vdXJPbkRyYWcocG9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIChldmVudDogVG91Y2hFdmVudCkgPT4ge1xyXG5cclxuICAgICAgICAgdGhpcy5jdHJsS2V5ID0gZXZlbnQuY3RybEtleTtcclxuXHJcbiAgICAgICAgIC8vIHByZXZlbnQgdGhlIGJyb3dzZXIgZnJvbSB1c2luZyB0aGUgZXZlbnRcclxuICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgIGlmICh0aGlzLnNlY29uZGFyeVRvdWNoSWQgPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRUb3VjaChldmVudCwgdGhpcy5zZWNvbmRhcnlUb3VjaElkKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICB0aGlzLnNlY29uZGFyeVRvdWNoSWQgPSAtMTtcclxuXHJcbiAgICAgICAgICAgICAgIC8vIGlmIHdlIGxpZnRlZCB0aGUgc2Vjb25kIGZpbmdlciwgYnV0IG5vdCB0aGUgZmlyc3QsIGdvIGJhY2tcclxuICAgICAgICAgICAgICAgLy8gdG8gdGhlIGRyYWcgZ2VzdHVyZSwgYnV0IGFkanVzdCB0aGUgcmVtZW1iZXJkIHBvc2l0aW9uIHRvXHJcbiAgICAgICAgICAgICAgIC8vIGJlIHRoZSBjdXJyZW50IG9uZSBzbyB0aGF0IHRoaW5ncyBkb24ndCBqdW1wXHJcbiAgICAgICAgICAgICAgIGxldCB0b3VjaCA9IHRoaXMuZ2V0VG91Y2goZXZlbnQsIHRoaXMucHJpbWFyeVRvdWNoSWQpO1xyXG4gICAgICAgICAgICAgICBpZiAodG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0UG9zID0gdGhpcy5nZXRQb3ModG91Y2gpO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgaWYgKHRoaXMucHJpbWFyeVRvdWNoSWQgPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRUb3VjaChldmVudCwgdGhpcy5wcmltYXJ5VG91Y2hJZCkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5wcmltYXJ5VG91Y2hJZCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgdGhpcy5vdXJPblVwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgaWYgKHRoaXMuc2Vjb25kYXJ5VG91Y2hJZCA9PT0gLTEgfHwgdGhpcy5wcmltYXJ5VG91Y2hJZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsVG91Y2hEaXN0YW5jZSA9IC0xO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RUb3VjaERpc3RhbmNlID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFRvdWNoQW5nbGUgPSAtMTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0VG91Y2hDZW50ZXIgPSBuZXcgVmVjMihbLTEsIC0xXSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBlbGVtZW50Lm9ubW91c2Vkb3duID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgICB0aGlzLmN0cmxLZXkgPSBldmVudC5jdHJsS2V5O1xyXG5cclxuICAgICAgICAgbGV0IHBvcyA9IG5ldyBWZWMyKFsoPGFueT5ldmVudCkubGF5ZXJYLCAoPGFueT5ldmVudCkubGF5ZXJZXSk7XHJcbiAgICAgICAgIHRoaXMub3VyT25Eb3duKHBvcyk7XHJcblxyXG4gICAgICAgICAvLyBkaXNhYmxlIHNlbGVjdGlvbiBiZWNhdXNlIGRyYWdnaW5nIGlzIHVzZWQgZm9yIHJvdGF0aW5nIHRoZSBjYW1lcmEgYW5kIG1vdmluZyBvYmplY3RzXHJcbiAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbWVudC5vbm1vdXNlbW92ZSA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cclxuICAgICAgICAgdGhpcy5jdHJsS2V5ID0gZXZlbnQuY3RybEtleTtcclxuXHJcbiAgICAgICAgIGxldCBwb3MgPSBuZXcgVmVjMihbKDxhbnk+ZXZlbnQpLmxheWVyWCwgKDxhbnk+ZXZlbnQpLmxheWVyWV0pO1xyXG4gICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5vdXJPbkRyYWcocG9zKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBlbGVtZW50Lm9ubW91c2V1cCA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cclxuICAgICAgICAgdGhpcy5jdHJsS2V5ID0gZXZlbnQuY3RybEtleTtcclxuXHJcbiAgICAgICAgIHRoaXMub3VyT25VcCgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgZWxlbWVudC5vbm1vdXNlbGVhdmUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbWVudC5vbmRibGNsaWNrID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgICB0aGlzLmN0cmxLZXkgPSBldmVudC5jdHJsS2V5O1xyXG5cclxuICAgICAgICAgbGV0IHBvcyA9IG5ldyBWZWMyKFsoPGFueT5ldmVudCkubGF5ZXJYLCAoPGFueT5ldmVudCkubGF5ZXJZXSk7XHJcbiAgICAgICAgIHRoaXMub3VyRGJsQ2xpY2socG9zKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGdldFRvdWNoKGV2ZW50OiBUb3VjaEV2ZW50LCBpZDogbnVtYmVyKTogVG91Y2gge1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudC50b3VjaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbaV07XHJcbiAgICAgICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdG91Y2g7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gbm8gbWF0Y2ggd2FzIGZvdW5kXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGdldFBvcyh0b3VjaDogVG91Y2gpOiBWZWMyIHtcclxuICAgICAgbGV0IHJlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjMihbdG91Y2guY2xpZW50WCAtIHJlY3QueCwgdG91Y2guY2xpZW50WSAtIHJlY3QueV0pO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGdldFRvdWNoZXMoZXZlbnQ6IFRvdWNoRXZlbnQpOiB7IHByaW1hcnlUb3VjaDogVG91Y2gsIHNlY29uZGFyeVRvdWNoOiBUb3VjaCB9IHtcclxuXHJcbiAgICAgIGlmICh0aGlzLnByaW1hcnlUb3VjaElkIDwgMCB8fCB0aGlzLnNlY29uZGFyeVRvdWNoSWQgPCAwKSB7XHJcbiAgICAgICAgIHRocm93IEVycm9yKCdUd28gdG91Y2hlcyBleHBlY3RlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICBwcmltYXJ5VG91Y2g6IHRoaXMuZ2V0VG91Y2goZXZlbnQsIHRoaXMucHJpbWFyeVRvdWNoSWQpLFxyXG4gICAgICAgICBzZWNvbmRhcnlUb3VjaDogdGhpcy5nZXRUb3VjaChldmVudCwgdGhpcy5zZWNvbmRhcnlUb3VjaElkKSxcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNvbXB1dGVUb3VjaERpc3RhbmNlKGV2ZW50OiBUb3VjaEV2ZW50KTogbnVtYmVyIHtcclxuXHJcbiAgICAgIGxldCB0b3VjaGVzID0gdGhpcy5nZXRUb3VjaGVzKGV2ZW50KTtcclxuXHJcbiAgICAgIGxldCB4MSA9IHRvdWNoZXMucHJpbWFyeVRvdWNoLnNjcmVlblg7XHJcbiAgICAgIGxldCB5MSA9IHRvdWNoZXMucHJpbWFyeVRvdWNoLnNjcmVlblk7XHJcbiAgICAgIGxldCB4MiA9IHRvdWNoZXMuc2Vjb25kYXJ5VG91Y2guc2NyZWVuWDtcclxuICAgICAgbGV0IHkyID0gdG91Y2hlcy5zZWNvbmRhcnlUb3VjaC5zY3JlZW5ZO1xyXG5cclxuICAgICAgcmV0dXJuIE1hdGguc3FydCgoeDIgLSB4MSkgKiAoeDIgLSB4MSkgKyAoeTIgLSB5MSkgKiAoeTIgLSB5MSkpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNvbXB1dGVUb3VjaEFuZ2xlKGV2ZW50OiBUb3VjaEV2ZW50KTogbnVtYmVyIHtcclxuXHJcbiAgICAgIGxldCB0b3VjaGVzID0gdGhpcy5nZXRUb3VjaGVzKGV2ZW50KTtcclxuXHJcbiAgICAgIGxldCB4MSA9IHRvdWNoZXMucHJpbWFyeVRvdWNoLnNjcmVlblg7XHJcbiAgICAgIGxldCB5MSA9IHRvdWNoZXMucHJpbWFyeVRvdWNoLnNjcmVlblk7XHJcbiAgICAgIGxldCB4MiA9IHRvdWNoZXMuc2Vjb25kYXJ5VG91Y2guc2NyZWVuWDtcclxuICAgICAgbGV0IHkyID0gdG91Y2hlcy5zZWNvbmRhcnlUb3VjaC5zY3JlZW5ZO1xyXG5cclxuICAgICAgcmV0dXJuIE1hdGguYXRhbjIoeTIgLSB5MSwgeDIgLSB4MSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgY29tcHV0ZVRvdWNoQ2VudGVyKGV2ZW50OiBUb3VjaEV2ZW50KTogVmVjMiB7XHJcblxyXG4gICAgICBsZXQgdG91Y2hlcyA9IHRoaXMuZ2V0VG91Y2hlcyhldmVudCk7XHJcblxyXG4gICAgICBsZXQgeDEgPSB0b3VjaGVzLnByaW1hcnlUb3VjaC5zY3JlZW5YO1xyXG4gICAgICBsZXQgeTEgPSB0b3VjaGVzLnByaW1hcnlUb3VjaC5zY3JlZW5ZO1xyXG4gICAgICBsZXQgeDIgPSB0b3VjaGVzLnNlY29uZGFyeVRvdWNoLnNjcmVlblg7XHJcbiAgICAgIGxldCB5MiA9IHRvdWNoZXMuc2Vjb25kYXJ5VG91Y2guc2NyZWVuWTtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgVmVjMihbKHgxICsgeDIpIC8gMiwgKHkxICsgeTIpIC8gMl0pO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG91ck9uRG93bihwb3M6IFZlYzIpIHtcclxuXHJcbiAgICAgIC8vIGNoZWNrIGZvciBhIGNsaWNrIGhhbmRsZXJcclxuICAgICAgaWYgKHRoaXMub25DbGljayAmJiB0aGlzLm9uQ2xpY2socG9zLmNsb25lKCkpKSB7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBpZiBub3QgaGFuZGxlZCBieSBhIGNsaWNrIGhhbmRlciwgc2VuZCB0aGUgb25Eb3duIGV2ZW50XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgIHRoaXMubGFzdFBvcyA9IHBvcy5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgaWYgKHRoaXMub25Eb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Eb3duKHBvcy5jbG9uZSgpKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb3VyT25VcCgpIHtcclxuXHJcbiAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAodGhpcy5vblVwKSB7XHJcbiAgICAgICAgIHRoaXMub25VcCgpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgb3VyT25EcmFnKHBvczogVmVjMikge1xyXG4gICAgICBpZiAodGhpcy5vbkRyYWcpIHtcclxuICAgICAgICAgbGV0IGRlbHRhID0gbmV3IFZlYzIoW3Bvcy54IC0gdGhpcy5sYXN0UG9zLngsIHBvcy55IC0gdGhpcy5sYXN0UG9zLnldKTtcclxuICAgICAgICAgdGhpcy5vbkRyYWcocG9zLmNsb25lKCksIGRlbHRhKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxhc3RQb3MgPSBwb3MuY2xvbmUoKTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvdXJEYmxDbGljayhwb3M6IFZlYzIpIHtcclxuICAgICAgaWYgKHRoaXMub25EYmxDbGljaykge1xyXG4gICAgICAgICB0aGlzLm9uRGJsQ2xpY2socG9zKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG91ck9uU2NhbGUoc2NhbGU6IG51bWJlciwgY2hhbmdlOiBudW1iZXIpIHtcclxuICAgICAgaWYgKHRoaXMub25TY2FsZSkge1xyXG4gICAgICAgICB0aGlzLm9uU2NhbGUoc2NhbGUsIGNoYW5nZSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBvdXJPblJvdGF0ZShhbmdsZTogbnVtYmVyLCBkZWx0YTogbnVtYmVyKSB7XHJcbiAgICAgIGlmICh0aGlzLm9uUm90YXRlKSB7XHJcbiAgICAgICAgIHRoaXMub25Sb3RhdGUoYW5nbGUsIGRlbHRhKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIG91ck9uVHJhbnNsYXRlKGRlbHRhOiBWZWMyKSB7XHJcbiAgICAgIGlmICh0aGlzLm9uVHJhbnNsYXRlKSB7XHJcbiAgICAgICAgIHRoaXMub25UcmFuc2xhdGUoZGVsdGEpO1xyXG4gICAgICB9XHJcbiAgIH1cclxufSIsImltcG9ydCB7IElDdHJsIH0gZnJvbSBcIi4vSUN0cmxcIjtcclxuaW1wb3J0IHsgZ2V0Qm9vbGVhblZhbHVlIH0gZnJvbSBcIi4uL1V0aWwvR2xvYmFsc1wiO1xyXG5cclxudHlwZSBCb29sZWFuRnVuYyA9ICgpID0+IGJvb2xlYW47XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGZvciBkYXRhIHBhc3NlZCB0byB0aGUgUmFkaW9idXR0b24gY29uc3RydWN0b3JcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJhZGlvYnV0dG9uU2V0dXAge1xyXG4gICBpZD86IHN0cmluZyxcclxuICAgbGFiZWw6IHN0cmluZyxcclxuICAgZ3JvdXA6IHN0cmluZyxcclxuICAgY2hlY2tlZD86IGJvb2xlYW4gfCAoKCkgPT4gYm9vbGVhbiksXHJcbiAgIG9uY2hlY2s/OiAocmFkaW86IFJhZGlvYnV0dG9uKSA9PiB2b2lkLFxyXG4gICBvbnVuY2hlY2s/OiAocmFkaW86IFJhZGlvYnV0dG9uKSA9PiB2b2lkLFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmFkaW9idXR0b24gaW1wbGVtZW50cyBJQ3RybCB7XHJcbiAgIHByaXZhdGUgYm94OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICBwcml2YXRlIGdldFN0YXRlOiAoKSA9PiBib29sZWFuO1xyXG5cclxuICAgcHVibGljIGdldCBjaGVja2VkKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3guY2hlY2tlZDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBlbmFibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gIXRoaXMuYm94LmRpc2FibGVkO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2V0IGVuYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgdGhpcy5ib3guZGlzYWJsZWQgPSAhdmFsdWU7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gcGFyZW50IFRoZSBwYXJlbnQgaHRtbCBvYmplY3QuXHJcbiAgICAqIEBwYXJhbSBzZXR1cCBUaGUgc2V0dXAgZGF0YSBvYmplY3RcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50LCBzZXR1cDogSVJhZGlvYnV0dG9uU2V0dXApIHtcclxuXHJcbiAgICAgIGxldCBpZCA9IHNldHVwLmlkID8/ICdSYWRpb2J1dHRvbic7XHJcbiAgICAgIGlmICh0eXBlb2Ygc2V0dXAuY2hlY2tlZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICB0aGlzLmdldFN0YXRlID0gc2V0dXAuY2hlY2tlZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkaXYuaWQgPSBpZDtcclxuICAgICAgZGl2LmNsYXNzTmFtZSA9ICdSYWRpb2J1dHRvbkRpdic7XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChkaXYpO1xyXG5cclxuICAgICAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgbGFiZWwuaWQgPSBpZCArICdMYWJlbCc7XHJcbiAgICAgIGxhYmVsLmNsYXNzTmFtZSA9ICdSYWRpb2J1dHRvbkxhYmVsJztcclxuICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gc2V0dXAubGFiZWwgPz8gJyc7XHJcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICB0aGlzLmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgIHRoaXMuYm94LmNsYXNzTmFtZSA9ICdSYWRpb2J1dHRvbic7XHJcbiAgICAgIHRoaXMuYm94LnR5cGUgPSAncmFkaW8nO1xyXG4gICAgICB0aGlzLmJveC5uYW1lID0gc2V0dXAuZ3JvdXA7XHJcbiAgICAgIHRoaXMuYm94LmlkID0gaWQgKyAnUmFkaW9idXR0b24nO1xyXG4gICAgICB0aGlzLmJveC5jaGVja2VkID0gZ2V0Qm9vbGVhblZhbHVlKHNldHVwLmNoZWNrZWQpO1xyXG4gICAgICB0aGlzLmJveC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICAgaWYgKHRoaXMuYm94LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgaWYgKHNldHVwLm9uY2hlY2spIHtcclxuICAgICAgICAgICAgICAgc2V0dXAub25jaGVjayh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc2V0dXAub251bmNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgIHNldHVwLm9udW5jaGVjayh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbGFiZWwuYXBwZW5kQ2hpbGQodGhpcy5ib3gpO1xyXG5cclxuICAgICAgbGV0IG1hcmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgIG1hcmsuY2xhc3NOYW1lID0gJ1JhZGlvQ2hlY2ttYXJrJztcclxuICAgICAgbWFyay5pZCA9IGlkICsgJ1JhZGlvQ2hlY2ttYXJrJztcclxuICAgICAgbGFiZWwuYXBwZW5kQ2hpbGQobWFyayk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjaGVjayh2YWx1ZTogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgdGhpcy5ib3guY2hlY2tlZCA9IHZhbHVlO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmVmcmVzaCgpIHtcclxuICAgICAgaWYgKHRoaXMuZ2V0U3RhdGUpIHtcclxuICAgICAgICAgdGhpcy5ib3guY2hlY2tlZCA9IHRoaXMuZ2V0U3RhdGUoKTtcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBodG1sQ29sb3IgfSBmcm9tIFwiLi4vVXRpbC9odG1sQ29sb3JcIjtcclxuaW1wb3J0IHsgSUN0cmwgfSBmcm9tIFwiLi9JQ3RybFwiO1xyXG5pbXBvcnQgeyBDb2xvclJhbmdlIH0gZnJvbSBcIi4vQ29sb3JSYW5nZVwiO1xyXG5pbXBvcnQgeyBodG1sQ29sb3JXaXRoQWxwaGEgfSBmcm9tIFwiLi4vVXRpbC9odG1sQ29sb3JXaXRoQWxwaGFcIjtcclxuaW1wb3J0IHsgZ2xDb2xvcjMgfSBmcm9tIFwiLi4vZ2wvZ2xDb2xvclwiO1xyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBmb3IgZGF0YSBwYXNzZWQgdG8gdGhlIFNsaWRlciBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJU2xpZGVyU2V0dXAge1xyXG4gICBpZD86IHN0cmluZyxcclxuICAgbGFiZWw6IHN0cmluZyxcclxuICAgbWluOiBudW1iZXIsXHJcbiAgIG1heDogbnVtYmVyLFxyXG4gICB2YWx1ZTogbnVtYmVyLFxyXG4gICBjb2xvcnM/OiBodG1sQ29sb3JbXSxcclxuICAgb25pbnB1dD86IChzbGlkZXI6IFNsaWRlcikgPT4gdm9pZCxcclxuICAgZ2V0VGV4dD86IChzbGlkZXI6IFNsaWRlcikgPT4gc3RyaW5nLFxyXG59XHJcblxyXG5jbGFzcyBSYW5nZU1hcHBlciB7XHJcbiAgIHB1YmxpYyByZWFkb25seSBzbGlkZXJNaW4gPSAwO1xyXG4gICBwdWJsaWMgcmVhZG9ubHkgc2xpZGVyTWF4ID0gMTAwMDtcclxuICAgcHVibGljIHJlYWRvbmx5IHJlYWxNaW46IG51bWJlcjtcclxuICAgcHVibGljIHJlYWRvbmx5IHJlYWxNYXg6IG51bWJlcjtcclxuXHJcbiAgIHB1YmxpYyBnZXQgcmVhbFJhbmdlKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlYWxNYXggLSB0aGlzLnJlYWxNaW47XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgc2xpZGVyUmFuZ2UoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc2xpZGVyTWF4IC0gdGhpcy5zbGlkZXJNaW47XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihyZWFsTWluOiBudW1iZXIsIHJlYWxNYXg6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnJlYWxNaW4gPSByZWFsTWluO1xyXG4gICAgICB0aGlzLnJlYWxNYXggPSByZWFsTWF4O1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc2xpZGVyVG9SZWFsKHNsaWRlclZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5yZWFsTWluICsgKChzbGlkZXJWYWx1ZSAtIHRoaXMuc2xpZGVyTWluKSAvIHRoaXMuc2xpZGVyUmFuZ2UpICogdGhpcy5yZWFsUmFuZ2U7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyByZWFsVG9TbGlkZXIocmVhbFZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5zbGlkZXJNaW4gKyAoKHJlYWxWYWx1ZSAtIHRoaXMucmVhbE1pbikgLyB0aGlzLnJlYWxSYW5nZSkgKiB0aGlzLnNsaWRlclJhbmdlO1xyXG4gICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzbGlkZXIgY29tcG9zZWQgb2YgYSBsYWJlbCwgaW5wdXQgcmFuZ2UsIGNvbG9yIHNwYW4gYW5kIHZhbHVlIHNwYW5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTbGlkZXIgaW1wbGVtZW50cyBJQ3RybCB7XHJcblxyXG4gICBwcml2YXRlIF9sYWJlbDogSFRNTExhYmVsRWxlbWVudDtcclxuICAgcHJpdmF0ZSBfcmFuZ2U6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgIHByaXZhdGUgX2NvbG9yU3BhbjogSFRNTFNwYW5FbGVtZW50O1xyXG4gICBwcml2YXRlIF92YWx1ZVNwYW46IEhUTUxTcGFuRWxlbWVudDtcclxuICAgcHJpdmF0ZSBfY29sb3JzOiBDb2xvclJhbmdlO1xyXG4gICBwcml2YXRlIF9nZXRUZXh0OiAoc2xpZGVyOiBTbGlkZXIpID0+IHN0cmluZztcclxuICAgcHJpdmF0ZSBfcmFuZ2VNYXBwZXI6IFJhbmdlTWFwcGVyO1xyXG5cclxuICAgcHVibGljIHNldCBlbmFibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgIHRoaXMuX3JhbmdlLmRpc2FibGVkID0gIXZhbHVlO1xyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgdGhpcy5fbGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgdGhpcy5fdmFsdWVTcGFuLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgIHRoaXMuX3JhbmdlLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRoaXMuX2xhYmVsLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgIHRoaXMuX3ZhbHVlU3Bhbi5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICB0aGlzLl9yYW5nZS5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuICAgcHVibGljIGdldCBlbmFibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gIXRoaXMuX3JhbmdlLmRpc2FibGVkO1xyXG4gICB9XHJcblxyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSBwYXJlbnQgVGhlIHBhcmVudCBodG1sIG9iamVjdC5cclxuICAgICogQHBhcmFtIHNldHVwIFRoZSBzZXR1cCBkYXRhIG9iamVjdFxyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogSFRNTEVsZW1lbnQsIHNldHVwOiBJU2xpZGVyU2V0dXApIHtcclxuXHJcbiAgICAgIGxldCBpZCA9IHNldHVwLmlkID8/ICdTbGlkZXInO1xyXG4gICAgICB0aGlzLl9nZXRUZXh0ID0gc2V0dXAuZ2V0VGV4dDtcclxuXHJcbiAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgZGl2LmlkID0gaWQ7XHJcbiAgICAgIGRpdi5jbGFzc05hbWUgPSAnU2xpZGVyRGl2JztcclxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gICAgICB0aGlzLl9sYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgIHRoaXMuX2xhYmVsLmlkID0gaWQgKyAnTGFiZWwnO1xyXG4gICAgICB0aGlzLl9sYWJlbC5jbGFzc05hbWUgPSAnU2xpZGVyTGFiZWwnO1xyXG4gICAgICB0aGlzLl9sYWJlbC5pbm5lclRleHQgPSBzZXR1cC5sYWJlbCA/PyAnJztcclxuICAgICAgZGl2LmFwcGVuZENoaWxkKHRoaXMuX2xhYmVsKTtcclxuXHJcbiAgICAgIHRoaXMuX3JhbmdlTWFwcGVyID0gbmV3IFJhbmdlTWFwcGVyKHNldHVwLm1pbiwgc2V0dXAubWF4KTtcclxuXHJcbiAgICAgIHRoaXMuX3JhbmdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgdGhpcy5fcmFuZ2UudHlwZSA9ICdyYW5nZSc7XHJcbiAgICAgIHRoaXMuX3JhbmdlLmlkID0gaWQgKyAnUmFuZ2UnO1xyXG4gICAgICB0aGlzLl9yYW5nZS5jbGFzc05hbWUgPSAnU2xpZGVyUmFuZ2UnO1xyXG4gICAgICB0aGlzLl9yYW5nZS5taW4gPSB0aGlzLl9yYW5nZU1hcHBlci5zbGlkZXJNaW4udG9TdHJpbmcoKTtcclxuICAgICAgdGhpcy5fcmFuZ2UubWF4ID0gdGhpcy5fcmFuZ2VNYXBwZXIuc2xpZGVyTWF4LnRvU3RyaW5nKCk7XHJcbiAgICAgIHRoaXMuX3JhbmdlLnZhbHVlID0gdGhpcy5fcmFuZ2VNYXBwZXIucmVhbFRvU2xpZGVyKHNldHVwLnZhbHVlKS50b1N0cmluZygpO1xyXG4gICAgICB0aGlzLl9yYW5nZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgICAgICAgdGhpcy51cGRhdGVTcGFuQ29sb3IoKTtcclxuICAgICAgICAgdGhpcy51cGRhdGVTcGFuVGV4dCgpXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9sYWJlbC5odG1sRm9yID0gdGhpcy5fcmFuZ2UuaWQ7XHJcbiAgICAgIGRpdi5hcHBlbmRDaGlsZCh0aGlzLl9yYW5nZSk7XHJcblxyXG4gICAgICBpZiAoc2V0dXAuY29sb3JzKSB7XHJcbiAgICAgICAgIHRoaXMuX2NvbG9yU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgdGhpcy5fY29sb3JTcGFuLmlkID0gaWQgKyAnQ29sb3JTcGFuJztcclxuICAgICAgICAgdGhpcy5fY29sb3JTcGFuLmNsYXNzTmFtZSA9ICdTbGlkZXJDb2xvclNwYW4nO1xyXG4gICAgICAgICBkaXYuYXBwZW5kQ2hpbGQodGhpcy5fY29sb3JTcGFuKTtcclxuXHJcbiAgICAgICAgIC8vIHNldCB0aGUgaW5pdGlhbCBjb2xvci5cclxuICAgICAgICAgdGhpcy5jb2xvcnMgPSBzZXR1cC5jb2xvcnM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3ZhbHVlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgdGhpcy5fdmFsdWVTcGFuLmlkID0gaWQgKyAnVmFsdWVTcGFuJztcclxuICAgICAgdGhpcy5fdmFsdWVTcGFuLmNsYXNzTmFtZSA9ICdTbGlkZXJWYWx1ZVNwYW4nO1xyXG4gICAgICAvLyAgICAgIHRoaXMuX3ZhbHVlU3Bhbi5pbm5lclRleHQgPSBzZXR1cC52YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICBkaXYuYXBwZW5kQ2hpbGQodGhpcy5fdmFsdWVTcGFuKTtcclxuXHJcbiAgICAgIC8vIHNldCB0aGUgaW5pdGlhbCBzcGFuIHRleHRcclxuICAgICAgdGhpcy51cGRhdGVTcGFuVGV4dCgpO1xyXG5cclxuICAgICAgaWYgKHNldHVwLm9uaW5wdXQpIHtcclxuICAgICAgICAgdGhpcy5fcmFuZ2Uub25pbnB1dCA9ICgpID0+IHNldHVwLm9uaW5wdXQodGhpcyk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFNldHMgdGhlIHNwYW4gY29sb3IgdG8gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjb2xvci5cclxuICAgICovXHJcbiAgIHByaXZhdGUgdXBkYXRlU3BhbkNvbG9yKCk6IHZvaWQge1xyXG4gICAgICBpZiAodGhpcy5fY29sb3JzKSB7XHJcbiAgICAgICAgIGxldCB2YWwgPSAodGhpcy52YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcclxuICAgICAgICAgbGV0IGNvbG9yID0gaHRtbENvbG9yLmZyb21Db2xvcih0aGlzLl9jb2xvcnMuZ2V0KHZhbCkpO1xyXG4gICAgICAgICB0aGlzLl9jb2xvclNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3IudG9IZXgoKVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gKiBTZXRzIHRoZSBzcGFuIGNvbG9yIHRvIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgY29sb3IuXHJcbiAqL1xyXG4gICBwcml2YXRlIHVwZGF0ZVNwYW5UZXh0KCk6IHZvaWQge1xyXG4gICAgICBpZiAodGhpcy5fZ2V0VGV4dCkge1xyXG4gICAgICAgICB0aGlzLl92YWx1ZVNwYW4uaW5uZXJUZXh0ID0gdGhpcy5fZ2V0VGV4dCh0aGlzKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgaHRtbCByYW5nZSBvYmplY3RcclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSBodG1sIHJhbmdlIG9iamVjdC5cclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgcmFuZ2UoKTogSFRNTElucHV0RWxlbWVudCB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yYW5nZTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIGN1cnJlbnQgc2xpZGVyIHZhbHVlXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBzbGlkZXIgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgdmFsdWUoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JhbmdlTWFwcGVyLnNsaWRlclRvUmVhbCh0aGlzLl9yYW5nZS52YWx1ZUFzTnVtYmVyKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBzbGlkZXIgKGFuZCBhc3NvY2lhdGVkIGNvbnRlbnQpXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmFsIHRoZSBkZXNpcmVkIHNsaWRlciB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIHNldCB2YWx1ZSh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLl9yYW5nZS52YWx1ZUFzTnVtYmVyID0gdGhpcy5fcmFuZ2VNYXBwZXIucmVhbFRvU2xpZGVyKHZhbCk7XHJcbiAgICAgIHRoaXMudXBkYXRlU3BhbkNvbG9yKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlU3BhblRleHQoKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIHZhbHVlIG9mIHRoZSBzbGlkZXIgYXMgYSBwZXJjZW50IFswLTFdIG9mIHRoZSByYW5nZVxyXG4gICAgKiBcclxuICAgICogQHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBzbGlkZXIgYXMgYSBwZXJjZW50XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IHZhbHVlQXNQZXJjZW50KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgbWluIHNsaWRlciB2YWx1ZS5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSBtaW4gc2xpZGVyIHZhbHVlLlxyXG4gICAgKi9cclxuICAgcHVibGljIGdldCBtaW4oKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JhbmdlTWFwcGVyLnJlYWxNaW47XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBtYXggc2xpZGVyIHZhbHVlLlxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyBUaGUgbWF4IHNsaWRlciB2YWx1ZS5cclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgbWF4KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yYW5nZU1hcHBlci5yZWFsTWF4O1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyB0aGUgY29sb3IgZm9yIHRoZSBzbGlkZXJcclxuICAgICovXHJcbiAgIHB1YmxpYyBzZXQgY29sb3JzKGNvbG9yczogaHRtbENvbG9yW10pIHtcclxuXHJcbiAgICAgIC8vIHN0b3JlIHRoZSBjb2xvcnNcclxuICAgICAgdGhpcy5fY29sb3JzID0gbmV3IENvbG9yUmFuZ2UoY29sb3JzKTtcclxuXHJcbiAgICAgIC8vIGJ1aWxkIHRoZSBncmFkaWVudCBzdHlsZSBmb3IgdGhlIHJhbmdlIG9iamVjdFxyXG4gICAgICBsZXQgZ3JhZGllbnRTdHIgPSAnOTBkZWcnO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICBncmFkaWVudFN0ciArPSAnLCAnICsgY29sb3JzW2ldLnRvQ3NzKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fcmFuZ2Uuc3R5bGUuYmFja2dyb3VuZCA9ICdsaW5lYXItZ3JhZGllbnQoJyArIGdyYWRpZW50U3RyICsgJyknO1xyXG5cclxuICAgICAgLy8gdXBkYXRlIHRoZSBzcGFuIGNvbG9yIHRvb1xyXG4gICAgICB0aGlzLnVwZGF0ZVNwYW5Db2xvcigpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgY3VycmVudCBjb2xvciBhcyBhbiBodG1sQ29sb3Igb2JqZWN0LlxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCBjb2xvci5cclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgaHRtbENvbG9yKCk6IGh0bWxDb2xvciB7XHJcbiAgICAgIGlmICh0aGlzLl9jb2xvcnMpIHtcclxuICAgICAgICAgbGV0IHZhbCA9ICh0aGlzLnZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JzLmdldCh2YWwpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICByZXR1cm4gaHRtbENvbG9yV2l0aEFscGhhLnRyYW5zcGFyZW50O1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBjdXJyZW50IGNvbG9yIGFzIGEgZ2xDb2xvciBvYmplY3QuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCBjb2xvci5cclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgZ2xDb2xvcigpOiBnbENvbG9yMyB7XHJcbiAgICAgIGlmICh0aGlzLl9jb2xvcnMpIHtcclxuICAgICAgICAgbGV0IHZhbCA9ICh0aGlzLnZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JzLmdldCh2YWwpLnRvR2xDb2xvcigpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICByZXR1cm4gbmV3IGdsQ29sb3IzKFswLCAwLCAwXSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIHJlZnJlc2goKSB7XHJcbiAgICAgIC8vIFRPRE8gaW1wbGVtZW50XHJcbiAgIH1cclxufSIsImltcG9ydCB7IElBcHAgfSBmcm9tIFwiLi9JQXBwXCI7XHJcbmltcG9ydCB7IE1lbnViYXIsIFN1Yk1lbnUgfSBmcm9tIFwiLi9HVUkvTWVudVwiO1xyXG5pbXBvcnQgeyBQYXRoVHJhY2VyQXBwIH0gZnJvbSBcIi4vQXBwcy9QYXRoVHJhY2VyL1BhdGhUcmFjZXJBcHBcIjtcclxuaW1wb3J0IHsgVmlld2VyQXBwIH0gZnJvbSBcIi4vQXBwcy9WaWV3ZXIvVmlld2VyQXBwXCI7XHJcbmltcG9ydCB7IFNxdWludEFwcCB9IGZyb20gXCIuL0FwcHMvU3F1aW50L1NxdWludEFwcFwiO1xyXG5cclxuZW51bSBBcHBUeXBlIHtcclxuICAgQXJ0aXN0c0JhbGwsXHJcbiAgIFZpZXdlcixcclxuICAgU3F1aW50XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMYXVuY2hlciB7XHJcbiAgIHByaXZhdGUgZGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgcHJpdmF0ZSBhcHA6IElBcHA7XHJcbiAgIHByaXZhdGUgbWVudWJhcjogTWVudWJhcjtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5sYXVuY2goQXBwVHlwZS5WaWV3ZXIpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgbGF1bmNoKHR5cGU6IEFwcFR5cGUpIHtcclxuXHJcbiAgICAgIGlmICh0aGlzLmFwcCkge1xyXG4gICAgICAgICB0aGlzLmFwcC5kZWxldGUoKTtcclxuICAgICAgICAgdGhpcy5hcHAgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBjbGVhciBvdXQgb2xkIGNvbnRlbnRcclxuICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSB0aGUgbWFpbiBkaXZcclxuICAgICAgdGhpcy5kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmRpdik7XHJcblxyXG4gICAgICB0aGlzLmJ1aWxkTWVudSgpO1xyXG5cclxuICAgICAgbGV0IHF1ZXJ5O1xyXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLnNlYXJjaCkge1xyXG4gICAgICAgICBxdWVyeSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCdzcXVpbnQnKSA+PSAwKSB7XHJcbiAgICAgICAgIHR5cGUgPSBBcHBUeXBlLlNxdWludDtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgIGNhc2UgQXBwVHlwZS5BcnRpc3RzQmFsbDpcclxuICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSAnQXJ0aXN0XFwncyBUb29sczogQXJ0aXN0XFwncyBCYWxsJztcclxuICAgICAgICAgICAgdGhpcy5hcHAgPSBuZXcgUGF0aFRyYWNlckFwcChxdWVyeSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgY2FzZSBBcHBUeXBlLlZpZXdlcjpcclxuICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSAnQXJ0aXN0XFwncyBUb29sczogVmlld2VyJztcclxuICAgICAgICAgICAgdGhpcy5hcHAgPSBuZXcgVmlld2VyQXBwKHF1ZXJ5KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlIEFwcFR5cGUuU3F1aW50OlxyXG4gICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9ICdTcXVpbnQnO1xyXG4gICAgICAgICAgICB0aGlzLmFwcCA9IG5ldyBTcXVpbnRBcHAoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hcHAuY3JlYXRlKHRoaXMuZGl2KTtcclxuICAgICAgdGhpcy5hcHAuYnVpbGRNZW51KHRoaXMubWVudWJhcik7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgYnVpbGRNZW51KCkge1xyXG5cclxuICAgICAgbGV0IHN1Yk1lbnU6IFN1Yk1lbnU7XHJcbiAgICAgIHRoaXMubWVudWJhciA9IG5ldyBNZW51YmFyKHRoaXMuZGl2KTtcclxuICAgICAgc3ViTWVudSA9IHRoaXMubWVudWJhci5hZGRTdWJNZW51KCdBcHBzJywgJ0FwcHMnKTtcclxuICAgICAgc3ViTWVudS5hZGRJdGVtKCczRCBWaWV3ZXInLCAoKSA9PiB0aGlzLmxhdW5jaChBcHBUeXBlLlZpZXdlcikpO1xyXG4gICAgICBzdWJNZW51LmFkZEl0ZW0oJ1NxdWludCcsICgpID0+IHRoaXMubGF1bmNoKEFwcFR5cGUuU3F1aW50KSk7XHJcbiAgICAgIHN1Yk1lbnUuYWRkSXRlbSgnQXJ0aXN0XFwncyBCYWxsJywgKCkgPT4gdGhpcy5sYXVuY2goQXBwVHlwZS5BcnRpc3RzQmFsbCkpO1xyXG4gICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgQXZlcmFnZXIge1xyXG4gICBwcml2YXRlIHZhbHVlczogbnVtYmVyW10gPSBbXTtcclxuICAgcHJpdmF0ZSBfbWF4U2FtcGxlczogbnVtYmVyO1xyXG5cclxuICAgcHVibGljIGdldCBudW1TYW1wbGVzKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGg7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgbWF4U2FtcGxlcygpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbWF4U2FtcGxlcztcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNldCBtYXhTYW1wbGVzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5fbWF4U2FtcGxlcyA9IHZhbHVlO1xyXG4gICAgICB0aGlzLnRyaW1JZk5lZWRlZCgpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGF2ZXJhZ2UoKTogbnVtYmVyIHtcclxuICAgICAgbGV0IHRvdGFsID0gMDtcclxuICAgICAgbGV0IG51bVZhbHVlcyA9IHRoaXMudmFsdWVzLmxlbmd0aDtcclxuXHJcbiAgICAgIGlmIChudW1WYWx1ZXMgPT09IDApIHtcclxuICAgICAgICAgcmV0dXJuIE51bWJlci5OYU47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcclxuICAgICAgICAgICAgdG90YWwgKz0gdGhpcy52YWx1ZXNbaV07XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIHRvdGFsIC8gbnVtVmFsdWVzO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtYXhTYW1wbGVzID0gNSkge1xyXG4gICAgICB0aGlzLm1heFNhbXBsZXMgPSBtYXhTYW1wbGVzO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcHVzaCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xyXG4gICAgICB0aGlzLnRyaW1JZk5lZWRlZCgpO1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHRyaW1JZk5lZWRlZCgpIHtcclxuICAgICAgaWYgKHRoaXMudmFsdWVzLmxlbmd0aCA+IHRoaXMubWF4U2FtcGxlcykge1xyXG4gICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnZhbHVlcy5sZW5ndGggLSB0aGlzLm1heFNhbXBsZXM7XHJcbiAgICAgICAgIHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZXMuc2xpY2Uoc3RhcnQpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjbGVhcigpIHtcclxuICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcclxuICAgfVxyXG59IiwiaW1wb3J0ICcuL0Jsb2JTaGltJztcclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBjbGFzcyBmb3Igc2xpY2luZyB1cCBCbG9ic1xyXG4gKi9cclxuY2xhc3MgQmxvYlNsaWNlciB7XHJcblxyXG4gICAvLyBUaGUgc3RhcnQgYnl0ZSB2YWx1ZSBmb3IgdGhlIG5leHQgc2xpY2VcclxuICAgcHJpdmF0ZSBzdGFydCA9IDA7XHJcblxyXG4gICAvLyBUaGUgQmxvYiB3ZSdyZSBzbGljaW5nIFxyXG4gICBwcml2YXRlIGJsb2I6IEJsb2I7XHJcblxyXG4gICAvKipcclxuICAgICogQHBhcmFtIGJsb2IgVGhlIEJsb2IgdG8gYmUgc2xpY2VkXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoYmxvYjogQmxvYikge1xyXG4gICAgICB0aGlzLmJsb2IgPSBibG9iO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgbmV4dCBzbGljZS5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBsZW4gVGhlIGxlbmd0aCBvZiB0aGUgc2xpY2UuXHJcbiAgICAqIEByZXR1cm5zIFRoZSBzbGljZWQgQmxvYi5cclxuICAgICovXHJcbiAgIHB1YmxpYyBuZXh0KGxlbjogbnVtYmVyKTogQmxvYiB7XHJcbiAgICAgIGxldCBiID0gdGhpcy5ibG9iLnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuc3RhcnQgKyBsZW4pO1xyXG4gICAgICB0aGlzLnN0YXJ0ICs9IGxlbjtcclxuICAgICAgcmV0dXJuIGI7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTbGljZXMgdGhlIEJsb2IgYW5kIHJldHVybnMgaXQgYXMgYW4gQXJyYXlCdWZmZXIuXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gbGVuIFRoZSBsZW5ndGggb2YgdGhlIHNsaWNlLlxyXG4gICAgKiBAcmV0dXJucyBBbiBBcnJheUJ1ZmZlciBwcm9taXNlLlxyXG4gICAgKi9cclxuICAgcHVibGljIG5leHRBcnJheUJ1ZmZlcihsZW46IG51bWJlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgICAgcmV0dXJuIHRoaXMubmV4dChsZW4pLmFycmF5QnVmZmVyKCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTbGljZXMgdGhlIEJsb2IgYW5kIHJldHVybnMgaXQgYXMgYW4gSW50MzJBcnJheVxyXG4gICAgKlxyXG4gICAgKiBAcGFyYW0gbGVuIFRoZSBsZW5ndGggb2YgdGhlIHNsaWNlLlxyXG4gICAgKiBAcmV0dXJucyBBbiBJbnQzMkFycmF5IHByb21pc2UuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgYXN5bmMgbmV4dEludDMyQXJyYXkobGVuOiBudW1iZXIpOiBQcm9taXNlPEludDMyQXJyYXk+IHtcclxuICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KGF3YWl0IHRoaXMubmV4dEFycmF5QnVmZmVyKGxlbikpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2xpY2VzIHRoZSBCbG9iIGFuZCByZXR1cm5zIGl0IGFzIGEgc3RyaW5nXHJcbiAgICAqXHJcbiAgICAqIEBwYXJhbSBsZW4gVGhlIGxlbmd0aCBvZiB0aGUgc2xpY2UuXHJcbiAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHByb21pc2UuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgYXN5bmMgbmV4dFN0cmluZyhsZW46IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgIHJldHVybiB0aGlzLm5leHQobGVuKS50ZXh0KCk7XHJcbiAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1hbmFnZXMgY3JlYXRpb24gYW5kIGV4dHJhY3Rpb24gb2YgYSBzZWxmIGRlc2NyaWJpbmcgQmxvYi4gRGF0YVxyXG4gKiBpcyBzdG9yZWQgYXM6XHJcbiAqIFxyXG4gKiBbbnVtRW50cmllc10gLSBUaGUgbnVtYmVyIGVudHJpZXMgaW4gdGhlIGZpbGUuIDQgYnl0ZSBJbnQzMlxyXG4gKiBbc2l6ZXNdIC0gU2l6ZXMgb2YgYWxsIHRoZSBlbnRyaWVzLCBpbmNsdWRpbmcgdGhlIGluZm8gb2JqZWN0XHJcbiAqIFtpbmZvXSAtIFVzZXIgc3VwcGxpZWQgZGF0YSBhcyBhIEpTT04gc3RyaW5nXHJcbiAqIFtlbnRyeSAxXSAtIEZpcnN0IHVzZXIgZW50cnlcclxuICogW2VudHJ5IDJdIC0gU2Vjb25kIHVzZXIgZW50cnlcclxuICogWy4uLl1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBCbG9iRmlsZSB7XHJcbiAgIHB1YmxpYyBpbmZvOiBhbnk7XHJcbiAgIHB1YmxpYyBwYXJ0czogQmxvYltdID0gW107XHJcblxyXG4gICAvKipcclxuICAgICogQHBhcmFtIGluZm8gVGhlIGluZm9ybWF0aW9uIGhlYWRlciB0byBiZSBzdG9yZWQgd2l0aCB0aGUgQmxvYlxyXG4gICAgKiBAcGFyYW0gcGFydHMgVGhlIGRhdGEgY29udGVudHMgb2YgdGhlIEJsb2JcclxuICAgICovXHJcbiAgIHByaXZhdGUgY29uc3RydWN0b3IoaW5mbzogb2JqZWN0LCBwYXJ0czogQmxvYltdKSB7XHJcbiAgICAgIHRoaXMuaW5mbyA9IGluZm87XHJcbiAgICAgIHRoaXMucGFydHMgPSBwYXJ0cztcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbnZlcnRzIGEgcmF3IEJsb2Igb2JqZWN0IGludG8gYSBCbG9iRmlsZVxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGJsb2IgVGhlIEJsb2IgdG8gcHJvY2Vzcy5cclxuICAgICogQHJldHVybiBBIEJsb2JGaWxlIHByb21pc2UuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGFzeW5jIGV4dHJhY3QoYmxvYjogQmxvYik6IFByb21pc2U8QmxvYkZpbGU+IHtcclxuXHJcbiAgICAgIGxldCBibG9iU2xpY2VyID0gbmV3IEJsb2JTbGljZXIoYmxvYik7XHJcblxyXG4gICAgICAvLyBmaXJzdCBleHRyYWN0IHRoZSBudW1iZXIgb2YgZW50cmllc1xyXG4gICAgICBsZXQgbnVtRW50cmllcyA9IChhd2FpdCBibG9iU2xpY2VyLm5leHRJbnQzMkFycmF5KDQpKVswXTtcclxuXHJcbiAgICAgIC8vIHRoZSB0aGUgc2l6ZXMgYXJyYXlcclxuICAgICAgbGV0IHNpemVzID0gYXdhaXQgYmxvYlNsaWNlci5uZXh0SW50MzJBcnJheSg0ICogKG51bUVudHJpZXMgKyAxKSk7XHJcblxyXG4gICAgICAvLyB0aGVuIHRoZSBpbmZvIG9iamVjdFxyXG4gICAgICBsZXQganNvbkluZm8gPSBhd2FpdCBibG9iU2xpY2VyLm5leHRTdHJpbmcoc2l6ZXNbMF0pO1xyXG5cclxuICAgICAgLy8gdGhlbiBhbGwgdGhlIHN1YiBibG9ic1xyXG4gICAgICBsZXQgcGFydHM6IEJsb2JbXSA9IFtdO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUVudHJpZXM7IGkrKykge1xyXG4gICAgICAgICBsZXQgc2l6ZSA9IHNpemVzW2kgKyAxXTtcclxuICAgICAgICAgcGFydHMucHVzaChibG9iU2xpY2VyLm5leHQoc2l6ZSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbmV3IEJsb2JGaWxlKEpTT04ucGFyc2UoanNvbkluZm8pLCBwYXJ0cyk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGUgYSBCbG9iRmlsZSBCbG9iXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gaW5mbyBUaGUgaW5mb3JtYXRpb24gaGVhZGVyIHRvIGJlIHN0b3JlZCB3aXRoIHRoZSBCbG9iXHJcbiAgICAqIEBwYXJhbSBwYXJ0cyBUaGUgZGF0YSBjb250ZW50cyBvZiB0aGUgQmxvYlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBjcmVhdGVCbG9iKGluZm86IG9iamVjdCwgcGFydHM6IEJsb2JQYXJ0W10pOiBCbG9iIHtcclxuXHJcbiAgICAgIGxldCBqc29uSW5mbyA9IEpTT04uc3RyaW5naWZ5KGluZm8pO1xyXG5cclxuICAgICAgLy8gQnVpbGQgdGhlIGFycmF5IG9mIHNpemVzXHJcbiAgICAgIGxldCBzaXplczogbnVtYmVyW10gPSBbanNvbkluZm8ubGVuZ3RoXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICBsZXQgcGFydCA9IHBhcnRzW2ldO1xyXG4gICAgICAgICBpZiAocGFydCBpbnN0YW5jZW9mIEludDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgc2l6ZXMucHVzaCg0ICogcGFydC5sZW5ndGgpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKHBhcnQgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgc2l6ZXMucHVzaCg0ICogcGFydC5sZW5ndGgpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKHBhcnQgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuICAgICAgICAgICAgc2l6ZXMucHVzaChwYXJ0Lmxlbmd0aCk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBtc2cgPSAnVW5zdXBwb3J0ZWQgQmxvYiBQYXJ0IFR5cGU6ICcgKyB0eXBlb2YgcGFydDtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBhc3NlbWJsZSB0aGUgYmxvYiBwYXJ0c1xyXG4gICAgICBsZXQgYWxsUGFydHM6IEJsb2JQYXJ0W10gPSBbXTtcclxuICAgICAgYWxsUGFydHMucHVzaChuZXcgSW50MzJBcnJheShbcGFydHMubGVuZ3RoXSkpO1xyXG4gICAgICBhbGxQYXJ0cy5wdXNoKG5ldyBJbnQzMkFycmF5KHNpemVzKSk7XHJcbiAgICAgIGFsbFBhcnRzLnB1c2goanNvbkluZm8pO1xyXG4gICAgICBhbGxQYXJ0cy5wdXNoKC4uLnBhcnRzKTtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSB0aGUgYmxvYlxyXG4gICAgICByZXR1cm4gbmV3IEJsb2IoYWxsUGFydHMpO1xyXG4gICB9XHJcbn0iLCIvLyBuZWVkZWQgZm9yIFNhZmFyaVxyXG5pZiAoIUJsb2IucHJvdG90eXBlLmFycmF5QnVmZmVyKSB7XHJcbiAgIEJsb2IucHJvdG90eXBlLmFycmF5QnVmZmVyID0gZnVuY3Rpb24gKCk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuXHJcbiAgICAgIC8vIHJlYWQgdGhlIEJsb2IgdGhlIG9sZCBmYXNoaW9uZWQgd2F5XHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxBcnJheUJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblxyXG4gICAgICAgICAvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG4gICAgICAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICByZWFkZXIub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcik7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8vIHN0YXJ0IHRoZSByZWFkXHJcbiAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcih0aGlzKTtcclxuICAgICAgfSk7XHJcbiAgIH1cclxufVxyXG5cclxuLy8gbmVlZGVkIGZvciBTYWZhcmlcclxuaWYgKCFCbG9iLnByb3RvdHlwZS50ZXh0KSB7XHJcblxyXG4gICAvLyByZWFkIHRoZSBCbG9iIHRoZSBvbGQgZmFzaGlvbmVkIHdheVxyXG4gICBCbG9iLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24gKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcblxyXG4gICAgICAvLyByZWFkIHRoZSBCbG9iIHRoZSBvbGQgZmFzaGlvbmVkIHdheVxyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuXHJcbiAgICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGRlY29kZSBpbnRvIGEgc3RyaW5nXHJcbiAgICAgICAgICAgIGxldCB0eHQgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKS5kZWNvZGUocmVhZGVyLnJlc3VsdCBhcyBBcnJheUJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHJlc29sdmUodHh0KTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAvLyBzdGFydCB0aGUgcmVhZFxyXG4gICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIodGhpcyk7XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGNvbG9yIHZhbHVlcy4gVmFsdWVzIG1heSBiZSBvbiBhIDAtMSBvciAwLTI1NSBzY2FsZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb2xvciB7XHJcbiAgIHB1YmxpYyByOiBudW1iZXI7XHJcbiAgIHB1YmxpYyBnOiBudW1iZXI7XHJcbiAgIHB1YmxpYyBiOiBudW1iZXI7XHJcbiAgIHB1YmxpYyBhOiBudW1iZXI7XHJcblxyXG4gICAvKipcclxuICAgICogQHBhcmFtIGNvbG9yIFJHQiB2YWx1ZXMgdG8gc3RvcmUgaW4gdGhpcyBvYmplY3RcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb2xvcjogbnVtYmVyW10pIHtcclxuICAgICAgdGhpcy5yID0gY29sb3JbMF07XHJcbiAgICAgIHRoaXMuZyA9IGNvbG9yWzFdO1xyXG4gICAgICB0aGlzLmIgPSBjb2xvclsyXTtcclxuXHJcbiAgICAgIGlmIChjb2xvci5sZW5ndGggPT09IDQpIHtcclxuICAgICAgICAgdGhpcy5hID0gY29sb3JbM107XHJcbiAgICAgIH1cclxuICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIENvbnNvbGVDYXB0dXJlIHtcclxuXHJcbiAgIHByaXZhdGUgdGV4dEFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcblxyXG4gICBwdWJsaWMgZ2V0IHNob3coKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKHRoaXMudGV4dEFyZWEpLmRpc3BsYXkgPT09ICdibG9jayc7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzZXQgc2hvdyhmbGFnOiBib29sZWFuKSB7XHJcbiAgICAgIHRoaXMudGV4dEFyZWEuc3R5bGUuZGlzcGxheSA9IGZsYWcgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoaWQgPSAnQ29uc29sZScsIG51bUNvbHMgPSAxNTApIHtcclxuICAgICAgdGhpcy50ZXh0QXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XHJcbiAgICAgIHRoaXMudGV4dEFyZWEuaWQgPSBpZDtcclxuICAgICAgdGhpcy50ZXh0QXJlYS5jb2xzID0gbnVtQ29scztcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnRleHRBcmVhKTtcclxuXHJcbiAgICAgIC8vIFRPRE8gdXBkYXRlIHRoZXNlIGFsbCB0byB0YWtlIHRoZSBjb3JyZWN0IGFyZ3VtZW50cyBmb3IgY29uc29sZSBmdW5jdGlvbnNcclxuICAgICAgbGV0IG9sZExvZyA9IGNvbnNvbGUubG9nO1xyXG4gICAgICBjb25zb2xlLmxvZyA9IChtc2c6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICB0aGlzLmFwcGVuZChtc2cpO1xyXG4gICAgICAgICBvbGRMb2cobXNnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG9sZFRyYWNlID0gY29uc29sZS50cmFjZTtcclxuICAgICAgY29uc29sZS50cmFjZSA9IChtc2c6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICB0aGlzLmFwcGVuZCgnVFJBQ0UgJyArIG1zZyk7XHJcbiAgICAgICAgIG9sZFRyYWNlKG1zZyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBvbGRJbmZvID0gY29uc29sZS5pbmZvO1xyXG4gICAgICBjb25zb2xlLmluZm8gPSAobXNnOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgdGhpcy5hcHBlbmQoJ0lORk8gJyArIG1zZyk7XHJcbiAgICAgICAgIG9sZEluZm8obXNnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG9sZFdhcm4gPSBjb25zb2xlLndhcm47XHJcbiAgICAgIGNvbnNvbGUud2FybiA9IChtc2c6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICB0aGlzLmFwcGVuZCgnV0FSTiAnICsgbXNnKTtcclxuICAgICAgICAgb2xkV2Fybihtc2cpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb2xkRXJyb3IgPSBjb25zb2xlLmVycm9yO1xyXG4gICAgICBjb25zb2xlLmVycm9yID0gKG1zZzogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgIHRoaXMuYXBwZW5kKCdFUlJPUiAnICsgbXNnKTtcclxuICAgICAgICAgb2xkRXJyb3IobXNnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG9sZENsZWFyID0gY29uc29sZS5jbGVhcjtcclxuICAgICAgY29uc29sZS5jbGVhciA9ICgpID0+IHtcclxuICAgICAgICAgdGhpcy50ZXh0QXJlYS50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgICBvbGRDbGVhcigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb2xkT25FcnJvciA9IHdpbmRvdy5vbmVycm9yO1xyXG4gICAgICB3aW5kb3cub25lcnJvciA9IChldmVudDogc3RyaW5nIHwgRXZlbnQsIHNvdXJjZTogc3RyaW5nLCBsaW5lbm86IG51bWJlciwgY29sbm86IG51bWJlciwgZXJyb3I6IEVycm9yKSA9PiB7XHJcbiAgICAgICAgIGxldCBzdGFja1RyYWNlID0gZXJyb3IgJiYgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/ICdcXG4nICsgZXJyb3Iuc3RhY2sgOiAnJztcclxuICAgICAgICAgbGV0IG1zZyA9IGV2ZW50ICsgJ1xcbicgKyBzb3VyY2UgKyAnIGxpbmU6JyArIGxpbmVubyArICcsIGNvbDonICsgY29sbm8gKyBzdGFja1RyYWNlO1xyXG4gICAgICAgICBhbGVydChtc2cpO1xyXG4gICAgICAgICB0aGlzLmFwcGVuZChtc2cpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgYXBwZW5kKG1zZzogc3RyaW5nKSB7XHJcbiAgICAgIGxldCBmdWxsbXNnID0gdGhpcy50ZXh0QXJlYS52YWx1ZTtcclxuXHJcbiAgICAgIGZ1bGxtc2cgPSBtc2cgKyAnXFxuXFxuJyArIGZ1bGxtc2c7XHJcbiAgICAgIGZ1bGxtc2cgPSBmdWxsbXNnLnN1YnN0cigwLCAxMDI0ICogMTAyNCk7XHJcblxyXG4gICAgICB0aGlzLnRleHRBcmVhLnZhbHVlID0gZnVsbG1zZztcclxuICAgfVxyXG5cclxuICAgcHVibGljIHNldEVkZ2VzKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgdG9wOiBudW1iZXIsIGJvdHRvbTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMudGV4dEFyZWEuc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xyXG4gICAgICB0aGlzLnRleHRBcmVhLnN0eWxlLnJpZ2h0ID0gcmlnaHQgKyAncHgnO1xyXG4gICAgICB0aGlzLnRleHRBcmVhLnN0eWxlLnRvcCA9IHRvcCArICdweCc7XHJcbiAgICAgIHRoaXMudGV4dEFyZWEuc3R5bGUuYm90dG9tID0gYm90dG9tICsgJ3B4JztcclxuICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIEZQUyB7XHJcbiAgIHByaXZhdGUgdGlja3M6IG51bWJlcltdID0gW107XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgZ2V0IHNwYW5NcygpOiBudW1iZXIge1xyXG4gICAgICBpZiAodGhpcy50aWNrcy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICByZXR1cm4gKHRoaXMudGlja3NbdGhpcy50aWNrcy5sZW5ndGggLSAxXSAtIHRoaXMudGlja3NbMF0pO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgbXMoKTogbnVtYmVyIHtcclxuICAgICAgaWYgKHRoaXMudGlja3MubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuc3Bhbk1zIC8gdGhpcy50aWNrcy5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCByYXRlKCk6IG51bWJlciB7XHJcbiAgICAgIGlmICh0aGlzLnRpY2tzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHJldHVybiAxMDAwIC8gdGhpcy5tcztcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgdGljaygpIHtcclxuXHJcbiAgICAgIHRoaXMudGlja3MucHVzaCh3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkpO1xyXG5cclxuICAgICAgLy8gdHJpbSBvZmYgdGhlIHNpemUgYXMgbG9uZyBhcyB0aGVyZSBhcmUgYXQgbGVhc3QgMjAgZW50cmllcyBhbmQgdGhlXHJcbiAgICAgIC8vIHRpbWUgc3BhbiBiZXR3ZWVuIGFsbCBlbnRyaWVzIGlzIGF0IGxlYXN0IDEgc2Vjb25kXHJcbiAgICAgIHdoaWxlICh0aGlzLnRpY2tzLmxlbmd0aCA+IDIwICYmIHRoaXMuc3Bhbk1zID4gMjAwMCkge1xyXG4gICAgICAgICB0aGlzLnRpY2tzLnNoaWZ0KCk7XHJcbiAgICAgIH1cclxuICAgfVxyXG59IiwiXHJcbmV4cG9ydCB0eXBlIFN0YXR1c0Z1bmN0aW9uID0gKHN0YXR1czogc3RyaW5nKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGxldCBpc01vYmlsZSA9IC9pUGhvbmV8aVBhZHxpUG9kfEFuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgIGlmICh2YWx1ZSA8IG1pbikge1xyXG4gICAgICByZXR1cm4gbWluO1xyXG4gICB9XHJcbiAgIGVsc2UgaWYgKHZhbHVlID4gbWF4KSB7XHJcbiAgICAgIHJldHVybiBtYXg7XHJcbiAgIH1cclxuICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9EZWcocmFkOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICByZXR1cm4gKDE4MCAvIE1hdGguUEkpICogcmFkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9SYWQoZGVnOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICByZXR1cm4gKE1hdGguUEkgLyAxODApICogZGVnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWl4KHYxOiBudW1iZXIsIHYyOiBudW1iZXIsIG1peDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgcmV0dXJuIHYxICsgY2xhbXAobWl4LCAwLCAxKSAqICh2MiAtIHYxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvQ3NzKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICByZXR1cm4gJ3JnYignICsgciArICcsJyArIGcgKyAnLCcgKyBiICsgKGEgPT09IHVuZGVmaW5lZCA/ICcnIDogJywnICsgYSkgKyAnKSc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1NpemVTdHIodmFsOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICBpZiAodmFsIDwgMTAyNCkge1xyXG4gICAgICByZXR1cm4gdmFsICsgJyBieXRlcyc7XHJcbiAgIH1cclxuICAgZWxzZSBpZiAodmFsIDwgMTAyNCAqIDEwMjQpIHtcclxuICAgICAgcmV0dXJuICh2YWwgLyAxMDI0KS50b0ZpeGVkKDEpICsgJyBrYic7XHJcbiAgIH1cclxuICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiAodmFsIC8gKDEwMjQgKiAxMDI0KSkudG9GaXhlZCgxKSArICcgbWInO1xyXG4gICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1RpbWVTdHIodmFsOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICBpZiAodmFsIDwgMTAwMCkge1xyXG4gICAgICByZXR1cm4gdmFsLnRvRml4ZWQoMCkgKyAnIG1zJztcclxuICAgfVxyXG4gICBlbHNlIHtcclxuICAgICAgcmV0dXJuICh2YWwgLyAxMDAwKS50b0ZpeGVkKDEpICsgJyBzJztcclxuICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9vbGVhblZhbHVlKHZhbHVlOiBib29sZWFuIHwgKCgpID0+IGJvb2xlYW4pKTogYm9vbGVhbiB7XHJcbiAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgIH1cclxuICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZSgpO1xyXG4gICB9XHJcbiAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlPUygpIHtcclxuICAgcmV0dXJuIFtcclxuICAgICAgJ2lQYWQgU2ltdWxhdG9yJyxcclxuICAgICAgJ2lQaG9uZSBTaW11bGF0b3InLFxyXG4gICAgICAnaVBvZCBTaW11bGF0b3InLFxyXG4gICAgICAnaVBhZCcsXHJcbiAgICAgICdpUGhvbmUnLFxyXG4gICAgICAnaVBvZCdcclxuICAgXS5pbmNsdWRlcyhuYXZpZ2F0b3IucGxhdGZvcm0pXHJcbiAgICAgIC8vIGlQYWQgb24gaU9TIDEzIGRldGVjdGlvblxyXG4gICAgICB8fCAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIk1hY1wiKSAmJiBcIm9udG91Y2hlbmRcIiBpbiBkb2N1bWVudClcclxufSIsImltcG9ydCB7IFN0b3B3YXRjaCB9IGZyb20gXCIuL1N0b3B3YXRjaFwiO1xyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgY2xhc3MgZm9yIGxvZ2dpbmcgdGltaW5nIG1lc3NhZ2VzIGZvciBwcm9maWxlIGNvZGVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm9maWxlciB7XHJcblxyXG4gICBwcml2YXRlIHN3ID0gbmV3IFN0b3B3YXRjaCgpO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIFRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IGVsYXBzZWRNcygpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3cuZWxhcHNlZE1zO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogUHJpbnRzIGEgbWVzc2FnZSB0byBjb25zb2xlIG9mIHRoZSBlbGFwc2VkIHRpbWVcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBtc2cgVGhlIG1lc3NhZ2UgdG8gcHJpbnQgd2l0aCB0aGUgdGltZVxyXG4gICAgKi9cclxuICAgcHVibGljIGxvZyhtc2c6IHN0cmluZykge1xyXG4gICAgICBjb25zb2xlLmxvZyhtc2cgKyAnICcgKyB0aGlzLmVsYXBzZWRNcy50b0ZpeGVkKDEpICsgJyBtcycpO1xyXG4gICAgICB0aGlzLnN3LnJlc3RhcnQoKTtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgdG9UaW1lU3RyIH0gZnJvbSBcIi4vR2xvYmFsc1wiO1xyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgY2xhc3MgZm9yIHRyYWNraW5nIHRpbWVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdG9wd2F0Y2gge1xyXG5cclxuICAgcHJpdmF0ZSBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBUaGUgZWxhcHNlZCB0aW1lIGluIGFzIGEgc3RyaW5nXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IGVsYXBzZWRTdHIoKTogc3RyaW5nIHtcclxuICAgICAgcmV0dXJuIHRvVGltZVN0cih0aGlzLmVsYXBzZWRNcyk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBUaGUgZWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgKi9cclxuICAgcHVibGljIGdldCBlbGFwc2VkTXMoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIChwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuc3RhcnRUaW1lKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IGVsYXBzZWRTKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsYXBzZWRNcyAvIDEwMDA7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBSZXNldHMgZWxhcHNlZCB0aW1lIHRvIDBcclxuICAgICovXHJcbiAgIHB1YmxpYyByZXN0YXJ0KCkge1xyXG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBodG1sQ29sb3IgfSBmcm9tIFwiLi9odG1sQ29sb3JcIjtcclxuaW1wb3J0IHsgZ2xDb2xvcjMgfSBmcm9tIFwiLi4vZ2wvZ2xDb2xvclwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgY29sb3IgdmFsdWVzLiBWYWx1ZXMgYXJlIG9uIGEgMC0xIHNjYWxlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGhzdkNvbG9yIHtcclxuICAgcHVibGljIGg6IG51bWJlcjtcclxuICAgcHVibGljIHM6IG51bWJlcjtcclxuICAgcHVibGljIHY6IG51bWJlcjtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29sb3IgSFNWIHZhbHVlcyB0byBzdG9yZSBpbiB0aGlzIG9iamVjdFxyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbG9yOiBudW1iZXJbXSkge1xyXG4gICAgICB0aGlzLmggPSBjb2xvclswXTtcclxuICAgICAgdGhpcy5zID0gY29sb3JbMV07XHJcbiAgICAgIHRoaXMudiA9IGNvbG9yWzJdO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhbiBoc3ZDb2xvciBvYmplY3QgZnJvbSBhbiBodG1sQ29sb3Igb2JqZWN0LlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGNvbG9yIFRoZSBodG1sQ29sb3Igb2JqZWN0LlxyXG4gICAgKiBAcmV0dXJucyBUaGUgaHN2Q29sb3Igb2JqZWN0LlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBmcm9tSHRtbENvbG9yKGNvbG9yOiBodG1sQ29sb3IpOiBoc3ZDb2xvciB7XHJcbiAgICAgIGxldCByID0gY29sb3IucjtcclxuICAgICAgbGV0IGcgPSBjb2xvci5nO1xyXG4gICAgICBsZXQgYiA9IGNvbG9yLmI7XHJcblxyXG4gICAgICBsZXQgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XHJcbiAgICAgIGxldCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcclxuICAgICAgbGV0IGQgPSBtYXggLSBtaW47XHJcbiAgICAgIGxldCBoO1xyXG4gICAgICBsZXQgcyA9IChtYXggPT09IDAgPyAwIDogZCAvIG1heCk7XHJcbiAgICAgIGxldCB2ID0gbWF4IC8gMjU1O1xyXG5cclxuICAgICAgc3dpdGNoIChtYXgpIHtcclxuICAgICAgICAgY2FzZSBtaW46IGggPSAwOyBicmVhaztcclxuICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSArIGQgKiAoZyA8IGIgPyA2IDogMCk7IGggLz0gNiAqIGQ7IGJyZWFrO1xyXG4gICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpICsgZCAqIDI7IGggLz0gNiAqIGQ7IGJyZWFrO1xyXG4gICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpICsgZCAqIDQ7IGggLz0gNiAqIGQ7IGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbmV3IGhzdkNvbG9yKFtoLCBzLCB2XSk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGFuIGhzdkNvbG9yIG9iamVjdCBmcm9tIGEgZ2xDb2xvciBvYmplY3QuXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gY29sb3IgVGhlIGdsQ29sb3Igb2JqZWN0LlxyXG4gICAgKiBAcmV0dXJucyBUaGUgaHN2Q29sb3Igb2JqZWN0LlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBmcm9tR2xDb2xvcihjb2xvcjogZ2xDb2xvcjMpOiBoc3ZDb2xvciB7XHJcbiAgICAgIHJldHVybiBoc3ZDb2xvci5mcm9tSHRtbENvbG9yKGNvbG9yLnRvSHRtbENvbG9yKCkpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIGdsQ29sb3Igb2JqZWN0IGZyb20gdGhpcyBvYmplY3QuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgZ2xDb2xvciBvYmplY3QuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgdG9HbENvbG9yKCk6IGdsQ29sb3IzIHtcclxuXHJcbiAgICAgIHZhciByLCBnLCBiLCBpLCBmLCBwLCBxLCB0O1xyXG4gICAgICBpID0gTWF0aC5mbG9vcih0aGlzLmggKiA2KTtcclxuICAgICAgZiA9IHRoaXMuaCAqIDYgLSBpO1xyXG4gICAgICBwID0gdGhpcy52ICogKDEgLSB0aGlzLnMpO1xyXG4gICAgICBxID0gdGhpcy52ICogKDEgLSBmICogdGhpcy5zKTtcclxuICAgICAgdCA9IHRoaXMudiAqICgxIC0gKDEgLSBmKSAqIHRoaXMucyk7XHJcbiAgICAgIHN3aXRjaCAoaSAlIDYpIHtcclxuICAgICAgICAgY2FzZSAwOiByID0gdGhpcy52LCBnID0gdCwgYiA9IHA7IGJyZWFrO1xyXG4gICAgICAgICBjYXNlIDE6IHIgPSBxLCBnID0gdGhpcy52LCBiID0gcDsgYnJlYWs7XHJcbiAgICAgICAgIGNhc2UgMjogciA9IHAsIGcgPSB0aGlzLnYsIGIgPSB0OyBicmVhaztcclxuICAgICAgICAgY2FzZSAzOiByID0gcCwgZyA9IHEsIGIgPSB0aGlzLnY7IGJyZWFrO1xyXG4gICAgICAgICBjYXNlIDQ6IHIgPSB0LCBnID0gcCwgYiA9IHRoaXMudjsgYnJlYWs7XHJcbiAgICAgICAgIGNhc2UgNTogciA9IHRoaXMudiwgZyA9IHAsIGIgPSBxOyBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5ldyBnbENvbG9yMyhbciwgZywgYl0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhbiBodG1sQ29sb3Igb2JqZWN0IGZyb20gdGhpcyBvYmplY3QuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgZ2xDb2xvciBvYmplY3QuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgdG9IdG1sQ29sb3IoKTogaHRtbENvbG9yIHtcclxuICAgICAgcmV0dXJuIHRoaXMudG9HbENvbG9yKCkudG9IdG1sQ29sb3IoKTtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi9Db2xvclwiO1xyXG5pbXBvcnQgeyB0b0NzcyB9IGZyb20gXCIuL0dsb2JhbHNcIjtcclxuaW1wb3J0IHsgZ2xDb2xvcjMgfSBmcm9tIFwiLi4vZ2wvZ2xDb2xvclwiO1xyXG5cclxuLyoqXHJcbiAqIENvbG9yIGNsYXNzIHRoYXQgcmVxdWlyZXMgUkdCIHZhbHVlcyB0byBiZSBiZXR3ZWVuIDAgYW5kIDI1NVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGh0bWxDb2xvciBleHRlbmRzIENvbG9yIHtcclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgd2hpdGUgPSBuZXcgaHRtbENvbG9yKFsyNTUsIDI1NSwgMjU1XSk7XHJcbiAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgYmxhY2sgPSBuZXcgaHRtbENvbG9yKFswLCAwLCAwXSk7XHJcbiAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcmVkID0gbmV3IGh0bWxDb2xvcihbMjU1LCAwLCAwXSk7XHJcbiAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZ3JlZW4gPSBuZXcgaHRtbENvbG9yKFswLCAyNTUsIDBdKTtcclxuICAgcHVibGljIHN0YXRpYyByZWFkb25seSBibHVlID0gbmV3IGh0bWxDb2xvcihbMCwgMCwgMjU1XSk7XHJcbiAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgb3JhbmdlID0gbmV3IGh0bWxDb2xvcihbMjU1LCAxNjUsIDBdKTtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29sb3IgQW4gUkdCIGNvbG9yIGFycmF5XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoY29sb3I6IG51bWJlcltdKSB7XHJcblxyXG4gICAgICBpZiAoY29sb3IubGVuZ3RoICE9IDMpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciBhcnJheSBsZW5ndGggKGV4cGVjdGVkIDMgZWxlbWVudHMpXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb2xvclswXSA8IDAgfHwgY29sb3JbMF0gPiAyNTUpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciAncicgdmFsdWUgKGV4cGVjdGVkIFswLTI1NV0pXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb2xvclsxXSA8IDAgfHwgY29sb3JbMV0gPiAyNTUpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciAnZycgdmFsdWUgKGV4cGVjdGVkIFswLTI1NV0pXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb2xvclsyXSA8IDAgfHwgY29sb3JbMl0gPiAyNTUpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciAnYicgdmFsdWUgKGV4cGVjdGVkIFswLTI1NV0pXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzdXBlcihjb2xvcik7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDb252ZXJ0cyBhIHZhbHVlIHRvIGEgaGV4IHN0cmluZ1xyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGMgVGhlIG51bWVyaWMgdmFsdWVcclxuICAgICogQHJldHVybnMgVGhlIGhleCBzdHJpbmdcclxuICAgICovXHJcbiAgIHByb3RlY3RlZCBjb21wb25lbnRUb0hleChjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICB2YXIgaGV4ID0gYy50b1N0cmluZygxNik7XHJcbiAgICAgIHJldHVybiBoZXgubGVuZ3RoID09IDEgPyBcIjBcIiArIGhleCA6IGhleDtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbnZlcnRzIHRoaXMgb2JqZWN0IHRvIGEgaGV4IHN0cmluZyAoZS5nLiAjMGYwZjBmKS5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIEEgaGV4IHN0cmluZy5cclxuICAgICovXHJcbiAgIHB1YmxpYyB0b0hleCgpOiBzdHJpbmcge1xyXG4gICAgICBsZXQgckhleCA9IHRoaXMuY29tcG9uZW50VG9IZXgodGhpcy5yKTtcclxuICAgICAgbGV0IGdIZXggPSB0aGlzLmNvbXBvbmVudFRvSGV4KHRoaXMuZyk7XHJcbiAgICAgIGxldCBiSGV4ID0gdGhpcy5jb21wb25lbnRUb0hleCh0aGlzLmIpO1xyXG4gICAgICByZXR1cm4gXCIjXCIgKyBySGV4ICsgZ0hleCArIGJIZXg7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDb252ZXJ0cyB0aGlzIG9iamVjdCB0byBhIGNzcyBzdHJpbmcgKGUuZy4gJ3JnYigxMjgsMjI4LDMyKScpLlxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyBBIGNzcyBzdHJpbmcuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgdG9Dc3MoKTogc3RyaW5nIHtcclxuICAgICAgcmV0dXJuIHRvQ3NzKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ29udmVydHMgYSBjc3Mgc3R5bGUgc3RyaW5nIChlLmcuICdyZ2IoMjQsMzYsODMpJykgdG8gYSBjb2xvclxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGNzcyBUaGUgY3NzIHN0cmluZy5cclxuICAgICogQHJldHVybnMgVGhlIGNvbG9yLlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBmcm9tQ3NzKGNzczogc3RyaW5nKTogaHRtbENvbG9yIHtcclxuICAgICAgbGV0IHJlZ2V4ID0gL1xcZCsvZztcclxuICAgICAgbGV0IHZhbHMgPSBjc3MubWF0Y2gocmVnZXgpLnNsaWNlKDAsIDMpO1xyXG4gICAgICByZXR1cm4gbmV3IGh0bWxDb2xvcihbcGFyc2VJbnQodmFsc1swXSksIHBhcnNlSW50KHZhbHNbMV0pLCBwYXJzZUludCh2YWxzWzJdKV0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhbiBodG1sQ29sb3Igb2JqZWN0IGZyb20gYSBoZXggc3RyaW5nXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gaGV4IFRoZSBoZXggc3RyaW5nXHJcbiAgICAqIEByZXR1cm5zIFRoZSBodG1sQ29sb3Igb2JqZWN0XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGZyb21IZXgoaGV4OiBzdHJpbmcpOiBodG1sQ29sb3Ige1xyXG4gICAgICB2YXIgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgbGV0IHIgPSBwYXJzZUludChyZXN1bHRbMV0sIDE2KTtcclxuICAgICAgICAgbGV0IGcgPSBwYXJzZUludChyZXN1bHRbMl0sIDE2KTtcclxuICAgICAgICAgbGV0IGIgPSBwYXJzZUludChyZXN1bHRbM10sIDE2KTtcclxuICAgICAgICAgcmV0dXJuIG5ldyBodG1sQ29sb3IoW3IsIGcsIGJdKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZXMgYW4gaHRtbENvbG9yIG9iamVjdCB1c2luZyB2YWx1ZXMgaW4gYSBDb2xvciBvYmplY3QuXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gY29sb3IgQSBnZW5lcmljIENvbG9yIG9iamVjdC5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdGF0aWMgZnJvbUNvbG9yKGNvbG9yOiBDb2xvcik6IGh0bWxDb2xvciB7XHJcbiAgICAgIGxldCByID0gaHRtbENvbG9yLmNsYW1wKGNvbG9yLnIpO1xyXG4gICAgICBsZXQgZyA9IGh0bWxDb2xvci5jbGFtcChjb2xvci5nKTtcclxuICAgICAgbGV0IGIgPSBodG1sQ29sb3IuY2xhbXAoY29sb3IuYik7XHJcbiAgICAgIHJldHVybiBuZXcgaHRtbENvbG9yKFtyLCBnLCBiXSk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBSb3VuZHMgYSBudW1iZXIgdG8gYSB3aG9sZSBudW1iZXIgYW5kIGNsYW1wcyBpdCBiZXR3ZWVuIDAgYW5kIDI1NS5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2YWwgVGhlIHZhbHVlLlxyXG4gICAgKiBAcmV0dXJucyBUaGUgcm91bmRlZCAmIGNsYW1wZWQgdmFsdWVcclxuICAgICovXHJcbiAgIHByaXZhdGUgc3RhdGljIGNsYW1wKHZhbDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgdmFsID0gTWF0aC5yb3VuZCh2YWwpO1xyXG4gICAgICBpZiAodmFsIDwgMCkge1xyXG4gICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICh2YWwgPiAyNTUpIHtcclxuICAgICAgICAgcmV0dXJuIDI1NTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ29udmVydHMgdGhpcyBjb2xvciB0byBhbiBlcXVpdmFsZW50IGdyYXktc2NhbGUgY29sb3JcclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSBncmF5LXNjYWxlIGNvbG9yLlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvR3JheSgpOiBodG1sQ29sb3Ige1xyXG4gICAgICBsZXQgcmdiID0gTWF0aC5yb3VuZCgodGhpcy5yICsgdGhpcy5nICsgdGhpcy5iKSAvIDMpO1xyXG4gICAgICByZXR1cm4gbmV3IGh0bWxDb2xvcihbcmdiLCByZ2IsIHJnYl0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ29udmVydHMgdGhpcyBvYmplY3QgdG8gYSBXZWJHTCBjb2xvciBvYmplY3QgKDAtMSBiYXNlZClcclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIEEgZ2xDb2xvciBvYmplY3QuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgdG9HbENvbG9yKCk6IGdsQ29sb3IzIHtcclxuICAgICAgcmV0dXJuIG5ldyBnbENvbG9yMyhbdGhpcy5yIC8gMjU1LCB0aGlzLmcgLyAyNTUsIHRoaXMuYiAvIDI1NV0pO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBodG1sQ29sb3IgfSBmcm9tIFwiLi9odG1sQ29sb3JcIjtcclxuaW1wb3J0IHsgdG9Dc3MgfSBmcm9tIFwiLi9HbG9iYWxzXCI7XHJcblxyXG4vKipcclxuICogQW4gaHRtbCBjb2xvciB3aXRoIGEgdHJhbnNwYXJlbmN5IHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgaHRtbENvbG9yV2l0aEFscGhhIGV4dGVuZHMgaHRtbENvbG9yIHtcclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdHJhbnNwYXJlbnQgPSBuZXcgaHRtbENvbG9yV2l0aEFscGhhKFswLCAwLCAwLCAwXSk7XHJcblxyXG4gICAvKiogVGhlIHRyYW5zcGFyZW5jeSAoYWxwaGEpIHZhbHVlICovXHJcbiAgIHB1YmxpYyBhOiBudW1iZXIgPSAyNTU7XHJcblxyXG4gICAvKipcclxuICAgICogQHBhcmFtIGNvbG9yIEFuIFJHQkEgY29sb3IgYXJyYXlcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb2xvcjogbnVtYmVyW10pIHtcclxuXHJcbiAgICAgIHN1cGVyKFtjb2xvclswXSwgY29sb3JbMV0sIGNvbG9yWzJdXSk7XHJcblxyXG4gICAgICBpZiAoY29sb3IubGVuZ3RoICE9IDQpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciBhcnJheSBsZW5ndGggKGV4cGVjdGVkIDQgZWxlbWVudHMpXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY29sb3JbNF0gPCAwIHx8IGNvbG9yWzRdID4gMjU1KSB7XHJcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29sb3IgJ2EnIHZhbHVlIChleHBlY3RlZCBbMC0yNTVdKVwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5hID0gY29sb3JbM107XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDb252ZXJ0cyB0aGlzIG9iamVjdCB0byBhIGNzcyBzdHJpbmcgKGUuZy4gJ3JnYigxMjgsMjI4LDMyLDI1NSknKS5cclxuICAgICpcclxuICAgICogQHJldHVybnMgQSBjc3Mgc3RyaW5nLlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvQ3NzKCk6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiB0b0Nzcyh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEpO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBWZWMzLCBJVmVjMywgVmVjNCB9IGZyb20gXCIuL1ZlY1wiO1xyXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSBcIi4vTWF0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNaW5NYXgge1xyXG4gICByZWFkb25seSBtaW46IG51bWJlcjtcclxuICAgcmVhZG9ubHkgbWF4OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCb3VuZGluZ0JveCB7XHJcbiAgIHB1YmxpYyBtaW46IFZlYzM7XHJcbiAgIHB1YmxpYyBtYXg6IFZlYzM7XHJcblxyXG4gICBwdWJsaWMgZ2V0IHdpZHRoKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1heC54IC0gdGhpcy5taW4ueDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55O1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGRlcHRoKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1heC56IC0gdGhpcy5taW4uejtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBkaWFnb25hbCgpOiBudW1iZXIge1xyXG4gICAgICBsZXQgdyA9IHRoaXMud2lkdGg7XHJcbiAgICAgIGxldCBoID0gdGhpcy5oZWlnaHQ7XHJcbiAgICAgIGxldCBkID0gdGhpcy5kZXB0aDtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydCh3ICogdyArIGggKiBoICsgZCAqIGQpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGNlbnRlcigpOiBWZWMzIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMzKFtcclxuICAgICAgICAgKHRoaXMubWluLnggKyB0aGlzLm1heC54KSAvIDIsXHJcbiAgICAgICAgICh0aGlzLm1pbi55ICsgdGhpcy5tYXgueSkgLyAyLFxyXG4gICAgICAgICAodGhpcy5taW4ueiArIHRoaXMubWF4LnopIC8gMixcclxuICAgICAgXSk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgY29ybmVycygpOiBWZWMzW10ge1xyXG4gICAgICBsZXQgY29ybmVyczogVmVjM1tdID0gW107XHJcbiAgICAgIGNvcm5lcnMucHVzaChuZXcgVmVjMyhbdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4uel0pKTtcclxuICAgICAgY29ybmVycy5wdXNoKG5ldyBWZWMzKFt0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56XSkpO1xyXG4gICAgICBjb3JuZXJzLnB1c2gobmV3IFZlYzMoW3RoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnpdKSk7XHJcbiAgICAgIGNvcm5lcnMucHVzaChuZXcgVmVjMyhbdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXguel0pKTtcclxuICAgICAgY29ybmVycy5wdXNoKG5ldyBWZWMzKFt0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56XSkpO1xyXG4gICAgICBjb3JuZXJzLnB1c2gobmV3IFZlYzMoW3RoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnpdKSk7XHJcbiAgICAgIGNvcm5lcnMucHVzaChuZXcgVmVjMyhbdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4uel0pKTtcclxuICAgICAgY29ybmVycy5wdXNoKG5ldyBWZWMzKFt0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56XSkpO1xyXG4gICAgICByZXR1cm4gY29ybmVycztcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKG1pbjogVmVjMyA9IG5ldyBWZWMzKFtOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFXSksXHJcbiAgICAgIG1heDogVmVjMyA9IG5ldyBWZWMzKFstTnVtYmVyLk1BWF9WQUxVRSwgLU51bWJlci5NQVhfVkFMVUUsIC1OdW1iZXIuTUFYX1ZBTFVFXSkpIHtcclxuICAgICAgdGhpcy5taW4gPSBtaW47XHJcbiAgICAgIHRoaXMubWF4ID0gbWF4O1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3RhdGljIGdldCBpbmZpbml0ZSgpOiBCb3VuZGluZ0JveCB7XHJcbiAgICAgIGNvbnN0IE1BWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgY29uc3QgTUlOID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xyXG4gICAgICByZXR1cm4gbmV3IEJvdW5kaW5nQm94KG5ldyBWZWMzKFtNSU4sIE1JTiwgTUlOXSksIG5ldyBWZWMzKFtNQVgsIE1BWCwgTUFYXSkpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgaW5zaWRlKHZlYzogSVZlYzMpOiBib29sZWFuIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgICB2ZWMueCA+PSB0aGlzLm1pbi54ICYmIHZlYy54IDw9IHRoaXMubWF4LnggJiZcclxuICAgICAgICAgdmVjLnkgPj0gdGhpcy5taW4ueSAmJiB2ZWMueSA8PSB0aGlzLm1heC55ICYmXHJcbiAgICAgICAgIHZlYy56ID49IHRoaXMubWluLnogJiYgdmVjLnogPD0gdGhpcy5tYXguelxyXG4gICAgICApIHtcclxuICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgfVxyXG5cclxuICAgcHVibGljIHRvU3RyaW5nKGRpZ2l0czogbnVtYmVyKSB7XHJcbiAgICAgIHJldHVybiAnWycgKyB0aGlzLm1pbi50b1N0cmluZyhkaWdpdHMpICsgJ10nICtcclxuICAgICAgICAgJ1snICsgdGhpcy5tYXgudG9TdHJpbmcoZGlnaXRzKSArICddJztcclxuICAgfVxyXG5cclxuICAgcHVibGljIHVwZGF0ZSh2OiBJVmVjMykge1xyXG4gICAgICBpZiAoaXNOYU4odi54KSB8fCBpc05hTih2LnkpIHx8IGlzTmFOKHYueikpIHtcclxuICAgICAgICAgLy9jb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU5hTicpO1xyXG4gICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5taW4ueCA9IE1hdGgubWluKHRoaXMubWluLngsIHYueCk7XHJcbiAgICAgIHRoaXMubWluLnkgPSBNYXRoLm1pbih0aGlzLm1pbi55LCB2LnkpO1xyXG4gICAgICB0aGlzLm1pbi56ID0gTWF0aC5taW4odGhpcy5taW4ueiwgdi56KTtcclxuICAgICAgdGhpcy5tYXgueCA9IE1hdGgubWF4KHRoaXMubWF4LngsIHYueCk7XHJcbiAgICAgIHRoaXMubWF4LnkgPSBNYXRoLm1heCh0aGlzLm1heC55LCB2LnkpO1xyXG4gICAgICB0aGlzLm1heC56ID0gTWF0aC5tYXgodGhpcy5tYXgueiwgdi56KTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIG1lcmdlKG90aGVyOiBCb3VuZGluZ0JveCkge1xyXG4gICAgICB0aGlzLm1pbi54ID0gTWF0aC5taW4odGhpcy5taW4ueCwgb3RoZXIubWluLngpO1xyXG4gICAgICB0aGlzLm1pbi55ID0gTWF0aC5taW4odGhpcy5taW4ueSwgb3RoZXIubWluLnkpO1xyXG4gICAgICB0aGlzLm1pbi56ID0gTWF0aC5taW4odGhpcy5taW4ueiwgb3RoZXIubWluLnopO1xyXG4gICAgICB0aGlzLm1heC54ID0gTWF0aC5tYXgodGhpcy5tYXgueCwgb3RoZXIubWF4LngpO1xyXG4gICAgICB0aGlzLm1heC55ID0gTWF0aC5tYXgodGhpcy5tYXgueSwgb3RoZXIubWF4LnkpO1xyXG4gICAgICB0aGlzLm1heC56ID0gTWF0aC5tYXgodGhpcy5tYXgueiwgb3RoZXIubWF4LnopO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgbXVsdE0obWF0OiBNYXQ0KTogQm91bmRpbmdCb3gge1xyXG4gICAgICBsZXQgcmV0ID0gbmV3IEJvdW5kaW5nQm94KCk7XHJcbiAgICAgIGxldCB2MSA9IG1hdC5tdWx0VihuZXcgVmVjNChbdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiwgMV0pKTtcclxuICAgICAgbGV0IHYyID0gbWF0Lm11bHRWKG5ldyBWZWM0KFt0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56LCAxXSkpO1xyXG4gICAgICByZXQubWluLnggPSBNYXRoLm1pbih2MS54LCB2Mi54KTtcclxuICAgICAgcmV0Lm1pbi55ID0gTWF0aC5taW4odjEueSwgdjIueSk7XHJcbiAgICAgIHJldC5taW4ueiA9IE1hdGgubWluKHYxLnosIHYyLnopO1xyXG4gICAgICByZXQubWF4LnggPSBNYXRoLm1heCh2MS54LCB2Mi54KTtcclxuICAgICAgcmV0Lm1heC55ID0gTWF0aC5tYXgodjEueSwgdjIueSk7XHJcbiAgICAgIHJldC5tYXgueiA9IE1hdGgubWF4KHYxLnosIHYyLnopO1xyXG5cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gXCIuL1ZlY1wiO1xyXG5pbXBvcnQgeyBJTWluTWF4IH0gZnJvbSBcIi4vQm91bmRpbmdCb3hcIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi4vQXBwcy9WaWV3ZXIvUGxhbmVcIjtcclxuXHJcbi8qKlxyXG4gKiBBIHNldCBvZiBwb2ludHMgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kaW5nIGVkZ2VzIG9mIGFuIG9iamVjdC4gQWxsIHBvaW50cyBhcmVcclxuICogZW5jbG9zZWQgaW4gdGhlIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJvdW5kaW5nUHRzIHtcclxuICAgcHJpdmF0ZSBwdHM6IFZlYzNbXTtcclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdHM6IFZlYzNbXSkge1xyXG4gICAgICB0aGlzLnB0cyA9IHB0cztcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldChpOiBudW1iZXIpOiBWZWMzIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHRzW2ldO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZGlzdFRvUG9pbnQocHQ6IFZlYzMpOiBJTWluTWF4IHtcclxuICAgICAgbGV0IHJldCA9IHtcclxuICAgICAgICAgbWluOiBOdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgICAgICBtYXg6IC1OdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnB0cy5mb3JFYWNoKChwdDI6IFZlYzMpID0+IHtcclxuICAgICAgICAgbGV0IHggPSBwdDIueCAtIHB0Lng7XHJcbiAgICAgICAgIGxldCB5ID0gcHQyLnkgLSBwdC55O1xyXG4gICAgICAgICBsZXQgeiA9IHB0Mi56IC0gcHQuejtcclxuICAgICAgICAgbGV0IGQgPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XHJcbiAgICAgICAgIHJldC5taW4gPSBNYXRoLm1pbihkLCByZXQubWluKTtcclxuICAgICAgICAgcmV0Lm1heCA9IE1hdGgubWF4KGQsIHJldC5tYXgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGRvbid0IGJvdGhlciBnZXR0aW5nIHRoZSBzcXVhcmUgcm9vdCBvZiBldmVyeSBjYWxjdWxhdGlvbiwganVzdCB0aGUgbWluIGFuZCBtYXhcclxuICAgICAgcmV0Lm1pbiA9IE1hdGguc3FydChyZXQubWluKTtcclxuICAgICAgcmV0Lm1heCA9IE1hdGguc3FydChyZXQubWF4KTtcclxuXHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkaXN0VG9QbGFuZShwbGFuZTogUGxhbmUpOiBJTWluTWF4IHtcclxuICAgICAgbGV0IHJldCA9IHtcclxuICAgICAgICAgbWluOiBOdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgICAgICBtYXg6IC1OdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnB0cy5mb3JFYWNoKChwdDogVmVjMykgPT4ge1xyXG4gICAgICAgICBsZXQgZCA9IHBsYW5lLmRpc3RUb1B0KHB0KTtcclxuICAgICAgICAgcmV0Lm1pbiA9IE1hdGgubWluKGQsIHJldC5taW4pO1xyXG4gICAgICAgICByZXQubWF4ID0gTWF0aC5tYXgoZCwgcmV0Lm1heCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgSW5kZXhlZFZlYzMgfSBmcm9tIFwiLi9JbmRleGVkVmVjM1wiO1xyXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSBcIi4vVmVjXCI7XHJcblxyXG4vKipcclxuICogTWluaW1hbGlzdCB3cmFwcGVyIGFyb3VuZCBhIFdlYkdMIHRyaWFuZ2xlIGVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbmRleGVkVHJpYW5nbGUge1xyXG4gICBwdWJsaWMgdjE6IEluZGV4ZWRWZWMzO1xyXG4gICBwdWJsaWMgdjI6IEluZGV4ZWRWZWMzO1xyXG4gICBwdWJsaWMgdjM6IEluZGV4ZWRWZWMzO1xyXG4gICBwdWJsaWMgbjE6IEluZGV4ZWRWZWMzO1xyXG4gICBwdWJsaWMgbjI6IEluZGV4ZWRWZWMzO1xyXG4gICBwdWJsaWMgbjM6IEluZGV4ZWRWZWMzO1xyXG4gICBwdWJsaWMgaTE6IG51bWJlcjtcclxuICAgcHVibGljIGkyOiBudW1iZXI7XHJcbiAgIHB1YmxpYyBpMzogbnVtYmVyO1xyXG5cclxuICAgY29uc3RydWN0b3IoXHJcbiAgICAgIHZlcnRpY2VzOiBudW1iZXJbXSxcclxuICAgICAgbm9ybWFsczogbnVtYmVyW10sXHJcbiAgICAgIGkxOiBudW1iZXIsXHJcbiAgICAgIGkyOiBudW1iZXIsXHJcbiAgICAgIGkzOiBudW1iZXIsXHJcbiAgICkge1xyXG4gICAgICB0aGlzLnYxID0gbmV3IEluZGV4ZWRWZWMzKHZlcnRpY2VzLCBpMSk7XHJcbiAgICAgIHRoaXMudjIgPSBuZXcgSW5kZXhlZFZlYzModmVydGljZXMsIGkyKTtcclxuICAgICAgdGhpcy52MyA9IG5ldyBJbmRleGVkVmVjMyh2ZXJ0aWNlcywgaTMpO1xyXG4gICAgICB0aGlzLm4xID0gbmV3IEluZGV4ZWRWZWMzKG5vcm1hbHMsIGkxKTtcclxuICAgICAgdGhpcy5uMiA9IG5ldyBJbmRleGVkVmVjMyhub3JtYWxzLCBpMik7XHJcbiAgICAgIHRoaXMubjMgPSBuZXcgSW5kZXhlZFZlYzMobm9ybWFscywgaTMpO1xyXG4gICAgICB0aGlzLmkxID0gaTE7XHJcbiAgICAgIHRoaXMuaTIgPSBpMjtcclxuICAgICAgdGhpcy5pMyA9IGkzO1xyXG4gICB9XHJcblxyXG4gICBnZXQgbWluWCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTWF0aC5taW4odGhpcy52MS54LCB0aGlzLnYyLngsIHRoaXMudjMueCk7XHJcbiAgIH1cclxuICAgZ2V0IG1pblkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMudjEueSwgdGhpcy52Mi55LCB0aGlzLnYzLnkpO1xyXG4gICB9XHJcbiAgIGdldCBtaW5aKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLnYxLnosIHRoaXMudjIueiwgdGhpcy52My56KTtcclxuICAgfVxyXG5cclxuICAgZ2V0IG1heFgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMudjEueCwgdGhpcy52Mi54LCB0aGlzLnYzLngpO1xyXG4gICB9XHJcbiAgIGdldCBtYXhZKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLnYxLnksIHRoaXMudjIueSwgdGhpcy52My55KTtcclxuICAgfVxyXG4gICBnZXQgbWF4WigpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy52MS56LCB0aGlzLnYyLnosIHRoaXMudjMueik7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb21wdXRlTm9ybWFsKCk6IFZlYzMge1xyXG4gICAgICBsZXQgdjEgPSB0aGlzLnYxLnRvVmVjMygpO1xyXG4gICAgICBsZXQgdjIgPSB0aGlzLnYyLnRvVmVjMygpO1xyXG4gICAgICBsZXQgdjMgPSB0aGlzLnYzLnRvVmVjMygpO1xyXG5cclxuICAgICAgbGV0IGEgPSB2Mi5zdWJ0cmFjdCh2MSk7XHJcbiAgICAgIGxldCBiID0gdjMuc3VidHJhY3QodjIpO1xyXG4gICAgICByZXR1cm4gYS5jcm9zcyhiKS5ub3JtYWxpemUoKTtcclxuICAgfVxyXG59XHJcbiIsImltcG9ydCB7IElWZWMzLCBWZWMzIH0gZnJvbSBcIi4vVmVjXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5kZXhlZFZlYzMgaW1wbGVtZW50cyBJVmVjMyB7XHJcblxyXG4gICBwcml2YXRlIHZhbHVlczogbnVtYmVyW107XHJcbiAgIHByaXZhdGUgaW5kZXg6IG51bWJlcjtcclxuXHJcbiAgIGNvbnN0cnVjdG9yKHZhbHVlczogbnVtYmVyW10sIGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XHJcbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlc1szICogdGhpcy5pbmRleCArIDBdO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMyAqIHRoaXMuaW5kZXggKyAxXTtcclxuICAgfVxyXG4gICBwdWJsaWMgZ2V0IHooKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzMgKiB0aGlzLmluZGV4ICsgMl07XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzZXQgeCh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1szICogdGhpcy5pbmRleCArIDBdID0gdmFsO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBzZXQgeSh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1szICogdGhpcy5pbmRleCArIDFdID0gdmFsO1xyXG4gICB9XHJcbiAgIHB1YmxpYyBzZXQgeih2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1szICogdGhpcy5pbmRleCArIDJdID0gdmFsO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgdG9WZWMzKCk6IFZlYzMge1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoW3RoaXMueCwgdGhpcy55LCB0aGlzLnpdKTtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgVmVjNCwgVmVjMyB9IGZyb20gXCIuL1ZlY1wiO1xyXG5cclxuLyoqXHJcbiAqIEFuIHgteS16LXcgbWF0cml4IGZvciB1c2UgaW4gV2ViR0wgYXBwbGljYXRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1hdDQge1xyXG5cclxuICAgLyoqIFRoZSBtYXRyaXggdmFsdWUgc3RvcmVkIGFzIGEgMTYgZWxlbWVudCBhcnJheSAqL1xyXG4gICBwdWJsaWMgdmFsdWVzOiBudW1iZXJbXTtcclxuXHJcbiAgIHB1YmxpYyBnZXQgc2NhbGVGYWN0b3JzKCk6IFZlYzMge1xyXG4gICAgICBsZXQgc1ggPSAobmV3IFZlYzMoW3RoaXMuZ2V0KDAsIDApLCB0aGlzLmdldCgxLCAwKSwgdGhpcy5nZXQoMiwgMCldKSkubWFnbml0dWRlKCk7XHJcbiAgICAgIGxldCBzWSA9IChuZXcgVmVjMyhbdGhpcy5nZXQoMCwgMCksIHRoaXMuZ2V0KDEsIDApLCB0aGlzLmdldCgyLCAwKV0pKS5tYWduaXR1ZGUoKTtcclxuICAgICAgbGV0IHNaID0gKG5ldyBWZWMzKFt0aGlzLmdldCgwLCAwKSwgdGhpcy5nZXQoMSwgMCksIHRoaXMuZ2V0KDIsIDApXSkpLm1hZ25pdHVkZSgpO1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoW3NYLCBzWSwgc1pdKTtcclxuICAgfVxyXG4gICAvKipcclxuICAgICogQHBhcmFtIHZhbHVlcyBJZiBzdXBwbGllZCwgdGhlIGluaXRpYWwgbWF0cml4IHZhbHVlcy4gSWYgbm90IHN1cHBsaWVkLCB0aGUgbWF0cml4IGlzIFxyXG4gICAgKiBpbml0aWFsaXplZCBhcyBhbiBpZGVudGl0eSBtYXRyaXguXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3IodmFsdWVzPzogbnVtYmVyW10pIHtcclxuICAgICAgaWYgKHZhbHVlcykge1xyXG4gICAgICAgICB0aGlzLnZhbHVlcyA9IFsuLi52YWx1ZXNdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICB0aGlzLnZhbHVlcyA9IFtcclxuICAgICAgICAgICAgMSwgMCwgMCwgMCxcclxuICAgICAgICAgICAgMCwgMSwgMCwgMCxcclxuICAgICAgICAgICAgMCwgMCwgMSwgMCxcclxuICAgICAgICAgICAgMCwgMCwgMCwgMV07XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldCdzIGFuIGlkZW50aXR5IG1hdHJpeC4gU2FtZSBhcyBjcmVhdGluZyBhIG5ldyBtYXRyaXgsIGJ1dCBzeW50YWN0aWNhbGx5XHJcbiAgICAqIHNob3dzIHdoYXQgaXMgaGFwcGVuaW5nLlxyXG4gICAgKiBcclxuICAgICogQHJldHVybnMgQSBuZXcgaWRlbml0eSBtYXRyaXguXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGdldCBpZGVudGl0eSgpOiBNYXQ0IHtcclxuICAgICAgcmV0dXJuIG5ldyBNYXQ0KCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGFuIG9ydGhvZ3JhcGhpYyBtYXRyaXggaW4gdGhlIFdlYkdMIGNvb3JkaW5hdGUgc3lzdGVtIChwb3NpdGl2ZSB6IHRvd2FyZHMgeW91KVxyXG4gICAgKiBcclxuICAgICogQHJldHVybiBBIG5ldyBvcnRob2dyYXBoaWMgbWF0cml4XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGdldCBvcnRobygpOiBNYXQ0IHtcclxuICAgICAgcmV0dXJuIE1hdDQubWFrZU9ydGhvKC0xLCAxLCAtMSwgMSwgMSwgLTEpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIG1hdHJpeC5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIEEgY29weSBvZiB0aGUgbWF0cml4LlxyXG4gICAgKi9cclxuICAgcHVibGljIGNsb25lKCk6IE1hdDQge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdDQodGhpcy52YWx1ZXMpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyBhIHZhbHVlIGluIHRoZSBtYXRyaXguXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gcm93IFRoZSByb3cgaW5kZXguXHJcbiAgICAqIEBwYXJhbSBjb2wgVGhlIGNvbHVtbiBpbmRleC5cclxuICAgICogQHJldHVybnMgVGhlIG1hdHJpeCB2YWx1ZS5cclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzQgKiByb3cgKyBjb2xdO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyBhIHZhbHVlIGluIHRoZSBtYXRyaXguXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gcm93IFRoZSByb3cgaW5kZXguXHJcbiAgICAqIEBwYXJhbSBjb2wgVGhlIGNvbHVtbiBpbmRleC5cclxuICAgICogQHBhcmFtIHZhbCBUaGUgdmFsdWUuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc2V0KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgdmFsOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy52YWx1ZXNbNCAqIHJvdyArIGNvbF0gPSB2YWw7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBNdWx0aXBsaWVzIHRoaXMgbWF0cml4IGFnYWluc3QgYSB2ZWN0b3IgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2ZWMgVGhlIHZlY3Rvci5cclxuICAgICogQHJldHVybiBUaGUgcmVzdWx0IG9mIHRoZSBtdWx0aXBsaWNhdGlvbi4gXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgbXVsdFYodmVjOiBWZWM0KTogVmVjNCB7XHJcbiAgICAgIGxldCB2YWxzOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgNDsgcm93KyspIHtcclxuICAgICAgICAgbGV0IHN1bSA9IDA7XHJcbiAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDQ7IGNvbCsrKSB7XHJcbiAgICAgICAgICAgIHN1bSArPSB0aGlzLnZhbHVlc1tyb3cgKiA0ICsgY29sXSAqIHZlYy52YWx1ZXNbY29sXTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICB2YWxzLnB1c2goc3VtKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3IFZlYzQodmFscyk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBUcmFuc2Zvcm1zIGEgM2QgdmVjIGJ5IHRoaXMgbWF0cml4LlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHZlYyBBIDNkIHZlYy5cclxuICAgICogQHBhcmFtIHcgVGhlIHZhbHVlIHRvIHVzZSBmb3Igdy4gMCA9IGlnbm9yZSB0cmFuc2xhdGlvbi4gMSA9IGluY2x1ZGUuXHJcbiAgICAqIEByZXR1cm5zIFRoZSBuZXcgM2QgdmVjLlxyXG4gICAgKi9cclxuICAgcHVibGljIG11bHRWZWMzKHZlYzogVmVjMywgdzogbnVtYmVyID0gMSk6IFZlYzMge1xyXG4gICAgICByZXR1cm4gdGhpcy5tdWx0Vih2ZWMudG9WZWM0KHcpKS54eXo7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBNdWx0aXBsaWVzIHRoaXMgbWF0cml4IGFnYWluc3QgYW5vdGhlciBtYXRyaXggYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBvdGhlciBUaGUgbWF0cml4LlxyXG4gICAgKiBAcmV0dXJuIFRoZSByZXN1bHQgb2YgdGhlIG11bHRpcGxpY2F0aW9uLiBcclxuICAgICovXHJcbiAgIHB1YmxpYyBtdWx0TShvdGhlcjogTWF0NCk6IE1hdDQge1xyXG5cclxuICAgICAgbGV0IHJlc3VsdCA9IG5ldyBNYXQ0KCk7XHJcblxyXG4gICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCA0OyByb3crKykge1xyXG4gICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA0OyBjb2wrKykge1xyXG4gICAgICAgICAgICBsZXQgc3VtID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgICAgICAgICAgICAgc3VtICs9IHRoaXMuZ2V0KHJvdywgaSkgKiBvdGhlci5nZXQoaSwgY29sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQuc2V0KHJvdywgY29sLCBzdW0pO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBJbnZlcnRzIHRoaXMgbWF0cml4IGFuZCByZXR1cm5zIHRoZSByZXN1bHQuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgaW52ZXJzZSBvZiB0aGlzLlxyXG4gICAgKi9cclxuICAgcHVibGljIGludmVyc2UoKTogTWF0NCB7XHJcblxyXG4gICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdDQoKTtcclxuXHJcbiAgICAgIGxldCBhMDAgPSB0aGlzLnZhbHVlc1swXSwgYTAxID0gdGhpcy52YWx1ZXNbMV0sIGEwMiA9IHRoaXMudmFsdWVzWzJdLCBhMDMgPSB0aGlzLnZhbHVlc1szXTtcclxuICAgICAgbGV0IGExMCA9IHRoaXMudmFsdWVzWzRdLCBhMTEgPSB0aGlzLnZhbHVlc1s1XSwgYTEyID0gdGhpcy52YWx1ZXNbNl0sIGExMyA9IHRoaXMudmFsdWVzWzddO1xyXG4gICAgICBsZXQgYTIwID0gdGhpcy52YWx1ZXNbOF0sIGEyMSA9IHRoaXMudmFsdWVzWzldLCBhMjIgPSB0aGlzLnZhbHVlc1sxMF0sIGEyMyA9IHRoaXMudmFsdWVzWzExXTtcclxuICAgICAgbGV0IGEzMCA9IHRoaXMudmFsdWVzWzEyXSwgYTMxID0gdGhpcy52YWx1ZXNbMTNdLCBhMzIgPSB0aGlzLnZhbHVlc1sxNF0sIGEzMyA9IHRoaXMudmFsdWVzWzE1XTtcclxuXHJcbiAgICAgIGxldCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgICAgIGxldCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XHJcbiAgICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XHJcbiAgICAgIGxldCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgICAgIGxldCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XHJcbiAgICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XHJcbiAgICAgIGxldCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XHJcbiAgICAgIGxldCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XHJcbiAgICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XHJcbiAgICAgIGxldCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XHJcbiAgICAgIGxldCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XHJcbiAgICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcbiAgICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XHJcblxyXG4gICAgICBpZiAoIWRldCkge1xyXG4gICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBkZXQgPSAxLjAgLyBkZXQ7XHJcblxyXG4gICAgICByZXN1bHQudmFsdWVzWzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcclxuICAgICAgcmVzdWx0LnZhbHVlc1syXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xyXG4gICAgICByZXN1bHQudmFsdWVzWzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcclxuICAgICAgcmVzdWx0LnZhbHVlc1s1XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xyXG4gICAgICByZXN1bHQudmFsdWVzWzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcclxuICAgICAgcmVzdWx0LnZhbHVlc1s4XSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xyXG4gICAgICByZXN1bHQudmFsdWVzWzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMTFdID0gKGEyMSAqIGIwMiAtIGEyMCAqIGIwNCAtIGEyMyAqIGIwMCkgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMTRdID0gKGEzMSAqIGIwMSAtIGEzMCAqIGIwMyAtIGEzMiAqIGIwMCkgKiBkZXQ7XHJcbiAgICAgIHJlc3VsdC52YWx1ZXNbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogVHJhbnNwb3NlcyB0aGlzIG1hdHJpeCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IG1hdHJpeC5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSB0cmFuc3Bvc2VkIG1hdHJpeC5cclxuICAgICovXHJcbiAgIHB1YmxpYyB0cmFuc3Bvc2UoKTogTWF0NCB7XHJcbiAgICAgIGxldCByZXN1bHQgPSBuZXcgTWF0NCgpO1xyXG5cclxuICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgNDsgcm93KyspIHtcclxuICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgNDsgY29sKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0LnNldChyb3csIGNvbCwgdGhpcy5nZXQoY29sLCByb3cpKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIG1hdHJpeCB0aGF0IGNvbnRhaW5zIGEgc2NhbGUgb3BlcmF0aW9uLlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHNjYWxlIFRoZSBzY2FsZSBmYWN0b3JcclxuICAgICogQHJldHVybnMgVGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdGF0aWMgZnJvbVNjYWxlKHNjYWxlOiBudW1iZXIpOiBNYXQ0IHtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgTWF0NChbXHJcbiAgICAgICAgIHNjYWxlLCAwLCAwLCAwLFxyXG4gICAgICAgICAwLCBzY2FsZSwgMCwgMCxcclxuICAgICAgICAgMCwgMCwgc2NhbGUsIDAsXHJcbiAgICAgICAgIDAsIDAsIDAsIDFcclxuICAgICAgXSk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgbWF0cml4IHRoYXQgY29udGFpbnMgYSB0cmFuc2xhdGlvbiBvcGVyYXRpb24uXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmVjIFRoZSB0cmFuc2xhdGlvbnMuXHJcbiAgICAqIEByZXR1cm5zIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGZyb21UcmFuc2xhdGlvbih2OiBWZWMzKTogTWF0NCB7XHJcblxyXG4gICAgICByZXR1cm4gbmV3IE1hdDQoW1xyXG4gICAgICAgICAxLCAwLCAwLCB2LngsXHJcbiAgICAgICAgIDAsIDEsIDAsIHYueSxcclxuICAgICAgICAgMCwgMCwgMSwgdi56LFxyXG4gICAgICAgICAwLCAwLCAwLCAxXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3RhdGljIGZyb21Sb3RYKGFuZ2xlOiBudW1iZXIpOiBNYXQ0IHtcclxuXHJcbiAgICAgIGxldCBjID0gTWF0aC5jb3MoYW5nbGUpXHJcbiAgICAgIGxldCBzID0gTWF0aC5zaW4oYW5nbGUpXHJcbiAgICAgIHJldHVybiBuZXcgTWF0NChbXHJcbiAgICAgICAgIDEsIDAsIDAsIDAsXHJcbiAgICAgICAgIDAsIGMsIHMsIDAsXHJcbiAgICAgICAgIDAsIC1zLCBjLCAwLFxyXG4gICAgICAgICAwLCAwLCAwLCAxXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3RhdGljIGZyb21Sb3RZKGFuZ2xlOiBudW1iZXIpOiBNYXQ0IHtcclxuXHJcbiAgICAgIGxldCBjID0gTWF0aC5jb3MoYW5nbGUpXHJcbiAgICAgIGxldCBzID0gTWF0aC5zaW4oYW5nbGUpXHJcbiAgICAgIHJldHVybiBuZXcgTWF0NChbXHJcbiAgICAgICAgIGMsIDAsIC1zLCAwLFxyXG4gICAgICAgICAwLCAxLCAwLCAwLFxyXG4gICAgICAgICBzLCAwLCBjLCAwLFxyXG4gICAgICAgICAwLCAwLCAwLCAxXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3RhdGljIGZyb21Sb3RaKGFuZ2xlOiBudW1iZXIpOiBNYXQ0IHtcclxuXHJcbiAgICAgIGxldCBjID0gTWF0aC5jb3MoYW5nbGUpXHJcbiAgICAgIGxldCBzID0gTWF0aC5zaW4oYW5nbGUpXHJcbiAgICAgIHJldHVybiBuZXcgTWF0NChbXHJcbiAgICAgICAgIGMsIHMsIDAsIDAsXHJcbiAgICAgICAgIC1zLCBjLCAwLCAwLFxyXG4gICAgICAgICAwLCAwLCAxLCAwLFxyXG4gICAgICAgICAwLCAwLCAwLCAxXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcm90WChhbmdsZTogbnVtYmVyKTogTWF0NCB7XHJcbiAgICAgIHRoaXMudmFsdWVzID0gTWF0NC5mcm9tUm90WChhbmdsZSkubXVsdE0odGhpcykudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgcm90WShhbmdsZTogbnVtYmVyKTogTWF0NCB7XHJcbiAgICAgIHRoaXMudmFsdWVzID0gTWF0NC5mcm9tUm90WShhbmdsZSkubXVsdE0odGhpcykudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgcm90WihhbmdsZTogbnVtYmVyKTogTWF0NCB7XHJcbiAgICAgIHRoaXMudmFsdWVzID0gTWF0NC5mcm9tUm90WihhbmdsZSkubXVsdE0odGhpcykudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgcHJlUm90WChhbmdsZTogbnVtYmVyKTogTWF0NCB7XHJcbiAgICAgIHRoaXMudmFsdWVzID0gdGhpcy5tdWx0TShNYXQ0LmZyb21Sb3RYKGFuZ2xlKSkudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgcHJlUm90WShhbmdsZTogbnVtYmVyKTogTWF0NCB7XHJcbiAgICAgIHRoaXMudmFsdWVzID0gdGhpcy5tdWx0TShNYXQ0LmZyb21Sb3RZKGFuZ2xlKSkudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgcHJlUm90WihhbmdsZTogbnVtYmVyKTogTWF0NCB7XHJcbiAgICAgIHRoaXMudmFsdWVzID0gdGhpcy5tdWx0TShNYXQ0LmZyb21Sb3RaKGFuZ2xlKSkudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgdHJhbnNsYXRlKG9mZnNldDogVmVjMyk6IE1hdDQge1xyXG4gICAgICB0aGlzLnZhbHVlcyA9IE1hdDQuZnJvbVRyYW5zbGF0aW9uKG9mZnNldCkubXVsdE0odGhpcykudmFsdWVzO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgfVxyXG4gICBwdWJsaWMgc2NhbGUoc2NhbGU6IG51bWJlcik6IE1hdDQge1xyXG4gICAgICB0aGlzLnZhbHVlcyA9IE1hdDQuZnJvbVNjYWxlKHNjYWxlKS5tdWx0TSh0aGlzKS52YWx1ZXM7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIHZpZXdpbmcgbWF0cml4LiBTZWUgZ2x1TG9va0F0LlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGV5ZSBUaGUgZXllIHBvc2l0aW9uLlxyXG4gICAgKiBAcGFyYW0gY2VudGVyIFRoZSBwb2ludCBvZiBpbnRlcmVzdC5cclxuICAgICogQHBhcmFtIHVwIFRoZSB1cCB2ZWN0b3IuXHJcbiAgICAqIEByZXR1cm5zIFRoZSB2aWV3aW5nIG1hdHJpeC5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdGF0aWMgbWFrZUxvb2tBdChleWU6IFZlYzMsIGNlbnRlcjogVmVjMywgdXA6IFZlYzMsKTogTWF0NCB7XHJcblxyXG4gICAgICBsZXQgYSA9IGV5ZS5zdWJ0cmFjdChjZW50ZXIpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICBsZXQgYiA9IHVwLmNyb3NzKGEpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICBsZXQgYyA9IGEuY3Jvc3MoYikubm9ybWFsaXplKCk7XHJcblxyXG4gICAgICBsZXQgbSA9IG5ldyBNYXQ0KFtcclxuICAgICAgICAgYi54LCBiLnksIGIueiwgMCxcclxuICAgICAgICAgYy54LCBjLnksIGMueiwgMCxcclxuICAgICAgICAgYS54LCBhLnksIGEueiwgMCxcclxuICAgICAgICAgMCwgMCwgMCwgMVxyXG4gICAgICBdKTtcclxuXHJcbiAgICAgIHZhciB0ID0gbmV3IE1hdDQoW1xyXG4gICAgICAgICAxLCAwLCAwLCAtZXllLngsXHJcbiAgICAgICAgIDAsIDEsIDAsIC1leWUueSxcclxuICAgICAgICAgMCwgMCwgMSwgLWV5ZS56LFxyXG4gICAgICAgICAwLCAwLCAwLCAxXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgbGV0IHJlc3VsdCA9IG0ubXVsdE0odCk7XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIHBlcnNwZWN0aXZlIG1hdHJpeC4gU2VlIGdsdVBlcnNwZWN0aXZlLlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGZvdnkgRmllbGQgb2YgdmlldyAoaW4gZGVncmVlcykuXHJcbiAgICAqIEBwYXJhbSBhc3BlY3QgVmlldyBhc3BlY3QgcmF0aW8uXHJcbiAgICAqIEBwYXJhbSB6bmVhciBOZWFyIGNsaXBwaW5nIHBsYW5lLlxyXG4gICAgKiBAcGFyYW0gemZhciBGYXIgY2xpcHBpbmcgcGxhbmUuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIG1ha2VQZXJzcGVjdGl2ZShcclxuICAgICAgZm92eTogbnVtYmVyLFxyXG4gICAgICBhc3BlY3Q6IG51bWJlcixcclxuICAgICAgem5lYXI6IG51bWJlcixcclxuICAgICAgemZhcjogbnVtYmVyKTogTWF0NCB7XHJcblxyXG4gICAgICB2YXIgeW1heCA9IHpuZWFyICogTWF0aC50YW4oZm92eSAqIE1hdGguUEkgLyAzNjAuMCk7XHJcbiAgICAgIHZhciB5bWluID0gLXltYXg7XHJcbiAgICAgIHZhciB4bWluID0geW1pbiAqIGFzcGVjdDtcclxuICAgICAgdmFyIHhtYXggPSB5bWF4ICogYXNwZWN0O1xyXG5cclxuICAgICAgcmV0dXJuIE1hdDQubWFrZUZydXN0dW0oeG1pbiwgeG1heCwgeW1pbiwgeW1heCwgem5lYXIsIHpmYXIpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIHBlcnNwZWN0aXZlIG1hdHJpeC4gU2VlIGdsdUZydXN0dW0uXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gbGVmdCBUaGUgbGVmdCBjbGlwcGluZyBwbGFuZS5cclxuICAgICogQHBhcmFtIHJpZ2h0IFRoZSByaWdodCBjbGlwcGluZyBwbGFuZS5cclxuICAgICogQHBhcmFtIGJvdHRvbSBUaGUgYm90dG9tIGNsaXBwaW5nIHBsYW5lLlxyXG4gICAgKiBAcGFyYW0gdG9wIFRoZSB0b3AgY2xpcHBpbmcgcGxhbmUuXHJcbiAgICAqIEBwYXJhbSB6bmVhciBUaGUgbmVhciBjbGlwcGluZyBwbGFuZS5cclxuICAgICogQHBhcmFtIHpmYXIgVGhlIGZhciBjbGlwcGluZyBwbGFuZS5cclxuICAgICogQHJldHVybnMgdGhlIHBlcnNwZWN0aXZlIG1hdHJpeC5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdGF0aWMgbWFrZUZydXN0dW0oXHJcbiAgICAgIGxlZnQ6IG51bWJlcixcclxuICAgICAgcmlnaHQ6IG51bWJlcixcclxuICAgICAgYm90dG9tOiBudW1iZXIsXHJcbiAgICAgIHRvcDogbnVtYmVyLFxyXG4gICAgICB6bmVhcjogbnVtYmVyLFxyXG4gICAgICB6ZmFyOiBudW1iZXIpOiBNYXQ0IHtcclxuXHJcbiAgICAgIHZhciBYID0gMiAqIHpuZWFyIC8gKHJpZ2h0IC0gbGVmdCk7XHJcbiAgICAgIHZhciBZID0gMiAqIHpuZWFyIC8gKHRvcCAtIGJvdHRvbSk7XHJcbiAgICAgIHZhciBBID0gKHJpZ2h0ICsgbGVmdCkgLyAocmlnaHQgLSBsZWZ0KTtcclxuICAgICAgdmFyIEIgPSAodG9wICsgYm90dG9tKSAvICh0b3AgLSBib3R0b20pO1xyXG4gICAgICB2YXIgQyA9IC0oemZhciArIHpuZWFyKSAvICh6ZmFyIC0gem5lYXIpO1xyXG4gICAgICB2YXIgRCA9IC0yICogemZhciAqIHpuZWFyIC8gKHpmYXIgLSB6bmVhcik7XHJcblxyXG4gICAgICByZXR1cm4gbmV3IE1hdDQoW1xyXG4gICAgICAgICBYLCAwLCBBLCAwLFxyXG4gICAgICAgICAwLCBZLCBCLCAwLFxyXG4gICAgICAgICAwLCAwLCBDLCBELFxyXG4gICAgICAgICAwLCAwLCAtMSwgMFxyXG4gICAgICBdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZXMgYSBwZXJzcGVjdGl2ZSBtYXRyaXguIFNlZSBnbHVPcnRoby5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBsZWZ0IFRoZSBsZWZ0IGNsaXBwaW5nIHBsYW5lLlxyXG4gICAgKiBAcGFyYW0gcmlnaHQgVGhlIHJpZ2h0IGNsaXBwaW5nIHBsYW5lLlxyXG4gICAgKiBAcGFyYW0gYm90dG9tIFRoZSBib3R0b20gY2xpcHBpbmcgcGxhbmUuXHJcbiAgICAqIEBwYXJhbSB0b3AgVGhlIHRvcCBjbGlwcGluZyBwbGFuZS5cclxuICAgICogQHBhcmFtIHpuZWFyIFRoZSBuZWFyIGNsaXBwaW5nIHBsYW5lLlxyXG4gICAgKiBAcGFyYW0gemZhciBUaGUgZmFyIGNsaXBwaW5nIHBsYW5lLlxyXG4gICAgKiBAcmV0dXJucyB0aGUgcGVyc3BlY3RpdmUgbWF0cml4LlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBtYWtlT3J0aG8oXHJcbiAgICAgIGxlZnQ6IG51bWJlcixcclxuICAgICAgcmlnaHQ6IG51bWJlcixcclxuICAgICAgYm90dG9tOiBudW1iZXIsXHJcbiAgICAgIHRvcDogbnVtYmVyLFxyXG4gICAgICBuZWFyOiBudW1iZXIsXHJcbiAgICAgIGZhcjogbnVtYmVyKTogTWF0NCB7XHJcblxyXG4gICAgICByZXR1cm4gbmV3IE1hdDQoW1xyXG4gICAgICAgICAyIC8gKHJpZ2h0IC0gbGVmdCksIDAsIDAsIChyaWdodCArIGxlZnQpIC8gKHJpZ2h0IC0gbGVmdCksXHJcbiAgICAgICAgIDAsIDIgLyAodG9wIC0gYm90dG9tKSwgMCwgKHRvcCArIGJvdHRvbSkgLyAodG9wIC0gYm90dG9tKSxcclxuICAgICAgICAgMCwgMCwgMiAvIChmYXIgLSBuZWFyKSwgKGZhciArIG5lYXIpIC8gKGZhciAtIG5lYXIpLFxyXG4gICAgICAgICAwLCAwLCAwLCAxXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgbG9nKG1zZzogc3RyaW5nLCBkaWdpdHM6IG51bWJlciA9IDIpIHtcclxuICAgICAgY29uc29sZS5sb2cobXNnKTtcclxuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCA0OyByKyspIHtcclxuICAgICAgICAgbGV0IGxpbmUgPSBcIlwiO1xyXG4gICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IDQ7IGMrKykge1xyXG4gICAgICAgICAgICBsaW5lICs9IHRoaXMuZ2V0KHIsIGMpLnRvRml4ZWQoZGlnaXRzKSArICcgJztcclxuICAgICAgICAgfVxyXG4gICAgICAgICBjb25zb2xlLmxvZyhsaW5lKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZygpO1xyXG4gICB9XHJcblxyXG59IiwiLyoqXHJcbiAqIFNwaGVyaWNhbCBjb29yZGluYXRlcyBiYXNlZCBvbiB0aGUgV2ViR0wgdmlld2luZyBzeXN0ZW06IHg9bGVmdC1yaWdodCwgeT11cC1kb3duLCB6PW5lYXItZmFyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3BoZXJpY2FsQ29vcmQge1xyXG4gICAvKipcclxuICAgICogVGhlIGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byB0aGUgcG9pbnRcclxuICAgICovXHJcbiAgIHB1YmxpYyByYWRpdXM6IG51bWJlciA9IDA7XHJcblxyXG4gICAvKipcclxuICAgICogVGhlIGVsZXZhdGlvbiBmcm9tIHRoZSBmbG9vciB0byB0aGUgcG9pbnQuIDAgYW5kIDE4MCBhcmUgb24gdGhlXHJcbiAgICAqIGZsb29yLiA5MCBwb2ludHMgdXAuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZWxldmF0aW9uQW5nbGU6IG51bWJlciA9IDA7XHJcblxyXG4gICAvKipcclxuICAgICogVGhlIGFuZ2xlLCB3aGVuIGxvb2tpbmcgZG93biBmcm9tIHRoZSB0b3AsIHRvIHRoZSBwb2ludC4gMCBwb2ludHMgcmlnaHQuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgcm90YXRpb25BbmdsZTogbnVtYmVyID0gMDtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gcmFkaXVzXHJcbiAgICAqIEBwYXJhbSBlbGV2YXRpb25BbmdsZSBcclxuICAgICogQHBhcmFtIHJvdGF0aW9uQW5nbGUgXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3IocmFkaXVzOiBudW1iZXIsIGVsZXZhdGlvbkFuZ2xlOiBudW1iZXIsIHJvdGF0aW9uQW5nbGU6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgICAgdGhpcy5lbGV2YXRpb25BbmdsZSA9IGVsZXZhdGlvbkFuZ2xlO1xyXG4gICAgICB0aGlzLnJvdGF0aW9uQW5nbGUgPSByb3RhdGlvbkFuZ2xlO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIHNwaGVyaWNhbCBjb29yZGluYXRlIGZyb20gYSBjYXJ0ZXNpYW4gcG9pbnRcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBwb3MgVGhlIGNhcnRlc2lhbiBwb2ludC5cclxuICAgICogQHJldHVybnMgVGhlIHNwaGVyaWNhbCBjb29yZGluYXRlLlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBmcm9tWFlaKHBvczogbnVtYmVyW10pOiBTcGhlcmljYWxDb29yZCB7XHJcblxyXG4gICAgICBsZXQgeCA9IHBvc1swXTtcclxuICAgICAgbGV0IHkgPSBwb3NbMV07XHJcbiAgICAgIGxldCB6ID0gcG9zWzJdO1xyXG5cclxuICAgICAgbGV0IHJhZGl1cyA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG4gICAgICBsZXQgcm90YXRpb25BbmdsZSA9ICgxODAgLyBNYXRoLlBJKSAqIE1hdGguYXRhbjIoeiwgeCk7XHJcbiAgICAgIGxldCBlbGV2YXRpb25BbmdsZSA9ICgxODAgLyBNYXRoLlBJKSAqIE1hdGguYXNpbih5IC8gcmFkaXVzKTtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgU3BoZXJpY2FsQ29vcmQocmFkaXVzLCBlbGV2YXRpb25BbmdsZSwgcm90YXRpb25BbmdsZSk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDb252ZXJ0cyB0aGlzIHNwaGVyaWNhbCBjb29yZGluYXRlIHRvIGEgY2FydGVzaWFuIGNvb3JkaW5hdGUuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgY2FydGVzaWFuIGNvb3JkaW5hdGUuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgdG9YWVooKTogbnVtYmVyW10ge1xyXG5cclxuICAgICAgbGV0IGZsb29yUmFkaXVzID0gdGhpcy5yYWRpdXMgKiBNYXRoLmNvcygoTWF0aC5QSSAvIDE4MCkgKiB0aGlzLmVsZXZhdGlvbkFuZ2xlKTtcclxuICAgICAgbGV0IHggPSBmbG9vclJhZGl1cyAqIE1hdGguY29zKChNYXRoLlBJIC8gMTgwKSAqIHRoaXMucm90YXRpb25BbmdsZSk7XHJcbiAgICAgIGxldCB5ID0gdGhpcy5yYWRpdXMgKiBNYXRoLnNpbigoTWF0aC5QSSAvIDE4MCkgKiB0aGlzLmVsZXZhdGlvbkFuZ2xlKTtcclxuICAgICAgbGV0IHogPSBmbG9vclJhZGl1cyAqIE1hdGguc2luKChNYXRoLlBJIC8gMTgwKSAqIHRoaXMucm90YXRpb25BbmdsZSk7XHJcblxyXG4gICAgICByZXR1cm4gW3gsIHksIHpdO1xyXG4gICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFZlYzMsIElWZWMzIH0gZnJvbSBcIi4vVmVjXCI7XHJcbmltcG9ydCB7IEJvdW5kaW5nQm94IH0gZnJvbSBcIi4vQm91bmRpbmdCb3hcIjtcclxuaW1wb3J0IHsgQm91bmRpbmdQdHMgfSBmcm9tIFwiLi9Cb3VuZGluZ1B0c1wiO1xyXG5pbXBvcnQgeyBJbmRleGVkVHJpYW5nbGUgfSBmcm9tIFwiLi9JbmRleGVkVHJpYW5nbGVcIjtcclxuaW1wb3J0IHsgSW5kZXhlZFZlYzMgfSBmcm9tIFwiLi9JbmRleGVkVmVjM1wiO1xyXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gXCIuLi9VdGlsL0dsb2JhbHNcIjtcclxuaW1wb3J0IHsgUHJvZmlsZXIgfSBmcm9tIFwiLi4vVXRpbC9Qcm9maWxlclwiO1xyXG5pbXBvcnQgeyBCbG9iRmlsZSB9IGZyb20gXCIuLi9VdGlsL0Jsb2JGaWxlXCI7XHJcblxyXG5leHBvcnQgZW51bSBOb3JtYWxUeXBlIHtcclxuICAgU21vb3RoLFxyXG4gICBGbGF0XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUcmlhbmdsZU9iakRhdGEge1xyXG4gICBuYW1lOiBzdHJpbmc7XHJcbiAgIHNvdXJjZTogc3RyaW5nO1xyXG4gICB2ZXJ0aWNlczogRmxvYXQzMkFycmF5O1xyXG4gICBub3JtYWxzOiBGbG9hdDMyQXJyYXk7XHJcbiAgIGluZGljZXM6IEludDMyQXJyYXk7XHJcbiAgIGJveE1pbjogVmVjMztcclxuICAgYm94TWF4OiBWZWMzO1xyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGFuIG9iamVjdCBmcm9tIGEgYnVuY2ggb2YgdHJpYW5nbGVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRyaWFuZ2xlT2JqIHtcclxuICAgcHVibGljIHZlcnRpY2VzOiBudW1iZXJbXSA9IFtdO1xyXG4gICBwdWJsaWMgbm9ybWFsczogbnVtYmVyW10gPSBbXTtcclxuICAgcHVibGljIGluZGljZXM6IG51bWJlcltdID0gW107XHJcbiAgIHB1YmxpYyBib3ggPSBuZXcgQm91bmRpbmdCb3goKTtcclxuICAgcHVibGljIG5hbWU6IHN0cmluZztcclxuICAgcHVibGljIHNvdXJjZTogc3RyaW5nO1xyXG4gICBwcml2YXRlIGJvdW5kaW5nUHRzOiBCb3VuZGluZ1B0cztcclxuXHJcbiAgIHB1YmxpYyBnZXQgbnVtVmVydGljZXMoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzLmxlbmd0aCAvIDM7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgbnVtVHJpYW5nbGVzKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5pbmRpY2VzLmxlbmd0aCAvIDM7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgd2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYm94LndpZHRoO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3guaGVpZ2h0O1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGRlcHRoKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLmJveC5kZXB0aDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCBkaWFnb25hbCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3guZGlhZ29uYWw7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgY2VudGVyKCk6IFZlYzMge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3guY2VudGVyO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IobmFtZT86IHN0cmluZykge1xyXG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0VHJpYW5nbGUoaW5kZXg6IG51bWJlcik6IEluZGV4ZWRUcmlhbmdsZSB7XHJcbiAgICAgIGxldCBpMSA9IHRoaXMuaW5kaWNlc1szICogaW5kZXggKyAwXTtcclxuICAgICAgbGV0IGkyID0gdGhpcy5pbmRpY2VzWzMgKiBpbmRleCArIDFdO1xyXG4gICAgICBsZXQgaTMgPSB0aGlzLmluZGljZXNbMyAqIGluZGV4ICsgMl07XHJcbiAgICAgIHJldHVybiBuZXcgSW5kZXhlZFRyaWFuZ2xlKHRoaXMudmVydGljZXMsIHRoaXMubm9ybWFscywgaTEsIGkyLCBpMyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBwdXNoUXVhZCh2MTogSVZlYzMsIHYyOiBJVmVjMywgdjM6IElWZWMzLCB2NDogSVZlYzMpIHtcclxuXHJcbiAgICAgIHRoaXMucHVzaFRyaWFuZ2xlKHYxLCB2MiwgdjMpO1xyXG4gICAgICB0aGlzLnB1c2hUcmlhbmdsZSh2MiwgdjQsIHYzKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHB1c2hUcmlhbmdsZSh2MTogSVZlYzMsIHYyOiBJVmVjMywgdjM6IElWZWMzKSB7XHJcblxyXG4gICAgICAvLyBhZGQgaW5kaWNlc1xyXG4gICAgICBsZXQgaTEgPSB0aGlzLm51bVZlcnRpY2VzO1xyXG4gICAgICBsZXQgaTIgPSBpMSArIDE7XHJcbiAgICAgIGxldCBpMyA9IGkxICsgMjtcclxuICAgICAgdGhpcy5pbmRpY2VzLnB1c2goaTEsIGkyLCBpMyk7XHJcblxyXG4gICAgICAvLyBhZGQgdmVydGljZXNcclxuICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoKHYxLngsIHYxLnksIHYxLnosIHYyLngsIHYyLnksIHYyLnosIHYzLngsIHYzLnksIHYzLnopO1xyXG4gICAgICB0aGlzLmJveC51cGRhdGUodjEpO1xyXG4gICAgICB0aGlzLmJveC51cGRhdGUodjIpO1xyXG4gICAgICB0aGlzLmJveC51cGRhdGUodjMpO1xyXG5cclxuICAgICAgLy8gYWRkIG5vcm1hbHNcclxuICAgICAgbGV0IHRyaSA9IG5ldyBJbmRleGVkVHJpYW5nbGUodGhpcy52ZXJ0aWNlcywgdGhpcy5ub3JtYWxzLCBpMSwgaTIsIGkzKTtcclxuICAgICAgbGV0IG5vcm1hbCA9IHRyaS5jb21wdXRlTm9ybWFsKCk7XHJcbiAgICAgIHRoaXMubm9ybWFscy5wdXNoKC4uLm5vcm1hbC52YWx1ZXMpO1xyXG4gICAgICB0aGlzLm5vcm1hbHMucHVzaCguLi5ub3JtYWwudmFsdWVzKTtcclxuICAgICAgdGhpcy5ub3JtYWxzLnB1c2goLi4ubm9ybWFsLnZhbHVlcyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb21wdXRlTm9ybWFscyh0eXBlOiBOb3JtYWxUeXBlKSB7XHJcblxyXG4gICAgICBpZiAodHlwZSA9PT0gTm9ybWFsVHlwZS5TbW9vdGgpIHtcclxuICAgICAgICAgbGV0IG11bHRpTm9ybVZlcnRpY2VzOiBNdWx0aU5vcm1WZXJ0ZXhbXSA9IFtdO1xyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtVmVydGljZXM7IGkrKykge1xyXG4gICAgICAgICAgICBtdWx0aU5vcm1WZXJ0aWNlcy5wdXNoKG5ldyBNdWx0aU5vcm1WZXJ0ZXgoKSk7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8vIHN0b3JlIHRoZSBub3JtYWxzIHdpdGggZWFjaCB2ZXJ0ZXggLSB3ZSdsbCBsYXRlciBhdmVyYWdlIHRoZXNlXHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1UcmlhbmdsZXM7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdHJpID0gdGhpcy5nZXRUcmlhbmdsZShpKTtcclxuICAgICAgICAgICAgbGV0IG4gPSB0cmkuY29tcHV0ZU5vcm1hbCgpO1xyXG4gICAgICAgICAgICBtdWx0aU5vcm1WZXJ0aWNlc1t0cmkuaTFdLnB1c2gobik7XHJcbiAgICAgICAgICAgIG11bHRpTm9ybVZlcnRpY2VzW3RyaS5pMl0ucHVzaChuKTtcclxuICAgICAgICAgICAgbXVsdGlOb3JtVmVydGljZXNbdHJpLmkzXS5wdXNoKG4pO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgbm9ybWFscyBhcnJheVxyXG4gICAgICAgICB0aGlzLm5vcm1hbHMgPSBbXTtcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdWx0aU5vcm1WZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm5vcm1hbHMucHVzaCguLi5tdWx0aU5vcm1WZXJ0aWNlc1tpXS5ub3JtYWwudmFsdWVzKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICAvLyB0byBnbyB0aGlzIHdheSB3ZSBuZWVkIHRvIGhhdmUgYSB1bmlxdWUgdmVjdG9yIGFuZCBub3JtYWwgZm9yIGVhY2ggdHJpYW5nbGVcclxuICAgICAgICAgLy8gY29ybmVyLiBCbG93IGF3YXkgdGhlIG9sZCBzdHVmZiBhbmQgcmVidWlsZFxyXG4gICAgICAgICBsZXQgb2xkSW5kaWNlcyA9IHRoaXMuaW5kaWNlcztcclxuICAgICAgICAgbGV0IG9sZFZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcclxuXHJcbiAgICAgICAgIC8vIHJlc2V0IGV2ZXJ5dGhpbmdcclxuICAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICB0aGlzLm5vcm1hbHMgPSBbXTtcclxuICAgICAgICAgdGhpcy5pbmRpY2VzID0gW107XHJcblxyXG4gICAgICAgICAvLyByZWJ1aWxkXHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2xkSW5kaWNlcy5sZW5ndGggLyAzOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHYxID0gbmV3IEluZGV4ZWRWZWMzKG9sZFZlcnRpY2VzLCBvbGRJbmRpY2VzWzMgKiBpICsgMF0pO1xyXG4gICAgICAgICAgICBsZXQgdjIgPSBuZXcgSW5kZXhlZFZlYzMob2xkVmVydGljZXMsIG9sZEluZGljZXNbMyAqIGkgKyAxXSk7XHJcbiAgICAgICAgICAgIGxldCB2MyA9IG5ldyBJbmRleGVkVmVjMyhvbGRWZXJ0aWNlcywgb2xkSW5kaWNlc1szICogaSArIDJdKTtcclxuICAgICAgICAgICAgdGhpcy5wdXNoVHJpYW5nbGUodjEsIHYyLCB2Myk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHgoaTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmVydGljZXNbMyAqIGkgKyAwXTtcclxuICAgfVxyXG4gICBwcml2YXRlIHkoaTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmVydGljZXNbMyAqIGkgKyAxXTtcclxuICAgfVxyXG4gICBwcml2YXRlIHooaTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmVydGljZXNbMyAqIGkgKyAyXTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGZpbmRCb3VuZHMoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdmaW5kaW5nIGJvdW5kcycpO1xyXG4gICAgICBsZXQgYm94ID0gbmV3IEJvdW5kaW5nQm94KCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtVHJpYW5nbGVzOyBpKyspIHtcclxuICAgICAgICAgbGV0IHRyaSA9IHRoaXMuZ2V0VHJpYW5nbGUoaSk7XHJcbiAgICAgICAgIGJveC51cGRhdGUodHJpLnYxKTtcclxuICAgICAgICAgYm94LnVwZGF0ZSh0cmkudjIpO1xyXG4gICAgICAgICBib3gudXBkYXRlKHRyaS52Myk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYm94ID0gYm94O1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQnJlYWtzIHRoZSBvYmplY3QgaW50byBldmVubHkgc3BhY2VkIHZvbHVtZXMuIFRoZSBudW1iZXIgb2Ygdm9sdW1lcyBpcyBhdXRvbWF0aWNhbGx5XHJcbiAgICAqIGRldGVybWluZWQgYmFzZWQgb24gdGhlIG51bWJlciBvZiB0cmlhbmdsZXMuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0Qm91bmRpbmdQdHMoKTogQm91bmRpbmdQdHMge1xyXG5cclxuICAgICAgaWYgKHRoaXMuYm91bmRpbmdQdHMpIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRpbmdQdHM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBudW1TdGVwcyA9IDE1O1xyXG5cclxuICAgICAgbGV0IGJveGVzOiBCb3VuZGluZ0JveFtdID0gW107XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5wb3cobnVtU3RlcHMsIDMpOyBpKyspIHtcclxuICAgICAgICAgYm94ZXMucHVzaChuZXcgQm91bmRpbmdCb3goKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCB2ID0gbmV3IFZlYzMoKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bVZlcnRpY2VzOyBpKyspIHtcclxuICAgICAgICAgdi54ID0gdGhpcy52ZXJ0aWNlc1szICogaSArIDBdO1xyXG4gICAgICAgICB2LnkgPSB0aGlzLnZlcnRpY2VzWzMgKiBpICsgMV07XHJcbiAgICAgICAgIHYueiA9IHRoaXMudmVydGljZXNbMyAqIGkgKyAyXTtcclxuICAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKG51bVN0ZXBzICogKHYueCAtIHRoaXMuYm94Lm1pbi54KSAvICh0aGlzLmJveC53aWR0aCkpO1xyXG4gICAgICAgICBsZXQgeSA9IE1hdGguZmxvb3IobnVtU3RlcHMgKiAodi55IC0gdGhpcy5ib3gubWluLnkpIC8gKHRoaXMuYm94LmhlaWdodCkpO1xyXG4gICAgICAgICBsZXQgeiA9IE1hdGguZmxvb3IobnVtU3RlcHMgKiAodi56IC0gdGhpcy5ib3gubWluLnopIC8gKHRoaXMuYm94LmRlcHRoKSk7XHJcbiAgICAgICAgIHggPSBjbGFtcCh4LCAwLCBudW1TdGVwcyAtIDEpO1xyXG4gICAgICAgICB5ID0gY2xhbXAoeSwgMCwgbnVtU3RlcHMgLSAxKTtcclxuICAgICAgICAgeiA9IGNsYW1wKHosIDAsIG51bVN0ZXBzIC0gMSk7XHJcbiAgICAgICAgIGxldCBpbmRleCA9IHggKyB5ICogbnVtU3RlcHMgKyB6ICogbnVtU3RlcHMgKiBudW1TdGVwcztcclxuICAgICAgICAgYm94ZXNbaW5kZXhdLnVwZGF0ZSh2KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGJveE1hcCA9IG5ldyBNYXA8bnVtYmVyLCBCb3VuZGluZ0JveD4oKTtcclxuICAgICAgbGV0IGJveENvdW50ID0gMDtcclxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBudW1TdGVwczsgeCsrKSB7XHJcbiAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgbnVtU3RlcHM7IHkrKykge1xyXG4gICAgICAgICAgICBsZXQgZmlyc3Q6IHtcclxuICAgICAgICAgICAgICAgaW5kZXg6IG51bWJlcixcclxuICAgICAgICAgICAgICAgYm94OiBCb3VuZGluZ0JveCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IGxhc3Q6IHtcclxuICAgICAgICAgICAgICAgaW5kZXg6IG51bWJlcixcclxuICAgICAgICAgICAgICAgYm94OiBCb3VuZGluZ0JveCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeiA9IDA7IHogPCBudW1TdGVwczsgeisrKSB7XHJcbiAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHggKyB5ICogbnVtU3RlcHMgKyB6ICogbnVtU3RlcHMgKiBudW1TdGVwcztcclxuICAgICAgICAgICAgICAgbGV0IGJveCA9IGJveGVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgaWYgKGJveC5taW4ueCA9PT0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBib3hDb3VudCsrO1xyXG4gICAgICAgICAgICAgICBpZiAoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgIGZpcnN0ID0geyBpbmRleDogaW5kZXgsIGJveDogYm94IH07XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgbGFzdCA9IHsgaW5kZXg6IGluZGV4LCBib3g6IGJveCB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlyc3QgJiYgYm94TWFwLmhhcyhmaXJzdC5pbmRleCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgIGJveE1hcC5zZXQoZmlyc3QuaW5kZXgsIGZpcnN0LmJveCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxhc3QgJiYgYm94TWFwLmhhcyhsYXN0LmluZGV4KSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgYm94TWFwLnNldChsYXN0LmluZGV4LCBsYXN0LmJveCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgcHRzOiBWZWMzW10gPSBbXTtcclxuICAgICAgYm94ZXMuZm9yRWFjaCgoYm94KSA9PiB7XHJcbiAgICAgICAgIGlmIChib3gubWluLnggIT09IE51bWJlci5NQVhfVkFMVUUpIHtcclxuICAgICAgICAgICAgcHRzLnB1c2goLi4uYm94LmNvcm5lcnMpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5ib3VuZGluZ1B0cyA9IG5ldyBCb3VuZGluZ1B0cyhwdHMpO1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1B0cztcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZXMgYSBzdHJpbmcgaW4gdGhlIGZvciAuT0JKIGZpbGUgZm9ybWF0XHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyB0aGUgc3RyaW5nXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgdG9PYmpTdHJpbmcoZGlnaXRzID0gOCkge1xyXG5cclxuICAgICAgbGV0IHN0ciA9ICcnO1xyXG4gICAgICBzdHIgKz0gJyMgVmVydGljZXM6ICcgKyB0aGlzLnZlcnRpY2VzLmxlbmd0aCArICdcXG4nO1xyXG4gICAgICBzdHIgKz0gJyMgVHJpYW5nbGVzOiAnICsgdGhpcy5udW1UcmlhbmdsZXMgKyAnXFxuJztcclxuICAgICAgc3RyICs9ICdcXG4nO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bVZlcnRpY2VzOyBpKyspIHtcclxuICAgICAgICAgbGV0IHYgPSB0aGlzLnZlcnRpY2VzO1xyXG4gICAgICAgICBzdHIgKz0gJ3YgJyArIHZbMyAqIGkgKyAwXS50b1ByZWNpc2lvbihkaWdpdHMpICsgJyAnICsgdlszICogaSArIDFdLnRvUHJlY2lzaW9uKGRpZ2l0cykgKyAnICcgKyB2WzMgKiBpICsgMl0udG9QcmVjaXNpb24oZGlnaXRzKSArICdcXG4nO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1WZXJ0aWNlczsgaSsrKSB7XHJcbiAgICAgICAgIGxldCBuID0gdGhpcy5ub3JtYWxzO1xyXG4gICAgICAgICBzdHIgKz0gJ3ZuICcgKyBuWzMgKiBpICsgMF0udG9QcmVjaXNpb24oZGlnaXRzKSArICcgJyArIG5bMyAqIGkgKyAxXS50b1ByZWNpc2lvbihkaWdpdHMpICsgJyAnICsgblszICogaSArIDJdLnRvUHJlY2lzaW9uKGRpZ2l0cykgKyAnXFxuJztcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtVHJpYW5nbGVzOyBpKyspIHtcclxuICAgICAgICAgbGV0IHQgPSB0aGlzLmdldFRyaWFuZ2xlKGkpO1xyXG4gICAgICAgICBzdHIgKz0gJ2YgJyArXHJcbiAgICAgICAgICAgICh0LmkxICsgMSkgKyAnLy8nICsgKHQuaTEgKyAxKSArICcgJyArXHJcbiAgICAgICAgICAgICh0LmkyICsgMSkgKyAnLy8nICsgKHQuaTIgKyAxKSArICcgJyArXHJcbiAgICAgICAgICAgICh0LmkzICsgMSkgKyAnLy8nICsgKHQuaTMgKyAxKSArICdcXG4nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc3RyO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgb3B0aW1pemUobm9ybWFsVHlwZTogTm9ybWFsVHlwZSkge1xyXG5cclxuICAgICAgaWYgKG5vcm1hbFR5cGUgPT09IE5vcm1hbFR5cGUuU21vb3RoKSB7XHJcblxyXG4gICAgICAgICBsZXQgdmVydGV4VG9JbmRleE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcbiAgICAgICAgIGxldCBpbmRleFRvSW5kZXhNYXAgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpO1xyXG5cclxuICAgICAgICAgLy8gZmlyc3QgZ2VuZXJhdGUgYSB1bmlxdWUgc2V0IG9mIHZlcnRpY2VzXHJcbiAgICAgICAgIGxldCB1bmlxdWVWZXJ0aWNlczogSW5kZXhlZFZlYzNbXSA9IFtdO1xyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtVmVydGljZXM7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgbGV0IG9sZFZlcnRleCA9IG5ldyBJbmRleGVkVmVjMyh0aGlzLnZlcnRpY2VzLCBpKTtcclxuICAgICAgICAgICAgbGV0IGtleSA9IHRoaXMudmVydGljZXNbMyAqIGkgKyAwXS50b0ZpeGVkKDQpICsgJyAnICsgdGhpcy52ZXJ0aWNlc1szICogaSArIDFdLnRvRml4ZWQoNCkgKyAnICcgKyB0aGlzLnZlcnRpY2VzWzMgKiBpICsgMl0udG9GaXhlZCg0KTtcclxuICAgICAgICAgICAgbGV0IG9sZEluZGV4ID0gaSArIDE7XHJcbiAgICAgICAgICAgIGxldCBuZXdJbmRleDtcclxuICAgICAgICAgICAgaWYgKHZlcnRleFRvSW5kZXhNYXAuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgLy8ganVzdCBtYXAgdGhlIG9sZCBpbmRleCB0byB0aGUgZXhpc3RpbmcgZW50cnlcclxuICAgICAgICAgICAgICAgbmV3SW5kZXggPSB2ZXJ0ZXhUb0luZGV4TWFwLmdldChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgZW50cnlcclxuICAgICAgICAgICAgICAgbmV3SW5kZXggPSB1bmlxdWVWZXJ0aWNlcy5sZW5ndGggKyAxO1xyXG4gICAgICAgICAgICAgICB2ZXJ0ZXhUb0luZGV4TWFwLnNldChrZXksIG5ld0luZGV4KTtcclxuICAgICAgICAgICAgICAgdW5pcXVlVmVydGljZXMucHVzaChvbGRWZXJ0ZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHN0b3JlIHRoZSB0cmFuc2xhdGlvblxyXG4gICAgICAgICAgICBpbmRleFRvSW5kZXhNYXAuc2V0KG9sZEluZGV4LCBuZXdJbmRleCk7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8vIHJlc2V0IGFsbCB0aGUgdmVydGljZXNcclxuICAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuaXF1ZVZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMucHVzaCh1bmlxdWVWZXJ0aWNlc1tpXS54KTtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoKHVuaXF1ZVZlcnRpY2VzW2ldLnkpO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2VzLnB1c2godW5pcXVlVmVydGljZXNbaV0ueik7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8vIHJlbWFwIGFsbCBpbmRpY2VzXHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbmRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRJbmRleCA9IHRoaXMuaW5kaWNlc1tpXTtcclxuICAgICAgICAgICAgdGhpcy5pbmRpY2VzW2ldID0gaW5kZXhUb0luZGV4TWFwLmdldChvbGRJbmRleCArIDEpIC0gMTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICAvLyBub3RoaW5nIHRvIGRvIGZvciBmbGF0IG5vcm1hbHMuIE5ldyB2ZXJ0aWNlcyBhbmQgbm9ybWFscyBhcmUgY3JlYXRlZCBpbiBcclxuICAgICAgICAgLy8gY29tcHV0ZU5vcm1hbHMoKSBiZWxvdyBpZiBuZWVkZWRcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jb21wdXRlTm9ybWFscyhub3JtYWxUeXBlKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHRyaW0oYm94OiBCb3VuZGluZ0JveCkge1xyXG4gICAgICBsZXQgcCA9IG5ldyBQcm9maWxlcigpO1xyXG4gICAgICBsZXQgaW5kaWNlczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bVRyaWFuZ2xlczsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB0cmkgPSB0aGlzLmdldFRyaWFuZ2xlKGkpO1xyXG5cclxuICAgICAgICAgaWYgKGJveC5pbnNpZGUodHJpLnYxKSAmJiBib3guaW5zaWRlKHRyaS52MikgJiYgYm94Lmluc2lkZSh0cmkudjMpKSB7XHJcbiAgICAgICAgICAgIGluZGljZXMucHVzaCh0cmkuaTEpO1xyXG4gICAgICAgICAgICBpbmRpY2VzLnB1c2godHJpLmkyKTtcclxuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHRyaS5pMyk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZygndHJpbW1lZCAnICsgKHRoaXMuaW5kaWNlcy5sZW5ndGggLSBpbmRpY2VzLmxlbmd0aCkgKyAnIHRyaWFuZ2xlcycpO1xyXG4gICAgICB0aGlzLmluZGljZXMgPSBpbmRpY2VzO1xyXG4gICAgICB0aGlzLmZpbmRCb3VuZHMoKTtcclxuICAgICAgcC5sb2coJ1RyaW0gQ29tcGxldGUnKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIG1pcnJvcih4OiBudW1iZXIsIGFkZDogYm9vbGVhbikge1xyXG4gICAgICBsZXQgcCA9IG5ldyBQcm9maWxlcigpO1xyXG5cclxuICAgICAgaWYgKGFkZCkge1xyXG4gICAgICAgICAvLyBkdXBsaWNhdGUgdmVydGljZXNcclxuICAgICAgICAgbGV0IG51bVZlcnRpY2VzID0gdGhpcy5udW1WZXJ0aWNlcztcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXNbMyAqIGkgKyAwXSAtPSB4OztcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoKC10aGlzLnZlcnRpY2VzWzMgKiBpICsgMF0pO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2VzLnB1c2godGhpcy52ZXJ0aWNlc1szICogaSArIDFdKTtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoKHRoaXMudmVydGljZXNbMyAqIGkgKyAyXSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9ybWFscy5wdXNoKC10aGlzLm5vcm1hbHNbMyAqIGkgKyAwXSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9ybWFscy5wdXNoKHRoaXMubm9ybWFsc1szICogaSArIDFdKTtcclxuICAgICAgICAgICAgdGhpcy5ub3JtYWxzLnB1c2godGhpcy5ub3JtYWxzWzMgKiBpICsgMl0pO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBsZXQgbnVtSW5kaWNlcyA9IHRoaXMuaW5kaWNlcy5sZW5ndGg7XHJcbiAgICAgICAgIGxldCBzdGFydEluZGV4ID0gbnVtVmVydGljZXM7XHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtSW5kaWNlczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kaWNlcy5wdXNoKHN0YXJ0SW5kZXggKyB0aGlzLmluZGljZXNbaV0pO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIC8vIHJlZmxlY3QgdmVydGljZXNcclxuICAgICAgICAgbGV0IG51bVZlcnRpY2VzID0gdGhpcy5udW1WZXJ0aWNlcztcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXNbMyAqIGkgKyAwXSA9IHggKyAoeCAtIHRoaXMudmVydGljZXNbMyAqIGkgKyAwXSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9ybWFsc1szICogaSArIDBdID0gLXRoaXMubm9ybWFsc1szICogaSArIDBdO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZmluZEJvdW5kcygpO1xyXG5cclxuICAgICAgcC5sb2coJ01pcnJvciBDb21wbGV0ZScpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgcmV2ZXJzZSgpIHtcclxuICAgICAgbGV0IHAgPSBuZXcgUHJvZmlsZXIoKTtcclxuXHJcbiAgICAgIC8vIHJlZmxlY3QgdmVydGljZXNcclxuICAgICAgbGV0IHggPSB0aGlzLmNlbnRlci54O1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtVmVydGljZXM7IGkrKykge1xyXG4gICAgICAgICB0aGlzLnZlcnRpY2VzWzMgKiBpICsgMF0gPSB4ICsgKHggLSB0aGlzLnZlcnRpY2VzWzMgKiBpICsgMF0pO1xyXG4gICAgICAgICB0aGlzLm5vcm1hbHNbMyAqIGkgKyAwXSA9IC10aGlzLm5vcm1hbHNbMyAqIGkgKyAwXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gcmVvcmRlciB0cmlhbmdsZXMgdG8gcHJlc2VydmUgZnJvbnQtYmFjayBmYWNpbmdcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bVRyaWFuZ2xlczsgaSsrKSB7XHJcbiAgICAgICAgIGxldCBpMSA9IHRoaXMuaW5kaWNlc1szICogaSArIDBdO1xyXG4gICAgICAgICBsZXQgaTIgPSB0aGlzLmluZGljZXNbMyAqIGkgKyAxXTtcclxuICAgICAgICAgdGhpcy5pbmRpY2VzWzMgKiBpICsgMF0gPSBpMjtcclxuICAgICAgICAgdGhpcy5pbmRpY2VzWzMgKiBpICsgMV0gPSBpMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcC5sb2coJ1JldmVyc2UgQ29tcGxldGUnKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGNvbWJpbmUodE9iajogVHJpYW5nbGVPYmopIHtcclxuXHJcbiAgICAgIC8vIHNhdmUgdGhlIHZhbHVlIGZvciB0aGUgZmlyc3QgaW5kZXggb2YgdGhlIGNvbWJpbmVkIG9iamVjdHNcclxuICAgICAgbGV0IHN0YXJ0SW5kZXggPSB0aGlzLm51bVZlcnRpY2VzO1xyXG5cclxuICAgICAgLy8gYWRkIHRoZSBvdGhlciB2ZXJ0aWNlcyBhbmQgbm9ybWFscyB0byBvdXJzXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdE9iai52ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICB0aGlzLnZlcnRpY2VzLnB1c2godE9iai52ZXJ0aWNlc1tpXSk7XHJcbiAgICAgICAgIHRoaXMubm9ybWFscy5wdXNoKHRPYmoubm9ybWFsc1tpXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGFkZCB0aGUgb3RoZXIgaW5kaWNlcywgYnV0IG9mZnNldCB0aGVtIHByb3Blcmx5XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdE9iai5pbmRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgIHRoaXMuaW5kaWNlcy5wdXNoKHN0YXJ0SW5kZXggKyB0T2JqLmluZGljZXNbaV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBtZXJnZSB0aGUgYm91bmRpbmcgYm94ZXNcclxuICAgICAgdGhpcy5ib3gubWVyZ2UodE9iai5ib3gpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgdG9EYXRhKCk6IFRyaWFuZ2xlT2JqRGF0YSB7XHJcblxyXG4gICAgICBsZXQgZGF0YSA9IG5ldyBUcmlhbmdsZU9iakRhdGE7XHJcbiAgICAgIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgZGF0YS52ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy52ZXJ0aWNlcyk7XHJcbiAgICAgIGRhdGEubm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5ub3JtYWxzKTtcclxuICAgICAgZGF0YS5pbmRpY2VzID0gbmV3IEludDMyQXJyYXkodGhpcy5pbmRpY2VzKTtcclxuICAgICAgZGF0YS5ib3hNaW4gPSB0aGlzLmJveC5taW4uY2xvbmUoKTtcclxuICAgICAgZGF0YS5ib3hNYXggPSB0aGlzLmJveC5tYXguY2xvbmUoKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgZnJvbURhdGEoZGF0YTogVHJpYW5nbGVPYmpEYXRhKTogVHJpYW5nbGVPYmoge1xyXG5cclxuICAgICAgbGV0IHRPYmogPSBuZXcgVHJpYW5nbGVPYmooKTtcclxuICAgICAgdE9iai5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICB0T2JqLnZlcnRpY2VzID0gQXJyYXkuZnJvbShkYXRhLnZlcnRpY2VzKTtcclxuICAgICAgdE9iai5ub3JtYWxzID0gQXJyYXkuZnJvbShkYXRhLm5vcm1hbHMpO1xyXG4gICAgICB0T2JqLmluZGljZXMgPSBBcnJheS5mcm9tKGRhdGEuaW5kaWNlcyk7XHJcbiAgICAgIHRPYmouYm94ID0gbmV3IEJvdW5kaW5nQm94KG5ldyBWZWMzKGRhdGEuYm94TWluLnZhbHVlcyksIG5ldyBWZWMzKGRhdGEuYm94TWF4LnZhbHVlcykpO1xyXG4gICAgICByZXR1cm4gdE9iajtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHRvQmxvYigpOiBCbG9iIHtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBhIGRlc2NyaXB0aW9uXHJcbiAgICAgIGxldCBpbmZvID0ge1xyXG4gICAgICAgICBGaWxlVHlwZTogJ0JpbmFyeSBPQkonLFxyXG4gICAgICAgICBWZXJzaW9uOiAnMS4wJyxcclxuICAgICAgICAgTmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICBTb3VyY2U6IHRoaXMuc291cmNlLFxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBnZXQgdGhlIHJhdyBkYXRhXHJcbiAgICAgIGxldCBkYXRhID0gdGhpcy50b0RhdGEoKTtcclxuXHJcbiAgICAgIC8vIGJyZWFrIGl0IGludG8gcGFydHNcclxuICAgICAgbGV0IHBhcnRzOiBCbG9iUGFydFtdID0gW107XHJcbiAgICAgIHBhcnRzLnB1c2goZGF0YS52ZXJ0aWNlcyk7XHJcbiAgICAgIHBhcnRzLnB1c2goZGF0YS5ub3JtYWxzKTtcclxuICAgICAgcGFydHMucHVzaChkYXRhLmluZGljZXMpO1xyXG4gICAgICBwYXJ0cy5wdXNoKG5ldyBGbG9hdDMyQXJyYXkoZGF0YS5ib3hNaW4udmFsdWVzKSk7XHJcbiAgICAgIHBhcnRzLnB1c2gobmV3IEZsb2F0MzJBcnJheShkYXRhLmJveE1heC52YWx1ZXMpKTtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSB0aGUgQmxvYlxyXG4gICAgICByZXR1cm4gQmxvYkZpbGUuY3JlYXRlQmxvYihpbmZvLCBwYXJ0cyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZnJvbUJsb2IoYmxvYjogQmxvYik6IFByb21pc2U8VHJpYW5nbGVPYmo+IHtcclxuXHJcbiAgICAgIGxldCBkYXRhID0gYXdhaXQgVHJpYW5nbGVPYmouYmxvYlRvRGF0YShibG9iKTtcclxuICAgICAgcmV0dXJuIFRyaWFuZ2xlT2JqLmZyb21EYXRhKGRhdGEpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgc3RhdGljIGFzeW5jIGJsb2JUb0RhdGEoYmxvYjogQmxvYik6IFByb21pc2U8VHJpYW5nbGVPYmpEYXRhPiB7XHJcblxyXG4gICAgICBsZXQgZGF0YSA9IG5ldyBUcmlhbmdsZU9iakRhdGEoKTtcclxuICAgICAgbGV0IGJGaWxlID0gYXdhaXQgQmxvYkZpbGUuZXh0cmFjdChibG9iKTtcclxuXHJcbiAgICAgIGRhdGEubmFtZSA9IGJGaWxlLmluZm8uTmFtZTtcclxuICAgICAgZGF0YS5zb3VyY2UgPSBiRmlsZS5pbmZvLlNvdXJjZTtcclxuICAgICAgZGF0YS52ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoYXdhaXQgYkZpbGUucGFydHNbMF0uYXJyYXlCdWZmZXIoKSk7XHJcbiAgICAgIGRhdGEubm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoYXdhaXQgYkZpbGUucGFydHNbMV0uYXJyYXlCdWZmZXIoKSk7XHJcbiAgICAgIGRhdGEuaW5kaWNlcyA9IG5ldyBJbnQzMkFycmF5KGF3YWl0IGJGaWxlLnBhcnRzWzJdLmFycmF5QnVmZmVyKCkpO1xyXG4gICAgICBkYXRhLmJveE1pbiA9IG5ldyBWZWMzKEFycmF5LmZyb20obmV3IEZsb2F0MzJBcnJheShhd2FpdCBiRmlsZS5wYXJ0c1szXS5hcnJheUJ1ZmZlcigpKSkpO1xyXG4gICAgICBkYXRhLmJveE1heCA9IG5ldyBWZWMzKEFycmF5LmZyb20obmV3IEZsb2F0MzJBcnJheShhd2FpdCBiRmlsZS5wYXJ0c1s0XS5hcnJheUJ1ZmZlcigpKSkpO1xyXG5cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNvbXB1dGUgbm9ybWFscyBmb3IgdmVydGljZXMgdGhhdCBqb2luIG11bHRpcGxlIGZhY2VzXHJcbiAqL1xyXG5jbGFzcyBNdWx0aU5vcm1WZXJ0ZXgge1xyXG4gICBwcml2YXRlIG5vcm1hbHM6IFZlYzNbXSA9IFtdO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIFN0b3JlcyBhIG5vcm1hbCBmb3IgdGhpcyB2ZXJ0ZXhcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBub3JtYWwgU3RvcmVzIGEgbm9ybWFsIGZvciB0aGUgdmVydGV4XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgcHVzaChub3JtYWw6IFZlYzMpIHtcclxuICAgICAgdGhpcy5ub3JtYWxzLnB1c2gobm9ybWFsKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbXB1dGVzIHRoZSBub3JtYWwgYnkgYXZlcmFnaW5nIGFsbCB0aGUgaW5kaXZpZHVhbCBub3JtYWxzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdmVydGV4XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IG5vcm1hbCgpOiBWZWMzIHtcclxuICAgICAgbGV0IG4gPSBuZXcgVmVjMygpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubm9ybWFscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICBuLnggKz0gdGhpcy5ub3JtYWxzW2ldLng7XHJcbiAgICAgICAgIG4ueSArPSB0aGlzLm5vcm1hbHNbaV0ueTtcclxuICAgICAgICAgbi56ICs9IHRoaXMubm9ybWFsc1tpXS56O1xyXG4gICAgICB9XHJcbiAgICAgIG4ueCAvPSB0aGlzLm5vcm1hbHMubGVuZ3RoO1xyXG4gICAgICBuLnkgLz0gdGhpcy5ub3JtYWxzLmxlbmd0aDtcclxuICAgICAgbi56IC89IHRoaXMubm9ybWFscy5sZW5ndGg7XHJcblxyXG4gICAgICByZXR1cm4gbjtcclxuICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBUcmlhbmdsZU9iaiB9IGZyb20gXCIuL1RyaWFuZ2xlT2JqXCI7XHJcbmltcG9ydCB7IFZlYzMgfSBmcm9tIFwiLi9WZWNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmlhbmdsZU9iakJ1aWxkZXIgZXh0ZW5kcyBUcmlhbmdsZU9iaiB7XHJcbiAgIGNvbnN0cnVjdG9yKG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgc3VwZXIobmFtZSk7XHJcbiAgIH1cclxuXHJcbiAgIC8vIFRPRE8gcGFzcyBpbiBhcmdzIGZvciBjb25zdHJ1Y3Rpb25cclxuICAgcHVibGljIGFkZEFycm93KCkge1xyXG4gICAgICBjb25zdCBOVU1fU1RFUFMgPSAzMDtcclxuICAgICAgY29uc3QgVE9UQUxfTEVOR1RIID0gMC40O1xyXG4gICAgICBjb25zdCBBUlJPV19SQURJVVMgPSAwLjE1O1xyXG4gICAgICBjb25zdCBBUlJPV19MRU5HVEggPSAxLjUgKiBBUlJPV19SQURJVVM7XHJcbiAgICAgIGNvbnN0IFNIQUZUX1JBRElVUyA9IDAuNSAqIEFSUk9XX1JBRElVUztcclxuICAgICAgY29uc3QgVElQID0gbmV3IFZlYzMoWzAsIDAsIDBdKTtcclxuICAgICAgY29uc3QgVElQX0JBU0UgPSBuZXcgVmVjMyhbMCwgQVJST1dfTEVOR1RILCAwXSk7XHJcblxyXG4gICAgICAvLyBidWlsZCB0aGUgYXJyb3cgaGVhZFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE5VTV9TVEVQUzsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB4MSA9IEFSUk9XX1JBRElVUyAqIE1hdGguc2luKGkgLyAoTlVNX1NURVBTIC0gMSkgKiAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgIGxldCB5MSA9IEFSUk9XX0xFTkdUSDtcclxuICAgICAgICAgbGV0IHoxID0gQVJST1dfUkFESVVTICogTWF0aC5jb3MoaSAvIChOVU1fU1RFUFMgLSAxKSAqIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgbGV0IHgyID0gQVJST1dfUkFESVVTICogTWF0aC5zaW4oKGkgKyAxKSAvIChOVU1fU1RFUFMgLSAxKSAqIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgbGV0IHkyID0gQVJST1dfTEVOR1RIO1xyXG4gICAgICAgICBsZXQgejIgPSBBUlJPV19SQURJVVMgKiBNYXRoLmNvcygoaSArIDEpIC8gKE5VTV9TVEVQUyAtIDEpICogMiAqIE1hdGguUEkpO1xyXG5cclxuICAgICAgICAgbGV0IHAxID0gbmV3IFZlYzMoW3gxLCB5MSwgejFdKTtcclxuICAgICAgICAgbGV0IHAyID0gbmV3IFZlYzMoW3gyLCB5MiwgejJdKTtcclxuICAgICAgICAgdGhpcy5wdXNoVHJpYW5nbGUoVElQLCBwMiwgcDEpO1xyXG4gICAgICAgICB0aGlzLnB1c2hUcmlhbmdsZShUSVBfQkFTRSwgcDEsIHAyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYnVpbGQgdGhlIGFycm93IHNoYWZ0XHJcbiAgICAgIGNvbnN0IEVORCA9IG5ldyBWZWMzKFswLCBUT1RBTF9MRU5HVEgsIDBdKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOVU1fU1RFUFM7IGkrKykge1xyXG4gICAgICAgICBsZXQgeDEgPSBTSEFGVF9SQURJVVMgKiBNYXRoLnNpbihpIC8gKE5VTV9TVEVQUyAtIDEpICogMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICBsZXQgejEgPSBTSEFGVF9SQURJVVMgKiBNYXRoLmNvcyhpIC8gKE5VTV9TVEVQUyAtIDEpICogMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICBsZXQgeDIgPSBTSEFGVF9SQURJVVMgKiBNYXRoLnNpbigoaSArIDEpIC8gKE5VTV9TVEVQUyAtIDEpICogMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICBsZXQgejIgPSBTSEFGVF9SQURJVVMgKiBNYXRoLmNvcygoaSArIDEpIC8gKE5VTV9TVEVQUyAtIDEpICogMiAqIE1hdGguUEkpO1xyXG5cclxuICAgICAgICAgbGV0IHAxID0gbmV3IFZlYzMoW3gxLCBBUlJPV19MRU5HVEgsIHoxXSk7XHJcbiAgICAgICAgIGxldCBwMiA9IG5ldyBWZWMzKFt4MiwgQVJST1dfTEVOR1RILCB6Ml0pO1xyXG4gICAgICAgICBsZXQgcDMgPSBuZXcgVmVjMyhbeDEsIFRPVEFMX0xFTkdUSCwgejFdKTtcclxuICAgICAgICAgbGV0IHA0ID0gbmV3IFZlYzMoW3gyLCBUT1RBTF9MRU5HVEgsIHoyXSk7XHJcbiAgICAgICAgIHRoaXMucHVzaFRyaWFuZ2xlKHAxLCBwMiwgcDQpO1xyXG4gICAgICAgICB0aGlzLnB1c2hUcmlhbmdsZShwMSwgcDQsIHAzKTtcclxuICAgICAgICAgdGhpcy5wdXNoVHJpYW5nbGUoRU5ELCBwMywgcDQpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBhZGRTcGhlcmUobnVtU3RlcHM6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIGNlbnRlcjogVmVjMykge1xyXG5cclxuICAgICAgLy8gY3JlYXRlIGFuIGFycmF5IG9mIHZlcnRpY2VzXHJcbiAgICAgIGxldCB2ZXJ0aWNlczogVmVjM1tdID0gW107XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU3RlcHM7IGkrKykge1xyXG4gICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKG5ldyBWZWMzKFtjZW50ZXIueCwgY2VudGVyLnkgKyByYWRpdXMsIGNlbnRlci56XSkpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKGkgPT09IG51bVN0ZXBzIC0gMSkge1xyXG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKG5ldyBWZWMzKFtjZW50ZXIueCwgY2VudGVyLnkgLSByYWRpdXMsIGNlbnRlci56XSkpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgeSA9IHJhZGl1cyAqIE1hdGguY29zKGkgLyAobnVtU3RlcHMgLSAxKSAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBsZXQgciA9IHJhZGl1cyAqIE1hdGguc2luKGkgLyAobnVtU3RlcHMgLSAxKSAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gaSAlIDIgPyAwIDogKCgyICogTWF0aC5QSSkgLyBudW1TdGVwcykgKiAwLjU7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bVN0ZXBzOyBqKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2gobmV3IFZlYzMoW1xyXG4gICAgICAgICAgICAgICAgICBjZW50ZXIueCArIHIgKiBNYXRoLnNpbigoaiAvIG51bVN0ZXBzKSAqIDIgKiBNYXRoLlBJIC0gb2Zmc2V0KSxcclxuICAgICAgICAgICAgICAgICAgY2VudGVyLnkgKyB5LFxyXG4gICAgICAgICAgICAgICAgICBjZW50ZXIueiArIHIgKiBNYXRoLmNvcygoaiAvIG51bVN0ZXBzKSAqIDIgKiBNYXRoLlBJIC0gb2Zmc2V0KSxcclxuICAgICAgICAgICAgICAgXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY29ubmVjdCB0aGUgdmVydGljZXNcclxuICAgICAgbGV0IGZpcnN0ID0gMDtcclxuICAgICAgbGV0IGxhc3QgPSB2ZXJ0aWNlcy5sZW5ndGggLSAxO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVN0ZXBzIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtU3RlcHM7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICBsZXQgaTEgPSBmaXJzdDtcclxuICAgICAgICAgICAgICAgbGV0IGkyID0gaiArIDE7XHJcbiAgICAgICAgICAgICAgIGxldCBpMyA9IGogPT09IChudW1TdGVwcyAtIDEpID8gMSA6IGkyICsgMTtcclxuICAgICAgICAgICAgICAgdGhpcy5wdXNoVHJpYW5nbGUodmVydGljZXNbaTFdLCB2ZXJ0aWNlc1tpMl0sIHZlcnRpY2VzW2kzXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gbnVtU3RlcHMgLSAyKSB7XHJcbiAgICAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gbGFzdCAtIG51bVN0ZXBzO1xyXG4gICAgICAgICAgICAgICBsZXQgaTEgPSBsYXN0O1xyXG4gICAgICAgICAgICAgICBsZXQgaTIgPSBzdGFydEluZGV4ICsgajtcclxuICAgICAgICAgICAgICAgbGV0IGkzID0gaiA9PT0gKG51bVN0ZXBzIC0gMSkgPyBzdGFydEluZGV4IDogaTIgKyAxO1xyXG4gICAgICAgICAgICAgICB0aGlzLnB1c2hUcmlhbmdsZSh2ZXJ0aWNlc1tpMV0sIHZlcnRpY2VzW2kzXSwgdmVydGljZXNbaTJdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgbGV0IHN0YXJ0QSA9IDEgKyAoaSAtIDEpICogbnVtU3RlcHM7XHJcbiAgICAgICAgICAgICAgIGxldCBzdGFydEIgPSAxICsgaSAqIG51bVN0ZXBzO1xyXG4gICAgICAgICAgICAgICBsZXQgaTEgPSBzdGFydEEgKyBqO1xyXG4gICAgICAgICAgICAgICBsZXQgaTIgPSAoaiA9PT0gKG51bVN0ZXBzIC0gMSkpID8gc3RhcnRBIDogaTEgKyAxO1xyXG4gICAgICAgICAgICAgICBsZXQgaTMgPSBzdGFydEIgKyBqO1xyXG4gICAgICAgICAgICAgICBsZXQgaTQgPSAoaiA9PT0gKG51bVN0ZXBzIC0gMSkpID8gc3RhcnRCIDogaTMgKyAxO1xyXG4gICAgICAgICAgICAgICBpZiAoaSAlIDIpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoVHJpYW5nbGUodmVydGljZXNbaTFdLCB2ZXJ0aWNlc1tpNF0sIHZlcnRpY2VzW2kyXSk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucHVzaFRyaWFuZ2xlKHZlcnRpY2VzW2kxXSwgdmVydGljZXNbaTNdLCB2ZXJ0aWNlc1tpNF0pO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnB1c2hUcmlhbmdsZSh2ZXJ0aWNlc1tpMV0sIHZlcnRpY2VzW2kzXSwgdmVydGljZXNbaTJdKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoVHJpYW5nbGUodmVydGljZXNbaTJdLCB2ZXJ0aWNlc1tpM10sIHZlcnRpY2VzW2k0XSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgYWRkQ3ViZShzaXplOiBudW1iZXIsIGNlbnRlcjogVmVjMykge1xyXG5cclxuICAgICAgbGV0IHYxID0gbmV3IFZlYzMoW2NlbnRlci54IC0gc2l6ZSAvIDIsIGNlbnRlci55IC0gc2l6ZSAvIDIsIGNlbnRlci56IC0gc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHYyID0gbmV3IFZlYzMoW2NlbnRlci54IC0gc2l6ZSAvIDIsIGNlbnRlci55IC0gc2l6ZSAvIDIsIGNlbnRlci56ICsgc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHYzID0gbmV3IFZlYzMoW2NlbnRlci54IC0gc2l6ZSAvIDIsIGNlbnRlci55ICsgc2l6ZSAvIDIsIGNlbnRlci56IC0gc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHY0ID0gbmV3IFZlYzMoW2NlbnRlci54IC0gc2l6ZSAvIDIsIGNlbnRlci55ICsgc2l6ZSAvIDIsIGNlbnRlci56ICsgc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHY1ID0gbmV3IFZlYzMoW2NlbnRlci54ICsgc2l6ZSAvIDIsIGNlbnRlci55IC0gc2l6ZSAvIDIsIGNlbnRlci56IC0gc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHY2ID0gbmV3IFZlYzMoW2NlbnRlci54ICsgc2l6ZSAvIDIsIGNlbnRlci55IC0gc2l6ZSAvIDIsIGNlbnRlci56ICsgc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHY3ID0gbmV3IFZlYzMoW2NlbnRlci54ICsgc2l6ZSAvIDIsIGNlbnRlci55ICsgc2l6ZSAvIDIsIGNlbnRlci56IC0gc2l6ZSAvIDJdKTtcclxuICAgICAgbGV0IHY4ID0gbmV3IFZlYzMoW2NlbnRlci54ICsgc2l6ZSAvIDIsIGNlbnRlci55ICsgc2l6ZSAvIDIsIGNlbnRlci56ICsgc2l6ZSAvIDJdKTtcclxuXHJcbiAgICAgIHRoaXMucHVzaFF1YWQodjEsIHYyLCB2MywgdjQpO1xyXG4gICAgICB0aGlzLnB1c2hRdWFkKHY1LCB2NywgdjYsIHY4KTtcclxuXHJcbiAgICAgIHRoaXMucHVzaFF1YWQodjEsIHY1LCB2MiwgdjYpO1xyXG4gICAgICB0aGlzLnB1c2hRdWFkKHYzLCB2NCwgdjcsIHY4KTtcclxuXHJcbiAgICAgIHRoaXMucHVzaFF1YWQodjEsIHYzLCB2NSwgdjcpO1xyXG4gICAgICB0aGlzLnB1c2hRdWFkKHYyLCB2NiwgdjQsIHY4KTtcclxuICAgfVxyXG5cclxuICAgYWRkRGlzayhudW1TdGVwczogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgY2VudGVyOiBWZWMzKSB7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBudW1TdGVwczsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB4MSA9IGNlbnRlci54ICsgcmFkaXVzICogTWF0aC5zaW4oKGkgLyBudW1TdGVwcykgKiAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgIGxldCB5MSA9IGNlbnRlci55O1xyXG4gICAgICAgICBsZXQgejEgPSBjZW50ZXIueiArIHJhZGl1cyAqIE1hdGguY29zKChpIC8gbnVtU3RlcHMpICogMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICBsZXQgeDIgPSBjZW50ZXIueCArIHJhZGl1cyAqIE1hdGguc2luKCgoaSArIDEpIC8gbnVtU3RlcHMpICogMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICBsZXQgeTIgPSBjZW50ZXIueTtcclxuICAgICAgICAgbGV0IHoyID0gY2VudGVyLnogKyByYWRpdXMgKiBNYXRoLmNvcygoKGkgKyAxKSAvIG51bVN0ZXBzKSAqIDIgKiBNYXRoLlBJKTtcclxuXHJcbiAgICAgICAgIGxldCBwMSA9IG5ldyBWZWMzKFt4MSwgeTEsIHoxXSk7XHJcbiAgICAgICAgIGxldCBwMiA9IG5ldyBWZWMzKFt4MiwgeTIsIHoyXSk7XHJcbiAgICAgICAgIHRoaXMucHVzaFRyaWFuZ2xlKGNlbnRlciwgcDEsIHAyKTtcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBUcmlhbmdsZU9iaiwgTm9ybWFsVHlwZSB9IGZyb20gXCIuL1RyaWFuZ2xlT2JqXCI7XHJcbmltcG9ydCB7IFN0YXR1c0Z1bmN0aW9uIH0gZnJvbSBcIi4uL1V0aWwvR2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBQcm9maWxlciB9IGZyb20gXCIuLi9VdGlsL1Byb2ZpbGVyXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCBsb2FkcyBhIC5vYmogZmlsZSBhbmQgY3JlYXRlcyB0cmlhbmdsZXMgZm9yIGl0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVHJpYW5nbGVPYmpGaWxlIGV4dGVuZHMgVHJpYW5nbGVPYmoge1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc3JjOiBzdHJpbmcsIHVwZGF0ZVN0YXR1cz86IFN0YXR1c0Z1bmN0aW9uKSB7XHJcblxyXG4gICAgICBzdXBlcihuYW1lKTtcclxuXHJcbiAgICAgIC8vIHJlY29yZCB0aGUgc3RhdHVzIGZ1bmN0aW9uLiBJZiBvbmUgaXMgbm90IHN1cHBsaWVkLCBjcmVhdGUgb25lIHRoYXQgZG9lcyBub3RoaW5nXHJcbiAgICAgIGlmICghdXBkYXRlU3RhdHVzKSB7XHJcbiAgICAgICAgIHVwZGF0ZVN0YXR1cyA9IChzdGF0dXMpID0+IHsgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5wYXJzZShzcmMsIHVwZGF0ZVN0YXR1cyk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgcGFyc2VGYWNlKGxpbmU6IHN0cmluZyk6IHsgaVY6IG51bWJlcltdLCBpTjogbnVtYmVyW10gfSB7XHJcbiAgICAgIGxldCByZXQgPSB7XHJcbiAgICAgICAgIGlWOiBbXSBhcyBudW1iZXJbXSxcclxuICAgICAgICAgaU46IFtdIGFzIG51bWJlcltdLFxyXG4gICAgICB9XHJcbiAgICAgIGxldCB0b2tlbnMgPSBsaW5lLm1hdGNoKC9cXFMrL2cpO1xyXG4gICAgICBsZXQgbnVtVmFscyA9IHRva2Vucy5sZW5ndGggLSAxO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHM7IGkrKykge1xyXG4gICAgICAgICBsZXQgdmFscyA9IHRva2Vuc1tpICsgMV0uc3BsaXQoJy8nKTtcclxuICAgICAgICAgcmV0LmlWLnB1c2gocGFyc2VJbnQodmFsc1swXSkgLSAxKTtcclxuICAgICAgICAgaWYgKHZhbHMubGVuZ3RoID09PSAzKSB7XHJcbiAgICAgICAgICAgIHJldC5pTi5wdXNoKHBhcnNlSW50KHZhbHNbMl0pIC0gMSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIHBhcnNlKHNyYzogc3RyaW5nLCB1cGRhdGVTdGF0dXM6IFN0YXR1c0Z1bmN0aW9uKSB7XHJcblxyXG4gICAgICB1cGRhdGVTdGF0dXMoJ1Byb2Nlc3NpbmcnKTtcclxuICAgICAgbGV0IHQgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgbGV0IHAyID0gbmV3IFByb2ZpbGVyKCk7XHJcbiAgICAgIGxldCBwID0gbmV3IFByb2ZpbGVyKCk7XHJcbiAgICAgIGxldCBsaW5lcyA9IHNyYy5zcGxpdCgnXFxuJyk7XHJcbiAgICAgIHAubG9nKCdzcGxpdCcpO1xyXG5cclxuICAgICAgbGV0IHZlcnRpY2VzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICBsZXQgbm9ybWFsczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgbGV0IHZJbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICBsZXQgbkluZGljZXM6IG51bWJlcltdID0gW107XHJcbiAgICAgIGxldCBtYXRjaCA9IHRydWU7XHJcbiAgICAgIGxldCBjb250YWluc05vcm1hbHMgPSB0cnVlO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAvLyByZXBvcnQgcHJvZ3Jlc3MgZXZlcnkgNTAgbXNcclxuICAgICAgICAgaWYgKERhdGUubm93KCkgLSB0ID4gNTApIHtcclxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKCdQcm9jZXNzaW5nOiAnICsgKDEwMCAqIGkgLyBsaW5lcy5sZW5ndGgpLnRvRml4ZWQoKSArICclJyk7XHJcbiAgICAgICAgICAgIHQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGxldCBsaW5lID0gbGluZXNbaV07XHJcbiAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ3YgJykpIHtcclxuICAgICAgICAgICAgbGV0IHRva2VucyA9IGxpbmUubWF0Y2goL1xcUysvZyk7XHJcbiAgICAgICAgICAgIHZlcnRpY2VzLnB1c2gocGFyc2VGbG9hdCh0b2tlbnNbMV0pKTtcclxuICAgICAgICAgICAgdmVydGljZXMucHVzaChwYXJzZUZsb2F0KHRva2Vuc1syXSkpO1xyXG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKHBhcnNlRmxvYXQodG9rZW5zWzNdKSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKCd2biAnKSkge1xyXG4gICAgICAgICAgICBsZXQgdG9rZW5zID0gbGluZS5tYXRjaCgvXFxTKy9nKTtcclxuICAgICAgICAgICAgbm9ybWFscy5wdXNoKHBhcnNlRmxvYXQodG9rZW5zWzFdKSk7XHJcbiAgICAgICAgICAgIG5vcm1hbHMucHVzaChwYXJzZUZsb2F0KHRva2Vuc1syXSkpO1xyXG4gICAgICAgICAgICBub3JtYWxzLnB1c2gocGFyc2VGbG9hdCh0b2tlbnNbM10pKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ2YgJykpIHtcclxuICAgICAgICAgICAgbGV0IHJldCA9IHRoaXMucGFyc2VGYWNlKGxpbmUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5zTm9ybWFscykge1xyXG4gICAgICAgICAgICAgICBpZiAocmV0LmlWLmxlbmd0aCAhPT0gcmV0LmlOLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICBjb250YWluc05vcm1hbHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdOb3JtYWxzIG5vdCBzcGVjaWZpZWQgaW4gZmlsZS4gRmxhdCBub3JtYWxzIHdpbGwgYmUgY29tcHV0ZWQuJyk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXQuaVYubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgaWYgKHJldC5pVltpXSAhPSByZXQuaU5baV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdWZXJ0aWNlcyBhbmQgbm9ybWFscyBkb25cXCd0IG1hdGNoLiBDb250ZW50IHdpbGwgYmUgcmUtaW5kZXhlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJldC5pVi5sZW5ndGggPT09IDQpIHtcclxuXHJcbiAgICAgICAgICAgICAgIHZJbmRpY2VzLnB1c2gocmV0LmlWWzBdLCByZXQuaVZbMV0sIHJldC5pVlsyXSk7XHJcbiAgICAgICAgICAgICAgIHZJbmRpY2VzLnB1c2gocmV0LmlWWzBdLCByZXQuaVZbMl0sIHJldC5pVlszXSk7XHJcbiAgICAgICAgICAgICAgIGlmIChjb250YWluc05vcm1hbHMpIHtcclxuICAgICAgICAgICAgICAgICAgbkluZGljZXMucHVzaChyZXQuaU5bMF0sIHJldC5pTlsxXSwgcmV0LmlOWzJdKTtcclxuICAgICAgICAgICAgICAgICAgbkluZGljZXMucHVzaChyZXQuaU5bMF0sIHJldC5pTlsyXSwgcmV0LmlOWzNdKTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICB2SW5kaWNlcy5wdXNoKHJldC5pVlswXSwgcmV0LmlWWzFdLCByZXQuaVZbMl0pO1xyXG4gICAgICAgICAgICAgICBpZiAoY29udGFpbnNOb3JtYWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5JbmRpY2VzLnB1c2gocmV0LmlOWzBdLCByZXQuaU5bMV0sIHJldC5pTlsyXSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHAubG9nKCdwYXJzZScpO1xyXG5cclxuICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcclxuICAgICAgICAgdGhpcy5pbmRpY2VzID0gdkluZGljZXM7XHJcblxyXG4gICAgICAgICBpZiAoY29udGFpbnNOb3JtYWxzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9ybWFscyA9IG5vcm1hbHM7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICB0aGlzLm5vcm1hbHMgPSBbXTtcclxuICAgICAgICAgdGhpcy5pbmRpY2VzID0gW107XHJcblxyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZJbmRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMucHVzaCh2ZXJ0aWNlc1szICogdkluZGljZXNbaV0gKyAwXSk7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMucHVzaCh2ZXJ0aWNlc1szICogdkluZGljZXNbaV0gKyAxXSk7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMucHVzaCh2ZXJ0aWNlc1szICogdkluZGljZXNbaV0gKyAyXSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9ybWFscy5wdXNoKG5vcm1hbHNbMyAqIG5JbmRpY2VzW2ldICsgMF0pO1xyXG4gICAgICAgICAgICB0aGlzLm5vcm1hbHMucHVzaChub3JtYWxzWzMgKiBuSW5kaWNlc1tpXSArIDFdKTtcclxuICAgICAgICAgICAgdGhpcy5ub3JtYWxzLnB1c2gobm9ybWFsc1szICogbkluZGljZXNbaV0gKyAyXSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kaWNlcy5wdXNoKGkpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIHAubG9nKCdyZWluZGV4Jyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjb250YWluc05vcm1hbHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgIHRoaXMuY29tcHV0ZU5vcm1hbHMoTm9ybWFsVHlwZS5GbGF0KTtcclxuICAgICAgICAgcC5sb2coJ2NvbXB1dGUgbm9ybWFscycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmZpbmRCb3VuZHMoKTtcclxuICAgICAgcC5sb2coJ2ZpbmRCb3VuZHMnKTtcclxuICAgICAgcDIubG9nKCdUb3RhbCcpO1xyXG5cclxuICAgICAgdXBkYXRlU3RhdHVzKCdQcm9jZXNzaW5nOiAxMDAlJyk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnVmVydGljZXM6ICcgKyB0aGlzLnZlcnRpY2VzLmxlbmd0aCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdOb3JtYWxzOiAnICsgdGhpcy5ub3JtYWxzLmxlbmd0aCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdUcmlhbmdsZXM6ICcgKyB0aGlzLm51bVRyaWFuZ2xlcyk7XHJcbiAgIH1cclxufSIsImV4cG9ydCBpbnRlcmZhY2UgSVZlYzMge1xyXG4gICB4OiBudW1iZXI7XHJcbiAgIHk6IG51bWJlcjtcclxuICAgejogbnVtYmVyO1xyXG59XHJcbi8qKlxyXG4gKiBWZWN0b3IgY2xhc3MgZm9yIHVzZSB3aXRoIFdlYkdMIGFwcGxpY2F0aW9ucy5cclxuICovXHJcbmNsYXNzIFZlYyB7XHJcblxyXG4gICAvKiogVGhlIHZlY3RvciB2YWx1ZXMuICovXHJcbiAgIHB1YmxpYyB2YWx1ZXM6IG51bWJlcltdO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSB2YWx1ZXNPclNpemUgSWYgYSBhcnJheSwgdGhlIHZhbHVlcyBmb3IgdGhlIHZlY3Rvci4gSWYgYSBudW1iZXIsIHRoZSBzaXplIG9mIHRoZSB2ZWN0b3IuXHJcbiAgICAqL1xyXG4gICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodmFsdWVzT3JTaXplOiBudW1iZXIgfCBudW1iZXJbXSkge1xyXG4gICAgICBpZiAodmFsdWVzT3JTaXplIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgdGhpcy52YWx1ZXMgPSBbLi4udmFsdWVzT3JTaXplXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkodmFsdWVzT3JTaXplKTtcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXNPclNpemU7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1tpXSA9IDA7XHJcbiAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ29tcHV0ZXMgdGhlIG1hZ25pdHVkZSBvZiB0aGUgdmVjdG9yLlxyXG4gICAgKiBcclxuICAgICogQHJldHVybiBUaGUgdmVjdG9yIG1hZ25pdHVkZS5cclxuICAgICovXHJcbiAgIHB1YmxpYyBtYWduaXR1ZGUoKTogbnVtYmVyIHtcclxuICAgICAgbGV0IHN1bSA9IDA7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgc3VtICs9IHRoaXMudmFsdWVzW2ldICogdGhpcy52YWx1ZXNbaV07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIE1hdGguc3FydChzdW0pO1xyXG4gICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiB4LXkgdmVjdG9yLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlYzIgZXh0ZW5kcyBWZWMge1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSB2YWxzIElmIHN1cHBsaWVkLCB0aGUgaW5pdGlhbCB2YWx1ZXMgZm9yIHRoZSB2ZWN0b3JcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2YWxzPzogbnVtYmVyW10pIHtcclxuICAgICAgaWYgKHZhbHMpIHtcclxuICAgICAgICAgc3VwZXIodmFscyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHN1cGVyKDIpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgdmVjdG9yLlxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyBBIGNvcHkgb2YgdGhlIHZlY3Rvci5cclxuICAgICovXHJcbiAgIHB1YmxpYyBjbG9uZSgpOiBWZWMyIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMudmFsdWVzKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIFggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlc1swXTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFNldHMgdGhlIFggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2YWwgVGhlIHZhbHVlXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc2V0IHgodmFsOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy52YWx1ZXNbMF0gPSB2YWw7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBZIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXHJcbiAgICAqXHJcbiAgICAqIEByZXR1cm5zIFRoZSB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlc1sxXTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFNldHMgdGhlIFkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2YWwgVGhlIHZhbHVlXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc2V0IHkodmFsOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy52YWx1ZXNbMV0gPSB2YWw7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDb21wdXRlcyB0aGUgZGlzdGFuY2UgdG8gYW5vdGhlciBwb2ludFxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIG90aGVyIFRoZSBvdGhlciBwb2ludFxyXG4gICAgKiBAcmV0dXJucyBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGlzIHBvaW50IGFuZCB0aGUgb3RoZXIgcG9pbnRcclxuICAgICovXHJcbiAgIHB1YmxpYyBkaXN0YW5jZShvdGhlcjogVmVjMik6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy54IC0gb3RoZXIueCwgMikgKyBNYXRoLnBvdyh0aGlzLnkgLSBvdGhlci55LCAyKSk7XHJcbiAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIHgteS16IHZlY3Rvci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBWZWMzIGV4dGVuZHMgVmVjIGltcGxlbWVudHMgSVZlYzMge1xyXG5cclxuICAgcHVibGljIHN0YXRpYyBnZXQgb3JpZ2luKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoWzAsIDAsIDBdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSB2YWxzIElmIHN1cHBsaWVkLCB0aGUgaW5pdGlhbCB2YWx1ZXMgZm9yIHRoZSB2ZWN0b3JcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2YWxzPzogbnVtYmVyW10pIHtcclxuICAgICAgaWYgKHZhbHMpIHtcclxuICAgICAgICAgc3VwZXIodmFscyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHN1cGVyKDMpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBYIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMF07XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTZXRzIHRoZSBYIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIHNldCB4KHZhbDogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMudmFsdWVzWzBdID0gdmFsO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgWSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMV07XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTZXRzIHRoZSBZIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIHNldCB5KHZhbDogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMudmFsdWVzWzFdID0gdmFsO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgWiBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgeigpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMl07XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTZXRzIHRoZSBaIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIHNldCB6KHZhbDogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMudmFsdWVzWzJdID0gdmFsO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgeC15IGNvbXBvbmVudHMgYXMgYSAyZCB2ZWNcclxuICAgICpcclxuICAgICogQHJldHVybiB0aGUgVmVjM1xyXG4gICAgKi9cclxuICAgcHVibGljIGdldCB4eSgpOiBWZWMyIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMyKFt0aGlzLngsIHRoaXMueV0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZlY3Rvci5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIEEgY29weSBvZiB0aGUgdmVjdG9yLlxyXG4gICAgKi9cclxuICAgcHVibGljIGNsb25lKCk6IFZlYzMge1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzModGhpcy52YWx1ZXMpO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ3JlYXRlcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gZGlnaXRzIFRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gZGlzcGxheS4gVGhpcyB2YWx1ZSBpcyBwYXNzZWQgdG8gdG9GaXhlZCgpLlxyXG4gICAgKiBAcGFyYW0gZGl2aWRlciBUaGUgc3RyaW5nIHRvIHNlcGFyYXRlIGVhY2ggbnVtYmVyLlxyXG4gICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbi5cclxuICAgICovXHJcbiAgIHB1YmxpYyB0b1N0cmluZyhkaWdpdHM6IG51bWJlciA9IDIsIGRpdmlkZXIgPSAnLCcpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy54LnRvRml4ZWQoZGlnaXRzKSArIGRpdmlkZXIgKyB0aGlzLnkudG9GaXhlZChkaWdpdHMpICsgZGl2aWRlciArIHRoaXMuei50b0ZpeGVkKGRpZ2l0cyk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKiBcclxuICAgICogUmV0dXJucyBhIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGlzIHZlY3Rvci5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSByZXN1bHRpbmcgbm9ybWFsaXplZCB2ZWN0b3IuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgbm9ybWFsaXplKCk6IFZlYzMge1xyXG4gICAgICBsZXQgbWFnID0gdGhpcy5tYWduaXR1ZGUoKTtcclxuICAgICAgaWYgKG1hZyA9PT0gMCkge1xyXG4gICAgICAgICByZXR1cm4gbmV3IFZlYzMoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMubXVsdCgxIC8gbWFnKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogTXVsdGlwbGllcyBtZW1iZXJzIGJ5IGEgdmFsdWUgYW5kIHJldHVybnMgdGhlIG5ldyB2ZWN0b3JcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgbXVsdGlwbGljYXRpb24gdmFsdWUuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgbXVsdCh2YWx1ZTogbnVtYmVyKTogVmVjMyB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjMyhbXHJcbiAgICAgICAgIHRoaXMueCAqIHZhbHVlLFxyXG4gICAgICAgICB0aGlzLnkgKiB2YWx1ZSxcclxuICAgICAgICAgdGhpcy56ICogdmFsdWUsXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogUmV0dXJucyB0aGUgdmVjdG9yIHBvaW50aW5nIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBUaGUgbmVnYXRlZCB2ZWN0b3IuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgbmVnYXRlKCk6IFZlYzMge1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoWy10aGlzLngsIC10aGlzLnksIC10aGlzLnpdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFN1YnRyYWN0cyB2YWx1ZXMgZnJvbSB0aGlzIHZlY3Rvci5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2ZWMgVGhlIHZlY3RvciB0byBzdWJ0cmFjdC5cclxuICAgICogQHJldHVybnMgVGhlIGNvbXB1dGVkIHZlY3Rvci5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdWJ0cmFjdCh2ZWM6IFZlYzMpOiBWZWMzIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMzKFtcclxuICAgICAgICAgdGhpcy52YWx1ZXNbMF0gLSB2ZWMudmFsdWVzWzBdLFxyXG4gICAgICAgICB0aGlzLnZhbHVlc1sxXSAtIHZlYy52YWx1ZXNbMV0sXHJcbiAgICAgICAgIHRoaXMudmFsdWVzWzJdIC0gdmVjLnZhbHVlc1syXVxyXG4gICAgICBdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEFkZHMgdmFsdWVzIGZyb20gdGhpcyB2ZWN0b3IuXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdmVjIFRoZSB2ZWN0b3IgdG8gYWRkLlxyXG4gICAgKiBAcmV0dXJucyBUaGUgY29tcHV0ZWQgdmVjdG9yLlxyXG4gICAgKi9cclxuICAgcHVibGljIGFkZCh2ZWM6IFZlYzMpOiBWZWMzIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWMzKFtcclxuICAgICAgICAgdGhpcy52YWx1ZXNbMF0gKyB2ZWMudmFsdWVzWzBdLFxyXG4gICAgICAgICB0aGlzLnZhbHVlc1sxXSArIHZlYy52YWx1ZXNbMV0sXHJcbiAgICAgICAgIHRoaXMudmFsdWVzWzJdICsgdmVjLnZhbHVlc1syXVxyXG4gICAgICBdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHRoaXMgdmVjdG9yIGFuZCBhbm90aGVyIHZlY3Rvci5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBvdGhlciBUaGUgb3RoZXIgdmVjdG9yLlxyXG4gICAgKi9cclxuICAgcHVibGljIGNyb3NzKG90aGVyOiBWZWMzKTogVmVjMyB7XHJcbiAgICAgIGxldCBBID0gdGhpcy52YWx1ZXM7XHJcbiAgICAgIGxldCBCID0gb3RoZXIudmFsdWVzO1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoW1xyXG4gICAgICAgICBBWzFdICogQlsyXSAtIEFbMl0gKiBCWzFdLFxyXG4gICAgICAgICBBWzJdICogQlswXSAtIEFbMF0gKiBCWzJdLFxyXG4gICAgICAgICBBWzBdICogQlsxXSAtIEFbMV0gKiBCWzBdXHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ29tcHV0ZXMgdGhlIGRpc3RhbmNlIGZyb20gdGhpcyBwb2ludCB0byBhIHNwZWNpZmllZCBwb2ludC5cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBwdCBUaGUgcG9pbnQuXHJcbiAgICAqIEByZXR1cm5zIFRoZSBkaXN0YW5jZSB0byB0aGUgcG9pbnQuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZGlzdFRvUG9pbnQocHQ6IFZlYzMpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJ0cmFjdChwdCkubWFnbml0dWRlKCk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBCdWlsZHMgYSBWZWM0IGZyb20gdGhpcyBWZWMzXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gdyBUaGUgdyBjb21wb25lbnQgb2YgdGhlIG5ldyB2ZWN0b3IuXHJcbiAgICAqIEByZXR1cm5zIFRoZSBuZXcgdmVjdG9yLlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvVmVjNCh3OiBudW1iZXIpOiBWZWM0IHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWM0KFt0aGlzLngsIHRoaXMueSwgdGhpcy56LCB3XSk7XHJcbiAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIHgteS16LXcgdmVjdG9yLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlYzQgZXh0ZW5kcyBWZWMge1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSB2YWxzIElmIHN1cHBsaWVkLCB0aGUgaW5pdGlhbCB2YWx1ZXMgZm9yIHRoZSB2ZWN0b3IuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3IodmFscz86IG51bWJlcltdKSB7XHJcbiAgICAgIGlmICh2YWxzKSB7XHJcbiAgICAgICAgIHN1cGVyKHZhbHMpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICBzdXBlcig0KTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgWCBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBcclxuICAgICogQHJldHVybnMgVGhlIHZhbHVlXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IHgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzBdO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyB0aGUgWCBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHZhbCBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBzZXQgeCh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1swXSA9IHZhbDtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIFkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcclxuICAgICpcclxuICAgICogQHJldHVybnMgVGhlIHZhbHVlXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IHkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzFdO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyB0aGUgWSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHZhbCBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBzZXQgeSh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1sxXSA9IHZhbDtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIFogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcclxuICAgICpcclxuICAgICogQHJldHVybnMgVGhlIHZhbHVlXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IHooKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzJdO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyB0aGUgWiBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHZhbCBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBzZXQgeih2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1syXSA9IHZhbDtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIFogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcclxuICAgICpcclxuICAgICogQHJldHVybnMgVGhlIHZhbHVlXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IHcoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzNdO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyB0aGUgWiBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHZhbCBUaGUgdmFsdWVcclxuICAgICovXHJcbiAgIHB1YmxpYyBzZXQgdyh2YWw6IG51bWJlcikge1xyXG4gICAgICB0aGlzLnZhbHVlc1szXSA9IHZhbDtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIHgteS16IGNvbXBvbmVudHMgYXMgYSAzZCB2ZWNcclxuICAgICogXHJcbiAgICAqIEByZXR1cm4gdGhlIFZlYzNcclxuICAgICovXHJcbiAgIHB1YmxpYyBnZXQgeHl6KCk6IFZlYzMge1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoW3RoaXMueCwgdGhpcy55LCB0aGlzLnpdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2ZWN0b3IuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBBIGNvcHkgb2YgdGhlIHZlY3Rvci5cclxuICAgICovXHJcbiAgIHB1YmxpYyBjbG9uZSgpOiBWZWM0IHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWM0KHRoaXMudmFsdWVzKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFJldHVybnMgYW4geC15LXogdmVjdG9yIHdoZXJlIGVhY2ggZWxlbWVudCBpcyBjb21wdXRlZCBieSBkaXZpZGluZyB0aGlzIHZlY3RvcnNcclxuICAgICogZWxlbWVudHMgYnkgdGhlIHcgdmFsdWUuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBBbiB4LXkteiB2ZWN0b3IuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZGl2aWRlQnlXKCk6IFZlYzMge1xyXG4gICAgICBsZXQgdyA9IHRoaXMudmFsdWVzWzNdO1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzMoW1xyXG4gICAgICAgICB0aGlzLnZhbHVlc1swXSAvIHcsXHJcbiAgICAgICAgIHRoaXMudmFsdWVzWzFdIC8gdyxcclxuICAgICAgICAgdGhpcy52YWx1ZXNbMl0gLyB3XHJcbiAgICAgIF0pO1xyXG4gICB9XHJcblxyXG4gICAvKiogXHJcbiAgICAqIE5vcm1hbGl6ZXMgdGhpcyB2ZWN0b3IsIGFuZCBzdG9yZXMgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIFRoZSByZXN1bHRpbmcgbm9ybWFsaXplZCB2ZWN0b3IuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgbm9ybWFsaXplKCk6IFZlYzQge1xyXG4gICAgICBsZXQgbWFnID0gdGhpcy5tYWduaXR1ZGUoKTtcclxuICAgICAgbGV0IHJldCA9IHRoaXMuY2xvbmUoKTtcclxuICAgICAgaWYgKG1hZyAhPT0gMCkge1xyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldC52YWx1ZXNbaV0gLz0gbWFnO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgVmVjNCBmcm9tIGEgVmVjMyBvYmplY3RcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2ZWMgVGhlIFZlYzMgb2JqZWN0XHJcbiAgICAqIEBwYXJhbSB3IFRoZSB3IHZhbHVlIGZvciB0aGUgVmVjNFxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBmcm9tVmVjMyh2ZWM6IFZlYzMsIHc6IG51bWJlcik6IFZlYzQge1xyXG4gICAgICByZXR1cm4gbmV3IFZlYzQoW3ZlYy54LCB2ZWMueSwgdmVjLnosIDFdKTtcclxuICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBnbFByb2dyYW0gfSBmcm9tIFwiLi9nbFByb2dyYW1cIjtcclxuXHJcbi8qKlxyXG4gKiBXcmFwcGVyIGZvciBhIFdlYkdsIEJ1ZmZlciBhbmQgQXR0cmlidXRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgZ2xBdHRyaWJ1dGVCdWZmZXIge1xyXG4gICBwcml2YXRlIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcclxuICAgcHJpdmF0ZSBidWZmZXI6IFdlYkdMQnVmZmVyO1xyXG4gICBwcml2YXRlIGF0dHJpYnV0ZUxvY2F0aW9uOiBudW1iZXI7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgIGdsQ3R4OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICBwcm9ncmFtOiBXZWJHTFByb2dyYW0gfCBnbFByb2dyYW0sXHJcbiAgICAgIGF0dHJpYnV0ZU5hbWU6IHN0cmluZ1xyXG4gICApIHtcclxuICAgICAgdGhpcy5nbCA9IGdsQ3R4O1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgaWYgKHByb2dyYW0gaW5zdGFuY2VvZiBnbFByb2dyYW0pIHtcclxuICAgICAgICAgcHJvZ3JhbSA9IHByb2dyYW0uZ2V0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBhdHRyaWJ1dGVOYW1lKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGRlbGV0ZSgpIHtcclxuICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5idWZmZXIpO1xyXG4gICAgICB0aGlzLmJ1ZmZlciA9IHVuZGVmaW5lZDtcclxuICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHVwbG9hZCh2YWx1ZXM6IG51bWJlcltdIHwgRmxvYXQzMkFycmF5KSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIHRoaXMuYmluZCgpO1xyXG5cclxuICAgICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xyXG4gICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdmFsdWVzLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHZhbHVlcyksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgfVxyXG5cclxuICAgfVxyXG5cclxuICAgcHVibGljIGJpbmQoc2l6ZSA9IDMpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hdHRyaWJ1dGVMb2NhdGlvbik7XHJcbiAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXHJcbiAgICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb24sXHJcbiAgICAgICAgIHNpemUsICAgICAgICAgICAgIC8vIHNpemVcclxuICAgICAgICAgZ2wuRkxPQVQsICAgICAgICAgLy8gdHlwZVxyXG4gICAgICAgICBmYWxzZSwgICAgICAgICAgICAvLyBub3JtYWxpemVkXHJcbiAgICAgICAgIDAsICAgICAgICAgICAgICAgIC8vIHN0cmlkZVxyXG4gICAgICAgICAwICAgICAgICAgICAgICAgICAvLyBvZmZzZXRcclxuICAgICAgKTtcclxuICAgfVxyXG59IiwiaW1wb3J0IHsgZ2xQcm9ncmFtIH0gZnJvbSBcIi4vZ2xQcm9ncmFtXCI7XHJcblxyXG4vKipcclxuICogV3JhcHBlciBmb3IgYSBXZWJHbCBCdWZmZXIgYW5kIEF0dHJpYnV0ZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGdsQnVmZmVyIHtcclxuICAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCA9IG51bGw7XHJcbiAgIHByaXZhdGUgYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcclxuICAgcHJpdmF0ZSBhdHRyaWJ1dGVMb2NhdGlvbjogbnVtYmVyO1xyXG5cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICBnbEN0eDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcclxuICAgICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtIHwgZ2xQcm9ncmFtLFxyXG4gICAgICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmdcclxuICAgKSB7XHJcbiAgICAgIHRoaXMuZ2wgPSBnbEN0eDtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGlmIChwcm9ncmFtIGluc3RhbmNlb2YgZ2xQcm9ncmFtKSB7XHJcbiAgICAgICAgIHByb2dyYW0gPSBwcm9ncmFtLmdldCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmlidXRlTmFtZSk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcclxuICAgICAgdGhpcy5idWZmZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyB1cGxvYWQodmVydGljZXM6IG51bWJlcltdKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIHRoaXMuYmluZCgpO1xyXG4gICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGJpbmQoc2l6ZSA9IDMpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hdHRyaWJ1dGVMb2NhdGlvbik7XHJcbiAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXHJcbiAgICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb24sXHJcbiAgICAgICAgIHNpemUsICAgICAgICAgICAgIC8vIHNpemUgLSAyLDMgb3IgNCB2YWx1ZXMgcGVyIHZlcnRleFxyXG4gICAgICAgICBnbC5GTE9BVCwgICAgICAgICAvLyB0eXBlXHJcbiAgICAgICAgIGZhbHNlLCAgICAgICAgICAgIC8vIG5vcm1hbGl6ZWRcclxuICAgICAgICAgMCwgICAgICAgICAgICAgICAgLy8gc3RyaWRlXHJcbiAgICAgICAgIDAgICAgICAgICAgICAgICAgIC8vIG9mZnNldFxyXG4gICAgICApO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9VdGlsL0NvbG9yXCI7XHJcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIi4uL1V0aWwvR2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBodG1sQ29sb3IgfSBmcm9tIFwiLi4vVXRpbC9odG1sQ29sb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBDb2xvciBjbGFzcyB0aGF0IHJlcXVpcmVzIFJHQiB2YWx1ZXMgdG8gYmUgYmV0d2VlbiAwIGFuZCAxXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgZ2xDb2xvcjMgZXh0ZW5kcyBDb2xvciB7XHJcblxyXG4gICBzdGF0aWMgcmVhZG9ubHkgbW9kZWxXaGl0ZSA9IG5ldyBnbENvbG9yMyhbMjU1IC8gMjU1LCAyNTAgLyAyNTUsIDI0MiAvIDI1NV0pO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgbW9kZWxCbGFjayA9IG5ldyBnbENvbG9yMyhbMCwgMCwgMF0pO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb2xvciBBbiBSR0IgY29sb3IgYXJyYXlcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb2xvcjogbnVtYmVyW10pIHtcclxuXHJcbiAgICAgIGlmIChjb2xvci5sZW5ndGggIT0gMykge1xyXG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yIGFycmF5IGxlbmd0aCAoZXhwZWN0ZWQgMyBlbGVtZW50cylcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbG9yWzBdIDwgMCB8fCBjb2xvclswXSA+IDEpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciAncicgdmFsdWUgKGV4cGVjdGVkIFswLTFdKVwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY29sb3JbMV0gPCAwIHx8IGNvbG9yWzFdID4gMSkge1xyXG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yICdnJyB2YWx1ZSAoZXhwZWN0ZWQgWzAtMV0pXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb2xvclsyXSA8IDAgfHwgY29sb3JbMl0gPiAxKSB7XHJcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29sb3IgJ2InIHZhbHVlIChleHBlY3RlZCBbMC0xXSlcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN1cGVyKGNvbG9yKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZXMgYW4gZ2xDb2xvciBvYmplY3QgdXNpbmcgdmFsdWVzIGluIGEgQ29sb3Igb2JqZWN0LlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGNvbG9yIEEgZ2VuZXJpYyBDb2xvciBvYmplY3QuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGZyb21Db2xvcihjb2xvcjogQ29sb3IpOiBnbENvbG9yMyB7XHJcbiAgICAgIGxldCByID0gY2xhbXAoY29sb3IuciwgMCwgMSk7XHJcbiAgICAgIGxldCBnID0gY2xhbXAoY29sb3IuZywgMCwgMSk7XHJcbiAgICAgIGxldCBiID0gY2xhbXAoY29sb3IuYiwgMCwgMSk7XHJcbiAgICAgIHJldHVybiBuZXcgZ2xDb2xvcjMoW3IsIGcsIGJdKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFJldHVybnMgdGhlIGxpZ2h0ZXIgb2YgdHdvIGNvbG9yc1xyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGMxIFRoZSBmaXJzdCBjb2xvci5cclxuICAgICogQHBhcmFtIGMyIFRoZSBzZWNvbmQgY29sb3IuXHJcbiAgICAqIEByZXR1cm5zIFRoZSBsaWdodGVzdCBjb2xvci5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdGF0aWMgbGlnaHRlc3QoYzE6IGdsQ29sb3IzLCBjMjogZ2xDb2xvcjMpOiBnbENvbG9yMyB7XHJcbiAgICAgIC8vIFRPRE86IHVzZSBsdW1pbm9zaXR5IGluc3RlYWQ/XHJcbiAgICAgIGlmIChjMS5yICsgYzEuZyArIGMxLmIgPiBjMi5yICsgYzIuZyArIGMyLmIpIHtcclxuICAgICAgICAgcmV0dXJuIGMxO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICByZXR1cm4gYzI7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFJldHVybnMgdGhlIGRhcmtlciBvZiB0d28gY29sb3JzXHJcbiAgICAqIFxyXG4gICAgKiBAcGFyYW0gYzEgVGhlIGZpcnN0IGNvbG9yLlxyXG4gICAgKiBAcGFyYW0gYzIgVGhlIHNlY29uZCBjb2xvci5cclxuICAgICogQHJldHVybnMgVGhlIGRhcmtlc3QgY29sb3IuXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGRhcmtlc3QoYzE6IGdsQ29sb3IzLCBjMjogZ2xDb2xvcjMpOiBnbENvbG9yMyB7XHJcbiAgICAgIC8vIFRPRE86IHVzZSBsdW1pbm9zaXR5IGluc3RlYWQ/XHJcbiAgICAgIGlmIChjMS5yICsgYzEuZyArIGMxLmIgPCBjMi5yICsgYzIuZyArIGMyLmIpIHtcclxuICAgICAgICAgcmV0dXJuIGMxO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICByZXR1cm4gYzI7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbnZlcnRzIHRoaXMgb2JqZWN0IHRvIGFuIGh0bWwgY29sb3Igb2JqZWN0ICgwLTI1NSBiYXNlZCkuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyBBbiBodG1sQ29sb3Igb2JqZWN0LlxyXG4gICAgKi9cclxuICAgcHVibGljIHRvSHRtbENvbG9yKCk6IGh0bWxDb2xvciB7XHJcbiAgICAgIGxldCByID0gTWF0aC5yb3VuZCgyNTUgKiB0aGlzLnIpO1xyXG4gICAgICBsZXQgZyA9IE1hdGgucm91bmQoMjU1ICogdGhpcy5nKTtcclxuICAgICAgbGV0IGIgPSBNYXRoLnJvdW5kKDI1NSAqIHRoaXMuYik7XHJcbiAgICAgIHJldHVybiBuZXcgaHRtbENvbG9yKFtyLCBnLCBiXSk7XHJcbiAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb2xvciBjbGFzcyB0aGF0IHJlcXVpcmVzIFJHQkEgdmFsdWVzIHRvIGJlIGJldHdlZW4gMCBhbmQgMVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGdsQ29sb3I0IGV4dGVuZHMgQ29sb3Ige1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb2xvciBBbiBSR0IgY29sb3IgYXJyYXlcclxuICAgICovXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb2xvcjogbnVtYmVyW10pIHtcclxuXHJcbiAgICAgIGlmIChjb2xvci5sZW5ndGggIT0gNCkge1xyXG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yIGFycmF5IGxlbmd0aCAoZXhwZWN0ZWQgNCBlbGVtZW50cylcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbG9yWzBdIDwgMCB8fCBjb2xvclswXSA+IDEpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciAncicgdmFsdWUgKGV4cGVjdGVkIFswLTFdKVwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY29sb3JbMV0gPCAwIHx8IGNvbG9yWzFdID4gMSkge1xyXG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yICdnJyB2YWx1ZSAoZXhwZWN0ZWQgWzAtMV0pXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb2xvclsyXSA8IDAgfHwgY29sb3JbMl0gPiAxKSB7XHJcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29sb3IgJ2InIHZhbHVlIChleHBlY3RlZCBbMC0xXSlcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbG9yWzNdIDwgMCB8fCBjb2xvclszXSA+IDEpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2xvciAnYScgdmFsdWUgKGV4cGVjdGVkIFswLTFdKVwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3VwZXIoY29sb3IpO1xyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBnbENvbG9yMyB9IGZyb20gXCIuL2dsQ29sb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IGFkZHMgdGVtcGVyYXR1cmUgdG8gYSBDb2xvciBvYmplY3RcclxuICovXHJcbmV4cG9ydCBjbGFzcyBnbENvbG9yV2l0aFRlbXBlcmF0dXJlIGV4dGVuZHMgZ2xDb2xvcjMge1xyXG4gICAvKipcclxuICAgICogVGVtcGVyYXR1cmUgaW4gS2VsdmluXHJcbiAgICAqL1xyXG4gICBwcml2YXRlIF90ZW1wZXJhdHVyZTogbnVtYmVyO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIHRlbXBlcmF0dXJlIGluIEtlbHZpblxyXG4gICAgKi9cclxuICAgcHVibGljIGdldCB0ZW1wZXJhdHVyZSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fdGVtcGVyYXR1cmU7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29sb3IgQW4gUkdCIGNvbG9yIGFycmF5XHJcbiAgICAqIEBwYXJhbSB0ZW1wZXJhdHVyZSBUZW1wZXJhdHVyZSBpbiBLZWx2aW5cclxuICAgICovXHJcbiAgIHByaXZhdGUgY29uc3RydWN0b3IoY29sb3I6IG51bWJlcltdLCB0ZW1wZXJhdHVyZTogbnVtYmVyKSB7XHJcbiAgICAgIHN1cGVyKGNvbG9yKTtcclxuICAgICAgdGhpcy5fdGVtcGVyYXR1cmUgPSB0ZW1wZXJhdHVyZTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEtub3duIGNvbG9yIHZhbHVlcy4gRm9yIG90aGVyIHJlcXVlc3RzIHRoZSBjbGFzcyB3aWxsIHJldHVybiBpbnRlcnBvbGF0ZWQgdmFsdWVzXHJcbiAgICAqL1xyXG4gICBwcml2YXRlIHN0YXRpYyBjb2xvcnM6IGdsQ29sb3JXaXRoVGVtcGVyYXR1cmVbXSA9IFtcclxuICAgICAgbmV3IGdsQ29sb3JXaXRoVGVtcGVyYXR1cmUoWzI1NSAvIDI1NSwgMTQ3IC8gMjU1LCA0MSAvIDI1NV0sIDE5MDApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjU1IC8gMjU1LCAxOTcgLyAyNTUsIDE0MyAvIDI1NV0sIDI2MDApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjU1IC8gMjU1LCAyMTQgLyAyNTUsIDE3MCAvIDI1NV0sIDI4NTApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjU1IC8gMjU1LCAyNDEgLyAyNTUsIDIyNCAvIDI1NV0sIDMyMDApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjU1IC8gMjU1LCAyNTAgLyAyNTUsIDI0NCAvIDI1NV0sIDUyMDApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjU1IC8gMjU1LCAyNTUgLyAyNTUsIDI1MSAvIDI1NV0sIDU0MDApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjU1IC8gMjU1LCAyNTUgLyAyNTUsIDI1NSAvIDI1NV0sIDYwMDApLCAvLyBkYXlsaWdodFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbMjAxIC8gMjU1LCAyMjYgLyAyNTUsIDI1NSAvIDI1NV0sIDcwMDApLFxyXG4gICAgICBuZXcgZ2xDb2xvcldpdGhUZW1wZXJhdHVyZShbNjQgLyAyNTUsIDE1NiAvIDI1NSwgMjU1IC8gMjU1XSwgMjAwMDApLFxyXG4gICBdO1xyXG5cclxuICAgcHVibGljIHN0YXRpYyBnZXQgZGF5bGlnaHQoKTogZ2xDb2xvcldpdGhUZW1wZXJhdHVyZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSg2MDAwKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIG1pbmltdW0gc3VwcG9ydGVkIHRlbXBlcmF0dXJlLlxyXG4gICAgKiBcclxuICAgICogQHJldHVybnMgdGVtcGVyYXR1cmUgdmFsdWUgaW4gS2VsdmluLlxyXG4gICAgKi9cclxuICAgcHVibGljIHN0YXRpYyBnZXQgbWluVGVtcGVyYXR1cmUoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY29sb3JzWzBdLnRlbXBlcmF0dXJlO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogR2V0cyB0aGUgbWF4aW11bSBzdXBwb3J0ZWQgdGVtcGVyYXR1cmUuXHJcbiAgICAqIFxyXG4gICAgKiBAcmV0dXJucyB0ZW1wZXJhdHVyZSB2YWx1ZSBpbiBLZWx2aW4uXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc3RhdGljIGdldCBtYXhUZW1wZXJhdHVyZSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb2xvcnNbdGhpcy5jb2xvcnMubGVuZ3RoIC0gMV0udGVtcGVyYXR1cmU7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBHZXRzIGEgQ29sb3IgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCB0ZW1wZXJhdHVyZS5cclxuICAgICogXHJcbiAgICAqIEByZXR1cm5zIHRlbXBlcmF0dXJlIHZhbHVlIGluIEtlbHZpbi5cclxuICAgICovXHJcbiAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHRlbXBlcmF0dXJlOiBudW1iZXIpOiBnbENvbG9yV2l0aFRlbXBlcmF0dXJlIHtcclxuXHJcbiAgICAgIGlmICh0ZW1wZXJhdHVyZSA8PSB0aGlzLm1pblRlbXBlcmF0dXJlKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yc1swXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICh0ZW1wZXJhdHVyZSA+PSB0aGlzLm1heFRlbXBlcmF0dXJlKSB7XHJcbiAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yc1t0aGlzLmNvbG9ycy5sZW5ndGggLSAxXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbG9ycy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNvbG9yMSA9IHRoaXMuY29sb3JzW2ldO1xyXG4gICAgICAgICAgICBsZXQgY29sb3IyID0gdGhpcy5jb2xvcnNbaSArIDFdO1xyXG4gICAgICAgICAgICBpZiAodGVtcGVyYXR1cmUgPj0gY29sb3IxLnRlbXBlcmF0dXJlICYmIHRlbXBlcmF0dXJlIDw9IGNvbG9yMi50ZW1wZXJhdHVyZSkge1xyXG4gICAgICAgICAgICAgICBsZXQgcmF0aW8gPSAodGVtcGVyYXR1cmUgLSBjb2xvcjEudGVtcGVyYXR1cmUpIC8gKGNvbG9yMi50ZW1wZXJhdHVyZSAtIGNvbG9yMS50ZW1wZXJhdHVyZSk7XHJcblxyXG4gICAgICAgICAgICAgICBsZXQgciA9IGNvbG9yMS5yICsgcmF0aW8gKiAoY29sb3IyLnIgLSBjb2xvcjEucik7XHJcbiAgICAgICAgICAgICAgIGxldCBnID0gY29sb3IxLmcgKyByYXRpbyAqIChjb2xvcjIuZyAtIGNvbG9yMS5nKTtcclxuICAgICAgICAgICAgICAgbGV0IGIgPSBjb2xvcjEuYiArIHJhdGlvICogKGNvbG9yMi5iIC0gY29sb3IxLmIpO1xyXG4gICAgICAgICAgICAgICByZXR1cm4gbmV3IGdsQ29sb3JXaXRoVGVtcGVyYXR1cmUoW3IsIGcsIGJdLCB0ZW1wZXJhdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgLy8gc2hvdWxkbid0IGdldCBoZXJlLCBidXQgaWYgd2UgZG8sIHJldHVybiB0aGUgbGFzdCBjb2xvclxyXG4gICAgICAgICByZXR1cm4gdGhpcy5jb2xvcnNbdGhpcy5jb2xvcnMubGVuZ3RoIC0gMV07XHJcbiAgICAgIH1cclxuICAgfVxyXG59IiwiaW1wb3J0IHsgZ2xUZXh0dXJlLCBnbFRleHR1cmVTdHlsZSB9IGZyb20gXCIuL2dsVGV4dHVyZVwiO1xyXG5cclxuLyoqXHJcbiAqIExpZ2h0d2VpZ2h0IFdlYkdMIHdyYXBwZXIgZm9yIGEgZnJhbWVidWZmZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBnbEZyYW1lQnVmZmVyIHtcclxuXHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwcml2YXRlIGZyYW1lQnVmZmVyOiBXZWJHTEZyYW1lYnVmZmVyO1xyXG4gICBwdWJsaWMgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcclxuICAgcHVibGljIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIGxhcmdlciBvZiB0aGUgd2lkdGggb3IgaGVpZ2h0XHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0IHNpemUoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZSBhIGZyYW1lIGJ1ZmZlclxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGdsQ3R4IFRoZSBXZWJHTCBjb250ZXh0XHJcbiAgICAqIEBwYXJhbSB3aWR0aCBUaGUgd2lkdGggKGluIHBpeGVscykgb2YgdGhlIHJlbmRlcmluZyAobXVzdCBiZSBwb3dlciBvZiAyKVxyXG4gICAgKiBAcGFyYW0gaGVpZ2h0IFRoZSBoZWlnaHQgKGluIHBpeGVscykgb2YgdGhlIHJlbmRlcmluZyAobXVzdCBiZSBwb3dlciBvZiAyKVxyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICBnbEN0eDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcclxuICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICkge1xyXG5cclxuICAgICAgdGhpcy5nbCA9IGdsQ3R4O1xyXG4gICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgdGhpcy5mcmFtZUJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcblxyXG4gICAgICBpZiAodGhpcy5mcmFtZUJ1ZmZlcikge1xyXG4gICAgICAgICBnbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLmZyYW1lQnVmZmVyKTtcclxuICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCgpOiBXZWJHTEZyYW1lYnVmZmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZnJhbWVCdWZmZXI7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBiaW5kKCkge1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVCdWZmZXIpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY3JlYXRlVGV4dHVyZShzdHlsZTogZ2xUZXh0dXJlU3R5bGUpOiBnbFRleHR1cmUge1xyXG4gICAgICByZXR1cm4gbmV3IGdsVGV4dHVyZSh0aGlzLmdsLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgc3R5bGUpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgYXR0YWNoVGV4dHVyZShhdHRhY2htZW50OiBudW1iZXIsIHRleHR1cmU6IFdlYkdMVGV4dHVyZSB8IGdsVGV4dHVyZSkge1xyXG5cclxuICAgICAgaWYgKHRleHR1cmUgaW5zdGFuY2VvZiBnbFRleHR1cmUpIHtcclxuICAgICAgICAgdGV4dHVyZSA9IHRleHR1cmUuZ2V0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZUJ1ZmZlcik7XHJcbiAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxyXG4gICAgICAgICBnbC5GUkFNRUJVRkZFUixcclxuICAgICAgICAgYXR0YWNobWVudCxcclxuICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgICAgdGV4dHVyZSxcclxuICAgICAgICAgMFxyXG4gICAgICApO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgY2hlY2soKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIGxldCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcclxuICAgICAgaWYgKHN0YXR1cyAhPT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpIHtcclxuICAgICAgICAgbGV0IG1zZyA9IFwiVGhlIGNyZWF0ZWQgZnJhbWUgYnVmZmVyIGlzIGludmFsaWQ6IFwiICsgc3RhdHVzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgIGFsZXJ0KG1zZyk7XHJcbiAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XHJcbiAgICAgIH1cclxuICAgfVxyXG59IiwiXHJcbi8qKlxyXG4gKiBXcmFwcGVyIGZvciBhIFdlYkdsIEJ1ZmZlciBhbmQgQXR0cmlidXRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgZ2xJbmRleEJ1ZmZlciB7XHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwcml2YXRlIGJ1ZmZlcjogV2ViR0xCdWZmZXI7XHJcblxyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoZ2xDdHg6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgdGhpcy5nbCA9IGdsQ3R4O1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgdGhpcy5idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGRlbGV0ZSgpIHtcclxuICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5idWZmZXIpO1xyXG4gICAgICB0aGlzLmJ1ZmZlciA9IHVuZGVmaW5lZDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIHVwbG9hZCh2YWx1ZXM6IG51bWJlcltdIHwgSW50MzJBcnJheSkge1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICB0aGlzLmJpbmQoKTtcclxuXHJcbiAgICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB7XHJcbiAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHZhbHVlcywgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgSW50MzJBcnJheSh2YWx1ZXMpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgIH1cclxuXHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBiaW5kKCkge1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgIH1cclxufSIsIi8qKlxyXG4gKiBVdGlsaXR5IHdyYXBwZXIgZm9yIGNvbXBpbGluZyBXZWJHTCBzaGFkZXIgcHJvZ3JhbXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBnbFByb2dyYW0ge1xyXG5cclxuICAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuICAgcHJpdmF0ZSBwcm9ncmFtOiBXZWJHTFByb2dyYW07XHJcblxyXG4gICAvKipcclxuICAgICogQ29tcGlsZXMgYW5kIGxpbmtzIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVycyBpbnRvIGEgcHJvZ3JhbVxyXG4gICAgKlxyXG4gICAgKiBAcGFyYW0gZ2wgVGhlIFdlYkdMIGNvbnRleHRcclxuICAgICogQHBhcmFtIHZlcnRleFNvdXJjZSBWZXJ0ZXggc2hhZGVyIHNvdXJjZVxyXG4gICAgKiBAcGFyYW0gZnJhZ21lbnRTb3VyY2UgRnJhZ21lbnQgc2hhZGVyIHNvdXJjZVxyXG4gICAgKiBAcmV0dXJucyB0aGUgcHJvZ3JhbSBpZFxyXG4gICAgKiBAdGhyb3dzIGlmIHRoZSBjb21waWxhdGlvbiBmYWlsc1xyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICB2ZXJ0ZXhTb3VyY2U6IHN0cmluZyxcclxuICAgICAgZnJhZ21lbnRTb3VyY2U6IHN0cmluZ1xyXG4gICApIHtcclxuICAgICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgICB0aGlzLmNvbXBpbGUodmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSB1bmRlcmx5aW5nIFdlYkdMUHJvZ3JhbVxyXG4gICAgKiBcclxuICAgICogQHJldHVybiB0aGUgV2ViR0xQcm9ncmFtXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgZ2V0KCk6IFdlYkdMUHJvZ3JhbSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnByb2dyYW07XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDYWxscyB1c2VQcm9ncmFtKCkgZm9yIHRoaXMgcHJvZ3JhbVxyXG4gICAgKi9cclxuICAgcHVibGljIHVzZSgpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuICAgICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogQ29tcGlsZXMgYSBzaGFkZXIgcHJvZ3JhbVxyXG4gICAgKlxyXG4gICAgKiBAcGFyYW0gZ2wgVGhlIFdlYkdMIGNvbnRleHQgXHJcbiAgICAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBjb2RlXHJcbiAgICAqIEBwYXJhbSB0eXBlIFRoZSBzaGFkZXIgdHlwZVxyXG4gICAgKiBAdGhyb3dzIGlmIHRoZSBjb21waWxhdGlvbiBmYWlsc1xyXG4gICAgKi9cclxuICAgcHJpdmF0ZSBjb21waWxlU2hhZGVyKFxyXG4gICAgICBzb3VyY2U6IHN0cmluZyxcclxuICAgICAgdHlwZTogbnVtYmVyXHJcbiAgICkge1xyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgbGV0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcclxuICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xyXG4gICAgICAgICBjb25zb2xlLmxvZyhzb3VyY2UpO1xyXG4gICAgICAgICBsZXQgZXJyID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xyXG4gICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgIHRocm93ICdjb21waWxlIGVycm9yOiAnICsgZXJyO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIGdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIENvbXBpbGVzIGFuZCBsaW5rcyB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMgaW50byBhIHByb2dyYW1cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSB2ZXJ0ZXhTb3VyY2UgVmVydGV4IHNoYWRlciBzb3VyY2VcclxuICAgICogQHBhcmFtIGZyYWdtZW50U291cmNlIEZyYWdtZW50IHNoYWRlciBzb3VyY2VcclxuICAgICogQHJldHVybnMgdGhlIHByb2dyYW0gaWRcclxuICAgICogQHRocm93cyBpZiB0aGUgY29tcGlsYXRpb24gZmFpbHNcclxuICAgICovXHJcbiAgIHByaXZhdGUgY29tcGlsZShcclxuICAgICAgdmVydGV4U291cmNlOiBzdHJpbmcsXHJcbiAgICAgIGZyYWdtZW50U291cmNlOiBzdHJpbmdcclxuICAgKSB7XHJcblxyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICB0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIHRoaXMuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTb3VyY2UsIGdsLlZFUlRFWF9TSEFERVIpKTtcclxuICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5jb21waWxlU2hhZGVyKGZyYWdtZW50U291cmNlLCBnbC5GUkFHTUVOVF9TSEFERVIpKTtcclxuICAgICAgZ2wubGlua1Byb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuICAgICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XHJcbiAgICAgICAgIGxldCBlcnIgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pO1xyXG4gICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgIHRocm93ICdsaW5rIGVycm9yOiAnICsgZXJyO1xyXG4gICAgICB9XHJcbiAgIH1cclxufSIsImltcG9ydCB7IFZlYzMgfSBmcm9tIFwiLi4vVXRpbDNEL1ZlY1wiO1xyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgZm9yIGhvbGRpbmcgYSBjbGlwIHNwYWNlLiBDYW4gYmUgdXNlZCB0byBob2xkIHRoZSB2aWV3aW5nIHNwYWNlXHJcbiAqIG9yIGNsaXAgc3BhY2UuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgZ2xTcGFjZSB7XHJcbiAgIHB1YmxpYyBtaW46IFZlYzM7XHJcbiAgIHB1YmxpYyBtYXg6IFZlYzM7XHJcblxyXG4gICBwdWJsaWMgZ2V0IGxlZnQoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWluLng7XHJcbiAgIH1cclxuICAgcHVibGljIGdldCByaWdodCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5tYXgueDtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCB0b3AoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWF4Lnk7XHJcbiAgIH1cclxuICAgcHVibGljIGdldCBib3R0b20oKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWluLnk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQgbmVhcigpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5taW4uejtcclxuICAgfVxyXG4gICBwdWJsaWMgZ2V0IGZhcigpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5tYXguejtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5tYXgueCAtIHRoaXMubWluLngpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5tYXgueSAtIHRoaXMubWluLnkpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgZ2V0IGRlcHRoKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFicyh0aGlzLm1heC56IC0gdGhpcy5taW4ueik7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtaW46IFZlYzMsIG1heDogVmVjMykge1xyXG4gICAgICB0aGlzLm1pbiA9IG1pbjtcclxuICAgICAgdGhpcy5tYXggPSBtYXg7XHJcbiAgIH1cclxufSIsImV4cG9ydCBlbnVtIGdsVGV4dHVyZVN0eWxlIHtcclxuICAgQ29sb3IsXHJcbiAgIERlcHRoLFxyXG4gICBGbG9hdFxyXG59XHJcblxyXG4vKipcclxuICogTGlnaHR3ZWlnaHQgV2ViR0wgd3JhcHBlciBmb3IgYSB0ZXh0dXJlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgZ2xUZXh0dXJlIHtcclxuXHJcbiAgIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xyXG4gICBwdWJsaWMgdGV4dHVyZTogV2ViR0xUZXh0dXJlO1xyXG4gICBwdWJsaWMgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcclxuICAgcHVibGljIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgLyoqXHJcbiAgICAqIENyZWF0ZSBhIGZyYW1lIGJ1ZmZlciBmb3IgcmVuZGVyaW5nIGludG8gdGV4dHVyZSBvYmplY3RzLlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIGdsQ3R4IFRoZSBXZWJHTCBjb250ZXh0XHJcbiAgICAqIEBwYXJhbSB3aWR0aCBUaGUgd2lkdGggKGluIHBpeGVscykgb2YgdGhlIHJlbmRlcmluZyAobXVzdCBiZSBwb3dlciBvZiAyKVxyXG4gICAgKiBAcGFyYW0gaGVpZ2h0IFRoZSBoZWlnaHQgKGluIHBpeGVscykgb2YgdGhlIHJlbmRlcmluZyAobXVzdCBiZSBwb3dlciBvZiAyKVxyXG4gICAgKi9cclxuICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICBnbEN0eDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcclxuICAgICAgd2lkdGg6IG51bWJlcixcclxuICAgICAgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgIHN0eWxlOiBnbFRleHR1cmVTdHlsZVxyXG4gICApIHtcclxuXHJcbiAgICAgIHRoaXMuZ2wgPSBnbEN0eDtcclxuICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgIHN3aXRjaCAoc3R5bGUpIHtcclxuICAgICAgICAgY2FzZSBnbFRleHR1cmVTdHlsZS5Db2xvcjpcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb2xvcih3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICBjYXNlIGdsVGV4dHVyZVN0eWxlLkRlcHRoOlxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZURlcHRoKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgIGNhc2UgZ2xUZXh0dXJlU3R5bGUuRmxvYXQ6XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRmxvYXQod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWxldGUoKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcblxyXG4gICAgICBpZiAodGhpcy50ZXh0dXJlKSB7XHJcbiAgICAgICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy50ZXh0dXJlKTtcclxuICAgICAgICAgdGhpcy50ZXh0dXJlID0gbnVsbDtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBwcml2YXRlIGNyZWF0ZUNvbG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XHJcblxyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgdGhpcy50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xyXG5cclxuICAgICAgZ2wudGV4SW1hZ2UyRChcclxuICAgICAgICAgZ2wuVEVYVFVSRV8yRCwgICAgICAgICAgLy8gdGFyZ2V0XHJcbiAgICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAgIC8vIGxldmVsXHJcbiAgICAgICAgIGdsLlJHQkEsICAgICAgICAgICAgICAgIC8vIGludGVybmFsIGZvcm1hdFxyXG4gICAgICAgICB3aWR0aCwgICAgICAgICAgICAgICAgICAvLyB3aWR0aFxyXG4gICAgICAgICBoZWlnaHQsICAgICAgICAgICAgICAgICAvLyBoZWlnaHRcclxuICAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgLy8gYm9yZGVyXHJcbiAgICAgICAgIGdsLlJHQkEsICAgICAgICAgICAgICAgIC8vIGZvcm1hdFxyXG4gICAgICAgICBnbC5VTlNJR05FRF9CWVRFLCAgICAgICAvLyB0eXBlXHJcbiAgICAgICAgIG51bGwgICAgICAgICAgICAgICAgICAgIC8vIHBpeGVsc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XHJcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xyXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgY3JlYXRlRGVwdGgod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGxldCBkZXB0aF90ZXh0dXJlX2V4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xyXG4gICAgICBpZiAoIWRlcHRoX3RleHR1cmVfZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgIGFsZXJ0KCdUaGlzIFdlYkdMIHByb2dyYW0gcmVxdWlyZXMgdGhlIHVzZSBvZiB0aGUgV0VCR0xfZGVwdGhfdGV4dHVyZSBleHRlbnNpb24uJyk7XHJcbiAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xyXG5cclxuICAgICAgZ2wudGV4SW1hZ2UyRChcclxuICAgICAgICAgZ2wuVEVYVFVSRV8yRCwgICAgICAgICAgLy8gdGFyZ2V0XHJcbiAgICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAgIC8vIGxldmVsXHJcbiAgICAgICAgIGdsLkRFUFRIX0NPTVBPTkVOVCwgICAgIC8vIGludGVybmFsIGZvcm1hdFxyXG4gICAgICAgICB3aWR0aCwgICAgICAgICAgICAgICAgICAvLyB3aWR0aFxyXG4gICAgICAgICBoZWlnaHQsICAgICAgICAgICAgICAgICAvLyBoZWlnaHRcclxuICAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgLy8gYm9yZGVyXHJcbiAgICAgICAgIGdsLkRFUFRIX0NPTVBPTkVOVCwgICAgIC8vIGZvcm1hdFxyXG4gICAgICAgICBnbC5VTlNJR05FRF9JTlQsICAgICAgICAvLyB0eXBlXHJcbiAgICAgICAgIG51bGwgICAgICAgICAgICAgICAgICAgIC8vIHBpeGVsc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XHJcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xyXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgIH1cclxuXHJcbiAgIHByaXZhdGUgY3JlYXRlRmxvYXQod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGxldCBpbnRlcm5hbEZvcm1hdDogbnVtYmVyO1xyXG4gICAgICBsZXQgZm9ybWF0OiBudW1iZXI7XHJcbiAgICAgIGxldCB0eXBlOiBudW1iZXI7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgdGV4dHVyZXNcclxuICAgICAgaWYgKGdsIGluc3RhbmNlb2YgV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgIGxldCBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnKTtcclxuICAgICAgICAgaWYgKGV4dCkge1xyXG4gICAgICAgICAgICAvLyBUaGFua3MgQXBwbGUuIEFsd2F5cyBnb3QgdG8gZG8gdGhpbmdzIGEgbGl0dGxlIGRpZmZlcmVudGx5XHJcbiAgICAgICAgICAgIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTtcclxuICAgICAgICAgICAgZm9ybWF0ID0gZ2wuUkdCQTtcclxuICAgICAgICAgICAgdHlwZSA9IGV4dC5IQUxGX0ZMT0FUX09FUztcclxuICAgICAgICAgfVxyXG4gICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTm8gZmxvYXRpbmcgcG9pbnQgdGV4dHVyZXM/IHJlYWxseSBmYWxsIGJhY2sgdG8gdW5zaWduZWQgYnl0ZXNcclxuICAgICAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBO1xyXG4gICAgICAgICAgICBmb3JtYXQgPSBnbC5SR0JBO1xyXG4gICAgICAgICAgICB0eXBlID0gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUeXBlc2NyaXB0IGRvZXNuJ3QgbGV0IHlvdSBkbyBhbiAnZWxzZSBpZicgaGVyZSBhbmQgd2hlbiBXZWJHTDIgaXNcclxuICAgICAgLy8gbm90IHN1cHBvcnRlZCwgd2UgZ2V0IGFuIGV4Y2VwdGlvbiwgc28gdGh1cyB0aGUgdHJ5LWNhdGNoXHJcbiAgICAgIC8vIHNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDUzODExMjIvdHlwZXNjcmlwdC10eXBlLW5hcnJvd2VkLXRvLW5ldmVyLXdpdGgtaW5zdGFuY2VvZi1pbi1hbi1pZi1lbHNlLXN0YXRlbWVudFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgICBpZiAoZ2wgaW5zdGFuY2VvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xyXG4gICAgICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkEzMkY7XHJcbiAgICAgICAgICAgIGZvcm1hdCA9IGdsLlJHQkE7XHJcbiAgICAgICAgICAgIHR5cGUgPSBnbC5GTE9BVFxyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNyZWF0ZSB0d28gdGV4dHVyZXMuIE9uZSB3ZSBkaXNwbGF5IGFuZCBvbmUgd2UgZHJhdyB0b1xyXG4gICAgICB0aGlzLnRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XHJcblxyXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XHJcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcclxuXHJcbiAgICAgIGdsLnRleEltYWdlMkQoXHJcbiAgICAgICAgIGdsLlRFWFRVUkVfMkQsICAgICAgICAgIC8vIHRhcmdldFxyXG4gICAgICAgICAwLCAgICAgICAgICAgICAgICAgICAgICAvLyBsZXZlbFxyXG4gICAgICAgICBpbnRlcm5hbEZvcm1hdCwgICAgICAgICAvLyBpbnRlcm5hbCBmb3JtYXRcclxuICAgICAgICAgd2lkdGgsICAgICAgICAgICAgICAgICAgLy8gd2lkdGhcclxuICAgICAgICAgaGVpZ2h0LCAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0XHJcbiAgICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAgIC8vIGJvcmRlclxyXG4gICAgICAgICBmb3JtYXQsICAgICAgICAgICAgICAgICAvLyBmb3JtYXRcclxuICAgICAgICAgdHlwZSwgICAgICAgICAgICAgICAgICAgLy8gdHlwZVxyXG4gICAgICAgICBudWxsICAgICAgICAgICAgICAgICAgICAvLyBwaXhlbHNcclxuICAgICAgKTtcclxuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBnZXQoKTogV2ViR0xUZXh0dXJlIHtcclxuICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGJpbmQoKSB7XHJcbiAgICAgIGxldCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XHJcbiAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBnbFByb2dyYW0gfSBmcm9tIFwiLi9nbFByb2dyYW1cIjtcclxuaW1wb3J0IHsgVmVjMyB9IGZyb20gXCIuLi9VdGlsM0QvVmVjXCI7XHJcbmltcG9ydCB7IGdsQ29sb3IzLCBnbENvbG9yNCB9IGZyb20gXCIuL2dsQ29sb3JcIjtcclxuaW1wb3J0IHsgTWF0NCB9IGZyb20gXCIuLi9VdGlsM0QvTWF0XCI7XHJcblxyXG4vKipcclxuICogVXRpbGl0eSBjbGFzcyBmb3Igc2V0dGluZyB1bmlmb3JtIHZhbHVlcyBpbiBhIHNoYWRlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGdsVW5pZm9ybSB7XHJcblxyXG4gICBwcml2YXRlIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcclxuXHJcbiAgIC8vIHRoZSBXZWJHTCBzaGFkZXIgcHJvZ3JhbVxyXG4gICBwcml2YXRlIHByb2dyYW06IFdlYkdMUHJvZ3JhbTtcclxuXHJcbiAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGFuIG9iamVjdCBmb3Igc2V0dGluZyB2YWx1ZXMgYW5kIGNhbGxzIGdsLnVzZVByb2dyYW1cclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBnbEN0eCBUaGUgV2ViR0wgY29udGV4dFxyXG4gICAgKiBAcGFyYW0gcHJvZ3JhbSBUaGUgcHJvZ3JhbSBhc3NvY2lhdGVkIHdpdGggdGhlIHVuaWZvcm0gdmFsdWVzXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgIGdsQ3R4OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICBwcm9ncmFtOiBXZWJHTFByb2dyYW0gfCBnbFByb2dyYW1cclxuICAgKSB7XHJcbiAgICAgIHRoaXMuZ2wgPSBnbEN0eDtcclxuICAgICAgbGV0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgIGlmIChwcm9ncmFtIGluc3RhbmNlb2YgZ2xQcm9ncmFtKSB7XHJcbiAgICAgICAgIHByb2dyYW0gPSBwcm9ncmFtLmdldCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xyXG4gICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogU2V0cyBhIHVuaWZvcm0gdmFsdWVcclxuICAgICogXHJcbiAgICAqIEBwYXJhbSBuYW1lIFRoZSB2YXJpYWJsZSBuYW1lXHJcbiAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWVcclxuICAgICogQHBhcmFtIGludCBJZiB0cnVlIGFuZCB0aGUgdmFsdWUgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYW4gaW50ZWdlclxyXG4gICAgKi9cclxuICAgcHVibGljIHNldChcclxuICAgICAgbmFtZTogc3RyaW5nLFxyXG4gICAgICB2YWx1ZTogQm9vbGVhbiB8IG51bWJlciB8IFZlYzMgfCBnbENvbG9yMyB8IGdsQ29sb3I0IHwgTWF0NCxcclxuICAgICAgaW50OiBib29sZWFuID0gZmFsc2VcclxuICAgKSB7XHJcblxyXG4gICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgbGV0IGxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIG5hbWUpO1xyXG4gICAgICBpZiAobG9jKSB7XHJcbiAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFZlYzMpIHtcclxuICAgICAgICAgICAgZ2wudW5pZm9ybTNmdihsb2MsIG5ldyBGbG9hdDMyQXJyYXkodmFsdWUudmFsdWVzKSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBnbENvbG9yMykge1xyXG4gICAgICAgICAgICBnbC51bmlmb3JtM2Z2KGxvYywgbmV3IEZsb2F0MzJBcnJheShbdmFsdWUuciwgdmFsdWUuZywgdmFsdWUuYl0pKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGdsQ29sb3I0KSB7XHJcbiAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYobG9jLCBuZXcgRmxvYXQzMkFycmF5KFt2YWx1ZS5yLCB2YWx1ZS5nLCB2YWx1ZS5iLCB2YWx1ZS5hXSkpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWF0NCkge1xyXG4gICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxvYywgZmFsc2UsIG5ldyBGbG9hdDMyQXJyYXkodmFsdWUudHJhbnNwb3NlKCkudmFsdWVzKSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuIHx8IHR5cGVvZiAodmFsdWUpID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgZ2wudW5pZm9ybTFpKGxvYywgdmFsdWUgPyAxLjAgOiAwLjApO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09IFwidU1vZGVcIikge1xyXG4gICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jLCB2YWx1ZSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbnQpIHtcclxuICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpKGxvYywgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICBnbC51bmlmb3JtMWYobG9jLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8qKlxyXG4gICAgKiBTZXRzIGFuIGludGVnZXIgdW5pZm9ybSB2YWx1ZSAoc2FtZSBhcyBzZXQobmFtZSwgdmFsdWUsIHRydWUpKVxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIG5hbWUgVGhlIHZhcmlhYmxlIG5hbWVcclxuICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZVxyXG4gICAgKi9cclxuICAgcHVibGljIHNldGkobmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuc2V0KG5hbWUsIHZhbHVlLCB0cnVlKTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFNldHMgYWxsIHZhbHVlcyBmb3IgdmFyaWFibGVzIHN0b3JlZCBhcyBtZW1iZXJzIG9mIGFuIG9iamVjdFxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHVuaWZvcm1zIFRoZSBvYmplY3Qgd2l0aCBtZW1iZXIgdmFsdWVzXHJcbiAgICAqL1xyXG4gICBwdWJsaWMgc2V0QWxsKHVuaWZvcm1zOiBhbnkpIHtcclxuXHJcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gdW5pZm9ybXMpIHtcclxuICAgICAgICAgdmFyIHZhbHVlID0gdW5pZm9ybXNbbmFtZV07XHJcbiAgICAgICAgIHRoaXMuc2V0KG5hbWUsIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICB9XHJcbn0iLCJpbXBvcnQgeyBnbFByb2dyYW0gfSBmcm9tIFwiLi9nbFByb2dyYW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBnbFVuaWZvcm1CbG9jayB7XHJcbiAgIHByaXZhdGUgZ2wyOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcclxuICAgcHJpdmF0ZSBibG9ja0xvY2F0aW9uOiBudW1iZXI7XHJcbiAgIHByaXZhdGUgYmxvY2tCdWZmZXI6IFdlYkdMQnVmZmVyO1xyXG5cclxuICAgY29uc3RydWN0b3IoXHJcbiAgICAgIGdsQ3R4OiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgICBwcm9ncmFtOiBXZWJHTFByb2dyYW0gfCBnbFByb2dyYW0sXHJcbiAgICAgIGJsb2NrTmFtZTogc3RyaW5nLFxyXG4gICAgICBibG9ja0JpbmRpbmc6IG51bWJlclxyXG4gICApIHtcclxuXHJcbiAgICAgIHRoaXMuZ2wyID0gZ2xDdHg7XHJcbiAgICAgIGxldCBnbDIgPSB0aGlzLmdsMjtcclxuXHJcbiAgICAgIGlmIChwcm9ncmFtIGluc3RhbmNlb2YgZ2xQcm9ncmFtKSB7XHJcbiAgICAgICAgIHByb2dyYW0gPSBwcm9ncmFtLmdldCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmJsb2NrTG9jYXRpb24gPSBnbDIuZ2V0VW5pZm9ybUJsb2NrSW5kZXgocHJvZ3JhbSwgYmxvY2tOYW1lKTtcclxuICAgICAgZ2wyLnVuaWZvcm1CbG9ja0JpbmRpbmcocHJvZ3JhbSwgdGhpcy5ibG9ja0xvY2F0aW9uLCBibG9ja0JpbmRpbmcpO1xyXG5cclxuICAgICAgdGhpcy5ibG9ja0J1ZmZlciA9IGdsMi5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgZ2wyLmJpbmRCdWZmZXJCYXNlKGdsMi5VTklGT1JNX0JVRkZFUiwgYmxvY2tCaW5kaW5nLCB0aGlzLmJsb2NrQnVmZmVyKTtcclxuICAgfVxyXG5cclxuICAgZGVsZXRlKCkge1xyXG4gICAgICBsZXQgZ2wyID0gdGhpcy5nbDI7XHJcbiAgICAgIGdsMi5kZWxldGVCdWZmZXIodGhpcy5ibG9ja0J1ZmZlcik7XHJcbiAgIH1cclxuXHJcbiAgIHVwbG9hZChkYXRhOiBGbG9hdDMyQXJyYXkgfCBJbnQzMkFycmF5KSB7XHJcblxyXG4gICAgICBsZXQgZ2wyID0gdGhpcy5nbDI7XHJcbiAgICAgIGdsMi5iaW5kQnVmZmVyKGdsMi5VTklGT1JNX0JVRkZFUiwgdGhpcy5ibG9ja0J1ZmZlcik7XHJcbiAgICAgIGdsMi5idWZmZXJEYXRhKGdsMi5VTklGT1JNX0JVRkZFUiwgZGF0YSwgZ2wyLlNUQVRJQ19EUkFXKTtcclxuICAgICAgZ2wyLmJpbmRCdWZmZXIoZ2wyLlVOSUZPUk1fQlVGRkVSLCBudWxsKTtcclxuICAgfVxyXG59IiwiaW1wb3J0ICcuL3N0eWxlcy9zdHlsZXMuY3NzJztcclxuaW1wb3J0IHsgTGF1bmNoZXIgfSBmcm9tIFwiLi9MYXVuY2hlclwiO1xyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgIGxldCBhcHAgPSBuZXcgTGF1bmNoZXIoKTtcclxufVxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxyXFxudmFyeWluZyB2ZWMyIHRleENvb3JkO1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcclxcbnVuaWZvcm0gaW50IHVNb2RlO1xcclxcbnVuaWZvcm0gZmxvYXQgdU1heENocm9tYTtcXHJcXG5cXHJcXG51bmlmb3JtIHZlYzMgdUhpZ2hsaWdodENvbG9yO1xcclxcbnVuaWZvcm0gdmVjMyB1TGlnaHRMaWdodENvbG9yO1xcclxcbnVuaWZvcm0gdmVjMyB1TWlkTGlnaHRDb2xvcjtcXHJcXG51bmlmb3JtIHZlYzMgdURhcmtMaWdodENvbG9yO1xcclxcblxcclxcbnVuaWZvcm0gdmVjMyB1U2hhZG93Q29sb3I7XFxyXFxudW5pZm9ybSB2ZWMzIHVSZWZsZWN0ZWRMaWdodENvbG9yO1xcclxcbnVuaWZvcm0gdmVjMyB1RGFya0FjY2VudENvbG9yO1xcclxcblxcclxcbnVuaWZvcm0gZmxvYXQgdVNoYWRvd0FscGhhO1xcclxcbnVuaWZvcm0gZmxvYXQgdUxpZ2h0QWxwaGE7XFxyXFxuXFxyXFxuI2RlZmluZSBNT0RFX1NDSUVOQ0UgMFxcclxcbiNkZWZpbmUgTU9ERV9WQUxVRSAxXFxyXFxuI2RlZmluZSBNT0RFX0NIUk9NQSAyXFxyXFxuI2RlZmluZSBNT0RFX0JBTkRTIDNcXHJcXG5cXHJcXG52ZWM0IHdoaXRlID0gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xcclxcbnZlYzQgcmVkID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1xcclxcbnZlYzQgb3JhbmdlID0gdmVjNCgxLjAsIDAuNjUsIDAuMCwgMS4wKTtcXHJcXG52ZWM0IHllbGxvdyA9IHZlYzQoMS4wLCAxLjAsIDAuMCwgMS4wKTtcXHJcXG52ZWM0IGdyZWVuID0gdmVjNCgwLjAsIDEuMCwgMC4wLCAxLjApO1xcclxcbnZlYzQgY3lhbiA9IHZlYzQoMC4wLCAxLjAsIDEuMCwgMS4wKTtcXHJcXG52ZWM0IGJsdWUgPSB2ZWM0KDAuMCwgMC4wLCAxLjAsIDEuMCk7XFxyXFxudmVjNCBibGFjayA9IHZlYzQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcXHJcXG4jZGVmaW5lIE5VTV9DT0xPUlMgNlxcclxcbnZlYzQgY29sb3JzW05VTV9DT0xPUlNdO1xcclxcblxcclxcbnZlYzQgdmFsdWUyQ29sb3IoZmxvYXQgdmFsdWUpXFxyXFxue1xcclxcbiAgIGZsb2F0IHNwYW4gPSAxLjAgLyBmbG9hdChOVU1fQ09MT1JTIC0gMSk7XFxyXFxuICAgdmFsdWUgKj0gZmxvYXQoTlVNX0NPTE9SUyAtIDEpO1xcclxcbiAgIGlmICh2YWx1ZSA8IDAuMClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIGNvbG9yc1swXTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZSBpZiAodmFsdWUgPCAxLjApXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBjb2xvcnNbMF0gKyB2YWx1ZSAqIChjb2xvcnNbMV0gLSBjb2xvcnNbMF0pO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlIGlmICh2YWx1ZSA8IDIuMClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIGNvbG9yc1sxXSArICh2YWx1ZSAtIDEuMCkgKiAoY29sb3JzWzJdIC0gY29sb3JzWzFdKTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZSBpZiAodmFsdWUgPCAzLjApXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBjb2xvcnNbMl0gKyAodmFsdWUgLSAyLjApICogKGNvbG9yc1szXSAtIGNvbG9yc1syXSk7XFxyXFxuICAgfVxcclxcbiAgIGVsc2UgaWYgKHZhbHVlIDwgNC4wKVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gY29sb3JzWzNdICsgKHZhbHVlIC0gMy4wKSAqIChjb2xvcnNbNF0gLSBjb2xvcnNbM10pO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlIGlmICh2YWx1ZSA8IDUuMClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIGNvbG9yc1s0XSArICh2YWx1ZSAtIDQuMCkgKiAoY29sb3JzWzVdIC0gY29sb3JzWzRdKTtcXHJcXG4gICB9XFxyXFxuICAgLypcXHJcXG4gICBlbHNlIGlmICh2YWx1ZSA8IDYuMClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIGNvbG9yc1s1XSArICh2YWx1ZSAtIDUuMCkgKiAoY29sb3JzWzZdIC0gY29sb3JzWzVdKTtcXHJcXG4gICB9XFxyXFxuICAgKi9cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBjb2xvcnNbTlVNX0NPTE9SUyAtIDFdO1xcclxcbiAgIH1cXHJcXG59XFxyXFxuXFxyXFxuZmxvYXQgdG9HcmF5KHZlYzQgYylcXHJcXG57XFxyXFxuICAgLy8gbG90cyBvZiB3YXlzIHRvIGNvbnZlcnQgUkdCIHRvIGdyYXkgc2NhbGUuXFxyXFxuXFxyXFxuICAgLy8gc2ltcGxlIGF2ZXJhZ2luZyBtZXRob2RcXHJcXG4gICAvLyByZXR1cm4gKGMuciArIGMuZyArIGMuYikgLyAzLjA7XFxyXFxuXFxyXFxuICAgLy8gcmVsYXRpdmUgcGVyY2VwdHVhbCB2YWx1ZXNcXHJcXG4gICAvLyByZXR1cm4gMC4zICogYy5yICsgMC41OSAqIGMuZyArIDAuMTEgKiBjLmI7XFxyXFxuXFxyXFxuICAgLy8gbHVtaW5vc2l0eSBtZWFzdXJlXFxyXFxuICAgZmxvYXQgZ2FtbWEgPSAyLjI7XFxyXFxuICAgZmxvYXQgeSA9IDAuMjEyNiAqIHBvdyhjLnIsIGdhbW1hKSArIDAuNzE1MiAqIHBvdyhjLmcsIGdhbW1hKSArIC4wNzIyICogcG93KGMuYiwgZ2FtbWEpO1xcclxcbiAgIGZsb2F0IGwgPSAxMTYuMCAqIHBvdyh5LCAxLjAgLyAzLjApIC0gMTYuMDtcXHJcXG4gICByZXR1cm4gbCAvIDEwMC4wO1xcclxcbn1cXHJcXG5cXHJcXG52ZWM0IHJlbmRlckFzVmFsdWUoKVxcclxcbntcXHJcXG4gICB2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB0ZXhDb29yZCk7XFxyXFxuICAgZmxvYXQgcmdiID0gdG9HcmF5KGNvbG9yKTtcXHJcXG4gICByZXR1cm4gdmVjNChyZ2IsIHJnYiwgcmdiLCAxLjApO1xcclxcbn1cXHJcXG5cXHJcXG52ZWM0IHJlbmRlckFzQ2hyb21hKClcXHJcXG57XFxyXFxuICAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdGV4Q29vcmQpO1xcclxcblxcclxcbiAgIC8vIHJlbmRlciB0aGUgc2NhbGUgYXMgYSBiYXIgb24gdGhlIGxlZnRcXHJcXG4gICBpZiAodGV4Q29vcmQueCA8IDAuMDMpXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiB2YWx1ZTJDb2xvcigodGV4Q29vcmQueSAtIDAuMSkgLyAwLjkpO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIGlmIChjb2xvci5hID49IHVTaGFkb3dBbHBoYSlcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgZmxvYXQgYXZnID0gKGNvbG9yLnIgKyBjb2xvci5nICsgY29sb3IuYikgLyAzLjA7XFxyXFxuICAgICAgICAgZmxvYXQgcmdiID0gKGFicyhhdmcgLSBjb2xvci5yKSArIGFicyhhdmcgLSBjb2xvci5nKSArIGFicyhhdmcgLSBjb2xvci5iKSkgLyAoNC4wIC8gMy4wKTtcXHJcXG4gICAgICAgICByZXR1cm4gdmFsdWUyQ29sb3IocmdiIC8gdU1heENocm9tYSk7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIGVsc2VcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcXHJcXG4gICAgICB9XFxyXFxuICAgfVxcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBkMih2ZWMzIGMxLCB2ZWMzIGMyKVxcclxcbntcXHJcXG4gICAvLyBzdW0gdGhlIHNxdWFyZXMgb2YgdGhlIGRpZmZlcmVuY2VzXFxyXFxuICAgcmV0dXJuIHBvdyhjMS5yIC0gYzIuciwgMi4wKSArIHBvdyhjMS5nIC0gYzIuZywgMi4wKSArIHBvdyhjMS5iIC0gYzIuYiwgMi4wKTtcXHJcXG59XFxyXFxuXFxyXFxudmVjMyBjbG9zZXN0KHZlYzMgY29sb3IsIHZlYzMgbGlnaHQsIHZlYzMgbWlkLCB2ZWMzIGRhcmspXFxyXFxue1xcclxcbiAgIGZsb2F0IGRsaWdodCA9IGQyKGNvbG9yLCBsaWdodCk7XFxyXFxuICAgZmxvYXQgZG1pZCA9IGQyKGNvbG9yLCBtaWQpO1xcclxcbiAgIGZsb2F0IGRkYXJrID0gZDIoY29sb3IsIGRhcmspO1xcclxcblxcclxcbiAgIGZsb2F0IGRtaW4gPSBtaW4oZGxpZ2h0LCBtaW4oZG1pZCwgZGRhcmspKTtcXHJcXG4gICBpZiAoZG1pbiA9PSBkbGlnaHQpXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBsaWdodDtcXHJcXG4gICB9XFxyXFxuICAgZWxzZSBpZiAoZG1pbiA9PSBkbWlkKVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gbWlkO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBkYXJrO1xcclxcbiAgIH1cXHJcXG59XFxyXFxuXFxyXFxudmVjNCByZW5kZXJBc0JhbmRzKClcXHJcXG57XFxyXFxuICAgZmxvYXQgc2l6ZSA9IDAuMDc7XFxyXFxuICAgZmxvYXQgbWFyZ2luID0gKDEuMCAtIDYuMCAqIHNpemUpIC8gMi4wO1xcclxcbiAgIGlmICh0ZXhDb29yZC54IDwgc2l6ZSAmJiB0ZXhDb29yZC55ID4gbWFyZ2luICYmIHRleENvb3JkLnkgPCAoMS4wIC0gbWFyZ2luKSlcXHJcXG4gICB7XFxyXFxuICAgICAgaWYgKHRleENvb3JkLnkgPCAobWFyZ2luICsgMS4wICogc2l6ZSkpXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIHJldHVybiB2ZWM0KHVEYXJrQWNjZW50Q29sb3IsIDEuMCk7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIGVsc2UgaWYgKHRleENvb3JkLnkgPCAobWFyZ2luICsgMi4wICogc2l6ZSkpXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIHJldHVybiB2ZWM0KHVTaGFkb3dDb2xvciwgMS4wKTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZSBpZiAodGV4Q29vcmQueSA8IChtYXJnaW4gKyAzLjAgKiBzaXplKSlcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgcmV0dXJuIHZlYzQodURhcmtMaWdodENvbG9yLCAxLjApO1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBlbHNlIGlmICh0ZXhDb29yZC55IDwgKG1hcmdpbiArIDQuMCAqIHNpemUpKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICByZXR1cm4gdmVjNCh1TWlkTGlnaHRDb2xvciwgMS4wKTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZSBpZiAodGV4Q29vcmQueSA8IChtYXJnaW4gKyA1LjAgKiBzaXplKSlcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgcmV0dXJuIHZlYzQodUxpZ2h0TGlnaHRDb2xvciwgMS4wKTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZSAvLyBpZiAodGV4Q29vcmQueSA8IChtYXJnaW4gKyA3LjAgKiBzaXplKSlcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgcmV0dXJuIHZlYzQodUhpZ2hsaWdodENvbG9yLCAxLjApO1xcclxcbiAgICAgIH1cXHJcXG4gICB9XFxyXFxuICAgZWxzZVxcclxcbiAgIHtcXHJcXG4gICAgICB2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB0ZXhDb29yZCk7XFxyXFxuXFxyXFxuICAgICAgLy8gZGVmaW5lIHRoZSB0ZXJtaW5hdG9yIGFzIHRoZSBwb2ludCB3aGVyZSB0aGluZ3MgYXJlIDUwJSBpbiBzaGFkb3dcXHJcXG4gICAgICBmbG9hdCB0ZXJtaW5hdG9yID0gKCh1U2hhZG93QWxwaGEgKyB1TGlnaHRBbHBoYSkgLyAyLjApO1xcclxcbiAgICAgIGlmIChjb2xvci5hID4gMS4wICYmIGNvbG9yLmEgPD0gdGVybWluYXRvcilcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgdmVjMyBjID0gY2xvc2VzdChjb2xvci5yZ2IsIHVTaGFkb3dDb2xvciwgdVJlZmxlY3RlZExpZ2h0Q29sb3IsIHVEYXJrQWNjZW50Q29sb3IpO1xcclxcbiAgICAgICAgIHJldHVybiB2ZWM0KGMsIDEuMCk7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIGVsc2UgaWYgKGNvbG9yLmEgPiB0ZXJtaW5hdG9yKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICAvLyBvbmx5IHJlbmRlciB0aGUgaGlnaGxpZ2h0IHdoZXJlIGl0J3MgY29udHJpYnV0aW9uIGlzIHNpZ25pZmljYW50LCBpLmUuIGdyZWF0ZXJcXHJcXG4gICAgICAgICAvLyB0aGFuIHNvbWUgdGhyZXNob2xkXFxyXFxuICAgICAgICAgY29uc3QgZmxvYXQgU1BFQ1VMQVJfVEhSRVNIT0xEID0gMC4xO1xcclxcbiAgICAgICAgIGlmIChjb2xvci5hID4gKHVMaWdodEFscGhhICsgU1BFQ1VMQVJfVEhSRVNIT0xEKSlcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgcmV0dXJuIHZlYzQodUhpZ2hsaWdodENvbG9yLCAxLjApO1xcclxcbiAgICAgICAgIH1cXHJcXG4gICAgICAgICBlbHNlXFxyXFxuICAgICAgICAge1xcclxcbiAgICAgICAgICAgIHZlYzMgYyA9IGNsb3Nlc3QoY29sb3IucmdiLCB1TGlnaHRMaWdodENvbG9yLCB1TWlkTGlnaHRDb2xvciwgdURhcmtMaWdodENvbG9yKTtcXHJcXG4gICAgICAgICAgICByZXR1cm4gdmVjNChjLCAxLjApO1xcclxcbiAgICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICByZXR1cm4gY29sb3I7XFxyXFxuICAgICAgfVxcclxcbiAgIH1cXHJcXG59XFxyXFxuXFxyXFxudmVjNCByZW5kZXJBc1NjaWVuY2UoKVxcclxcbntcXHJcXG4gICAvLyBqdXN0IHJldHVybiB0aGUgdGV4dHVyZVxcclxcbiAgIHJldHVybiB0ZXh0dXJlMkQodVRleHR1cmUsIHRleENvb3JkKTtcXHJcXG59XFxyXFxuXFxyXFxudm9pZCBtYWluKClcXHJcXG57XFxyXFxuICAgY29sb3JzWzBdID0gYmxhY2s7XFxyXFxuICAgY29sb3JzWzFdID0gYmx1ZTtcXHJcXG4gICBjb2xvcnNbMl0gPSBncmVlbjtcXHJcXG4gICBjb2xvcnNbM10gPSB5ZWxsb3c7XFxyXFxuICAgY29sb3JzWzRdID0gb3JhbmdlO1xcclxcbiAgIGNvbG9yc1s1XSA9IHJlZDtcXHJcXG5cXHJcXG4gICBpZiAodU1vZGUgPT0gTU9ERV9WQUxVRSlcXHJcXG4gICB7XFxyXFxuICAgICAgZ2xfRnJhZ0NvbG9yID0gcmVuZGVyQXNWYWx1ZSgpO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlIGlmICh1TW9kZSA9PSBNT0RFX0NIUk9NQSlcXHJcXG4gICB7XFxyXFxuICAgICAgZ2xfRnJhZ0NvbG9yID0gcmVuZGVyQXNDaHJvbWEoKTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZSBpZiAodU1vZGUgPT0gTU9ERV9CQU5EUylcXHJcXG4gICB7XFxyXFxuICAgICAgZ2xfRnJhZ0NvbG9yID0gcmVuZGVyQXNCYW5kcygpO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIGdsX0ZyYWdDb2xvciA9IHJlbmRlckFzU2NpZW5jZSgpO1xcclxcbiAgIH1cXHJcXG59XFxyXFxuXCIiLCJleHBvcnQgZGVmYXVsdCBcImF0dHJpYnV0ZSB2ZWMzIHZlcnRleDtcXHJcXG52YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7XFxyXFxudW5pZm9ybSBmbG9hdCB1U2NhbGU7XFxyXFxudW5pZm9ybSBmbG9hdCB1WE9mZnNldDtcXHJcXG51bmlmb3JtIGZsb2F0IHVZT2Zmc2V0O1xcclxcblxcclxcbnZvaWQgbWFpbigpXFxyXFxue1xcclxcbiAgIHRleENvb3JkID0gdmVydGV4Lnh5ICogMC41ICsgMC41O1xcclxcblxcclxcbiAgIGdsX1Bvc2l0aW9uID0gdmVjNCh1U2NhbGUgKiB2ZXJ0ZXgueCArIHVYT2Zmc2V0LCB1U2NhbGUgKiB2ZXJ0ZXgueSArIHVZT2Zmc2V0LCAwLjAsIDEuMCk7XFxyXFxufVxcclxcblwiIiwiZXhwb3J0IGRlZmF1bHQgXCI8VkVSU0lPTj5cXHJcXG5cXHJcXG4jZGVmaW5lIE5PVEhJTkdcXHJcXG5cXHJcXG4jaWZkZWYgVVNFX1RSSUFOR0xFU1xcclxcbiNkZWZpbmUgRVMzMDBcXHJcXG4jZW5kaWZcXHJcXG5cXHJcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxyXFxuXFxyXFxuI2lmZGVmIEVTMzAwXFxyXFxuaW4gdmVjMyBpbml0aWFsUmF5O1xcclxcbiNlbHNlXFxyXFxudmFyeWluZyB2ZWMzIGluaXRpYWxSYXk7XFxyXFxuI2VuZGlmXFxyXFxuXFxyXFxudW5pZm9ybSB2ZWMzIHVFeWU7XFxyXFxudW5pZm9ybSBmbG9hdCB1VGV4dHVyZVNpemU7XFxyXFxudW5pZm9ybSBmbG9hdCB1UmFuZG9tO1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcclxcbnVuaWZvcm0gdmVjMyB1TGlnaHRQb3M7XFxyXFxudW5pZm9ybSBmbG9hdCB1TGlnaHRJbnRlbnNpdHk7XFxyXFxudW5pZm9ybSB2ZWMzIHVMaWdodENvbG9yO1xcclxcbnVuaWZvcm0gZmxvYXQgdUFtYmllbnRMaWdodEludGVuc2l0eTtcXHJcXG51bmlmb3JtIHZlYzMgdU9iakNvbG9yO1xcclxcbnVuaWZvcm0gZmxvYXQgdUJhbGxSYWRpdXM7XFxyXFxudW5pZm9ybSBmbG9hdCB1U2FtcGxlO1xcclxcbnVuaWZvcm0gZmxvYXQgdUxpZ2h0QWxwaGE7XFxyXFxudW5pZm9ybSBmbG9hdCB1U2hhZG93QWxwaGE7XFxyXFxuXFxyXFxuI2lmZGVmIEVTMzAwXFxyXFxub3V0IHZlYzQgZnJhZ0NvbG9yO1xcclxcbiNlbHNlXFxyXFxuI2RlZmluZSBmcmFnQ29sb3IgZ2xfRnJhZ0NvbG9yXFxyXFxuI2RlZmluZSB0ZXh0dXJlIHRleHR1cmUyRFxcclxcbiNlbmRpZlxcclxcblxcclxcbmNvbnN0IGludCBNQVhfQk9VTkNFUyA9IDEwO1xcclxcbmNvbnN0IGZsb2F0IEVQU0lMT04gPSAwLjAwMDAwMTtcXHJcXG5jb25zdCBmbG9hdCBPRkZTRVQgPSAwLjAwMDE7XFxyXFxuY29uc3QgZmxvYXQgSU5GSU5JVFkgPSAxMDAwMC4wO1xcclxcbmNvbnN0IGZsb2F0IExJR0hUX1NJWkUgPSAwLjE7XFxyXFxuI2RlZmluZSBCQUxMX0NFTlRFUiB2ZWMzKDAsIHVCYWxsUmFkaXVzLCAwKVxcclxcbmNvbnN0IHZlYzMgRE9NRV9DRU5URVIgPSB2ZWMzKDAsIDAsIDApO1xcclxcbmNvbnN0IGZsb2F0IERPTUVfUkFESVVTID0gOC4wO1xcclxcbmNvbnN0IGZsb2F0IFZBTCA9IDAuODtcXHJcXG5jb25zdCB2ZWMzIERPTUVfQ09MT1IgPSB2ZWMzKFZBTCwgVkFMLCBWQUwpO1xcclxcbmNvbnN0IHZlYzMgRkxPT1JfQ09MT1IgPSB2ZWMzKFZBTCwgVkFMLCBWQUwpO1xcclxcbmNvbnN0IHZlYzMgQU1CSUVOVF9DT0xPUiA9IHZlYzMoMS4wLCAxLjAsIDEuMCk7XFxyXFxuY29uc3QgaW50IE5VTV9MSUdIVFMgPSA2O1xcclxcbmNvbnN0IGZsb2F0IEhFSUdIVCA9IDUuMDtcXHJcXG5jb25zdCBmbG9hdCBSQURJVVMgPSA0LjA7XFxyXFxuY29uc3QgZmxvYXQgUEkgPSAzLjE0MTU5MjY1O1xcclxcblxcclxcbnN0cnVjdCBMaWdodFxcclxcbntcXHJcXG4gICBmbG9hdCBpbnRlbnNpdHk7XFxyXFxuICAgZmxvYXQgc2l6ZTtcXHJcXG4gICB2ZWMzIHBvcztcXHJcXG4gICB2ZWMzIGNvbG9yO1xcclxcbn07XFxyXFxuXFxyXFxuIExpZ2h0IExpZ2h0c1tOVU1fTElHSFRTXTtcXHJcXG5cXHJcXG4jaWZkZWYgVVNFX1RSSUFOR0xFU1xcclxcbnN0cnVjdCBUcmlhbmdsZVxcclxcbntcXHJcXG4gICB2ZWMzIHAwO1xcclxcbiAgIHZlYzMgcDE7XFxyXFxuICAgdmVjMyBwMjtcXHJcXG59O1xcclxcblxcclxcbnN0cnVjdCBWb2x1bWVcXHJcXG57XFxyXFxuICAgaW50IHN0YXJ0SW5kZXg7XFxyXFxuICAgaW50IG51bVRyaWFuZ2xlcztcXHJcXG4gICB2ZWMzIGJveE1pbjtcXHJcXG4gICB2ZWMzIGJveE1heDtcXHJcXG59O1xcclxcblxcclxcbi8vIFRoZSBmb2xsb3dpbmcgbGluZSBpcyByZXBsYWNlZCB3aXRoIGNvZGUgZ2VuZXJhdGVkIGluIEphdmFTY3JpcHRcXHJcXG5jb25zdCBpbnQgTlVNX1ZFUlRJQ0VTID0gPE5VTV9WRVJUSUNFUz47XFxyXFxuY29uc3QgaW50IE5VTV9WT0xVTUVTID0gPE5VTV9WT0xVTUVTPjtcXHJcXG5jb25zdCBpbnQgTlVNX1RSSUFOR0xFUyA9IDxOVU1fVFJJQU5HTEVTPjtcXHJcXG5cXHJcXG5sYXlvdXQoc3RkMTQwKSB1bmlmb3JtIE15VmVydGljZXNCbG9jayB7IHZlYzMgdmVydGljZXNbTlVNX1ZFUlRJQ0VTXTsgfTtcXHJcXG5cXHJcXG5zdHJ1Y3QgSVRyaWFuZ2xlXFxyXFxue1xcclxcbiAgIGludCBpMDtcXHJcXG4gICBpbnQgaTE7XFxyXFxuICAgaW50IGkyO1xcclxcbn07XFxyXFxuXFxyXFxubGF5b3V0KHN0ZDE0MCkgdW5pZm9ybSBNeVRyaWFuZ2xlc0Jsb2NrIHsgSVRyaWFuZ2xlIHRyaWFuZ2xlc1tOVU1fVFJJQU5HTEVTXTsgfTtcXHJcXG5UcmlhbmdsZSBnZXRUcmlhbmdsZShpbnQgaW5kZXgpXFxyXFxue1xcclxcbiAgIElUcmlhbmdsZSB0cmkgPSB0cmlhbmdsZXNbaW5kZXhdO1xcclxcbiAgIHZlYzMgcDAgPSB2ZXJ0aWNlc1t0cmkuaTBdO1xcclxcbiAgIHZlYzMgcDEgPSB2ZXJ0aWNlc1t0cmkuaTFdO1xcclxcbiAgIHZlYzMgcDIgPSB2ZXJ0aWNlc1t0cmkuaTJdO1xcclxcbiAgIHJldHVybiBUcmlhbmdsZShwMCwgcDEsIHAyKTtcXHJcXG59XFxyXFxuXFxyXFxuLy8gVGhlIGNlbnRyYWwgb2JqZWN0IGJlaW5nIHJlbmRlcmVkXFxyXFxuc3RydWN0IE9iamVjdFxcclxcbntcXHJcXG4gICBWb2x1bWUgdm9sdW1lc1tOVU1fVk9MVU1FU107XFxyXFxuICAgdmVjMyBib3hNaW47XFxyXFxuICAgdmVjMyBib3hNYXg7XFxyXFxufTtcXHJcXG5cXHJcXG51bmlmb3JtIE9iamVjdCBvYmplY3Q7XFxyXFxuXFxyXFxuYm9vbCBpbnRlcnNlY3RCb3goY29uc3QgdmVjMyBvcmlnaW4sIGNvbnN0IHZlYzMgcmF5LCBjb25zdCB2ZWMzIGJveE1pbiwgY29uc3QgdmVjMyBib3hNYXgpXFxyXFxue1xcclxcbiAgIHZlYzMgcmF5SW52ID0gMS4wIC8gcmF5O1xcclxcbiAgIHZlYzMgdGJvdCA9IHJheUludiAqIChib3hNaW4gLSBvcmlnaW4pO1xcclxcbiAgIHZlYzMgdHRvcCA9IHJheUludiAqIChib3hNYXggLSBvcmlnaW4pO1xcclxcbiAgIHZlYzMgdG1pbiA9IG1pbih0dG9wLCB0Ym90KTtcXHJcXG4gICB2ZWMzIHRtYXggPSBtYXgodHRvcCwgdGJvdCk7XFxyXFxuICAgdmVjMiB0ID0gbWF4KHRtaW4ueHgsIHRtaW4ueXopO1xcclxcbiAgIGZsb2F0IHQwID0gbWF4KHQueCwgdC55KTtcXHJcXG4gICB0ID0gbWluKHRtYXgueHgsIHRtYXgueXopO1xcclxcbiAgIGZsb2F0IHQxID0gbWluKHQueCwgdC55KTtcXHJcXG4gICByZXR1cm4gdDEgPiBtYXgodDAsIDAuMCk7XFxyXFxufVxcclxcblxcclxcbmJvb2wgaW50ZXJzZWN0Vm9sKGNvbnN0IHZlYzMgb3JpZ2luLCBjb25zdCB2ZWMzIHJheSwgVm9sdW1lIHZvbClcXHJcXG57XFxyXFxuICAgaWYgKHZvbC5udW1UcmlhbmdsZXMgPT0gMClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIGZhbHNlO1xcclxcbiAgIH1cXHJcXG5cXHJcXG4gICByZXR1cm4gaW50ZXJzZWN0Qm94KG9yaWdpbiwgcmF5LCB2b2wuYm94TWluLCB2b2wuYm94TWF4KTtcXHJcXG59XFxyXFxuXFxyXFxuYm9vbCBpbnRlcnNlY3RPYmooY29uc3QgdmVjMyBvcmlnaW4sIGNvbnN0IHZlYzMgcmF5LCBPYmplY3Qgb2JqZWN0KVxcclxcbntcXHJcXG4gICByZXR1cm4gaW50ZXJzZWN0Qm94KG9yaWdpbiwgcmF5LCBvYmplY3QuYm94TWluLCBvYmplY3QuYm94TWF4KTtcXHJcXG59XFxyXFxuXFxyXFxuLy8gTcO2bGxlcuKAk1RydW1ib3JlIHJheS10cmlhbmdsZSBpbnRlcnNlY3Rpb24gYWxnb3JpdGhtXFxyXFxuLy8gc291cmNlOiBodHRwOi8vYml0Lmx5LzJNeG5QTUdcXHJcXG5mbG9hdCBpbnRlcnNlY3RUcmlhbmdsZSh2ZWMzIG9yaWdpbiwgdmVjMyByYXksIFRyaWFuZ2xlIHRyaSlcXHJcXG57XFxyXFxuICAgdmVjMyBlZGdlMSwgZWRnZTIsIGgsIHMsIHE7XFxyXFxuICAgZmxvYXQgYSwgZiwgdSwgdjtcXHJcXG4gICBlZGdlMSA9IHRyaS5wMSAtIHRyaS5wMDtcXHJcXG4gICBlZGdlMiA9IHRyaS5wMiAtIHRyaS5wMDtcXHJcXG5cXHJcXG4gICBoID0gY3Jvc3MocmF5LCBlZGdlMik7XFxyXFxuICAgYSA9IGRvdChlZGdlMSwgaCk7XFxyXFxuICAgaWYgKGFicyhhKSA8IEVQU0lMT04pXFxyXFxuICAgICAgcmV0dXJuIElORklOSVRZO1xcclxcblxcclxcbiAgIGYgPSAxLjAgLyBhO1xcclxcbiAgIHMgPSBvcmlnaW4gLSB0cmkucDA7XFxyXFxuICAgdSA9IGYgKiBkb3QocywgaCk7XFxyXFxuICAgaWYgKHUgPCAwLjAgfHwgdSA+IDEuMClcXHJcXG4gICAgICByZXR1cm4gSU5GSU5JVFk7XFxyXFxuXFxyXFxuICAgcSA9IGNyb3NzKHMsIGVkZ2UxKTtcXHJcXG4gICB2ID0gZiAqIGRvdChyYXksIHEpO1xcclxcbiAgIGlmICh2IDwgMC4wIHx8ICh1ICsgdikgPiAxLjApXFxyXFxuICAgICAgcmV0dXJuIElORklOSVRZO1xcclxcblxcclxcbiAgIC8vIEF0IHRoaXMgc3RhZ2Ugd2UgY2FuIGNvbXB1dGUgdCB0byBmaW5kIG91dCB3aGVyZSB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IGlzIG9uIHRoZSBsaW5lLlxcclxcbiAgIGZsb2F0IHQgPSBmICogZG90KGVkZ2UyLCBxKTtcXHJcXG4gICBpZiAodCA8PSBFUFNJTE9OKSAvLyB0aGlzIG1lYW5zIHRoYXQgdGhlcmUgaXMgYSBsaW5lIGludGVyc2VjdGlvbiBidXQgbm90IGEgcmF5IGludGVyc2VjdGlvbi5cXHJcXG4gICAgICByZXR1cm4gSU5GSU5JVFk7XFxyXFxuXFxyXFxuICAgcmV0dXJuIHQ7IC8vIHJheSBpbnRlcnNlY3Rpb25cXHJcXG59XFxyXFxuXFxyXFxudmVjMyBub3JtYWxGb3JUcmlhbmdsZSh2ZWMzIG9yaWdpbiwgdmVjMyBoaXQsIGludCB0SW5kZXgpXFxyXFxue1xcclxcbiAgIFRyaWFuZ2xlIHRyaSA9IGdldFRyaWFuZ2xlKHRJbmRleCk7XFxyXFxuICAgdmVjMyBub3JtYWwgPSBjcm9zcyh0cmkucDEgLSB0cmkucDAsIHRyaS5wMiAtIHRyaS5wMCk7XFxyXFxuICAgbm9ybWFsID0gbm9ybWFsaXplKG5vcm1hbCk7XFxyXFxuICAgaWYgKGRvdChub3JtYWwsIG9yaWdpbiAtIGhpdCkgPiAwLjApXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBub3JtYWw7XFxyXFxuICAgfVxcclxcbiAgIGVsc2VcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIC1ub3JtYWw7XFxyXFxuICAgfVxcclxcbn1cXHJcXG4jZW5kaWZcXHJcXG5cXHJcXG5mbG9hdCBpbnRlcnNlY3RTcGhlcmUodmVjMyBvcmlnaW4sIHZlYzMgcmF5LCB2ZWMzIHNwaGVyZUNlbnRlciwgZmxvYXQgc3BoZXJlUmFkaXVzKVxcclxcbntcXHJcXG4gICB2ZWMzIHRvU3BoZXJlID0gb3JpZ2luIC0gc3BoZXJlQ2VudGVyO1xcclxcbiAgIGZsb2F0IGEgPSBkb3QocmF5LCByYXkpO1xcclxcbiAgIGZsb2F0IGIgPSAyLjAgKiBkb3QodG9TcGhlcmUsIHJheSk7XFxyXFxuICAgZmxvYXQgYyA9IGRvdCh0b1NwaGVyZSwgdG9TcGhlcmUpIC0gc3BoZXJlUmFkaXVzICogc3BoZXJlUmFkaXVzO1xcclxcbiAgIGZsb2F0IGRpc2NyaW1pbmFudCA9IGIgKiBiIC0gNC4wICogYSAqIGM7XFxyXFxuICAgaWYgKGRpc2NyaW1pbmFudCA+IDAuMClcXHJcXG4gICB7XFxyXFxuICAgICAgZmxvYXQgdDEgPSAoLWIgLSBzcXJ0KGRpc2NyaW1pbmFudCkpIC8gKDIuMCAqIGEpO1xcclxcbiAgICAgIGZsb2F0IHQyID0gKC1iICsgc3FydChkaXNjcmltaW5hbnQpKSAvICgyLjAgKiBhKTtcXHJcXG4gICAgICBpZiAodDEgPiAwLjApXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIHJldHVybiB0MTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZSBpZiAodDIgPiAwLjApXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIHJldHVybiB0MjtcXHJcXG4gICAgICB9XFxyXFxuICAgfVxcclxcbiAgIHJldHVybiBJTkZJTklUWTtcXHJcXG59XFxyXFxuXFxyXFxudmVjMyBub3JtYWxGb3JTcGhlcmUodmVjMyBoaXQsIHZlYzMgc3BoZXJlQ2VudGVyLCBmbG9hdCBzcGhlcmVSYWRpdXMpXFxyXFxue1xcclxcbiAgIHJldHVybiAoaGl0IC0gc3BoZXJlQ2VudGVyKSAvIHNwaGVyZVJhZGl1cztcXHJcXG59XFxyXFxuXFxyXFxuZmxvYXQgcmFuZG9tKHZlYzMgc2NhbGUsIGZsb2F0IHNlZWQpXFxyXFxue1xcclxcbiAgIHJldHVybiBmcmFjdChzaW4oZG90KGdsX0ZyYWdDb29yZC54eXogKyBzZWVkLCBzY2FsZSkpICogNDM3NTguNTQ1MyArIHNlZWQpO1xcclxcbn1cXHJcXG5cXHJcXG52ZWMzIGNvc2luZVdlaWdodGVkRGlyZWN0aW9uKGZsb2F0IHNlZWQsIHZlYzMgbm9ybWFsKVxcclxcbntcXHJcXG4gICBmbG9hdCB1ID0gcmFuZG9tKHZlYzMoMTIuOTg5OCwgNzguMjMzLCAxNTEuNzE4MiksIHNlZWQpO1xcclxcbiAgIGZsb2F0IHYgPSByYW5kb20odmVjMyg2My43MjY0LCAxMC44NzMsIDYyMy42NzM2KSwgc2VlZCk7XFxyXFxuICAgZmxvYXQgciA9IHNxcnQodSk7XFxyXFxuICAgZmxvYXQgYW5nbGUgPSA2LjI4MzE4NTMwNzE3OTU4NiAqIHY7XFxyXFxuICAgLy8gY29tcHV0ZSBiYXNpcyBmcm9tIG5vcm1hbFxcclxcbiAgIHZlYzMgc2RpciwgdGRpcjtcXHJcXG4gICBpZiAoYWJzKG5vcm1hbC54KSA8IC41KVxcclxcbiAgIHtcXHJcXG4gICAgICBzZGlyID0gY3Jvc3Mobm9ybWFsLCB2ZWMzKDEsIDAsIDApKTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZVxcclxcbiAgIHtcXHJcXG4gICAgICBzZGlyID0gY3Jvc3Mobm9ybWFsLCB2ZWMzKDAsIDEsIDApKTtcXHJcXG4gICB9XFxyXFxuICAgdGRpciA9IGNyb3NzKG5vcm1hbCwgc2Rpcik7XFxyXFxuICAgcmV0dXJuIHIgKiBjb3MoYW5nbGUpICogc2RpciArIHIgKiBzaW4oYW5nbGUpICogdGRpciArIHNxcnQoMS4gLSB1KSAqIG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxudmVjMyB1bmlmb3JtbHlSYW5kb21EaXJlY3Rpb24oZmxvYXQgc2VlZClcXHJcXG57XFxyXFxuICAgZmxvYXQgdSA9IHJhbmRvbSh2ZWMzKDEyLjk4OTgsIDc4LjIzMywgMTUxLjcxODIpLCBzZWVkKTtcXHJcXG4gICBmbG9hdCB2ID0gcmFuZG9tKHZlYzMoNjMuNzI2NCwgMTAuODczLCA2MjMuNjczNiksIHNlZWQpO1xcclxcbiAgIGZsb2F0IHogPSAxLjAgLSAyLjAgKiB1O1xcclxcbiAgIGZsb2F0IHIgPSBzcXJ0KDEuMCAtIHogKiB6KTtcXHJcXG4gICBmbG9hdCBhbmdsZSA9IDYuMjgzMTg1MzA3MTc5NTg2ICogdjtcXHJcXG4gICByZXR1cm4gdmVjMyhyICogY29zKGFuZ2xlKSwgciAqIHNpbihhbmdsZSksIHopO1xcclxcbn1cXHJcXG5cXHJcXG52ZWMzIHVuaWZvcm1seVJhbmRvbVZlY3RvcihmbG9hdCBzZWVkKVxcclxcbntcXHJcXG4gICByZXR1cm4gdW5pZm9ybWx5UmFuZG9tRGlyZWN0aW9uKHNlZWQpICogc3FydChyYW5kb20odmVjMygzNi43NTM5LCA1MC4zNjU4LCAzMDYuMjc1OSksIHNlZWQpKTtcXHJcXG59XFxyXFxuXFxyXFxuYm9vbCBpblNoYWRvdyh2ZWMzIG9yaWdpbiwgdmVjMyByYXksIGZsb2F0IHRMaWdodClcXHJcXG57XFxyXFxuICAgZmxvYXQgdEJhbGwgPSBpbnRlcnNlY3RTcGhlcmUob3JpZ2luLCByYXksIEJBTExfQ0VOVEVSLCB1QmFsbFJhZGl1cyk7XFxyXFxuICAgaWYgKHRCYWxsIDwgdExpZ2h0KVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gdHJ1ZTtcXHJcXG4gICB9XFxyXFxuXFxyXFxuI2lmZGVmIFVTRV9UUklBTkdMRVNcXHJcXG4gICBpZiAoaW50ZXJzZWN0T2JqKG9yaWdpbiwgcmF5LCBvYmplY3QpKVxcclxcbiAgIHtcXHJcXG4gICAgICBmb3IgKGludCBpID0gMDsgaSA8IE5VTV9WT0xVTUVTOyBpKyspXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIFZvbHVtZSB2b2wgPSBvYmplY3Qudm9sdW1lc1tpXTtcXHJcXG4gICAgICAgICBpZiAoaW50ZXJzZWN0Vm9sKG9yaWdpbiwgcmF5LCB2b2wpKVxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBmb3IgKGludCBpID0gdm9sLnN0YXJ0SW5kZXg7IGkgPCAodm9sLnN0YXJ0SW5kZXggKyB2b2wubnVtVHJpYW5nbGVzKTsgaSsrKVxcclxcbiAgICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgICBUcmlhbmdsZSB0cmkgPSBnZXRUcmlhbmdsZShpKTtcXHJcXG4gICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0VHJpYW5nbGUob3JpZ2luLCByYXksIHRyaSkgPCB0TGlnaHQpXFxyXFxuICAgICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xcclxcbiAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICB9XFxyXFxuI2VuZGlmXFxyXFxuXFxyXFxuICAgcmV0dXJuIGZhbHNlO1xcclxcbn1cXHJcXG5cXHJcXG4vLyBBbGwgY29tcG9uZW50cyBhcmUgaW4gdGhlIHJhbmdlIFsw4oCmMV0sIGluY2x1ZGluZyBodWUuXFxyXFxudmVjNCByZ2IyaHN2KHZlYzQgYylcXHJcXG57XFxyXFxuICAgdmVjNCBLID0gdmVjNCgwLjAsIC0xLjAgLyAzLjAsIDIuMCAvIDMuMCwgLTEuMCk7XFxyXFxuICAgdmVjNCBwID0gbWl4KHZlYzQoYy5iZywgSy53eiksIHZlYzQoYy5nYiwgSy54eSksIHN0ZXAoYy5iLCBjLmcpKTtcXHJcXG4gICB2ZWM0IHEgPSBtaXgodmVjNChwLnh5dywgYy5yKSwgdmVjNChjLnIsIHAueXp4KSwgc3RlcChwLngsIGMucikpO1xcclxcblxcclxcbiAgIGZsb2F0IGQgPSBxLnggLSBtaW4ocS53LCBxLnkpO1xcclxcbiAgIGZsb2F0IGUgPSAxLjBlLTEwO1xcclxcbiAgIHJldHVybiB2ZWM0KGFicyhxLnogKyAocS53IC0gcS55KSAvICg2LjAgKiBkICsgZSkpLCBkIC8gKHEueCArIGUpLCBxLngsIGMuYSk7XFxyXFxufVxcclxcblxcclxcbi8vIEFsbCBjb21wb25lbnRzIGFyZSBpbiB0aGUgcmFuZ2VbMOKApjFdLCBpbmNsdWRpbmcgaHVlLlxcclxcbnZlYzQgaHN2MnJnYih2ZWM0IGMpXFxyXFxue1xcclxcbiAgIHZlYzQgSyA9IHZlYzQoMS4wLCAyLjAgLyAzLjAsIDEuMCAvIDMuMCwgMy4wKTtcXHJcXG4gICB2ZWMzIHAgPSBhYnMoZnJhY3QoYy54eHggKyBLLnh5eikgKiA2LjAgLSBLLnd3dyk7XFxyXFxuICAgcmV0dXJuIHZlYzQoYy56ICogbWl4KEsueHh4LCBjbGFtcChwIC0gSy54eHgsIDAuMCwgMS4wKSwgYy55KSwgYy5hKTtcXHJcXG59XFxyXFxuXFxyXFxudmVjNCBzaGlmdFRlbXBlcmF0dXJlKHZlYzQgcmdiLCBmbG9hdCBkZWcsIGZsb2F0IHRpbnRTdHJlbmd0aClcXHJcXG57XFxyXFxuICAgdmVjNCBoc3YgPSByZ2IyaHN2KHJnYik7XFxyXFxuICAgaHN2LnggKz0gZGVnIC8gMzYwLjA7XFxyXFxuICAgdmVjNCBmdWxsVGludFJnYiA9IGhzdjJyZ2IoaHN2KTtcXHJcXG5cXHJcXG4gICByZXR1cm4gbWl4KHJnYiwgZnVsbFRpbnRSZ2IsIHRpbnRTdHJlbmd0aCk7XFxyXFxufVxcclxcblxcclxcbi8vIFRPRE8gbW92ZSB0byBhIGNvbW1vbiBmaWxlXFxyXFxuZmxvYXQgdG9HcmF5KHZlYzQgYylcXHJcXG57XFxyXFxuICAgLy8gbG90cyBvZiB3YXlzIHRvIGNvbnZlcnQgUkdCIHRvIGdyYXkgc2NhbGUuXFxyXFxuXFxyXFxuICAgLy8gc2ltcGxlIGF2ZXJhZ2luZyBtZXRob2RcXHJcXG4gICAvLyByZXR1cm4gKGMuciArIGMuZyArIGMuYikgLyAzLjA7XFxyXFxuXFxyXFxuICAgLy8gcmVsYXRpdmUgcGVyY2VwdHVhbCB2YWx1ZXNcXHJcXG4gICAvLyByZXR1cm4gMC4zICogYy5yICsgMC41OSAqIGMuZyArIDAuMTEgKiBjLmI7XFxyXFxuXFxyXFxuICAgLy8gbHVtaW5vc2l0eSBtZWFzdXJlXFxyXFxuICAgZmxvYXQgZ2FtbWEgPSAyLjI7XFxyXFxuICAgZmxvYXQgeSA9IDAuMjEyNiAqIHBvdyhjLnIsIGdhbW1hKSArIDAuNzE1MiAqIHBvdyhjLmcsIGdhbW1hKSArIC4wNzIyICogcG93KGMuYiwgZ2FtbWEpO1xcclxcbiAgIGZsb2F0IGwgPSAxMTYuMCAqIHBvdyh5LCAxLjAgLyAzLjApIC0gMTYuMDtcXHJcXG4gICByZXR1cm4gbCAvIDEwMC4wO1xcclxcbn1cXHJcXG5cXHJcXG52ZWM0IGNhbGN1bGF0ZUNvbG9yKHZlYzMgb3JpZ2luLCB2ZWMzIHJheSlcXHJcXG57XFxyXFxuICAgdmVjMyBhY2N1bXVsYXRlZENvbG9yID0gdmVjMygwLjApO1xcclxcbiAgIHZlYzMgY29sb3JNYXNrID0gdmVjMygxLjApO1xcclxcbiAgIHZlYzMgZXllID0gb3JpZ2luO1xcclxcbiAgIGJvb2wgb2JqSGl0ID0gZmFsc2U7XFxyXFxuICAgYm9vbCBvYmpTaGFkb3cgPSBmYWxzZTtcXHJcXG4gICBmbG9hdCBzcGVjdWxhckNvbnRyaWJ1dGlvbiA9IDAuMDtcXHJcXG5cXHJcXG4gICAvLyBtYWluIHJheXRyYWNpbmcgbG9vcFxcclxcbiAgIGZvciAoaW50IGJvdW5jZSA9IDA7IGJvdW5jZSA8IE1BWF9CT1VOQ0VTOyBib3VuY2UrKylcXHJcXG4gICB7XFxyXFxuICAgICAgLy8gY29tcHV0ZSB0aGUgaW50ZXJzZWN0aW9uIHdpdGggZXZlcnl0aGluZ1xcclxcbiAgICAgIGZsb2F0IHRCYWxsID0gaW50ZXJzZWN0U3BoZXJlKG9yaWdpbiwgcmF5LCBCQUxMX0NFTlRFUiwgdUJhbGxSYWRpdXMpO1xcclxcbiAgICAgIHZlYzMgc3VyZmFjZUNvbG9yID0gdmVjMygwLjUsIDAuNSwgMC41KTtcXHJcXG5cXHJcXG4gICAgICBmbG9hdCB0T2JqID0gSU5GSU5JVFk7XFxyXFxuICAgICAgaW50IHRJbmRleDtcXHJcXG4jaWZkZWYgVVNFX1RSSUFOR0xFU1xcclxcbiAgICAgIGlmIChpbnRlcnNlY3RPYmoob3JpZ2luLCByYXksIG9iamVjdCkpXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgTlVNX1ZPTFVNRVM7IGkrKylcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgVm9sdW1lIHZvbCA9IG9iamVjdC52b2x1bWVzW2ldO1xcclxcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3RWb2wob3JpZ2luLCByYXksIHZvbCkpXFxyXFxuICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSB2b2wuc3RhcnRJbmRleDsgaSA8ICh2b2wuc3RhcnRJbmRleCArIHZvbC5udW1UcmlhbmdsZXMpOyBpKyspXFxyXFxuICAgICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgICAgIFRyaWFuZ2xlIHRyaSA9IGdldFRyaWFuZ2xlKGkpO1xcclxcbiAgICAgICAgICAgICAgICAgIGZsb2F0IHRUcmkgPSBtaW4odE9iaiwgaW50ZXJzZWN0VHJpYW5nbGUob3JpZ2luLCByYXksIHRyaSkpO1xcclxcbiAgICAgICAgICAgICAgICAgIGlmICh0VHJpIDwgdE9iailcXHJcXG4gICAgICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgdE9iaiA9IHRUcmk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgdEluZGV4ID0gaTtcXHJcXG4gICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiNlbmRpZlxcclxcblxcclxcbiAgICAgIC8vIGlmIHRoZSBmaXJzdCByYXkgaGl0cyB0aGUgbGlnaHQsIHJldHVybiB0aGUgbGlnaHQgY29sb3IuIFRoaXNcXHJcXG4gICAgICAvLyBzaW11bGF0ZXMgZGlzcGxheWluZyB0aGUgbGlnaHRcXHJcXG4gICAgICBpZiAoYm91bmNlID09IDApXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgTlVNX0xJR0hUUzsgaSsrKVxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBmbG9hdCB0TGlnaHQgPSBpbnRlcnNlY3RTcGhlcmUob3JpZ2luLCByYXksIExpZ2h0c1tpXS5wb3MsIExpZ2h0c1tpXS5zaXplKTtcXHJcXG4gICAgICAgICAgICBpZiAodExpZ2h0IDwgdEJhbGwgJiYgdExpZ2h0IDwgdE9iailcXHJcXG4gICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgcmV0dXJuIHZlYzQoTGlnaHRzW2ldLmludGVuc2l0eSAqIExpZ2h0c1tpXS5jb2xvciwgMS4wKTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAvLyBmaW5kIHRoZSBjbG9zZXN0IGludGVyc2VjdGlvblxcclxcbiAgICAgIGZsb2F0IHREb21lID0gaW50ZXJzZWN0U3BoZXJlKG9yaWdpbiwgcmF5LCBET01FX0NFTlRFUiwgRE9NRV9SQURJVVMpO1xcclxcbiAgICAgIGZsb2F0IHRGbG9vciA9IElORklOSVRZO1xcclxcblxcclxcbiAgICAgIC8vIGNoZWNrIGZvciBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgZ3JvdW5kXFxyXFxuICAgICAgaWYgKHJheS55IDwgMC4wKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICAvLyBkaXN0YW5jZSB0byBmbG9vciA9IG51bSB1bml0IHZlY3RvcnMgcmVxdWlyZWQgdG8gcmVhY2ggdGhlIGZsb29yXFxyXFxuICAgICAgICAgdEZsb29yID0gLW9yaWdpbi55IC8gcmF5Lnk7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC8vIGZpbmQgdGhlIGNsb3Nlc3QgaGl0XFxyXFxuICAgICAgZmxvYXQgdCA9IG1pbihtaW4odERvbWUsIHRGbG9vciksIG1pbih0QmFsbCwgdE9iaikpO1xcclxcblxcclxcbiAgICAgIC8vIGluZm8gYWJvdXQgaGl0XFxyXFxuICAgICAgdmVjMyBoaXQgPSBvcmlnaW4gKyByYXkgKiB0O1xcclxcbiAgICAgIHZlYzMgbm9ybWFsO1xcclxcblxcclxcbiAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbm9ybWFsXFxyXFxuICAgICAgaWYgKHQgPT0gdEZsb29yKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICBzdXJmYWNlQ29sb3IgPSBGTE9PUl9DT0xPUjtcXHJcXG4gICAgICAgICBub3JtYWwgPSB2ZWMzKDAuMCwgMS4wLCAwLjApO1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBlbHNlIGlmICh0ID09IHRCYWxsKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICBzdXJmYWNlQ29sb3IgPSB2ZWMzKHVPYmpDb2xvcik7XFxyXFxuICAgICAgICAgbm9ybWFsID0gbm9ybWFsRm9yU3BoZXJlKGhpdCwgQkFMTF9DRU5URVIsIHVCYWxsUmFkaXVzKTtcXHJcXG5cXHJcXG4gICAgICAgICBpZiAoYm91bmNlID09IDApXFxyXFxuICAgICAgICAge1xcclxcbiAgICAgICAgICAgIG9iakhpdCA9IHRydWU7XFxyXFxuICAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4jaWZkZWYgVVNFX1RSSUFOR0xFU1xcclxcbiAgICAgIGVsc2UgaWYgKHQgPT0gdE9iailcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgc3VyZmFjZUNvbG9yID0gdU9iakNvbG9yO1xcclxcbiAgICAgICAgIG5vcm1hbCA9IG5vcm1hbEZvclRyaWFuZ2xlKG9yaWdpbiwgaGl0LCB0SW5kZXgpO1xcclxcblxcclxcbiAgICAgICAgIGlmIChib3VuY2UgPT0gMClcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgb2JqSGl0ID0gdHJ1ZTtcXHJcXG4gICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiNlbmRpZlxcclxcbiAgICAgIGVsc2UgaWYgKHQgPT0gdERvbWUpXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIHN1cmZhY2VDb2xvciA9IERPTUVfQ09MT1I7XFxyXFxuICAgICAgICAgbm9ybWFsID0gLW5vcm1hbEZvclNwaGVyZShoaXQsIERPTUVfQ0VOVEVSLCBET01FX1JBRElVUyk7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIGVsc2VcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIGNvbG9yTWFzayAqPSBzdXJmYWNlQ29sb3I7XFxyXFxuXFxyXFxuICAgICAgaWYgKGxlbmd0aChjb2xvck1hc2spIDwgMC4wMSlcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgTlVNX0xJR0hUUzsgaSsrKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICAvLyBjb21wdXRlIGRpZmZ1c2UgbGlnaHRpbmcgY29udHJpYnV0aW9uXFxyXFxuICAgICAgICAgdmVjMyB0b0xpZ2h0ID0gTGlnaHRzW2ldLnBvcyAtIGhpdDtcXHJcXG4gICAgICAgICB2ZWMzIHRvTGlnaHROID0gbm9ybWFsaXplKHRvTGlnaHQpO1xcclxcblxcclxcbiAgICAgICAgIC8vIHRyYWNlIGEgc2hhZG93IHJheSB0byB0aGUgbGlnaHRcXHJcXG4gICAgICAgICBpZiAoaW5TaGFkb3coaGl0ICsgbm9ybWFsICogT0ZGU0VULCB0b0xpZ2h0TiwgbGVuZ3RoKHRvTGlnaHQpKSA9PSBmYWxzZSlcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgLy8gZGlmZnVzZSBjb21wb25lbnRcXHJcXG4gICAgICAgICAgICBmbG9hdCBkaWZmdXNlID0gbWF4KDAuMCwgZG90KHRvTGlnaHROLCBub3JtYWwpKTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAvLyBzcGVjdWxhciBjb21wb25lbnRcXHJcXG4gICAgICAgICAgICB2ZWMzIHRvRXllID0gZXllIC0gaGl0O1xcclxcbiAgICAgICAgICAgIHZlYzMgbjJsID0gdG9MaWdodE47XFxyXFxuICAgICAgICAgICAgdmVjMyBuMmUgPSBub3JtYWxpemUodG9FeWUpO1xcclxcbiAgICAgICAgICAgIHZlYzMgYmlzZWN0b3IgPSAobjJsICsgbjJlKSAvIGxlbmd0aChuMmwgKyBuMmUpO1xcclxcbiAgICAgICAgICAgIGZsb2F0IHNwZWN1bGFyQ29lZmZpY2llbnQgPSAwLjU7XFxyXFxuICAgICAgICAgICAgZmxvYXQgc2hpbmluZXNzID0gMTAwLjA7XFxyXFxuICAgICAgICAgICAgZmxvYXQgc3BlY3VsYXIgPSBzcGVjdWxhckNvZWZmaWNpZW50ICogcG93KG1heCgwLjAsIGRvdChiaXNlY3Rvciwgbm9ybWFsKSksIHNoaW5pbmVzcyk7XFxyXFxuXFxyXFxuICAgICAgICAgICAgLy8gYXBwbHkgbGlnaHQgZmFsbCBvZmYgYXMgZGlzdGFuY2Ugc3F1YXJlcy4gVXNlIGEgbWluIHZhbHVlIGZvciB0aGVcXHJcXG4gICAgICAgICAgICAvLyBsaWdodCBzaXplIG90aGVyd2lzZSBmYWxsb2ZmIGlzIHRvbyByYXBpZFxcclxcbiAgICAgICAgICAgIGZsb2F0IHJhZGl1cyA9IG1heCgwLjc1LCBMaWdodHNbaV0uc2l6ZSk7XFxyXFxuICAgICAgICAgICAgZmxvYXQgZGlzdCA9IG1heCgxLjAsIChsZW5ndGgodG9MaWdodCkgLSByYWRpdXMpIC8gcmFkaXVzKTtcXHJcXG4gICAgICAgICAgICBmbG9hdCBsaWdodEludGVuc2l0eSA9IExpZ2h0c1tpXS5pbnRlbnNpdHkgLyAoZGlzdCAqIGRpc3QpO1xcclxcblxcclxcbiAgICAgICAgICAgIGFjY3VtdWxhdGVkQ29sb3IgKz0gY29sb3JNYXNrICogTGlnaHRzW2ldLmNvbG9yICogbGlnaHRJbnRlbnNpdHkgKiBkaWZmdXNlO1xcclxcblxcclxcbiAgICAgICAgICAgIC8vIFRPRE8gZGVmaW5lIGEgY29sb3IgbWFzayBmb3Igc3BlY3VsYXIgcmVmbGVjdGlvblxcclxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgYWNjdW11bGF0ZWRDb2xvciArPSBtaXgoc3VyZmFjZUNvbG9yLCBMaWdodHNbaV0uY29sb3IsIDAuOCkgKlxcclxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgbGlnaHRJbnRlbnNpdHkgKiBzcGVjdWxhcjtcXHJcXG4gICAgICAgICAgICBhY2N1bXVsYXRlZENvbG9yICs9XFxyXFxuICAgICAgICAgICAgICAgIChsZW5ndGgoc3VyZmFjZUNvbG9yKSAqIExpZ2h0c1tpXS5jb2xvcikgKiBsaWdodEludGVuc2l0eSAqIHNwZWN1bGFyO1xcclxcblxcclxcbiAgICAgICAgICAgIGlmIChib3VuY2UgPT0gMCAmJiBpID09IDApXFxyXFxuICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgIHNwZWN1bGFyQ29udHJpYnV0aW9uICs9IGxpZ2h0SW50ZW5zaXR5ICogc3BlY3VsYXI7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgIH1cXHJcXG4gICAgICAgICBlbHNlIGlmIChib3VuY2UgPT0gMCAmJiBpID09IDApXFxyXFxuICAgICAgICAge1xcclxcbiAgICAgICAgICAgIG9ialNoYWRvdyA9IHRydWU7XFxyXFxuICAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAvLyBjYWxjdWxhdGUgbmV4dCBvcmlnaW5cXHJcXG4gICAgICByYXkgPSBjb3NpbmVXZWlnaHRlZERpcmVjdGlvbih1UmFuZG9tICsgZmxvYXQoYm91bmNlKSwgbm9ybWFsKTtcXHJcXG5cXHJcXG4gICAgICBvcmlnaW4gPSBoaXQ7XFxyXFxuICAgfVxcclxcblxcclxcbiAgIGZsb2F0IGFscGhhID0gMS4wO1xcclxcbiAgIGlmIChvYmpIaXQpXFxyXFxuICAge1xcclxcbiAgICAgIGlmIChvYmpTaGFkb3cpXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIGFscGhhID0gdVNoYWRvd0FscGhhO1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBlbHNlXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIGFscGhhID0gdUxpZ2h0QWxwaGE7XFxyXFxuICAgICAgfVxcclxcbiAgICAgIGFscGhhICs9IGNsYW1wKHNwZWN1bGFyQ29udHJpYnV0aW9uLCAwLjAsIDEuMCk7XFxyXFxuICAgfVxcclxcblxcclxcbiAgIHZlYzQgc2NpZW5jZUNvbG9yID0gdmVjNChjbGFtcChhY2N1bXVsYXRlZENvbG9yLCAwLjAsIDEuMCksIGFscGhhKTtcXHJcXG4gICByZXR1cm4gc2NpZW5jZUNvbG9yO1xcclxcbiAgIC8qXFxyXFxuICAgaWYgKG9iakhpdClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIHZlYzQodG9BcnRpc3Qoc2NpZW5jZUNvbG9yKS5yZ2IsIGFscGhhKTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gc2NpZW5jZUNvbG9yO1xcclxcbiAgIH1cXHJcXG4gICAqL1xcclxcbn1cXHJcXG5cXHJcXG52b2lkIG1haW4oKVxcclxcbntcXHJcXG4gICB2ZWMzIHJhbmQgPSB1bmlmb3JtbHlSYW5kb21WZWN0b3IodVJhbmRvbSkgKiBMSUdIVF9TSVpFO1xcclxcblxcclxcbiAgIExpZ2h0c1swXS5pbnRlbnNpdHkgPSB1TGlnaHRJbnRlbnNpdHk7XFxyXFxuICAgTGlnaHRzWzBdLnNpemUgPSBMSUdIVF9TSVpFO1xcclxcbiAgIExpZ2h0c1swXS5wb3MgPSB1TGlnaHRQb3MgKyByYW5kO1xcclxcbiAgIExpZ2h0c1swXS5jb2xvciA9IHVMaWdodENvbG9yO1xcclxcblxcclxcbiAgIGZvciAoaW50IGkgPSAxOyBpIDwgTlVNX0xJR0hUUzsgaSsrKVxcclxcbiAgIHtcXHJcXG4gICAgICBmbG9hdCB4ID0gUkFESVVTICogc2luKDIuMCAqIFBJICogZmxvYXQoaSkgLyAoZmxvYXQoTlVNX0xJR0hUUykgLSAxLjApKSArIHJhbmQueDtcXHJcXG4gICAgICBmbG9hdCB5ID0gSEVJR0hUICsgcmFuZC55O1xcclxcbiAgICAgIGZsb2F0IHogPSBSQURJVVMgKiBjb3MoMi4wICogUEkgKiBmbG9hdChpKSAvIChmbG9hdChOVU1fTElHSFRTKSAtIDEuMCkpICsgcmFuZC56O1xcclxcblxcclxcbiAgICAgIExpZ2h0c1tpXS5pbnRlbnNpdHkgPSB1QW1iaWVudExpZ2h0SW50ZW5zaXR5O1xcclxcbiAgICAgIExpZ2h0c1tpXS5zaXplID0gMi4wICogTElHSFRfU0laRTtcXHJcXG4gICAgICBMaWdodHNbaV0ucG9zID0gdmVjMyh4LCB5LCB6KTtcXHJcXG4gICAgICBMaWdodHNbaV0uY29sb3IgPSBBTUJJRU5UX0NPTE9SO1xcclxcbiAgIH1cXHJcXG5cXHJcXG4gICAvLyBtZXJnZSB0aGUgbmV3IGNvbG9yIGludG8gdGhlIGV4aXN0aW5nIHRleHR1cmVcXHJcXG4gICB2ZWM0IHRleHR1cmVDb2xvciA9IHRleHR1cmUodVRleHR1cmUsIGdsX0ZyYWdDb29yZC54eSAvIHVUZXh0dXJlU2l6ZSk7XFxyXFxuICAgdmVjNCBuZXdDb2xvciA9IGNhbGN1bGF0ZUNvbG9yKHVFeWUsIGluaXRpYWxSYXkpO1xcclxcbiAgIGZsb2F0IHdlaWdodCA9ICh1U2FtcGxlIC8gKDEuMCArIHVTYW1wbGUpKTtcXHJcXG4gICBmcmFnQ29sb3IgPSBtaXgobmV3Q29sb3IsIHRleHR1cmVDb2xvciwgd2VpZ2h0KTtcXHJcXG59XCIiLCJleHBvcnQgZGVmYXVsdCBcIjxWRVJTSU9OPlxcclxcblxcclxcbiNkZWZpbmUgTk9USElOR1xcclxcbiNpZmRlZiBVU0VfVFJJQU5HTEVTXFxyXFxuI2RlZmluZSBFUzMwMFxcclxcbiNlbmRpZlxcclxcblxcclxcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcXHJcXG51bmlmb3JtIHZlYzMgdUV5ZSwgdVJheTAwLCB1UmF5MDEsIHVSYXkxMCwgdVJheTExO1xcclxcblxcclxcbiNpZmRlZiBFUzMwMFxcclxcbmluIHZlYzMgdmVydGV4O1xcclxcbm91dCB2ZWMzIGluaXRpYWxSYXk7XFxyXFxuI2Vsc2VcXHJcXG5hdHRyaWJ1dGUgdmVjMyB2ZXJ0ZXg7XFxyXFxudmFyeWluZyB2ZWMzIGluaXRpYWxSYXk7XFxyXFxuI2VuZGlmIFxcclxcblxcclxcbnZvaWQgbWFpbigpXFxyXFxue1xcclxcbiAgIHZlYzIgcGVyY2VudCA9IHZlcnRleC54eSAqIDAuNSArIDAuNTtcXHJcXG4gICBpbml0aWFsUmF5ID0gbWl4KG1peCh1UmF5MDAsIHVSYXkwMSwgcGVyY2VudC55KSwgbWl4KHVSYXkxMCwgdVJheTExLCBwZXJjZW50LnkpLCBwZXJjZW50LngpO1xcclxcbiAgIGdsX1Bvc2l0aW9uID0gdmVjNCh2ZXJ0ZXgsIDEuMCk7XFxyXFxufVxcclxcblwiIiwiZXhwb3J0IGRlZmF1bHQgXCJcXHJcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxyXFxudmFyeWluZyB2ZWMyIHRleENvb3JkO1xcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcclxcblxcclxcbnZvaWQgbWFpbigpIHsgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB0ZXhDb29yZCk7IH1cXHJcXG5cIiIsImV4cG9ydCBkZWZhdWx0IFwiXFxyXFxuYXR0cmlidXRlIHZlYzIgdmVydGV4O1xcclxcbnZhcnlpbmcgdmVjMiB0ZXhDb29yZDtcXHJcXG5cXHJcXG52b2lkIG1haW4oKVxcclxcbntcXHJcXG4gICB0ZXhDb29yZCA9IHZlcnRleC54eSAqIDAuNSArIDAuNTtcXHJcXG5cXHJcXG4gICBnbF9Qb3NpdGlvbiA9IHZlYzQodmVydGV4Lnh5LCAwLjAsIDEuMCk7XFxyXFxufVxcclxcblwiIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxyXFxuXFxyXFxuLy8gaW50ZXJwb2xhdGVkIHZhbHVlcyBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyXFxyXFxudmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxyXFxudmFyeWluZyB2ZWMzIHZWZXJ0ZXg7XFxyXFxudmFyeWluZyB2ZWMzIHZTaGFkb3dWZXJ0ZXg7XFxyXFxudmFyeWluZyB2ZWMzIHZNb2RlbFZlcnRleDtcXHJcXG5cXHJcXG51bmlmb3JtIG1hdDQgbW9kZWw7XFxyXFxudW5pZm9ybSB2ZWMzIHVFeWU7XFxyXFxudW5pZm9ybSBib29sIHVPcnRob2dyYXBoaWM7XFxyXFxuXFxyXFxuI2RlZmluZSBOT1JNQUwgMFxcclxcbiNkZWZpbmUgQ09OVE9VUl9QTEFORVMgMVxcclxcbiNkZWZpbmUgQ09OVE9VUl9WQUxVRVMgMlxcclxcbiNkZWZpbmUgTElHSFRfQU5EX1NIQURPVyAzXFxyXFxuI2RlZmluZSBISUdITElHSFRfVEVSTUlOQVRPUiA0XFxyXFxuI2RlZmluZSBISUdITElHSFRfU0hBRE9XIDVcXHJcXG4jZGVmaW5lIEVNUEhBU0laRV9ISUdITElHSFRTIDZcXHJcXG5cXHJcXG51bmlmb3JtIGludCB1UmVuZGVyTW9kZTtcXHJcXG5cXHJcXG4vLyB0aGVzZSBhcmUgdmFsdWUgYmV0d2VlbiAwLTFcXHJcXG51bmlmb3JtIGZsb2F0IHVEaWZmdXNlSW50ZW5zaXR5O1xcclxcbnVuaWZvcm0gZmxvYXQgdUFtYmllbnRJbnRlbnNpdHk7XFxyXFxudW5pZm9ybSBmbG9hdCB1U3BlY3VsYXJJbnRlbnNpdHk7XFxyXFxuXFxyXFxuLy8gdGhlIGNvbG9ycyB3ZSB1c2UgdG8gcmVwcmVzZW50IG91ciBsaWdodGVzdCBhbmQgZGFya2VzdCB2YWx1ZXNcXHJcXG51bmlmb3JtIHZlYzMgdVdoaXRlQ29sb3I7XFxyXFxudW5pZm9ybSB2ZWMzIHVCbGFja0NvbG9yO1xcclxcblxcclxcbnVuaWZvcm0gdmVjMyB1TGlnaHRQb3M7XFxyXFxudW5pZm9ybSBib29sIHVQb2ludExpZ2h0O1xcclxcbnVuaWZvcm0gZmxvYXQgdUZhbGxvZmY7XFxyXFxudW5pZm9ybSBmbG9hdCB1TGlnaHRJbnRlbnNpdHk7XFxyXFxudW5pZm9ybSBmbG9hdCB1TGlnaHRJbnRlbnNpdHlBdFNvdXJjZTtcXHJcXG5cXHJcXG51bmlmb3JtIGJvb2wgdVVzZVNoYWRvd3M7XFxyXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNoYWRvd1RleHR1cmU7XFxyXFxuXFxyXFxudW5pZm9ybSB2ZWMzIHVGbG9vckNlbnRlcjtcXHJcXG51bmlmb3JtIGZsb2F0IHVGbG9vclJhZGl1cztcXHJcXG51bmlmb3JtIGJvb2wgdVJlbmRlcmluZ0Zsb29yO1xcclxcbnVuaWZvcm0gYm9vbCB1U2hvd0dyaWQ7XFxyXFxuI2RlZmluZSBNQVhfQ09OVE9VUlMgOVxcclxcbnVuaWZvcm0gaW50IHVOdW1Db250b3VycztcXHJcXG51bmlmb3JtIHZlYzMgdUNvbnRvdXJDb2xvcnNbOV07XFxyXFxudW5pZm9ybSBmbG9hdCB1Q29udG91ckFuZ2xlc1s5XTtcXHJcXG51bmlmb3JtIGJvb2wgdVNob3dIaWdobGlnaHRzO1xcclxcbnVuaWZvcm0gZmxvYXQgdVNoaW5pbmVzcztcXHJcXG5cXHJcXG4vLyBGb3IgY29udG91ciBzaGFkaW5nLCB0aGUgbWluaW11bSBzcGVjdWxhciBjb250cmlidXRpb24gcmVxdWlyZWQgdG9cXHJcXG4vLyBzaG93IHNvbWV0aGluZyBhcyBhIGhpZ2hsaWdodFxcclxcbmNvbnN0IGZsb2F0IFNQRUNVTEFSX1RIUkVTSE9MRCA9IDAuMDY7XFxyXFxuXFxyXFxuYm9vbCB1U2hvd1Rlcm1pbmF0b3IgPSB0cnVlO1xcclxcblxcclxcbmJvb2wgaW5fc2hhZG93KClcXHJcXG57XFxyXFxuICAgaWYgKHVVc2VTaGFkb3dzID09IGZhbHNlKVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gZmFsc2U7XFxyXFxuICAgfVxcclxcblxcclxcbiAgIC8vIFRoZSB2ZXJ0ZXggbG9jYXRpb24gcmVuZGVyZWQgZnJvbSB0aGUgbGlnaHQgc291cmNlIGlzIGFsbW9zdCBpbiBOb3JtYWxpemVkXFxyXFxuICAgLy8gRGV2aWNlIENvb3JkaW5hdGVzIChOREMpLCBidXQgdGhlIHBlcnNwZWN0aXZlIGRpdmlzaW9uIGhhcyBub3QgYmVlblxcclxcbiAgIC8vIHBlcmZvcm1lZCB5ZXQuIFBlcmZvcm0gdGhlIHBlcnNwZWN0aXZlIGRpdmlkZS4gVGhlICh4LHkseikgdmVydGV4IGxvY2F0aW9uXFxyXFxuICAgLy8gY29tcG9uZW50cyBhcmUgbm93IGVhY2ggaW4gdGhlIHJhbmdlIFstMS4wLCsxLjBdLlxcclxcbiAgIC8vIHZlYzMgdmVydGV4X3JlbGF0aXZlX3RvX2xpZ2h0ID0gdl9WZXJ0ZXhfcmVsYXRpdmVfdG9fbGlnaHQueHl6IC8gdl9WZXJ0ZXhfcmVsYXRpdmVfdG9fbGlnaHQudztcXHJcXG4gICB2ZWMzIHZlcnRleCA9IHZTaGFkb3dWZXJ0ZXg7XFxyXFxuXFxyXFxuICAgLy8gQ29udmVydCB0aGUgdGhlIHZhbHVlcyBmcm9tIE5vcm1hbGl6ZWQgRGV2aWNlIENvb3JkaW5hdGVzIChyYW5nZSBbLTEuMCwrMS4wXSlcXHJcXG4gICAvLyB0byB0aGUgcmFuZ2UgWzAuMCwxLjBdLiBUaGlzIG1hcHBpbmcgaXMgZG9uZSBieSBzY2FsaW5nXFxyXFxuICAgLy8gdGhlIHZhbHVlcyBieSAwLjUsIHdoaWNoIGdpdmVzIHZhbHVlcyBpbiB0aGUgcmFuZ2UgWy0wLjUsKzAuNV0gYW5kIHRoZW5cXHJcXG4gICAvLyBzaGlmdGluZyB0aGUgdmFsdWVzIGJ5ICswLjUuXFxyXFxuICAgdmVydGV4ID0gdmVydGV4ICogMC41ICsgMC41O1xcclxcblxcclxcbiAgIC8vIEdldCB0aGUgeiB2YWx1ZSBvZiB0aGlzIGZyYWdtZW50IGluIHJlbGF0aW9uc2hpcCB0byB0aGUgbGlnaHQgc291cmNlLlxcclxcbiAgIC8vIFRoaXMgdmFsdWUgd2FzIHN0b3JlZCBpbiB0aGUgc2hhZG93IG1hcCAoZGVwdGggYnVmZmVyIG9mIHRoZSBmcmFtZSBidWZmZXIpXFxyXFxuICAgLy8gd2hpY2ggd2FzIHBhc3NlZCB0byB0aGUgc2hhZGVyIGFzIGEgdGV4dHVyZSBtYXAuXFxyXFxuICAgLy8gdmVjNCB0ZXh0dXJlVmFsdWUgPSB0ZXh0dXJlMkQodVNoYWRvd1NhbXBsZXIsIHZlcnRleC54eSk7XFxyXFxuXFxyXFxuICAgLy8gVGhlIHRleHR1cmUgbWFwIGNvbnRhaW5zIGEgc2luZ2xlIGRlcHRoIHZhbHVlIGZvciBlYWNoIHBpeGVsLiBIb3dldmVyLFxcclxcbiAgIC8vIHRoZSB0ZXh0dXJlMkQgc2FtcGxlciBhbHdheXMgcmV0dXJucyBhIGNvbG9yIGZyb20gYSB0ZXh0dXJlLiBGb3IgYVxcclxcbiAgIC8vIGdsLkRFUFRIX0NPTVBPTkVOVCB0ZXh0dXJlLCB0aGUgY29sb3IgY29udGFpbnMgdGhlIGRlcHRoIHZhbHVlIGluXFxyXFxuICAgLy8gZWFjaCBvZiB0aGUgY29sb3IgY29tcG9uZW50cy4gSWYgdGhlIHZhbHVlIHdhcyBkLCB0aGVuIHRoZSBjb2xvciByZXR1cm5lZFxcclxcbiAgIC8vIGlzIChkLGQsZCwxKS4gVGhpcyBpcyBhIFxcXCJjb2xvclxcXCIgKGRlcHRoKSB2YWx1ZSBiZXR3ZWVuIFswLjAsKzEuMF0uXFxyXFxuICAgZmxvYXQgc2hhZG93bWFwX2Rpc3RhbmNlID0gdGV4dHVyZTJEKHVTaGFkb3dUZXh0dXJlLCB2ZXJ0ZXgueHkpLnI7XFxyXFxuXFxyXFxuICAgLy8gVGVzdCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGlzIGZyYWdtZW50IGFuZCB0aGUgbGlnaHQgc291cmNlIGFzXFxyXFxuICAgLy8gY2FsY3VsYXRlZCB1c2luZyB0aGUgc2hhZG93bWFwIHRyYW5zZm9ybWF0aW9uICh2ZXJ0ZXhfcmVsYXRpdmVfdG9fbGlnaHQueikgYW5kXFxyXFxuICAgLy8gdGhlIHNtYWxsZXN0IGRpc3RhbmNlIGJldHdlZW4gdGhlIGNsb3Nlc3QgZnJhZ21lbnQgdG8gdGhlIGxpZ2h0IHNvdXJjZVxcclxcbiAgIC8vIGZvciB0aGlzIGxvY2F0aW9uLCBhcyBzdG9yZWQgaW4gdGhlIHNoYWRvd21hcC4gV2hlbiB0aGUgY2xvc2VzdFxcclxcbiAgIC8vIGRpc3RhbmNlIHRvIHRoZSBsaWdodCBzb3VyY2Ugd2FzIHNhdmVkIGluIHRoZSBzaGFkb3dtYXAsIHNvbWVcXHJcXG4gICAvLyBwcmVjaXNpb24gd2FzIGxvc3QuIFRoZXJlZm9yZSB3ZSBuZWVkIGEgc21hbGwgdG9sZXJhbmNlIGZhY3RvciB0b1xcclxcbiAgIC8vIGNvbXBlbnNhdGUgZm9yIHRoZSBsb3N0IHByZWNpc2lvbi5cXHJcXG4gICBmbG9hdCB0b2wgPSAwLjAwMTtcXHJcXG4gICBpZiAodmVydGV4LnogPD0gc2hhZG93bWFwX2Rpc3RhbmNlICsgdG9sKVxcclxcbiAgIHtcXHJcXG4gICAgICAvLyBUaGlzIHN1cmZhY2UgcmVjZWl2ZXMgZnVsbCBsaWdodCBiZWNhdXNlIGl0IGlzIHRoZSBjbG9zZXN0IHN1cmZhY2VcXHJcXG4gICAgICAvLyB0byB0aGUgbGlnaHQuXFxyXFxuICAgICAgcmV0dXJuIGZhbHNlO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIC8vIFRoaXMgc3VyZmFjZSBpcyBpbiBhIHNoYWRvdyBiZWNhdXNlIHRoZXJlIGlzIGEgY2xvc2VyIHN1cmZhY2UgdG9cXHJcXG4gICAgICAvLyB0aGUgbGlnaHQgc291cmNlLlxcclxcbiAgICAgIHJldHVybiB0cnVlO1xcclxcbiAgIH1cXHJcXG59XFxyXFxuXFxyXFxudmVjNCB2YWwyQ29sb3IoZmxvYXQgdmFsKSB7IHJldHVybiB2ZWM0KG1peCh1QmxhY2tDb2xvciwgdVdoaXRlQ29sb3IsIHZhbCksIDEuMCk7IH1cXHJcXG5cXHJcXG52ZWM0IHZhbDJDb250b3VyQ29sb3IoZmxvYXQgdmFsKVxcclxcbntcXHJcXG4gICB2YWwgPSBjbGFtcCh2YWwsIDAuMCwgMS4wKTtcXHJcXG4gICBmb3IgKGludCBpID0gMDsgaSA8IE1BWF9DT05UT1VSUzsgaSsrKVxcclxcbiAgIHtcXHJcXG4gICAgICBmbG9hdCBtYXggPSAoZmxvYXQoaSkgKyAxLjApIC8gZmxvYXQodU51bUNvbnRvdXJzKTtcXHJcXG4gICAgICBpZiAodmFsIDw9IG1heClcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgcmV0dXJuIHZlYzQodUNvbnRvdXJDb2xvcnNbKE1BWF9DT05UT1VSUyAtIDEpIC0gaV0sIDEuMCk7XFxyXFxuICAgICAgfVxcclxcbiAgIH1cXHJcXG59XFxyXFxuXFxyXFxuZmxvYXQgZ2V0RGlmZnVzZSh2ZWMzIG5vcm1hbCwgdmVjMyB0b0xpZ2h0KVxcclxcbntcXHJcXG4gICBmbG9hdCB2RG90ID0gY2xhbXAoZG90KG5vcm1hbCwgdG9MaWdodCksIDAuMCwgMS4wKTtcXHJcXG4gICBmbG9hdCBkaWZmdXNlID0gdURpZmZ1c2VJbnRlbnNpdHkgKiB2RG90O1xcclxcbiAgIHJldHVybiBkaWZmdXNlO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBnZXRTcGVjdWxhcih2ZWMzIG5vcm1hbCwgdmVjMyB0b0xpZ2h0LCB2ZWMzIHRvRXllKVxcclxcbntcXHJcXG4gICBmbG9hdCBzcGVjdWxhciA9IDAuMDtcXHJcXG5cXHJcXG4gICBpZiAodVNob3dIaWdobGlnaHRzKVxcclxcbiAgIHtcXHJcXG4gICAgICB2ZWMzIHJlZmxlY3Rpb24gPSBub3JtYWxpemUoMi4wICogZG90KG5vcm1hbCwgdG9MaWdodCkgKiBub3JtYWwgLSB0b0xpZ2h0KTtcXHJcXG4gICAgICBmbG9hdCBjb3NBbmdsZSA9IGNsYW1wKGRvdChyZWZsZWN0aW9uLCB0b0V5ZSksIDAuMCwgMS4wKTsgLy8gY2xhbXAgdG8gYXZvaWQgdmFsdWVzID4gOTAgZGVnXFxyXFxuICAgICAgc3BlY3VsYXIgPSB1U3BlY3VsYXJJbnRlbnNpdHkgKiAodVNoaW5pbmVzcyAvIDE1LjApICogcG93KGNvc0FuZ2xlLCB1U2hpbmluZXNzKTtcXHJcXG4gICB9XFxyXFxuXFxyXFxuICAgcmV0dXJuIHNwZWN1bGFyO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBnZXREaXN0YW5jZVB0VG9QbGFuZSh2ZWMzIHB0LCB2ZWMzIHBsYW5lKVxcclxcbntcXHJcXG4gICBmbG9hdCBhID0gcGxhbmUueDtcXHJcXG4gICBmbG9hdCBiID0gcGxhbmUueTtcXHJcXG4gICBmbG9hdCBjID0gcGxhbmUuejtcXHJcXG4gICBmbG9hdCBkID0gLShhICogYSArIGIgKiBiICsgYyAqIGMpO1xcclxcblxcclxcbiAgIHJldHVybiAtKGEgKiBwdC54ICsgYiAqIHB0LnkgKyBjICogcHQueiArIGQpIC8gc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBnZXRMaWdodERpc3RhbmNlKHZlYzMgbGlnaHRQb3MpXFxyXFxue1xcclxcbiAgIGlmICh1UG9pbnRMaWdodClcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIGxlbmd0aChsaWdodFBvcyAtIHZWZXJ0ZXgpO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiBnZXREaXN0YW5jZVB0VG9QbGFuZSh2VmVydGV4LCBsaWdodFBvcyk7XFxyXFxuICAgfVxcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBnZXRWYWx1ZUZyb21MaWdodCh2ZWMzIG5vcm1hbCwgdmVjMyB0b0xpZ2h0LCB2ZWMzIHRvRXllKVxcclxcbntcXHJcXG4gICBmbG9hdCBkaWZmdXNlID0gZ2V0RGlmZnVzZShub3JtYWwsIHRvTGlnaHQpO1xcclxcbiAgIGZsb2F0IHNwZWN1bGFyID0gZ2V0U3BlY3VsYXIobm9ybWFsLCB0b0xpZ2h0LCB0b0V5ZSk7XFxyXFxuXFxyXFxuICAgZmxvYXQgZmFsbG9mZiA9IDEuMDtcXHJcXG4gICBpZiAodUZhbGxvZmYgPiAwLjApXFxyXFxuICAge1xcclxcbiAgICAgIGZsb2F0IHZEb3QgPSBkb3Qobm9ybWFsLCB0b0xpZ2h0KTtcXHJcXG5cXHJcXG4gICAgICBmbG9hdCB2RGlzdGFuY2UgPSBnZXRMaWdodERpc3RhbmNlKHVMaWdodFBvcyk7XFxyXFxuICAgICAgZmFsbG9mZiA9IHVMaWdodEludGVuc2l0eUF0U291cmNlIC8gKHZEaXN0YW5jZSAqIHZEaXN0YW5jZSk7XFxyXFxuXFxyXFxuICAgICAgLy8gdGhlIGxpZ2h0IG9ubHkgc2hpbmVzIG9uZSB3YXlcXHJcXG4gICAgICBpZiAodkRpc3RhbmNlIDwgMC4wKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICBkaWZmdXNlID0gMC4wO1xcclxcbiAgICAgICAgIHNwZWN1bGFyID0gMC4wO1xcclxcbiAgICAgIH1cXHJcXG4gICB9XFxyXFxuXFxyXFxuICAgcmV0dXJuIHVBbWJpZW50SW50ZW5zaXR5ICsgdUxpZ2h0SW50ZW5zaXR5ICogZmFsbG9mZiAqIChkaWZmdXNlICsgc3BlY3VsYXIpO1xcclxcbn1cXHJcXG5cXHJcXG52ZWM0IGdldENvbnRvdXJQbGFuZUNvbG9yKGZsb2F0IHZEb3QsIHZlYzMgbm9ybWFsLCB2ZWMzIHRvTGlnaHQsIHZlYzMgdG9FeWUpXFxyXFxue1xcclxcbiAgIGZsb2F0IHNwZWN1bGFyID0gZ2V0U3BlY3VsYXIobm9ybWFsLCB0b0xpZ2h0LCB0b0V5ZSk7XFxyXFxuICAgaWYgKHNwZWN1bGFyID4gU1BFQ1VMQVJfVEhSRVNIT0xEKVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gdmFsMkNvbG9yKHVBbWJpZW50SW50ZW5zaXR5ICsgdURpZmZ1c2VJbnRlbnNpdHkgKyB1U3BlY3VsYXJJbnRlbnNpdHkpO1xcclxcbiAgIH1cXHJcXG5cXHJcXG4gICBmbG9hdCBhbmdsZSA9ICgxODAuMCAvIDMuMTQxNTkyNikgKiBhY29zKHZEb3QpO1xcclxcbiAgIGlmIChhbmdsZSA+IDkwLjApXFxyXFxuICAge1xcclxcbiAgICAgIHJldHVybiB2YWwyQ29sb3IodUFtYmllbnRJbnRlbnNpdHkpO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgTUFYX0NPTlRPVVJTOyBpKyspXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIGlmIChpIDwgdU51bUNvbnRvdXJzKVxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBpZiAoYW5nbGUgPCB1Q29udG91ckFuZ2xlc1tpXSlcXHJcXG4gICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgcmV0dXJuIHZlYzQodUNvbnRvdXJDb2xvcnNbaV0sIDEuMCk7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgfVxcclxcbn1cXHJcXG5cXHJcXG52ZWM0IGdldENvbnRvdXJWYWx1ZUNvbG9yKGZsb2F0IHZEb3QsIHZlYzMgbm9ybWFsLCB2ZWMzIHRvTGlnaHQsIHZlYzMgdG9FeWUpXFxyXFxue1xcclxcbiAgIGZsb2F0IHNwZWN1bGFyID0gZ2V0U3BlY3VsYXIobm9ybWFsLCB0b0xpZ2h0LCB0b0V5ZSk7XFxyXFxuICAgaWYgKHNwZWN1bGFyID4gU1BFQ1VMQVJfVEhSRVNIT0xEKVxcclxcbiAgIHtcXHJcXG4gICAgICByZXR1cm4gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xcclxcbiAgIH1cXHJcXG5cXHJcXG4gICBmbG9hdCB2YWwgPSBnZXRWYWx1ZUZyb21MaWdodChub3JtYWwsIHRvTGlnaHQsIHRvRXllKTtcXHJcXG4gICByZXR1cm4gdmFsMkNvbnRvdXJDb2xvcih2YWwpO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCByb3VuZChmbG9hdCB2YWwpIHsgcmV0dXJuIGZsb29yKHZhbCArIDAuNSk7IH1cXHJcXG5cXHJcXG5mbG9hdCBnZXRGbG9vckdyaWRBZGp1c3RtZW50KGZsb2F0IGRpc3QpXFxyXFxue1xcclxcbiAgIGZsb2F0IHRoaWNrbmVzcyA9IDAuMDAxO1xcclxcbiAgIGZsb2F0IGFsaWFzID0gMC4wMDU7XFxyXFxuXFxyXFxuICAgaWYgKGRpc3QgPCAodGhpY2tuZXNzICsgYWxpYXMpKVxcclxcbiAgIHtcXHJcXG4gICAgICBpZiAoZGlzdCA8IHRoaWNrbmVzcylcXHJcXG4gICAgICB7XFxyXFxuICAgICAgICAgcmV0dXJuIDAuNTtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICByZXR1cm4gMC41ICogKDEuMCArIChkaXN0IC0gdGhpY2tuZXNzKSAvIGFsaWFzKTtcXHJcXG4gICAgICB9XFxyXFxuICAgfVxcclxcbiAgIGVsc2VcXHJcXG4gICB7XFxyXFxuICAgICAgcmV0dXJuIDEuMDtcXHJcXG4gICB9XFxyXFxufVxcclxcblxcclxcbnZlYzQgZ2V0Rmxvb3JDb2xvcihib29sIGluU2hhZG93LCB2ZWMzIG5vcm1hbCwgdmVjMyB0b0xpZ2h0LCB2ZWMzIHRvRXllKVxcclxcbntcXHJcXG4gICB2ZWM0IGZyYWdDb2xvcjtcXHJcXG5cXHJcXG4gICAvLyBncmFkaWF0ZSBvdXQgdGhlIGJhY2tncm91bmQgZnJvbSBoYWxmIHRyYW5zcGFyZW50IHRvIGZ1bGwgdHJhbnNwYXJlbmN5XFxyXFxuICAgdmVjMyBjZW50ZXIgPSAobW9kZWwgKiB2ZWM0KHVGbG9vckNlbnRlciwgMS4wKSkueHl6O1xcclxcbiAgIGZsb2F0IGRpc3QgPSBsZW5ndGgoY2VudGVyIC0gdlZlcnRleCk7XFxyXFxuICAgZmxvYXQgYSA9IDAuNSAqICgxLjAgLSBkaXN0IC8gdUZsb29yUmFkaXVzKTtcXHJcXG5cXHJcXG4gICBmbG9hdCBncmlkRmFjdG9yID0gMS4wO1xcclxcbiAgIGlmICh1U2hvd0dyaWQpXFxyXFxuICAge1xcclxcbiAgICAgIGZsb2F0IGNpcmNsZSA9IGdldEZsb29yR3JpZEFkanVzdG1lbnQoYWJzKGRpc3QgLSByb3VuZChkaXN0KSkpO1xcclxcbiAgICAgIGZsb2F0IHggPSBnZXRGbG9vckdyaWRBZGp1c3RtZW50KGFicyh2TW9kZWxWZXJ0ZXgueCAtIHJvdW5kKHZNb2RlbFZlcnRleC54KSkpO1xcclxcbiAgICAgIGZsb2F0IHogPSBnZXRGbG9vckdyaWRBZGp1c3RtZW50KGFicyh2TW9kZWxWZXJ0ZXgueiAtIHJvdW5kKHZNb2RlbFZlcnRleC56KSkpO1xcclxcblxcclxcbiAgICAgIGdyaWRGYWN0b3IgPSBtaW4oY2lyY2xlLCBtaW4oeCwgeikpO1xcclxcbiAgIH1cXHJcXG5cXHJcXG4gICBmbG9hdCB2YWwgPSAwLjA7XFxyXFxuICAgaWYgKGluU2hhZG93KVxcclxcbiAgIHtcXHJcXG4gICAgICB2YWwgPSB1QW1iaWVudEludGVuc2l0eTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZVxcclxcbiAgIHtcXHJcXG4gICAgICB2YWwgPSBnZXRWYWx1ZUZyb21MaWdodChub3JtYWwsIHRvTGlnaHQsIHRvRXllKTtcXHJcXG4gICB9XFxyXFxuXFxyXFxuICAgZnJhZ0NvbG9yID0gdmFsMkNvbG9yKGdyaWRGYWN0b3IgKiB2YWwpO1xcclxcbiAgIGZyYWdDb2xvci5hID0gYTtcXHJcXG5cXHJcXG4gICByZXR1cm4gZnJhZ0NvbG9yO1xcclxcbn1cXHJcXG5cXHJcXG52b2lkIG1haW4oKVxcclxcbntcXHJcXG4gICB2ZWMzIHRvTGlnaHQ7XFxyXFxuICAgaWYgKHVQb2ludExpZ2h0KVxcclxcbiAgIHtcXHJcXG4gICAgICB0b0xpZ2h0ID0gbm9ybWFsaXplKHVMaWdodFBvcyAtIHZWZXJ0ZXgpO1xcclxcbiAgIH1cXHJcXG4gICBlbHNlXFxyXFxuICAge1xcclxcbiAgICAgIHRvTGlnaHQgPSBub3JtYWxpemUodUxpZ2h0UG9zKTtcXHJcXG4gICB9XFxyXFxuXFxyXFxuICAgYm9vbCBpblNoYWRvdyA9IGluX3NoYWRvdygpO1xcclxcblxcclxcbiAgIHZlYzMgdG9FeWU7XFxyXFxuICAgaWYgKHVPcnRob2dyYXBoaWMpXFxyXFxuICAge1xcclxcbiAgICAgIHRvRXllID0gdmVjMygwLjAsIDAuMCwgMS4wKTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZVxcclxcbiAgIHtcXHJcXG4gICAgICB0b0V5ZSA9IG5vcm1hbGl6ZSh1RXllIC0gdlZlcnRleCk7XFxyXFxuICAgfVxcclxcblxcclxcbiAgIHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKHZOb3JtYWwpOyAvLyB2Tm9ybWFsIGlzIGludGVycG9sYXRlZCBhbmQgbm9sb25nZXIgbm9ybWFsXFxyXFxuXFxyXFxuICAgLy8gc3dhcCBub3JtYWxzIGZvciBiYWNrIGZhY2luZyB0cmlhbmdsZXNcXHJcXG4gICBpZiAoZG90KG5vcm1hbCwgdG9FeWUpIDwgMC4wKVxcclxcbiAgIHtcXHJcXG4gICAgICBub3JtYWwgPSAtbm9ybWFsO1xcclxcbiAgIH1cXHJcXG5cXHJcXG4gICAvLyBjb21wdXRlIGRpZmZ1c2UgY29udHJpYnV0aW9uID0gY29zIG9mIGFuZ2xlIGJldHdlZW4gdGhlIHZlY3RvcnMgKGRvdCBwcm9kdWN0KVxcclxcbiAgIGZsb2F0IHZEb3QgPSBkb3Qobm9ybWFsLCB0b0xpZ2h0KTtcXHJcXG5cXHJcXG4gICB2ZWM0IGZyYWdDb2xvcjtcXHJcXG4gICBpZiAodVJlbmRlcmluZ0Zsb29yKVxcclxcbiAgIHtcXHJcXG4gICAgICBmcmFnQ29sb3IgPSBnZXRGbG9vckNvbG9yKGluU2hhZG93LCBub3JtYWwsIHRvTGlnaHQsIHRvRXllKTtcXHJcXG4gICB9XFxyXFxuICAgZWxzZVxcclxcbiAgIHtcXHJcXG4gICAgICBpZiAodVJlbmRlck1vZGUgPT0gQ09OVE9VUl9QTEFORVMpXFxyXFxuICAgICAge1xcclxcbiAgICAgICAgIGlmIChpblNoYWRvdylcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgZnJhZ0NvbG9yID0gdmFsMkNvbG9yKHVBbWJpZW50SW50ZW5zaXR5KTtcXHJcXG4gICAgICAgICB9XFxyXFxuICAgICAgICAgZWxzZVxcclxcbiAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBmcmFnQ29sb3IgPSBnZXRDb250b3VyUGxhbmVDb2xvcih2RG90LCBub3JtYWwsIHRvTGlnaHQsIHRvRXllKTtcXHJcXG4gICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICAgIGVsc2UgaWYgKHVSZW5kZXJNb2RlID09IENPTlRPVVJfVkFMVUVTKVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICBpZiAoaW5TaGFkb3cpXFxyXFxuICAgICAgICAge1xcclxcbiAgICAgICAgICAgIGZyYWdDb2xvciA9IHZhbDJDb250b3VyQ29sb3IodUFtYmllbnRJbnRlbnNpdHkpO1xcclxcbiAgICAgICAgIH1cXHJcXG4gICAgICAgICBlbHNlXFxyXFxuICAgICAgICAge1xcclxcbiAgICAgICAgICAgIGZyYWdDb2xvciA9IGdldENvbnRvdXJWYWx1ZUNvbG9yKHZEb3QsIG5vcm1hbCwgdG9MaWdodCwgdG9FeWUpO1xcclxcbiAgICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgICAgZWxzZVxcclxcbiAgICAgIHtcXHJcXG4gICAgICAgICB2ZWM0IGhpZ2hsaWdodENvbG9yID0gdmVjNCgwLjAsIDAuNywgMC43LCAxLjApO1xcclxcblxcclxcbiAgICAgICAgIGlmIChpblNoYWRvdylcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgaWYgKHVSZW5kZXJNb2RlID09IEhJR0hMSUdIVF9TSEFET1cpXFxyXFxuICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgIGZyYWdDb2xvciA9IGhpZ2hsaWdodENvbG9yO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBlbHNlIGlmICh1UmVuZGVyTW9kZSA9PSBMSUdIVF9BTkRfU0hBRE9XKVxcclxcbiAgICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgICBmcmFnQ29sb3IgPSB2YWwyQ29sb3IodUFtYmllbnRJbnRlbnNpdHkpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBlbHNlXFxyXFxuICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgIC8vIHdoZW4gaW4gc2hhZG93LCBhcHBseSBzbGlnaHQgc2hhZGluZyBhcyBpZiB0aGUgbGlnaHRcXHJcXG4gICAgICAgICAgICAgICAvLyB3ZXJlIGNvbWluZyBmcm9tIHRoZSBleWUuXFxyXFxuICAgICAgICAgICAgICAgdmVjMyB0b1NoYWRvd0xpZ2h0ID0gdmVjMygwLjAsIDAuMCwgMS4wKTtcXHJcXG4gICAgICAgICAgICAgICBmbG9hdCB2YWwgPSBnZXRWYWx1ZUZyb21MaWdodChub3JtYWwsIHRvU2hhZG93TGlnaHQsIHRvRXllKSAvIDIwLjA7XFxyXFxuICAgICAgICAgICAgICAgZnJhZ0NvbG9yID0gdmFsMkNvbG9yKHVBbWJpZW50SW50ZW5zaXR5ICsgdmFsKTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgfVxcclxcbiAgICAgICAgIGVsc2VcXHJcXG4gICAgICAgICB7XFxyXFxuICAgICAgICAgICAgaWYgKHVSZW5kZXJNb2RlID09IExJR0hUX0FORF9TSEFET1cpXFxyXFxuICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgIGZyYWdDb2xvciA9IHZhbDJDb2xvcih1QW1iaWVudEludGVuc2l0eSArIDAuNzUgKiB1RGlmZnVzZUludGVuc2l0eSk7XFxyXFxuICAgICAgICAgICAgICAgdmVjNCBzaGFkb3dDb2xvciA9IHZhbDJDb2xvcih1QW1iaWVudEludGVuc2l0eSk7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgZmxvYXQgdkRvdCA9IGRvdChub3JtYWwsIHRvTGlnaHQpO1xcclxcbiAgICAgICAgICAgICAgIGZsb2F0IGFuZ2xlID0gKDE4MC4wIC8gMy4xNDE1OTI2KSAqIGFjb3ModkRvdCk7XFxyXFxuICAgICAgICAgICAgICAgZmxvYXQgcmFuZ2UgPSA4LjA7IC8vIGRlZ3JlZXNcXHJcXG4gICAgICAgICAgICAgICBmbG9hdCBwZXJjZW50VGVybWluYXRvciA9IGNsYW1wKChhbmdsZSAtICg5MC4wIC0gcmFuZ2UpKSAvIChyYW5nZSAvIDIuMCksIDAuMCwgMS4wKTtcXHJcXG4gICAgICAgICAgICAgICBmcmFnQ29sb3IgPSBtaXgoZnJhZ0NvbG9yLCBzaGFkb3dDb2xvciwgcGVyY2VudFRlcm1pbmF0b3IpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBlbHNlIGlmICh1UmVuZGVyTW9kZSA9PSBISUdITElHSFRfU0hBRE9XIHx8IHVSZW5kZXJNb2RlID09IEhJR0hMSUdIVF9URVJNSU5BVE9SKVxcclxcbiAgICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICAgICAvLyBmYWRlIGhpZ2hsaWdodGluZyBmcm9tIHRlcm1pbmF0b3IgdGhyb3VnaCB0aGUgc2hhZG93XFxyXFxuICAgICAgICAgICAgICAgZmxvYXQgdmFsID0gZ2V0VmFsdWVGcm9tTGlnaHQobm9ybWFsLCB0b0xpZ2h0LCB0b0V5ZSk7XFxyXFxuICAgICAgICAgICAgICAgZnJhZ0NvbG9yID0gdmFsMkNvbG9yKHZhbCk7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgZmxvYXQgdkRvdCA9IGRvdChub3JtYWwsIHRvTGlnaHQpO1xcclxcbiAgICAgICAgICAgICAgIGZsb2F0IGFuZ2xlID0gKDE4MC4wIC8gMy4xNDE1OTI2KSAqIGFjb3ModkRvdCk7XFxyXFxuICAgICAgICAgICAgICAgZmxvYXQgcmFuZ2UgPSA4LjA7IC8vIGRlZ3JlZXNcXHJcXG4gICAgICAgICAgICAgICBmbG9hdCBwZXJjZW50VGVybWluYXRvcjtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICBpZiAodVJlbmRlck1vZGUgPT0gSElHSExJR0hUX1NIQURPVylcXHJcXG4gICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgcGVyY2VudFRlcm1pbmF0b3IgPSBjbGFtcCgoYW5nbGUgLSAoOTAuMCAtIHJhbmdlKSkgLyAocmFuZ2UpLCAwLjAsIDEuMCk7XFxyXFxuICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgIGVsc2VcXHJcXG4gICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgaWYgKGFuZ2xlID4gOTAuMClcXHJcXG4gICAgICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAyLjA7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgcGVyY2VudFRlcm1pbmF0b3IgPSBjbGFtcCgxLjAgLSAoYW5nbGUgLSA5MC4wKSAvIHJhbmdlLCAwLjAsIDEuMCk7XFxyXFxuICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgIGVsc2VcXHJcXG4gICAgICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgcGVyY2VudFRlcm1pbmF0b3IgPSBjbGFtcCgoYW5nbGUgLSAoOTAuMCAtIHJhbmdlKSkgLyAocmFuZ2UpLCAwLjAsIDEuMCk7XFxyXFxuICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICBmcmFnQ29sb3IgPSBtaXgoZnJhZ0NvbG9yLCBoaWdobGlnaHRDb2xvciwgcGVyY2VudFRlcm1pbmF0b3IpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBlbHNlXFxyXFxuICAgICAgICAgICAge1xcclxcbiAgICAgICAgICAgICAgIGZsb2F0IHZhbCA9IGdldFZhbHVlRnJvbUxpZ2h0KG5vcm1hbCwgdG9MaWdodCwgdG9FeWUpO1xcclxcbiAgICAgICAgICAgICAgIGZyYWdDb2xvciA9IHZhbDJDb2xvcih2YWwpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgIH1cXHJcXG5cXHJcXG4gICBnbF9GcmFnQ29sb3IgPSBmcmFnQ29sb3I7XFxyXFxufVwiIiwiZXhwb3J0IGRlZmF1bHQgXCJhdHRyaWJ1dGUgdmVjMyBhVmVydGV4O1xcclxcbmF0dHJpYnV0ZSB2ZWMzIGFOb3JtYWw7XFxyXFxuXFxyXFxudW5pZm9ybSBtYXQ0IG1vZGVsO1xcclxcbnVuaWZvcm0gbWF0NCB2aWV3O1xcclxcbnVuaWZvcm0gbWF0NCBsaWdodFZpZXc7XFxyXFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb247XFxyXFxuXFxyXFxudmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxyXFxudmFyeWluZyB2ZWMzIHZWZXJ0ZXg7XFxyXFxudmFyeWluZyB2ZWMzIHZTaGFkb3dWZXJ0ZXg7XFxyXFxudmFyeWluZyB2ZWMzIHZNb2RlbFZlcnRleDtcXHJcXG5cXHJcXG52b2lkIG1haW4oKVxcclxcbntcXHJcXG4gICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb24gKiB2aWV3ICogbW9kZWwgKiB2ZWM0KGFWZXJ0ZXgsIDEuMCk7XFxyXFxuICAgdk5vcm1hbCA9IChtb2RlbCAqIHZlYzQoYU5vcm1hbCwgMC4wKSkueHl6O1xcclxcbiAgIHZWZXJ0ZXggPSAobW9kZWwgKiB2ZWM0KGFWZXJ0ZXgsIDEuMCkpLnh5ejtcXHJcXG4gICB2U2hhZG93VmVydGV4ID0gKGxpZ2h0VmlldyAqIG1vZGVsICogdmVjNChhVmVydGV4LCAxLjApKS54eXo7XFxyXFxuICAgdk1vZGVsVmVydGV4ID0gYVZlcnRleDtcXHJcXG59XCIiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sInNvdXJjZVJvb3QiOiIifQ==