/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Customize the label (the CheckboxLabel) */\r\n.CheckboxLabel {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 25px;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n/* Hide the browser's default checkbox */\r\n.CheckboxLabel input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n/* Create a custom checkbox */\r\n.Checkmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 20px;\r\n  width: 20px;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n/* When the checkbox is checked, add a blue background */\r\n.CheckboxLabel input:checked ~ .Checkmark {\r\n  background-color: #2196f3;\r\n}\r\n\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.Checkmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n\r\n/* Show the checkmark when checked */\r\n.CheckboxLabel input:checked ~ .Checkmark:after {\r\n  display: block;\r\n}\r\n\r\n/* Style the checkmark/indicator */\r\n.CheckboxLabel .Checkmark:after {\r\n  left: 7px;\r\n  top: 3px;\r\n  width: 4px;\r\n  height: 8px;\r\n  border: solid white;\r\n  border-width: 0 3px 3px 0;\r\n  -webkit-transform: rotate(45deg);\r\n  -ms-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .CheckboxLabel {\r\n    padding-left: 50px;\r\n  }\r\n\r\n  /* Create a custom checkbox */\r\n  .Checkmark {\r\n    height: 40px;\r\n    width: 40px;\r\n  }\r\n\r\n  /* Style the checkmark/indicator */\r\n  .CheckboxLabel .Checkmark:after {\r\n    left: 14px;\r\n    top: 6px;\r\n    width: 8px;\r\n    height: 16px;\r\n    border-width: 0 6px 6px 0;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css":
/*!**********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".ListBox {\r\n  background-color: white;\r\n  overflow-y: scroll;\r\n  cursor: pointer;\r\n}\r\n\r\n.ListBoxItem:hover {\r\n  background-color: powderblue;\r\n}\r\n\r\n.ListBoxItemSelected,\r\n.ListBoxItemSelected:hover {\r\n  background-color: steelblue;\r\n  color: white;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".Menubar {\r\n  left: 0px;\r\n  top: 0px;\r\n  right: 0px;\r\n  padding-left: 10px;\r\n  color: black;\r\n  background-color: rgba(var(--main-color), 0.25);\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.Menubar > .MenuItem {\r\n  color: black;\r\n  padding: 8px;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n}\r\n\r\n.Menu {\r\n  display: none;\r\n  position: fixed;\r\n  background-color: rgba(230, 230, 230, 0.9);\r\n  width: 200px;\r\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n  z-index: 1;\r\n}\r\n\r\n.MenuItem {\r\n  color: black;\r\n  padding: 8px;\r\n  text-decoration: none;\r\n  display: block;\r\n  cursor: pointer;\r\n}\r\n\r\n.MenuItem .SliderRange {\r\n  width: 175px;\r\n}\r\n\r\n.MenuItem:hover {\r\n  background-color: rgba(200, 200, 255, 0.75);\r\n}\r\n\r\n/* Style we add or remove as menus are displayed or hidden */\r\n.MenuShow {\r\n  display: block;\r\n}\r\n\r\n.MenuItem .SliderLabel,\r\n.MenuItem .SliderColorSpan,\r\n.MenuItem .SliderValueSpan {\r\n  display: none;\r\n}\r\n\r\n.MenuItem .Checkbox {\r\n  float: left;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .Menu {\r\n    width: 400px;\r\n  }\r\n\r\n  .Menubar > .MenuItem {\r\n    padding: 16px;\r\n  }\r\n\r\n  .MenuItem {\r\n    padding: 16px;\r\n  }\r\n\r\n  .MenuItem .SliderRange {\r\n    width: 350px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css":
/*!****************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#PathTracerApp #description {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  left: 2px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  border-radius: 5px;\r\n  font-size: 10pt;\r\n  font-family: arial;\r\n  color: white;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n}\r\n\r\n#PathTracerApp #drawTime {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 2px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  font-size: 8pt;\r\n  font-family: arial;\r\n  color: white;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n}\r\n\r\n#PathTracerApp #progressBar {\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  right: 0px;\r\n  height: 5px;\r\n  background-color: rgba(50, 205, 50, 0.75);\r\n}\r\n\r\n#PathTracerApp #modeButton {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 5px;\r\n  padding: 2px;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n  border-radius: 5px;\r\n  font-size: 10pt;\r\n  font-family: arial;\r\n  color: yellow;\r\n  text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);\r\n  user-select: none;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n}\r\n\r\n#PathTracerApp .SliderLabel {\r\n  flex: 0 0 150px;\r\n}\r\n\r\n#PathTracerApp .SliderValueSpan {\r\n  flex: 0 0 80px;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #PathTracerApp #drawTime {\r\n    left: 4px;\r\n    top: 10px;\r\n    font-size: 16pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp #modeButton {\r\n    font-size: 20pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp #description {\r\n    font-size: 20pt;\r\n    font-weight: darker;\r\n  }\r\n\r\n  #PathTracerApp .SliderLabel {\r\n    flex: 0 0 300px;\r\n  }\r\n\r\n  #PathTracerApp .SliderValueSpan {\r\n    flex: 0 0 160px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css":
/*!**************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Customize the label (the RadiobuttonLabel) */\r\n.RadiobuttonLabel {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 25px;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n/* Hide the browser's default Radiobutton */\r\n.RadiobuttonLabel input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n/* Create a custom Radiobutton */\r\n.RadioCheckmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 18.5px;\r\n  width: 18px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 50%;\r\n}\r\n\r\n/* When the Radiobutton is checked, add a blue background */\r\n.RadiobuttonLabel input:checked ~ .RadioCheckmark {\r\n  background-color: #2196f3;\r\n}\r\n\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.RadioCheckmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n\r\n/* Show the checkmark when checked */\r\n.RadiobuttonLabel input:checked ~ .RadioCheckmark:after {\r\n  display: block;\r\n}\r\n\r\n/* Style the checkmark/indicator */\r\n.RadiobuttonLabel .RadioCheckmark:after {\r\n  background: white;\r\n  top: 5px;\r\n  left: 4.5px;\r\n  width: 9px;\r\n  height: 8.5px;\r\n  border-radius: 50%;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .RadiobuttonLabel {\r\n    padding-left: 50px;\r\n  }\r\n\r\n  /* Create a custom Radiobutton */\r\n  .RadioCheckmark {\r\n    top: 4px;\r\n    height: 37px;\r\n    width: 36px;\r\n  }\r\n\r\n  /* Style the checkmark/indicator */\r\n  .RadiobuttonLabel .RadioCheckmark:after {\r\n    top: 10px;\r\n    left: 9px;\r\n    width: 18px;\r\n    height: 17px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".SliderDiv {\r\n  display: flex;\r\n  align-items: stretch;\r\n  margin-top: 7px;\r\n  margin-bottom: 7px;\r\n}\r\n\r\n.SliderLabel {\r\n  flex: 0 0 125px;\r\n  text-align: right;\r\n}\r\n\r\n.SliderRange {\r\n  flex: 1 1 200px;\r\n  -webkit-appearance: none;\r\n  outline: none;\r\n  border-radius: 15px;\r\n  height: 15px;\r\n  margin-top: 3px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3) inset;\r\n  border: gray;\r\n  border-style: solid;\r\n  border-width: 0.5px;\r\n  vertical-align: bottom;\r\n}\r\n\r\n.SliderRange::-webkit-slider-thumb {\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  border-color: black;\r\n  background: linear-gradient(135deg, lightgreen, darkgreen);\r\n}\r\n\r\n.SliderRange::-moz-range-thumb {\r\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  border-color: black;\r\n  background: linear-gradient(135deg, lightgreen, darkgreen);\r\n  cursor: pointer;\r\n}\r\n\r\n.SliderColorSpan {\r\n  vertical-align: text-bottom;\r\n  flex: 0 0 15px;\r\n  width: 15px;\r\n  height: 15px;\r\n  margin-right: 5px;\r\n  margin-top: 2px;\r\n  border-radius: 50%;\r\n  border: gray;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n}\r\n\r\n.SliderValueSpan {\r\n  flex: 0 0 60px;\r\n}\r\n\r\n#Slider .disabled {\r\n  color: gray;\r\n}\r\n\r\n#Slider .disabled::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n  border-color: gray;\r\n}\r\n\r\n#Slider .disabled::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n  border-color: gray;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .SliderDiv {\r\n    margin-top: 12px;\r\n    margin-bottom: 12px;\r\n  }\r\n\r\n  .SliderLabel {\r\n    flex: 0 0 250px;\r\n  }\r\n\r\n  .SliderRange {\r\n    flex: 1 1 400px;\r\n    border-radius: 30px;\r\n    height: 30px;\r\n    margin-top: 6px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.3) inset;\r\n    border-width: 1px;\r\n  }\r\n\r\n  .SliderRange::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    box-shadow: 2px 2px 2px #000000, 0px 0px 2px #0d0d0d;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-width: 1px;\r\n  }\r\n\r\n  .SliderRange::-moz-range-thumb {\r\n    box-shadow: 2px 2px 2px #000000, 0px 0px 1px #0d0d0d;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-width: 1px;\r\n  }\r\n\r\n  .SliderColorSpan {\r\n    flex: 0 0 30px;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-right: 10px;\r\n    margin-top: 4px;\r\n    border-width: 2px;\r\n  }\r\n\r\n  .SliderValueSpan {\r\n    flex: 0 0 120px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#SquintApp #Panel {\r\n  flex: 0 0 300px;\r\n  display: block;\r\n  background-color: white;\r\n}\r\n\r\n#SquintApp .Instructions {\r\n  padding-bottom: 10px;\r\n  display: none;\r\n}\r\n\r\n#SquintApp .Title {\r\n  font-weight: bold;\r\n  padding-top: 5px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n#SquintApp #Canvas {\r\n  flex-grow: 1;\r\n}\r\n\r\n#SquintApp .Picture {\r\n  background-color: lightblue;\r\n  padding: 10px;\r\n}\r\n\r\n#SquintApp .Camera {\r\n  background-color: lightpink;\r\n  padding: 10px;\r\n}\r\n\r\n#SquintApp .SliderLabel .disabled {\r\n  color: gray;\r\n}\r\n\r\n#SquintApp #Slider .disabled::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, lightgray);\r\n}\r\n\r\n#SquintApp #VideoDiv .SliderDiv {\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n#SquintApp .CheckboxDiv {\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n#SquintApp .RadiobuttonDiv {\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n#SquintApp .SliderLabel {\r\n  flex: 0 0 80px;\r\n}\r\n\r\n#SquintApp .SliderRange {\r\n  flex: 1 1 80px;\r\n}\r\n\r\n#SquintApp .DialogBackground {\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1; /* Sit on top */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  background-color: rgb(0, 0, 0, 0.4);\r\n  display: none;\r\n}\r\n\r\n#SquintApp #DialogDiv {\r\n  position: absolute;\r\n  display: flex;\r\n  top: 20%;\r\n  left: 20%;\r\n  width: 60%;\r\n  height: 60%;\r\n  background-color: white;\r\n  border-radius: 20px;\r\n}\r\n\r\n#SquintApp .ButtonDiv {\r\n  text-align: right;\r\n}\r\n\r\n#SquintApp #ViewPanelDiv {\r\n  flex: auto;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: lightblue;\r\n  border-radius: 10px;\r\n}\r\n\r\n#SquintApp #ViewButton {\r\n  flex: 0 1 20px;\r\n  margin-top: 10px;\r\n}\r\n\r\n#SquintApp #ViewListBox {\r\n  margin-top: 10px;\r\n  flex: 1 1 auto;\r\n}\r\n\r\n#SquintApp #OrParentDiv {\r\n  align-items: center;\r\n  justify-content: center;\r\n  display: flex;\r\n}\r\n\r\n#SquintApp #OrDiv {\r\n  padding: 10px;\r\n}\r\n\r\n#SquintApp #HostPanelDiv {\r\n  flex: auto;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: lightpink;\r\n  border-radius: 10px;\r\n}\r\n\r\n#SquintApp #CameraNameDiv {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#SquintApp #NameInputText {\r\n  flex-grow: 1 1 auto;\r\n}\r\n\r\n#SquintApp .Stretch {\r\n  flex: 1 0 auto;\r\n}\r\n\r\n#SquintApp .NoStretch {\r\n  flex: 0 0 auto;\r\n}\r\n\r\n@media (orientation: landscape) {\r\n  #SquintApp #DialogDiv {\r\n    flex-direction: row;\r\n  }\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  #SquintApp #DialogDiv {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #SquintApp #Panel {\r\n    flex: 0 0 300px;\r\n  }\r\n\r\n  #SquintApp .SliderLabel {\r\n    flex: 0 0 120px;\r\n  }\r\n\r\n  #SquintApp * {\r\n    font-size: 30px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Style the tab */\r\n.Tabs {\r\n  overflow: hidden;\r\n}\r\n\r\n/* Style the buttons that are used to open the tab content */\r\n.Tabs button {\r\n  background-color: #fff;\r\n  float: left;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  padding: 10px 20px;\r\n  color: #333;\r\n}\r\n\r\n/* Change background color of buttons on hover */\r\n.Tabs button:hover {\r\n  background-color: #ddd;\r\n  color: #000;\r\n}\r\n\r\n/* Create an active/current tablink class */\r\n.Tabs button.active {\r\n  background-color: #eee;\r\n  color: #000;\r\n}\r\n\r\n/* Style the tab content */\r\n.TabContent {\r\n  display: none;\r\n  padding: 20px 12px;\r\n  background-color: #eee;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  .Tabs button {\r\n    padding: 20px 40px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#ViewerApp #PerspectiveCanvas {\r\n  background-color: rgb(114, 117, 134);\r\n  height: 100px;\r\n  width: 100%;\r\n}\r\n\r\n#ViewerApp #ValuePlanesPanel {\r\n  height: 154px;\r\n  width: 100%;\r\n}\r\n\r\n#ValuePlanesPanel .SlidersDiv {\r\n  position: absolute;\r\n  left: 0px;\r\n  right: 154px;\r\n}\r\n\r\n#ValuePlanesPanel #LightLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #LightLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #MidLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #MidLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #DarkLightRange::-webkit-slider-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n#ValuePlanesPanel #DarkLightSliderRange::-moz-range-thumb {\r\n  background: linear-gradient(135deg, lightgray, darkgray);\r\n}\r\n\r\n#ValuePlanesPanel #ValuePlanesCanvas {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: rgb(128, 128, 150);\r\n}\r\n\r\n#ValuePlanesPanel #ValuePlanesOverlayCanvas {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: transparent;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  #ViewerApp #PerspectiveCanvas {\r\n    height: 200px;\r\n  }\r\n\r\n  #ViewerApp #ValuePlanesPanel {\r\n    height: 308px;\r\n  }\r\n\r\n  #ValuePlanesPanel .SlidersDiv {\r\n    right: 308px;\r\n  }\r\n\r\n  #ValuePlanesPanel #ValuePlanesCanvas {\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n\r\n  #ValuePlanesPanel #ValuePlanesOverlayCanvas {\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
var ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Menu.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Menu.css");
var ___CSS_LOADER_AT_RULE_IMPORT_1___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Slider.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Slider.css");
var ___CSS_LOADER_AT_RULE_IMPORT_2___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Tabs.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Tabs.css");
var ___CSS_LOADER_AT_RULE_IMPORT_3___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Checkbox.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Checkbox.css");
var ___CSS_LOADER_AT_RULE_IMPORT_4___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./Radiobutton.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/Radiobutton.css");
var ___CSS_LOADER_AT_RULE_IMPORT_5___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./ListBox.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/ListBox.css");
var ___CSS_LOADER_AT_RULE_IMPORT_6___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./PathTracerApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/PathTracerApp.css");
var ___CSS_LOADER_AT_RULE_IMPORT_7___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./ViewerApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/ViewerApp.css");
var ___CSS_LOADER_AT_RULE_IMPORT_8___ = __webpack_require__(/*! -!../../node_modules/css-loader/dist/cjs.js!./SquintApp.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/SquintApp.css");
exports = ___CSS_LOADER_API_IMPORT___(false);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_1___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_2___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_3___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_4___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_5___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_6___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_7___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_8___);
// Module
exports.push([module.i, "* {\r\n  font-family: Verdana;\r\n}\r\n\r\n:root {\r\n  --main-color: 114, 117, 134;\r\n}\r\n\r\nbody {\r\n  margin: 0px;\r\n  scrollbar-width: none;\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.Container {\r\n  position: relative;\r\n}\r\n\r\n.FlexContainer {\r\n  display: flex;\r\n}\r\n\r\n#MainCanvas {\r\n  background-color: rgb(114, 117, 134);\r\n}\r\n\r\n.Overlay {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  font-size: 40px;\r\n  text-align: center;\r\n  color: white;\r\n  background-color: transparent;\r\n  user-select: none;\r\n  pointer-events: none;\r\n}\r\n\r\n/* hide panels by default - users show them via menus */\r\n.Panel {\r\n  display: none;\r\n}\r\n\r\n.Panel #ExitButton {\r\n  position: absolute;\r\n  display: inline-block;\r\n  width: 20px;\r\n  right: 0;\r\n  top: 0;\r\n  cursor: pointer;\r\n  color: lightgray;\r\n  z-index: 1;\r\n}\r\n\r\n.ViewerApp #ExitButton:hover {\r\n  color: red;\r\n}\r\n\r\n@media only screen and (max-device-width: 800px) {\r\n  * {\r\n    font-size: 40px;\r\n  }\r\n\r\n  .Panel #ExitButton {\r\n    width: 40px;\r\n  }\r\n\r\n  .OverlayAnnotation {\r\n    font-size: 20pt;\r\n  }\r\n}\r\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open("GET",b),e.responseType="blob",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error("could not download file")},e.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open("","_blank"),e&&(e.document.title=e.document.body.innerText="downloading..."),"string"==typeof a)return c(a,b,d);var g="application/octet-stream"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\/[\d]+/.test(navigator.userAgent);if((i||g&&h)&&"object"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}});f.saveAs=a.saveAs=a, true&&(module.exports=a)});

//# sourceMappingURL=FileSaver.min.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/LoaderWorker.ts":
/*!**************************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/LoaderWorker.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "LoaderWorker.worker.js");
};

/***/ }),

/***/ "./src/BlobFile.ts":
/*!*************************!*\
  !*** ./src/BlobFile.ts ***!
  \*************************/
/*! exports provided: BlobFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobFile", function() { return BlobFile; });
/* harmony import */ var _BlobShim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BlobShim */ "./src/BlobShim.ts");
/* harmony import */ var _BlobShim__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_BlobShim__WEBPACK_IMPORTED_MODULE_0__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/**
 * Internal class for slicing up Blobs
 */
var BlobSlicer = /** @class */ (function () {
    /**
     * @param blob The Blob to be sliced
     */
    function BlobSlicer(blob) {
        // The start byte value for the next slice
        this.start = 0;
        this.blob = blob;
    }
    /**
     * Gets the next slice.
     *
     * @param len The length of the slice.
     * @returns The sliced Blob.
     */
    BlobSlicer.prototype.next = function (len) {
        var b = this.blob.slice(this.start, this.start + len);
        this.start += len;
        return b;
    };
    /**
     * Slices the Blob and returns it as an ArrayBuffer.
     *
     * @param len The length of the slice.
     * @returns An ArrayBuffer promise.
     */
    BlobSlicer.prototype.nextArrayBuffer = function (len) {
        return this.next(len).arrayBuffer();
    };
    /**
     * Slices the Blob and returns it as an Int32Array
     *
     * @param len The length of the slice.
     * @returns An Int32Array promise.
     */
    BlobSlicer.prototype.nextInt32Array = function (len) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Int32Array.bind;
                        return [4 /*yield*/, this.nextArrayBuffer(len)];
                    case 1: return [2 /*return*/, new (_a.apply(Int32Array, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    /**
     * Slices the Blob and returns it as a string
     *
     * @param len The length of the slice.
     * @returns A string promise.
     */
    BlobSlicer.prototype.nextString = function (len) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.next(len).text()];
            });
        });
    };
    return BlobSlicer;
}());
/**
 * Manages creation and extraction of a self describing Blob. Data
 * is stored as:
 *
 * [numEntries] - The number entries in the file. 4 byte Int32
 * [sizes] - Sizes of all the entries, including the info object
 * [info] - User supplied data as a JSON string
 * [entry 1] - First user entry
 * [entry 2] - Second user entry
 * [...]
 */
var BlobFile = /** @class */ (function () {
    /**
     * @param info The information header to be stored with the Blob
     * @param parts The data contents of the Blob
     */
    function BlobFile(info, parts) {
        this.parts = [];
        this.info = info;
        this.parts = parts;
    }
    /**
     * Converts a raw Blob object into a BlobFile
     *
     * @param blob The Blob to process.
     * @return A BlobFile promise.
     */
    BlobFile.extract = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var blobSlicer, numEntries, sizes, jsonInfo, parts, i, size;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blobSlicer = new BlobSlicer(blob);
                        return [4 /*yield*/, blobSlicer.nextInt32Array(4)];
                    case 1:
                        numEntries = (_a.sent())[0];
                        return [4 /*yield*/, blobSlicer.nextInt32Array(4 * (numEntries + 1))];
                    case 2:
                        sizes = _a.sent();
                        return [4 /*yield*/, blobSlicer.nextString(sizes[0])];
                    case 3:
                        jsonInfo = _a.sent();
                        parts = [];
                        for (i = 0; i < numEntries; i++) {
                            size = sizes[i + 1];
                            parts.push(blobSlicer.next(size));
                        }
                        return [2 /*return*/, new BlobFile(JSON.parse(jsonInfo), parts)];
                }
            });
        });
    };
    /**
     * Create a BlobFile Blob
     *
     * @param info The information header to be stored with the Blob
     * @param parts The data contents of the Blob
     */
    BlobFile.createBlob = function (info, parts) {
        var jsonInfo = JSON.stringify(info);
        // Build the array of sizes
        var sizes = [jsonInfo.length];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (part instanceof Int32Array) {
                sizes.push(4 * part.length);
            }
            else if (part instanceof Float32Array) {
                sizes.push(4 * part.length);
            }
            else if (part instanceof String) {
                sizes.push(part.length);
            }
            else {
                var msg = 'Unsupported Blob Part Type: ' + typeof part;
                console.error(msg);
                throw new Error(msg);
            }
        }
        // assemble the blob parts
        var allParts = [];
        allParts.push(new Int32Array([parts.length]));
        allParts.push(new Int32Array(sizes));
        allParts.push(jsonInfo);
        allParts.push.apply(allParts, parts);
        // create the blob
        return new Blob(allParts);
    };
    return BlobFile;
}());



/***/ }),

/***/ "./src/BlobShim.ts":
/*!*************************!*\
  !*** ./src/BlobShim.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

// needed for Safari
if (!Blob.prototype.arrayBuffer) {
    Blob.prototype.arrayBuffer = function () {
        var _this = this;
        // read the Blob the old fashioned way
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            // register event handlers
            reader.onloadend = function () {
                resolve(reader.result);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
            // start the read
            reader.readAsArrayBuffer(_this);
        });
    };
}
// needed for Safari
if (!Blob.prototype.text) {
    // read the Blob the old fashioned way
    Blob.prototype.text = function () {
        var _this = this;
        // read the Blob the old fashioned way
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            // register event handlers
            reader.onloadend = function () {
                // decode into a string
                var txt = new TextDecoder("utf-8").decode(reader.result);
                resolve(txt);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
            // start the read
            reader.readAsArrayBuffer(_this);
        });
    };
}


/***/ }),

/***/ "./src/BoundingBox.ts":
/*!****************************!*\
  !*** ./src/BoundingBox.ts ***!
  \****************************/
/*! exports provided: BoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingBox", function() { return BoundingBox; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");

var BoundingBox = /** @class */ (function () {
    function BoundingBox(min, max) {
        if (min === void 0) { min = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE]); }
        if (max === void 0) { max = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]); }
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(BoundingBox.prototype, "width", {
        get: function () {
            return this.max.x - this.min.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "height", {
        get: function () {
            return this.max.y - this.min.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "depth", {
        get: function () {
            return this.max.z - this.min.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "diagonal", {
        get: function () {
            var w = this.width;
            var h = this.height;
            var d = this.depth;
            return Math.sqrt(w * w + h * h + d * d);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "center", {
        get: function () {
            return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([
                (this.min.x + this.max.x) / 2,
                (this.min.y + this.max.y) / 2,
                (this.min.z + this.max.z) / 2,
            ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox.prototype, "corners", {
        get: function () {
            var corners = [];
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.min.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.min.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.max.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.min.x, this.max.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.min.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.min.y, this.max.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.max.y, this.min.z]));
            corners.push(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.max.x, this.max.y, this.max.z]));
            return corners;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoundingBox, "infinite", {
        get: function () {
            var MAX = Number.POSITIVE_INFINITY;
            var MIN = Number.NEGATIVE_INFINITY;
            return new BoundingBox(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MIN, MIN, MIN]), new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MAX, MAX, MAX]));
        },
        enumerable: false,
        configurable: true
    });
    BoundingBox.prototype.inside = function (vec) {
        if (vec.x >= this.min.x && vec.x <= this.max.x &&
            vec.y >= this.min.y && vec.y <= this.max.y &&
            vec.z >= this.min.z && vec.z <= this.max.z) {
            return true;
        }
        else {
            return false;
        }
    };
    BoundingBox.prototype.toString = function (digits) {
        return '[' + this.min.toString(digits) + ']' +
            '[' + this.max.toString(digits) + ']';
    };
    BoundingBox.prototype.update = function (v) {
        if (isNaN(v.x) || isNaN(v.y) || isNaN(v.z)) {
            //console.log('----------------------------------------------NaN');
            return;
        }
        this.min.x = Math.min(this.min.x, v.x);
        this.min.y = Math.min(this.min.y, v.y);
        this.min.z = Math.min(this.min.z, v.z);
        this.max.x = Math.max(this.max.x, v.x);
        this.max.y = Math.max(this.max.y, v.y);
        this.max.z = Math.max(this.max.z, v.z);
    };
    BoundingBox.prototype.merge = function (other) {
        this.min.x = Math.min(this.min.x, other.min.x);
        this.min.y = Math.min(this.min.y, other.min.y);
        this.min.z = Math.min(this.min.z, other.min.z);
        this.max.x = Math.max(this.max.x, other.max.x);
        this.max.y = Math.max(this.max.y, other.max.y);
        this.max.z = Math.max(this.max.z, other.max.z);
    };
    BoundingBox.prototype.multM = function (mat) {
        var ret = new BoundingBox();
        var v1 = mat.multV(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"]([this.min.x, this.min.y, this.min.z, 1]));
        var v2 = mat.multV(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"]([this.max.x, this.max.y, this.max.z, 1]));
        ret.min.x = Math.min(v1.x, v2.x);
        ret.min.y = Math.min(v1.y, v2.y);
        ret.min.z = Math.min(v1.z, v2.z);
        ret.max.x = Math.max(v1.x, v2.x);
        ret.max.y = Math.max(v1.y, v2.y);
        ret.max.z = Math.max(v1.z, v2.z);
        return ret;
    };
    return BoundingBox;
}());



/***/ }),

/***/ "./src/BoundingPts.ts":
/*!****************************!*\
  !*** ./src/BoundingPts.ts ***!
  \****************************/
/*! exports provided: BoundingPts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingPts", function() { return BoundingPts; });
/**
 * A set of points used to define the bounding edges of an object. All points are
 * enclosed in the object
 */
var BoundingPts = /** @class */ (function () {
    function BoundingPts(pts) {
        this.pts = pts;
    }
    BoundingPts.prototype.get = function (i) {
        return this.pts[i];
    };
    BoundingPts.prototype.distToPoint = function (pt) {
        var ret = {
            min: Number.MAX_VALUE,
            max: -Number.MAX_VALUE,
        };
        this.pts.forEach(function (pt2) {
            var x = pt2.x - pt.x;
            var y = pt2.y - pt.y;
            var z = pt2.z - pt.z;
            var d = x * x + y * y + z * z;
            ret.min = Math.min(d, ret.min);
            ret.max = Math.max(d, ret.max);
        });
        // don't bother getting the square root of every calculation, just the min and max
        ret.min = Math.sqrt(ret.min);
        ret.max = Math.sqrt(ret.max);
        return ret;
    };
    BoundingPts.prototype.distToPlane = function (plane) {
        var ret = {
            min: Number.MAX_VALUE,
            max: -Number.MAX_VALUE,
        };
        this.pts.forEach(function (pt) {
            var d = plane.distToPt(pt);
            ret.min = Math.min(d, ret.min);
            ret.max = Math.max(d, ret.max);
        });
        return ret;
    };
    return BoundingPts;
}());



/***/ }),

/***/ "./src/Camera.ts":
/*!***********************!*\
  !*** ./src/Camera.ts ***!
  \***********************/
/*! exports provided: ObjSizeProvider, FixedSizeProvider, Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjSizeProvider", function() { return ObjSizeProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedSizeProvider", function() { return FixedSizeProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.ts");
/* harmony import */ var _glSpace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glSpace */ "./src/glSpace.ts");





// When viewing an object, view this much more than the object
var BUFFER_FACTOR = 1.1;
var ObjSizeProvider = /** @class */ (function () {
    function ObjSizeProvider(obj) {
        this.obj = obj;
    }
    Object.defineProperty(ObjSizeProvider.prototype, "maxWidth", {
        get: function () {
            //let xBox = this.obj.getBoundingPts();
            var xBox = this.obj.getBoundingBox();
            return BUFFER_FACTOR * Math.sqrt(xBox.width * xBox.width + xBox.depth * xBox.depth);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjSizeProvider.prototype, "maxHeight", {
        get: function () {
            var xBox = this.obj.getBoundingBox();
            return BUFFER_FACTOR * Math.sqrt(xBox.height * xBox.height + xBox.depth * xBox.depth);
        },
        enumerable: false,
        configurable: true
    });
    return ObjSizeProvider;
}());

var FixedSizeProvider = /** @class */ (function () {
    function FixedSizeProvider(maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
    }
    return FixedSizeProvider;
}());

var Camera = /** @class */ (function () {
    function Camera(settings) {
        var _a, _b, _c, _d, _e, _f;
        this.eye = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"](_Renderer__WEBPACK_IMPORTED_MODULE_3__["INITIAL_EYE"]);
        this.lookAt = _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"].origin;
        this.zoomFactor = 1;
        this.useOrthographic = false;
        if (settings) {
            this.sizeProvider = (_a = settings.sizeProvider) !== null && _a !== void 0 ? _a : this.sizeProvider;
            this.eye = (_b = settings.eye) !== null && _b !== void 0 ? _b : this.eye;
            this.lookAt = (_c = settings.lookAt) !== null && _c !== void 0 ? _c : this.lookAt;
            this.zoomFactor = (_d = settings.zoomFactor) !== null && _d !== void 0 ? _d : this.zoomFactor;
            this.useOrthographic = (_e = settings.useOrthographic) !== null && _e !== void 0 ? _e : this.useOrthographic;
            this.fov = (_f = settings.fov) !== null && _f !== void 0 ? _f : this.fov;
        }
    }
    Camera.prototype.getProjection = function (gl) {
        var projection;
        var space = this.getViewSpace(gl);
        if (this.useOrthographic) {
            projection = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makeOrtho(space.min.x, space.max.x, space.min.y, space.max.y, space.min.z, space.max.z);
        }
        else {
            var eye = this.eye;
            var up = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 1, 0]);
            var mat = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makeLookAt(eye, this.lookAt, up);
            this.fov = 2 * Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["toDeg"])(Math.atan2(space.height / 2, eye.z));
            var near = 0.1;
            var far = 20;
            var ar = space.width / space.height;
            projection = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makePerspective(this.fov, ar, near, far).multM(mat);
        }
        return projection;
    };
    //
    // The functions below change our view of the model
    //
    Camera.prototype.zoom = function (zoom) {
        this.zoomFactor *= zoom;
    };
    Camera.prototype.translate = function (delta) {
        this.eye.x -= delta.x / this.zoomFactor;
        this.eye.y -= delta.y / this.zoomFactor;
        this.lookAt.x -= delta.x / this.zoomFactor;
        this.lookAt.y -= delta.y / this.zoomFactor;
    };
    /**
     * Clipspace is defined as a range of [-1,1] in the smaller of the width and height.
     * The other dimensions is scaled to match the aspect ratio of the canvas
     */
    Camera.prototype.getClipSpace = function (gl) {
        var ar = gl.canvas.width / gl.canvas.height;
        if (ar > 1) {
            return new _glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-ar, -1, 100]), new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([ar, 1, -100]));
        }
        else {
            return new _glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-1, -(1 / ar), 100]), new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([1, (1 / ar), -100]));
        }
    };
    /**
     * View space is the world coordinate space of what can be currently viewed.
     */
    Camera.prototype.getViewSpace = function (gl) {
        var winAR = gl.canvas.width / gl.canvas.height;
        var objMaxWidth = this.sizeProvider.maxWidth;
        var objMaxHeight = this.sizeProvider.maxHeight;
        var objAR = objMaxWidth / objMaxHeight;
        var desiredWidth;
        var desiredHeight;
        if (objAR < winAR) {
            // make the object height fit
            desiredHeight = objMaxHeight;
            desiredWidth = objMaxHeight * winAR;
        }
        else {
            // make the object width fit
            desiredHeight = objMaxWidth / winAR;
            desiredWidth = objMaxWidth;
        }
        desiredHeight /= this.zoomFactor;
        desiredWidth /= this.zoomFactor;
        var clipSpace = this.getClipSpace(gl);
        var min = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([
            -desiredWidth / 2 - this.lookAt.x,
            -desiredHeight / 2 - this.lookAt.y,
            clipSpace.near + this.lookAt.z,
        ]);
        var max = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([
            desiredWidth / 2 - this.lookAt.x,
            desiredHeight / 2 - this.lookAt.y,
            clipSpace.far + this.lookAt.z,
        ]);
        return new _glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](min, max);
    };
    return Camera;
}());



/***/ }),

/***/ "./src/Checkbox.ts":
/*!*************************!*\
  !*** ./src/Checkbox.ts ***!
  \*************************/
/*! exports provided: Checkbox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Checkbox", function() { return Checkbox; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");

var Checkbox = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Checkbox(parent, setup) {
        var _this = this;
        var _a;
        if (typeof setup.checked === 'function') {
            this.getState = setup.checked;
        }
        var div = document.createElement('div');
        div.id = setup.id;
        div.className = 'CheckboxDiv';
        parent.appendChild(div);
        var label = document.createElement('label');
        label.id = setup.id + 'Label';
        label.className = 'CheckboxLabel';
        label.innerText = (_a = setup.label) !== null && _a !== void 0 ? _a : '';
        div.appendChild(label);
        this.box = document.createElement('input');
        this.box.className = 'Checkbox';
        this.box.type = 'checkbox';
        this.box.id = setup.id + 'Checkbox';
        this.box.checked = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["getBooleanValue"])(setup.checked);
        this.box.onchange = function () {
            if (setup.oncheck) {
                setup.oncheck(_this);
            }
        };
        label.appendChild(this.box);
        var mark = document.createElement('span');
        mark.className = 'Checkmark';
        mark.id = setup.id + 'Checkmark';
        label.appendChild(mark);
    }
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: function () {
            return this.box.checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "enabled", {
        get: function () {
            return !this.box.disabled;
        },
        set: function (value) {
            this.box.disabled = !value;
        },
        enumerable: false,
        configurable: true
    });
    Checkbox.prototype.refresh = function () {
        if (this.getState) {
            this.box.checked = this.getState();
        }
    };
    return Checkbox;
}());



/***/ }),

/***/ "./src/Color.ts":
/*!**********************!*\
  !*** ./src/Color.ts ***!
  \**********************/
/*! exports provided: Color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/**
 * Class for representing color values. Values may be on a 0-1 or 0-255 scale.
 */
var Color = /** @class */ (function () {
    /**
     * @param color RGB values to store in this object
     */
    function Color(color) {
        this.r = color[0];
        this.g = color[1];
        this.b = color[2];
        if (color.length === 4) {
            this.a = color[3];
        }
    }
    return Color;
}());



/***/ }),

/***/ "./src/ColorAnalyzer.ts":
/*!******************************!*\
  !*** ./src/ColorAnalyzer.ts ***!
  \******************************/
/*! exports provided: ColorAnalyzer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorAnalyzer", function() { return ColorAnalyzer; });
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");

/**
 * This class grabs a copy of the rendered texture and examines it for
 * color values.
 */
var ColorAnalyzer = /** @class */ (function () {
    /**
     * @param size The width and height of the buffer
     */
    function ColorAnalyzer(size) {
        this.size = size;
        // allocate the buffer used for grabs
        this.pixels = new Float32Array(this.size * this.size * 4);
    }
    /**
     * Runs the analysis - grabs a copy of the frame buffer and scans it.
     *
     * @param alphaLight The alpha value for things in light. Values above this are due to specular lighting.
     * @param alphaShadow The alpha value for things in shadow.
     */
    ColorAnalyzer.prototype.run = function (gl, alphaLight, alphaShadow) {
        var data = {
            maxChroma: 0,
            avgLightColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            lightestLightColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            darkestLightColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([1, 1, 1]),
            avgShadowColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            lightestShadowColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            darkestShadowColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([1, 1, 1]),
            terminatorColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
            highlightColor: new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([0, 0, 0]),
        };
        // TODO handle case when the text type is UNSIGNED_BYTE
        // TODO gl.FLOAT not supported on Safari.
        gl.readPixels(0, 0, this.size, this.size, gl.RGBA, gl.FLOAT, this.pixels);
        var numLightPixels = 0;
        var numShadowPixels = 0;
        var numTerminatorPixels = 0;
        for (var row = 0; row < this.size; row++) {
            for (var col = 0; col < this.size; col++) {
                var index = (row * this.size + col) * 4;
                var r = this.pixels[index + 0];
                var g = this.pixels[index + 1];
                var b = this.pixels[index + 2];
                var a = this.pixels[index + 3];
                // ignore values that are not part of the ball
                if (a === 1) {
                    continue;
                }
                var avg = (r + g + b) / 3;
                var chroma = (Math.abs(r - avg) + Math.abs(g - avg) + Math.abs(b - avg)) / (4 / 3);
                if (chroma > data.maxChroma) {
                    data.maxChroma = chroma;
                }
                var color = new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([r, g, b]);
                if (a == alphaLight) {
                    numLightPixels++;
                    if (data.lightestLightColor == null) {
                        data.lightestLightColor = color;
                    }
                    if (data.darkestLightColor == null) {
                        data.darkestLightColor = color;
                    }
                    data.lightestLightColor = _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.lightestLightColor, color);
                    data.darkestLightColor = _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].darkest(data.darkestLightColor, color);
                    data.avgLightColor.r += color.r;
                    data.avgLightColor.b += color.b;
                    data.avgLightColor.g += color.g;
                }
                else if (a == alphaShadow) {
                    numShadowPixels++;
                    if (data.lightestShadowColor == null) {
                        data.lightestShadowColor = color;
                    }
                    if (data.darkestShadowColor == null) {
                        data.darkestShadowColor = color;
                    }
                    data.lightestShadowColor = _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.lightestShadowColor, color);
                    data.darkestShadowColor = _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].darkest(data.darkestShadowColor, color);
                    data.avgShadowColor.r += color.r;
                    data.avgShadowColor.b += color.b;
                    data.avgShadowColor.g += color.g;
                }
                else if (a > alphaLight) {
                    data.highlightColor = _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"].lightest(data.highlightColor, color);
                }
                var terminator = (alphaLight + alphaShadow) / 2.0;
                if (Math.abs(a - terminator) < 0.1) {
                    numTerminatorPixels++;
                    data.terminatorColor.r += color.r;
                    data.terminatorColor.b += color.b;
                    data.terminatorColor.g += color.g;
                }
            }
        }
        if (numLightPixels > 0) {
            data.avgLightColor.r /= numLightPixels;
            data.avgLightColor.g /= numLightPixels;
            data.avgLightColor.b /= numLightPixels;
        }
        if (numShadowPixels > 0) {
            data.avgShadowColor.r /= numShadowPixels;
            data.avgShadowColor.g /= numShadowPixels;
            data.avgShadowColor.b /= numShadowPixels;
        }
        if (numTerminatorPixels > 0) {
            data.terminatorColor.r /= numTerminatorPixels;
            data.terminatorColor.g /= numTerminatorPixels;
            data.terminatorColor.b /= numTerminatorPixels;
        }
        return data;
    };
    return ColorAnalyzer;
}());



/***/ }),

/***/ "./src/ColorRange.ts":
/*!***************************!*\
  !*** ./src/ColorRange.ts ***!
  \***************************/
/*! exports provided: ColorRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorRange", function() { return ColorRange; });
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");

/**
 * Interpolates and array of colors
 */
var ColorRange = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param colors The colors to interpolate
     */
    function ColorRange(colors) {
        this.colors = colors;
    }
    /**
     * Gets an interpolated color.
     *
     * @param value A value between 0 and 1.
     */
    ColorRange.prototype.get = function (value) {
        if (value < 0) {
            return this.colors[0];
        }
        else if (value >= 1) {
            return this.colors[this.colors.length - 1];
        }
        else {
            var index = Math.floor((this.colors.length - 1) * value);
            var partial = (this.colors.length - 1) * value - index;
            var r = Math.round(this.colors[index].r + partial * (this.colors[index + 1].r - this.colors[index].r));
            var g = Math.round(this.colors[index].g + partial * (this.colors[index + 1].g - this.colors[index].g));
            var b = Math.round(this.colors[index].b + partial * (this.colors[index + 1].b - this.colors[index].b));
            return new _htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]([r, g, b]);
        }
    };
    return ColorRange;
}());



/***/ }),

/***/ "./src/Downloader.ts":
/*!***************************!*\
  !*** ./src/Downloader.ts ***!
  \***************************/
/*! exports provided: Downloader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Downloader", function() { return Downloader; });
/* harmony import */ var _Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Stopwatch */ "./src/Stopwatch.ts");
/* harmony import */ var _FPS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FPS */ "./src/FPS.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Squint */ "./src/Squint.ts");



var Downloader = /** @class */ (function () {
    function Downloader(squint) {
        this.fps = new _FPS__WEBPACK_IMPORTED_MODULE_1__["FPS"]();
        this.running = false;
        this.squint = squint;
    }
    Downloader.prototype.start = function (id) {
        var _this = this;
        if (!this.running) {
            //debug('starting downloader: ' + id);
            this.id = id;
            this.running = true;
            this.handle = requestAnimationFrame(function () { return _this.download(); });
        }
    };
    Downloader.prototype.stop = function () {
        if (this.running) {
            //debug('stopping downloader');
            this.running = false;
            cancelAnimationFrame(this.handle);
        }
    };
    Downloader.prototype.download = function () {
        var _this = this;
        this.fps.tick();
        var sw = new _Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"]();
        this.squint.get(this.id)
            .then(function (blob) {
            //console.log('download time: ' + sw.elapsedMs);
            if (_this.running && _this.onDownload) {
                _this.onDownload(blob, sw.elapsedMs);
            }
        })
            .catch(function (reason) {
            if (reason.name != 'AbortError') {
                // TODO fix error message to match the full url
                alert('Download failure for [' + _Squint__WEBPACK_IMPORTED_MODULE_2__["Squint"].url + '] ' + reason);
            }
        })
            .finally(function () {
            if (_this.running) {
                requestAnimationFrame(function () { return _this.download(); });
            }
        });
    };
    return Downloader;
}());



/***/ }),

/***/ "./src/FPS.ts":
/*!********************!*\
  !*** ./src/FPS.ts ***!
  \********************/
/*! exports provided: FPS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FPS", function() { return FPS; });
var FPS = /** @class */ (function () {
    function FPS() {
        this.ticks = [];
    }
    Object.defineProperty(FPS.prototype, "spanMs", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return (this.ticks[this.ticks.length - 1] - this.ticks[0]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FPS.prototype, "ms", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return this.spanMs / this.ticks.length;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FPS.prototype, "rate", {
        get: function () {
            if (this.ticks.length < 2) {
                return 0;
            }
            else {
                return 1000 / this.ms;
            }
        },
        enumerable: false,
        configurable: true
    });
    FPS.prototype.tick = function () {
        this.ticks.push(window.performance.now());
        // trim off the size as long as there are at least 2 entries and the
        // time span between all entries is at least 1 second
        while (this.ticks.length > 2 && this.spanMs > 2000) {
            this.ticks.shift();
        }
    };
    return FPS;
}());



/***/ }),

/***/ "./src/Globals.ts":
/*!************************!*\
  !*** ./src/Globals.ts ***!
  \************************/
/*! exports provided: isMobile, clamp, toDeg, toRad, mix, toCss, getSizeStr, getTimeStr, getBooleanValue, iOS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return isMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toDeg", function() { return toDeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRad", function() { return toRad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toCss", function() { return toCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSizeStr", function() { return getSizeStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTimeStr", function() { return getTimeStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBooleanValue", function() { return getBooleanValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iOS", function() { return iOS; });
var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
function clamp(value, min, max) {
    if (value < min) {
        return min;
    }
    else if (value > max) {
        return max;
    }
    else {
        return value;
    }
}
function toDeg(rad) {
    return (180 / Math.PI) * rad;
}
function toRad(deg) {
    return (Math.PI / 180) * deg;
}
function mix(v1, v2, mix) {
    return v1 + clamp(mix, 0, 1) * (v2 - v1);
}
function toCss(r, g, b, a) {
    return 'rgb(' + r + ',' + g + ',' + b + (a === undefined ? '' : ',' + a) + ')';
}
function getSizeStr(val) {
    if (val < 1024) {
        return val + ' bytes';
    }
    else if (val < 1024 * 1024) {
        return (val / 1024).toFixed(1) + ' kb';
    }
    else {
        return (val / (1024 * 1024)).toFixed(1) + ' mb';
    }
}
function getTimeStr(val) {
    if (val < 1000) {
        return val.toFixed(0) + ' ms';
    }
    else {
        return (val / 1000).toFixed(1) + ' s';
    }
}
function getBooleanValue(value) {
    if (typeof value === 'boolean') {
        return value;
    }
    else if (typeof value === 'function') {
        return value();
    }
    else {
        return false;
    }
}
function iOS() {
    return [
        'iPad Simulator',
        'iPhone Simulator',
        'iPod Simulator',
        'iPad',
        'iPhone',
        'iPod'
    ].includes(navigator.platform)
        // iPad on iOS 13 detection
        || (navigator.userAgent.includes("Mac") && "ontouchend" in document);
}


/***/ }),

/***/ "./src/IndexedTriangle.ts":
/*!********************************!*\
  !*** ./src/IndexedTriangle.ts ***!
  \********************************/
/*! exports provided: IndexedTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedTriangle", function() { return IndexedTriangle; });
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/IndexedVec3.ts");

/**
 * Minimalist wrapper around a WebGL triangle element
 */
var IndexedTriangle = /** @class */ (function () {
    function IndexedTriangle(vertices, normals, i1, i2, i3) {
        this.v1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i1);
        this.v2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i2);
        this.v3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](vertices, i3);
        this.n1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i1);
        this.n2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i2);
        this.n3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_0__["IndexedVec3"](normals, i3);
        this.i1 = i1;
        this.i2 = i2;
        this.i3 = i3;
    }
    Object.defineProperty(IndexedTriangle.prototype, "minX", {
        get: function () {
            return Math.min(this.v1.x, this.v2.x, this.v3.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "minY", {
        get: function () {
            return Math.min(this.v1.y, this.v2.y, this.v3.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "minZ", {
        get: function () {
            return Math.min(this.v1.z, this.v2.z, this.v3.z);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxX", {
        get: function () {
            return Math.max(this.v1.x, this.v2.x, this.v3.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxY", {
        get: function () {
            return Math.max(this.v1.y, this.v2.y, this.v3.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedTriangle.prototype, "maxZ", {
        get: function () {
            return Math.max(this.v1.z, this.v2.z, this.v3.z);
        },
        enumerable: false,
        configurable: true
    });
    IndexedTriangle.prototype.computeNormal = function () {
        var v1 = this.v1.toVec3();
        var v2 = this.v2.toVec3();
        var v3 = this.v3.toVec3();
        var a = v2.subtract(v1);
        var b = v3.subtract(v2);
        return a.cross(b).normalize();
    };
    return IndexedTriangle;
}());



/***/ }),

/***/ "./src/IndexedVec3.ts":
/*!****************************!*\
  !*** ./src/IndexedVec3.ts ***!
  \****************************/
/*! exports provided: IndexedVec3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedVec3", function() { return IndexedVec3; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");

var IndexedVec3 = /** @class */ (function () {
    function IndexedVec3(values, index) {
        this.values = values;
        this.index = index;
    }
    Object.defineProperty(IndexedVec3.prototype, "x", {
        get: function () {
            return this.values[3 * this.index + 0];
        },
        set: function (val) {
            this.values[3 * this.index + 0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedVec3.prototype, "y", {
        get: function () {
            return this.values[3 * this.index + 1];
        },
        set: function (val) {
            this.values[3 * this.index + 1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndexedVec3.prototype, "z", {
        get: function () {
            return this.values[3 * this.index + 2];
        },
        set: function (val) {
            this.values[3 * this.index + 2] = val;
        },
        enumerable: false,
        configurable: true
    });
    IndexedVec3.prototype.toVec3 = function () {
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.x, this.y, this.z]);
    };
    return IndexedVec3;
}());



/***/ }),

/***/ "./src/Launcher.ts":
/*!*************************!*\
  !*** ./src/Launcher.ts ***!
  \*************************/
/*! exports provided: Launcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Launcher", function() { return Launcher; });
/* harmony import */ var _Menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Menu */ "./src/Menu.ts");
/* harmony import */ var _ViewerApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ViewerApp */ "./src/ViewerApp.ts");
/* harmony import */ var _PathTracerApp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PathTracerApp */ "./src/PathTracerApp.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SquintApp */ "./src/SquintApp.ts");




var AppType;
(function (AppType) {
    AppType[AppType["ArtistsBall"] = 0] = "ArtistsBall";
    AppType[AppType["Viewer"] = 1] = "Viewer";
    AppType[AppType["Squint"] = 2] = "Squint";
})(AppType || (AppType = {}));
var Launcher = /** @class */ (function () {
    function Launcher() {
        this.launch(AppType.Viewer);
    }
    Launcher.prototype.launch = function (type) {
        if (this.app) {
            this.app.delete();
            this.app = null;
        }
        // clear out old content
        document.body.innerHTML = '';
        // create the main div
        this.div = document.createElement('div');
        document.body.appendChild(this.div);
        this.buildMenu();
        var query;
        if (window.location.search) {
            query = window.location.search.substr(1);
        }
        if (window.location.search.indexOf('squint') >= 0) {
            type = AppType.Squint;
        }
        switch (type) {
            case AppType.ArtistsBall:
                document.title = 'Artist\'s Tools: Artist\'s Ball';
                this.app = new _PathTracerApp__WEBPACK_IMPORTED_MODULE_2__["PathTracerApp"](query);
                break;
            case AppType.Viewer:
                document.title = 'Artist\'s Tools: Viewer';
                this.app = new _ViewerApp__WEBPACK_IMPORTED_MODULE_1__["ViewerApp"](query);
                break;
            case AppType.Squint:
                document.title = 'Squint';
                this.app = new _SquintApp__WEBPACK_IMPORTED_MODULE_3__["SquintApp"]();
                break;
        }
        this.app.create(this.div);
        this.app.buildMenu(this.menubar);
    };
    Launcher.prototype.buildMenu = function () {
        var _this = this;
        var subMenu;
        this.menubar = new _Menu__WEBPACK_IMPORTED_MODULE_0__["Menubar"](this.div);
        subMenu = this.menubar.addSubMenu('Apps', 'Apps');
        subMenu.addItem('3D Viewer', function () { return _this.launch(AppType.Viewer); });
        subMenu.addItem('Squint', function () { return _this.launch(AppType.Squint); });
        subMenu.addItem('Artist\'s Ball', function () { return _this.launch(AppType.ArtistsBall); });
    };
    return Launcher;
}());



/***/ }),

/***/ "./src/ListBox.ts":
/*!************************!*\
  !*** ./src/ListBox.ts ***!
  \************************/
/*! exports provided: ListBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBox", function() { return ListBox; });
var STYLE_LIST_BOX_ITEM_SELECTED = 'ListBoxItemSelected';
var ListBox = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function ListBox(parent, setup) {
        this.items = [];
        this.box = document.createElement('div');
        this.box.id = setup.id;
        this.box.className = 'ListBox';
        parent.appendChild(this.box);
    }
    Object.defineProperty(ListBox.prototype, "selected", {
        get: function () {
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item.div.classList.contains(STYLE_LIST_BOX_ITEM_SELECTED)) {
                    return item.userData;
                }
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListBox.prototype, "enabled", {
        get: function () {
            alert('Not Implemented Yet: ListBox.enabled');
            return false;
        },
        set: function (value) {
            alert('Not Implemented Yet: ListBox.enabled');
        },
        enumerable: false,
        configurable: true
    });
    ListBox.prototype.addItem = function (label, userData, id) {
        var _this = this;
        var item = document.createElement('div');
        item.id = id !== null && id !== void 0 ? id : undefined;
        item.className = 'ListBoxItem';
        item.innerText = label;
        this.box.appendChild(item);
        if (this.selected === null) {
            item.classList.add(STYLE_LIST_BOX_ITEM_SELECTED);
        }
        item.onclick = function () {
            for (var i = 0; i < _this.items.length; i++) {
                _this.items[i].div.classList.remove(STYLE_LIST_BOX_ITEM_SELECTED);
            }
            item.classList.toggle(STYLE_LIST_BOX_ITEM_SELECTED);
        };
        this.items.push({
            div: item,
            userData: userData,
        });
    };
    ListBox.prototype.clear = function () {
        this.box.innerHTML = '';
        this.items = [];
    };
    ListBox.prototype.refresh = function () {
    };
    return ListBox;
}());



/***/ }),

/***/ "./src/Mat.ts":
/*!********************!*\
  !*** ./src/Mat.ts ***!
  \********************/
/*! exports provided: Mat4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mat4", function() { return Mat4; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

/**
 * An x-y-z-w matrix for use in WebGL applications.
 */
var Mat4 = /** @class */ (function () {
    /**
     * @param values If supplied, the initial matrix values. If not supplied, the matrix is
     * initialized as an identity matrix.
     */
    function Mat4(values) {
        if (values) {
            this.values = __spreadArrays(values);
        }
        else {
            this.values = [
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ];
        }
    }
    Object.defineProperty(Mat4.prototype, "scaleFactors", {
        get: function () {
            var sX = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            var sY = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            var sZ = (new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([this.get(0, 0), this.get(1, 0), this.get(2, 0)])).magnitude();
            return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([sX, sY, sZ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mat4, "identity", {
        /**
         * Get's an identity matrix. Same as creating a new matrix, but syntactically
         * shows what is happening.
         *
         * @returns A new idenity matrix.
         */
        get: function () {
            return new Mat4();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mat4, "ortho", {
        /**
         * Creates an orthographic matrix in the WebGL coordinate system (positive z towards you)
         *
         * @return A new orthographic matrix
         */
        get: function () {
            return Mat4.makeOrtho(-1, 1, -1, 1, 1, -1);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the matrix.
     *
     * @returns A copy of the matrix.
     */
    Mat4.prototype.clone = function () {
        return new Mat4(this.values);
    };
    /**
     * Gets a value in the matrix.
     *
     * @param row The row index.
     * @param col The column index.
     * @returns The matrix value.
     */
    Mat4.prototype.get = function (row, col) {
        return this.values[4 * row + col];
    };
    /**
     * Sets a value in the matrix.
     *
     * @param row The row index.
     * @param col The column index.
     * @param val The value.
     */
    Mat4.prototype.set = function (row, col, val) {
        this.values[4 * row + col] = val;
    };
    /**
     * Multiplies this matrix against a vector and returns the result.
     *
     * @param vec The vector.
     * @return The result of the multiplication.
     */
    Mat4.prototype.multV = function (vec) {
        var vals = [];
        for (var row = 0; row < 4; row++) {
            var sum = 0;
            for (var col = 0; col < 4; col++) {
                sum += this.values[row * 4 + col] * vec.values[col];
            }
            vals.push(sum);
        }
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec4"](vals);
    };
    /**
     * Transforms a 3d vec by this matrix.
     *
     * @param vec A 3d vec.
     * @param w The value to use for w. 0 = ignore translation. 1 = include.
     * @returns The new 3d vec.
     */
    Mat4.prototype.multVec3 = function (vec, w) {
        if (w === void 0) { w = 1; }
        return this.multV(vec.toVec4(w)).xyz;
    };
    /**
     * Multiplies this matrix against another matrix and returns the result.
     *
     * @param other The matrix.
     * @return The result of the multiplication.
     */
    Mat4.prototype.multM = function (other) {
        var result = new Mat4();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                var sum = 0;
                for (var i = 0; i < 4; i++) {
                    sum += this.get(row, i) * other.get(i, col);
                }
                result.set(row, col, sum);
            }
        }
        return result;
    };
    /**
     * Inverts this matrix and returns the result.
     *
     * @returns The inverse of this.
     */
    Mat4.prototype.inverse = function () {
        var result = new Mat4();
        var a00 = this.values[0], a01 = this.values[1], a02 = this.values[2], a03 = this.values[3];
        var a10 = this.values[4], a11 = this.values[5], a12 = this.values[6], a13 = this.values[7];
        var a20 = this.values[8], a21 = this.values[9], a22 = this.values[10], a23 = this.values[11];
        var a30 = this.values[12], a31 = this.values[13], a32 = this.values[14], a33 = this.values[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32;
        // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        result.values[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        result.values[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        result.values[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        result.values[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        result.values[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        result.values[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        result.values[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        result.values[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        result.values[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        result.values[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        result.values[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        result.values[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        result.values[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        result.values[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        result.values[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        result.values[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return result;
    };
    /**
     * Transposes this matrix and returns the result as a new matrix.
     *
     * @returns The transposed matrix.
     */
    Mat4.prototype.transpose = function () {
        var result = new Mat4();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                result.set(row, col, this.get(col, row));
            }
        }
        return result;
    };
    /**
     * Creates a matrix that contains a scale operation.
     *
     * @param scale The scale factor
     * @returns The transformation matrix.
     */
    Mat4.fromScale = function (scale) {
        return new Mat4([
            scale, 0, 0, 0,
            0, scale, 0, 0,
            0, 0, scale, 0,
            0, 0, 0, 1
        ]);
    };
    /**
     * Creates a matrix that contains a translation operation.
     *
     * @param vec The translations.
     * @returns The transformation matrix.
     */
    Mat4.fromTranslation = function (v) {
        return new Mat4([
            1, 0, 0, v.x,
            0, 1, 0, v.y,
            0, 0, 1, v.z,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotX = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            1, 0, 0, 0,
            0, c, s, 0,
            0, -s, c, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotY = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            c, 0, -s, 0,
            0, 1, 0, 0,
            s, 0, c, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.fromRotZ = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat4([
            c, s, 0, 0,
            -s, c, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ]);
    };
    Mat4.prototype.rotX = function (angle) {
        this.values = Mat4.fromRotX(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.rotY = function (angle) {
        this.values = Mat4.fromRotY(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.rotZ = function (angle) {
        this.values = Mat4.fromRotZ(angle).multM(this).values;
        return this;
    };
    Mat4.prototype.preRotX = function (angle) {
        this.values = this.multM(Mat4.fromRotX(angle)).values;
        return this;
    };
    Mat4.prototype.preRotY = function (angle) {
        this.values = this.multM(Mat4.fromRotY(angle)).values;
        return this;
    };
    Mat4.prototype.preRotZ = function (angle) {
        this.values = this.multM(Mat4.fromRotZ(angle)).values;
        return this;
    };
    Mat4.prototype.translate = function (offset) {
        this.values = Mat4.fromTranslation(offset).multM(this).values;
        return this;
    };
    Mat4.prototype.scale = function (scale) {
        this.values = Mat4.fromScale(scale).multM(this).values;
        return this;
    };
    /**
     * Creates a viewing matrix. See gluLookAt.
     *
     * @param eye The eye position.
     * @param center The point of interest.
     * @param up The up vector.
     * @returns The viewing matrix.
     */
    Mat4.makeLookAt = function (eye, center, up) {
        var a = eye.subtract(center).normalize();
        var b = up.cross(a).normalize();
        var c = a.cross(b).normalize();
        var m = new Mat4([
            b.x, b.y, b.z, 0,
            c.x, c.y, c.z, 0,
            a.x, a.y, a.z, 0,
            0, 0, 0, 1
        ]);
        var t = new Mat4([
            1, 0, 0, -eye.x,
            0, 1, 0, -eye.y,
            0, 0, 1, -eye.z,
            0, 0, 0, 1
        ]);
        var result = m.multM(t);
        return result;
    };
    /**
     * Creates a perspective matrix. See gluPerspective.
     *
     * @param fovy Field of view (in degrees).
     * @param aspect View aspect ratio.
     * @param znear Near clipping plane.
     * @param zfar Far clipping plane.
     */
    Mat4.makePerspective = function (fovy, aspect, znear, zfar) {
        var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
        var ymin = -ymax;
        var xmin = ymin * aspect;
        var xmax = ymax * aspect;
        return Mat4.makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
    };
    /**
     * Creates a perspective matrix. See gluFrustum.
     *
     * @param left The left clipping plane.
     * @param right The right clipping plane.
     * @param bottom The bottom clipping plane.
     * @param top The top clipping plane.
     * @param znear The near clipping plane.
     * @param zfar The far clipping plane.
     * @returns the perspective matrix.
     */
    Mat4.makeFrustum = function (left, right, bottom, top, znear, zfar) {
        var X = 2 * znear / (right - left);
        var Y = 2 * znear / (top - bottom);
        var A = (right + left) / (right - left);
        var B = (top + bottom) / (top - bottom);
        var C = -(zfar + znear) / (zfar - znear);
        var D = -2 * zfar * znear / (zfar - znear);
        return new Mat4([
            X, 0, A, 0,
            0, Y, B, 0,
            0, 0, C, D,
            0, 0, -1, 0
        ]);
    };
    /**
     * Creates a perspective matrix. See gluOrtho.
     *
     * @param left The left clipping plane.
     * @param right The right clipping plane.
     * @param bottom The bottom clipping plane.
     * @param top The top clipping plane.
     * @param znear The near clipping plane.
     * @param zfar The far clipping plane.
     * @returns the perspective matrix.
     */
    Mat4.makeOrtho = function (left, right, bottom, top, near, far) {
        return new Mat4([
            2 / (right - left), 0, 0, (right + left) / (right - left),
            0, 2 / (top - bottom), 0, (top + bottom) / (top - bottom),
            0, 0, 2 / (far - near), (far + near) / (far - near),
            0, 0, 0, 1
        ]);
    };
    Mat4.prototype.log = function (msg, digits) {
        if (digits === void 0) { digits = 2; }
        console.log(msg);
        for (var r = 0; r < 4; r++) {
            var line = "";
            for (var c = 0; c < 4; c++) {
                line += this.get(r, c).toFixed(digits) + ' ';
            }
            console.log(line);
        }
        console.log();
    };
    return Mat4;
}());



/***/ }),

/***/ "./src/Menu.ts":
/*!*********************!*\
  !*** ./src/Menu.ts ***!
  \*********************/
/*! exports provided: Menubar, SubMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Menubar", function() { return Menubar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubMenu", function() { return SubMenu; });
/* harmony import */ var _Slider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Slider */ "./src/Slider.ts");
/* harmony import */ var _Checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Checkbox */ "./src/Checkbox.ts");
/* harmony import */ var _Radiobutton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Radiobutton */ "./src/Radiobutton.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var MenuLocation;
(function (MenuLocation) {
    MenuLocation[MenuLocation["Below"] = 0] = "Below";
    MenuLocation[MenuLocation["Right"] = 1] = "Right";
})(MenuLocation || (MenuLocation = {}));
/**
 * Common base classes for things that are menus - menubar, pulldown menu, etc
 */
var Menu = /** @class */ (function () {
    function Menu(parent, id, className) {
        var _this = this;
        this.children = [];
        this.ctrls = [];
        this.parent = parent;
        this.div = document.createElement('div');
        this.div.id = id;
        this.div.className = className;
        if (parent) {
            parent.div.appendChild(this.div);
        }
        if (!parent) {
            // if this is the root menu, add a global click handler for closing menus
            window.addEventListener('mousedown', function () {
                if (!_this.isMenuItem(event.target)) {
                    _this.hideDown();
                }
            });
            window.addEventListener('touchstart', function (event) {
                if (!_this.isMenuItem(event.target)) {
                    _this.hideDown();
                }
            });
        }
    }
    Menu.prototype.isMenuItem = function (element) {
        while (element) {
            if (element.className === 'MenuItem') {
                return true;
            }
            element = element.parentElement;
        }
        return false;
    };
    Menu.prototype.show = function () {
        this.ctrls.forEach(function (ctrl) { return ctrl.refresh(); });
        if (this.div.classList.contains('MenuShow') === false) {
            this.div.classList.add('MenuShow');
        }
    };
    Menu.prototype.hide = function () {
        if (this.div.classList.contains('MenuShow')) {
            this.div.classList.remove('MenuShow');
        }
    };
    Menu.prototype.hideUp = function () {
        var menu = this;
        while (menu.parent) {
            menu.hide();
            menu = menu.parent;
        }
    };
    Menu.prototype.hideDown = function () {
        this.children.forEach(function (child) {
            child.hide();
            child.hideDown();
        });
    };
    Menu.prototype.internalAddSubMenu = function (innerHtml, id, location) {
        var _this = this;
        var item = document.createElement('div');
        item.id = id + 'MenuItem';
        item.className = 'MenuItem';
        item.innerHTML = innerHtml;
        item.onclick = function () {
            _this.showSubMenu(item, subMenu, location);
        };
        this.div.appendChild(item);
        var subMenu = new SubMenu(this, id);
        this.children.push(subMenu);
        return subMenu;
    };
    Menu.prototype.showSubMenu = function (menuItem, subMenu, location) {
        // position the menu off screen so that we can query it's height when
        // we make it visible. Then position it properly
        subMenu.div.style.left = -500 + 'px';
        subMenu.div.style.top = 0 + 'px';
        // hide sibling menus that are open
        this.hideDown();
        // show the desired submenu
        subMenu.show();
        // position the new menu
        var bodyRect = document.body.getBoundingClientRect();
        var menuItemRect = menuItem.getBoundingClientRect();
        var subMenuRect = subMenu.div.getBoundingClientRect();
        if (location === MenuLocation.Below) {
            subMenu.div.style.left = menuItemRect.left + 'px';
            subMenu.div.style.top = menuItemRect.bottom + 'px';
        }
        else if (location === MenuLocation.Right) {
            var left = menuItemRect.left + 0.5 * menuItemRect.width;
            if (left + subMenuRect.width > bodyRect.width) {
                left = menuItemRect.left - subMenuRect.width;
            }
            subMenu.div.style.left = left + 'px';
            var top_1 = menuItemRect.top;
            if (top_1 + subMenuRect.height > bodyRect.height) {
                top_1 = bodyRect.height - subMenuRect.height;
            }
            subMenu.div.style.top = top_1 + 'px';
        }
    };
    Menu.prototype.addItem = function (text, callback, options) {
        var _this = this;
        // create a div for this item
        var item = document.createElement('div');
        item.className = 'MenuItem';
        item.innerText = text;
        item.onclick = function (event) {
            // hide open menus in our hierarchy
            if (!(options && options.closeOnClick == false)) {
                _this.hideUp();
            }
            // fire the event
            callback(item);
        };
        this.div.appendChild(item);
        item.onmouseenter = function () {
            _this.hideDown();
        };
        return item;
    };
    Menu.prototype.addSlider = function (setup) {
        var div = this.addItem(setup.label, function () { }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Slider__WEBPACK_IMPORTED_MODULE_0__["Slider"](div, {
            id: setup.id,
            label: '',
            min: setup.min,
            max: setup.max,
            value: setup.value,
            oninput: setup.oninput,
        });
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addCheckbox = function (setup) {
        var div = this.addItem('', function () { }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Checkbox__WEBPACK_IMPORTED_MODULE_1__["Checkbox"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    Menu.prototype.addRadiobutton = function (setup) {
        var div = this.addItem('', function () { }, // do nothing on click
        { closeOnClick: false });
        var ctrl = new _Radiobutton__WEBPACK_IMPORTED_MODULE_2__["Radiobutton"](div, setup);
        this.ctrls.push(ctrl);
        return ctrl;
    };
    return Menu;
}());
/**
 * Horizontal menubar across the top of the screen
 */
var Menubar = /** @class */ (function (_super) {
    __extends(Menubar, _super);
    function Menubar(parent) {
        var _this = _super.call(this, null, 'Menubar', 'Menubar') || this;
        parent.appendChild(_this.div);
        return _this;
    }
    Menubar.prototype.addSubMenu = function (text, id) {
        return this.internalAddSubMenu(text, id !== null && id !== void 0 ? id : (text + 'Menu'), MenuLocation.Below);
    };
    return Menubar;
}(Menu));

/**
 * A child menu of a menu, i.e. the item that appears when you click on something in the menubar
 */
var SubMenu = /** @class */ (function (_super) {
    __extends(SubMenu, _super);
    function SubMenu(parent, id) {
        return _super.call(this, parent, id + 'Menu', 'Menu') || this;
    }
    SubMenu.prototype.addSubMenu = function (text, id) {
        var _this = this;
        if (!id) {
            id = text.replace(/\s+/g, '');
        }
        var spanId = id + 'Span';
        var subMenu = this.internalAddSubMenu(text + '<span id="' + spanId + '" style="float:right">></span>', id, MenuLocation.Right);
        var span = document.getElementById(spanId);
        var div = span.parentElement;
        div.onmouseenter = function () {
            if (_Globals__WEBPACK_IMPORTED_MODULE_3__["isMobile"] === false) {
                // TODO this event is triggering on a touchscreen laptop when we don't want it to.
                _this.hideDown();
                _this.showSubMenu(div, subMenu, MenuLocation.Right);
            }
        };
        return subMenu;
    };
    return SubMenu;
}(Menu));



/***/ }),

/***/ "./src/ModelLoader.ts":
/*!****************************!*\
  !*** ./src/ModelLoader.ts ***!
  \****************************/
/*! exports provided: ModelLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelLoader", function() { return ModelLoader; });
/* harmony import */ var worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-loader?name=LoaderWorker.worker.js!./LoaderWorker */ "./node_modules/worker-loader/dist/cjs.js?name=LoaderWorker.worker.js!./src/LoaderWorker.ts");
/* harmony import */ var worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TriangleObj */ "./src/TriangleObj.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
// specify loader and options here. This value must match the
// contents of worker.d.ts



/**
 * Class for doing the work of loading a file into a glObject
 */
var ModelLoader = /** @class */ (function () {
    function ModelLoader() {
        this._loading = false;
    }
    Object.defineProperty(ModelLoader.prototype, "loading", {
        /**
         * Returns true if a file is currently being loaded
         */
        get: function () {
            return this._loading;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Loads a file
     *
     * @param file The file url to load
     * @param updateStatus Callback that is notified of progress
     * @returns TriangleObj promise
     */
    ModelLoader.prototype.loadModelFile = function (file, updateStatus) {
        var _this = this;
        this._loading = true;
        return new Promise(function (resolve, reject) {
            // if a previous worker exists, close it
            if (_this.worker) {
                _this.worker.terminate();
                _this.worker = undefined;
            }
            _this.worker = new worker_loader_name_LoaderWorker_worker_js_LoaderWorker__WEBPACK_IMPORTED_MODULE_0___default.a();
            var tStart = Date.now();
            _this.worker.onmessage = function (_a) {
                var data = _a.data;
                if (typeof data === 'string') {
                    // avoid flashing messages for things that happen very quickly.
                    if (Date.now() - tStart > 500) {
                        updateStatus(data);
                    }
                }
                else {
                    _this._loading = false;
                    var tObj = _TriangleObj__WEBPACK_IMPORTED_MODULE_1__["TriangleObj"].fromData(data);
                    updateStatus('');
                    _this.worker.terminate();
                    _this.worker = undefined;
                    resolve(tObj);
                }
            };
            _this.worker.postMessage(file);
        });
    };
    ModelLoader.prototype.orient = function (model) {
        // orient each file so that it is facing forward
        var name = model.name.split('.')[0].toLowerCase();
        switch (name) {
            case 'wolf':
                model.normalize.rotY(Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["toRad"])(-140));
                model.normalize.rotX(Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["toRad"])(5));
                model.normalize.rotY(Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["toRad"])(180));
                break;
            case 'sheephead':
                model.normalize.rotY(Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["toRad"])(20));
                break;
            default:
                break;
        }
    };
    return ModelLoader;
}());



/***/ }),

/***/ "./src/ModelsMenu.ts":
/*!***************************!*\
  !*** ./src/ModelsMenu.ts ***!
  \***************************/
/*! exports provided: createModelsMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createModelsMenu", function() { return createModelsMenu; });
var menuItems = [
    {
        label: 'Objects', id: 'ObjectsSubMenu', menuItems: [
            { label: 'Sphere', file: 'Sphere' },
            { label: 'Football', file: 'Football.blob' },
            { label: 'Pill', file: 'Pill.blob' },
            { label: 'Pill Bottle', file: 'PillBottle.blob' },
            { label: 'Soda Can', file: 'SodaCan.blob' },
            { label: 'Soccer Ball', file: 'SoccerBall.blob' },
            { label: 'Spoon', file: 'Spoon.blob' },
            { label: 'Teapot', file: 'Teapot.blob' },
            { label: 'Torus (Donut)', file: 'Torus.blob' },
            { label: 'Torus Knot', file: 'TorusKnot.blob' },
            { label: 'Vase', file: 'Vase.blob' },
            { label: 'Vitamin', file: 'Vitamin.blob' },
            { label: 'Wine Bottle', file: 'WineBottle.blob' },
        ]
    },
    {
        label: 'Sculptures', id: 'SculpturesSubMenu', menuItems: [
            { label: 'Belvedere Torso', file: 'BelvedereTorso.blob' },
            { label: 'David', file: 'David.blob' },
            { label: 'Head of David', file: 'HeadOfDavid.blob' },
            { label: 'Lacoon and His Sons', file: 'LaocoonAndHisSons.blob' },
            { label: 'Nefertiti', file: 'Nefertiti.blob' },
            { label: 'Thinker', file: 'Thinker.blob' },
            { label: 'Venus de Milo', file: 'VenusDeMilo.blob' },
            { label: 'Venus of Willendorf', file: 'VenusOfWillendorf.blob' },
            { label: 'Winged Victory of Samothrace', file: 'WingedVictory.blob' },
            { label: 'Winged Victory of Samothrace w/Base', file: 'WingedVictoryWithBase.blob' },
        ]
    },
    {
        label: 'Anatomy', id: 'AnatomySubMenu', menuItems: [
            { label: 'Skull 1', file: 'Skull1.blob' },
            { label: 'Skull 2', file: 'Skull2.blob' },
            { label: 'Skull 3', file: 'Skull3.blob' },
            { label: 'Skull 4', file: 'Skull4.blob' },
            { label: 'Pelvis', file: 'Pelvis.blob' },
            { label: 'Clavicle', file: 'Clavicle.blob' },
            { label: 'Scapula', file: 'Scapula.blob' },
            { label: 'Humerus', file: 'Humerus.blob' },
            { label: 'Head Ecorche', file: 'HeadEcorche.blob' },
            { label: 'Head Ecorche 2', file: 'HeadEcorche2.blob' },
            { label: 'Head Ecorche 3', file: 'HeadEcorche3.blob' },
            { label: 'Head Ecorche 4', file: 'HeadEcorche4.blob' },
        ]
    },
    {
        label: 'Poses', id: 'PosesSubMenu', menuItems: [
            { label: 'Pose 1', file: 'Pose_01.blob' },
            { label: 'Pose 2', file: 'Pose_02.blob' },
            { label: 'Pose 3', file: 'Pose_03.blob' },
            { label: 'Pose 4', file: 'Pose_04.blob' },
            { label: 'Pose 5', file: 'Pose_05.blob' },
            { label: 'Pose 6', file: 'Pose_06.blob' },
            { label: 'Pose 7', file: 'Pose_07.blob' },
            { label: 'Pose 8', file: 'Pose_08.blob' },
            { label: 'Pose 9', file: 'Pose_09.blob' },
            { label: 'Pose 10', file: 'Pose_010.blob' },
            { label: 'Pose 11', file: 'Pose_011.blob' },
            { label: 'Pose 12', file: 'Pose_012.blob' },
            { label: 'Pose 13', file: 'Pose_013.blob' },
            { label: 'Pose 14', file: 'Pose_014.blob' },
            { label: 'Pose 15', file: 'Pose_015.blob' },
            { label: 'Pose 16', file: 'Pose_016.blob' },
            { label: 'Female Pose', file: 'Pose1.blob' },
        ]
    },
    {
        label: 'Heads', id: 'HeadsSubMenu', menuItems: [
            { label: 'Head 1', file: 'Head1.blob' },
            { label: 'Head 2', file: 'Head2.blob' },
            { label: 'Head 3', file: 'Head3.blob' },
            { label: 'Head 4', file: 'Head4.blob' },
            { label: 'Head 5', file: 'Head5.blob' },
            { label: 'Head 6', file: 'Head6.blob' },
            { label: 'Head 7', file: 'Head7.blob' },
            { label: 'Head 8', file: 'Head8.blob' },
            { label: 'Head 9', file: 'Head9.blob' },
            { label: 'Head 10', file: 'Head10.blob' },
            { label: 'Head 11', file: 'Head.blob' },
            { label: 'Female Head', file: 'FemaleHead.blob' },
            { label: 'Arnold', file: 'Arnold.blob' },
        ]
    },
    {
        label: 'Expressions', id: 'ExpressionsSubMenu', menuItems: [
            {
                label: 'Neutral', id: 'NeutralSubMenu', menuItems: [
                    { label: 'Neutral', file: 'Male_02_01_Neutral.blob' },
                    { label: 'Neutral, Eyes Closed', file: 'Male_02_02_Neutral_Eyes_Closed.blob' },
                    { label: 'Neutral, Lips Parted', file: 'Male_02_038_Neutral_Lips_Parted.blob' },
                ]
            },
            {
                label: 'Eyes', id: 'EyesSubMenu', menuItems: [
                    { label: 'Look Up', file: 'Male_02_05_Look_Up.blob' },
                    { label: 'Look Down', file: 'Male_02_06_Look_Down.blob' },
                    { label: 'Look Left', file: 'Male_02_07_Look_Left.blob' },
                    { label: 'Look Right', file: 'Male_02_08_Look_Right.blob' },
                    { label: 'Brows Up', file: 'Male_02_016_Brows_Up.blob' },
                    { label: 'Brows Down', file: 'Male_02_017_Brows_Down.blob' },
                ]
            },
            {
                label: 'Jaw', id: 'JawSubMenu', menuItems: [
                    { label: 'Wide Open', file: 'Male_02_09_Jaw_Wide_Open.blob' },
                    { label: 'Side Right', file: 'Male_02_018_Jaw_Side_Right.blob' },
                    { label: 'Side Left', file: 'Male_02_019_Jaw_Side_Left.blob' },
                    { label: 'Thrust', file: 'Male_02_020_Jaw_Thrust.blob' },
                    { label: 'Clench', file: 'Male_02_021_Jaw_Clench.blob' },
                ]
            },
            {
                label: 'Cheeks', id: 'CheeksSubMenu', menuItems: [
                    { label: 'Puff', file: 'Male_02_022_Cheek_Puff.blob' },
                    { label: 'Suck', file: 'Male_02_023_Cheek_Suck.blob' },
                    { label: 'Dimple', file: 'Male_02_027_Dimple_Cheeks.blob' },
                ]
            },
            {
                label: 'Lips', id: 'LipsSubMenu', menuItems: [
                    { label: 'Tighten', file: 'Male_02_010_Tighten Lips.blob' },
                    { label: 'Pucker', file: 'Male_02_012_Pucker.blob' },
                    { label: 'Flare', file: 'Male_02_026_Flare_Lips.blob' },
                    { label: 'Sounds: "CH"', file: 'Male_02_024_Phoneme_CH.blob' },
                    { label: 'Sounds: "FV"', file: 'Male_02_025_Phoneme_FV.blob' },
                ]
            },
            {
                label: 'Emotions', id: 'EmotionsSubMenu', menuItems: [
                    { label: 'Smile, Mouth Closed', file: 'Male_02_03_Smile_Mouth_Closed.blob' },
                    { label: 'Smile, Mouth Open', file: 'Male_02_04_Smile_Mouth_Open.blob' },
                    { label: 'Snarl', file: 'Male_02_013_Snarl.blob' },
                    { label: 'Frown', file: 'Male_02_014_Frown.blob' },
                    { label: 'Happy', file: 'Male_02_028_Happy.blob' },
                    { label: 'Surprise', file: 'Male_02_029_Surprise.blob' },
                    { label: 'Sad', file: 'Male_02_030_Sad.blob' },
                    { label: 'Angry', file: 'Male_02_031_Angry.blob' },
                    { label: 'Pain', file: 'Male_02_032_Pain.blob' },
                    { label: 'Fear', file: 'Male_02_033_Fear.blob' },
                    { label: 'Disgust', file: 'Male_02_034_Disgust.blob' },
                    { label: 'Shock', file: 'Male_02_035_Shock.blob' },
                    { label: 'Rage', file: 'Male_02_036_Rage.blob' },
                ]
            },
            {
                label: 'Other', id: 'OtherSubMenu', menuItems: [
                    { label: 'Face Compression', file: 'Male_02_011_Face_Compression.blob' },
                    { label: 'Neck Tighten', file: 'Male_02_015_Neck_Tighten.blob' },
                    { label: 'Tongue', file: 'Male_02_037_Tongue.blob' },
                ]
            },
        ]
    },
];
function addItems(menu, items, loadModel) {
    items.forEach(function (item) {
        if ('menuItems' in item) {
            var subMenu = menu.addSubMenu(item.label, item.id);
            addItems(subMenu, item.menuItems, loadModel);
        }
        else {
            menu.addItem(item.label, function () { loadModel(item.file); });
        }
    });
}
function createModelsMenu(menubar, loadModel) {
    var menu = menubar.addSubMenu('Models', 'Models');
    addItems(menu, menuItems, loadModel);
}


/***/ }),

/***/ "./src/OverlayCanvas.ts":
/*!******************************!*\
  !*** ./src/OverlayCanvas.ts ***!
  \******************************/
/*! exports provided: TextLocation, OverlayCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextLocation", function() { return TextLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayCanvas", function() { return OverlayCanvas; });
var TextLocation;
(function (TextLocation) {
    TextLocation[TextLocation["Center"] = 0] = "Center";
    TextLocation[TextLocation["TopLeft"] = 1] = "TopLeft";
    TextLocation[TextLocation["TopRight"] = 2] = "TopRight";
    TextLocation[TextLocation["BottomLeft"] = 3] = "BottomLeft";
    TextLocation[TextLocation["BottomRight"] = 4] = "BottomRight";
})(TextLocation || (TextLocation = {}));
var OverlayCanvas = /** @class */ (function () {
    function OverlayCanvas(parent, id) {
        this.canvas = document.createElement('canvas');
        this.canvas.id = id;
        this.canvas.className = 'Overlay';
        parent.appendChild(this.canvas);
        var dummy = document.createElement('div');
        parent.appendChild(dummy);
        dummy.className = 'Overlay';
        this.largeFont = getComputedStyle(dummy).font;
        dummy.className = 'OverlayAnnotation';
        this.smallFont = getComputedStyle(dummy).font;
        parent.removeChild(dummy);
    }
    Object.defineProperty(OverlayCanvas.prototype, "height", {
        get: function () {
            return this.canvas.height;
        },
        set: function (value) {
            this.canvas.height = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OverlayCanvas.prototype, "width", {
        get: function () {
            return this.canvas.width;
        },
        set: function (value) {
            this.canvas.width = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OverlayCanvas.prototype, "context", {
        get: function () {
            return this.canvas.getContext('2d');
        },
        enumerable: false,
        configurable: true
    });
    OverlayCanvas.prototype.clear = function () {
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.width, this.height);
    };
    OverlayCanvas.prototype.fillText = function (msg, location) {
        if (location === void 0) { location = TextLocation.Center; }
        var ctx = this.canvas.getContext('2d');
        var style = getComputedStyle(this.canvas);
        ctx.fillStyle = style.color;
        var x;
        var y;
        switch (location) {
            case TextLocation.Center:
                ctx.font = this.largeFont;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                x = this.width / 2;
                y = this.height / 2;
                break;
            case TextLocation.BottomLeft:
                ctx.font = this.smallFont;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'bottom';
                x = 0;
                y = this.height;
                break;
            case TextLocation.BottomRight:
                ctx.font = this.smallFont;
                ctx.textAlign = 'right';
                ctx.textBaseline = 'bottom';
                x = this.width;
                y = this.height;
                break;
            case TextLocation.TopLeft:
                ctx.font = this.smallFont;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'top';
                x = 0;
                y = 0;
                break;
            case TextLocation.TopRight:
                ctx.font = this.smallFont;
                ctx.textAlign = 'right';
                ctx.textBaseline = 'top';
                x = this.width;
                y = 0;
                break;
        }
        ctx.fillText(msg, x, y);
    };
    return OverlayCanvas;
}());



/***/ }),

/***/ "./src/Panel.ts":
/*!**********************!*\
  !*** ./src/Panel.ts ***!
  \**********************/
/*! exports provided: Panel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Panel", function() { return Panel; });
var Panel = /** @class */ (function () {
    function Panel(parent, id) {
        var _this = this;
        this.div = document.createElement('div');
        this.div.id = id;
        this.div.className = 'Panel';
        this.div.classList.add('Container');
        parent.appendChild(this.div);
        var exitButton = document.createElement('div');
        exitButton.id = 'ExitButton';
        exitButton.className = 'DivButton';
        exitButton.innerText = 'X';
        exitButton.onclick = function () {
            _this.visible = false;
        };
        this.div.appendChild(exitButton);
    }
    Panel.prototype.show = function (value) {
    };
    Object.defineProperty(Panel.prototype, "visible", {
        get: function () {
            return getComputedStyle(this.div).display === 'block';
        },
        set: function (value) {
            if (value !== this.visible) {
                this.div.style.display = value ? 'block' : 'none';
                // let derived classes know
                this.show(value);
                if (value) {
                    if (this.onShow) {
                        this.onShow(this);
                    }
                }
                else {
                    if (this.onHide) {
                        this.onHide(this);
                    }
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Panel.prototype.delete = function () {
        // override this function in derived classes if needed
    };
    return Panel;
}());



/***/ }),

/***/ "./src/PathTracerApp.ts":
/*!******************************!*\
  !*** ./src/PathTracerApp.ts ***!
  \******************************/
/*! exports provided: PathTracerApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerApp", function() { return PathTracerApp; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PathTracerRenderer */ "./src/PathTracerRenderer.ts");
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");
/* harmony import */ var _SphericalCoord__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SphericalCoord */ "./src/SphericalCoord.ts");
/* harmony import */ var _Slider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slider */ "./src/Slider.ts");
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _glColorWithTemperature__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./glColorWithTemperature */ "./src/glColorWithTemperature.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _TriangleObjFile__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TriangleObjFile */ "./src/TriangleObjFile.ts");
/* harmony import */ var _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TriangleObjBuilder */ "./src/TriangleObjBuilder.ts");
/* harmony import */ var _PointerEventHandler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PointerEventHandler */ "./src/PointerEventHandler.ts");











var skinTones = [
    new _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"]([240, 223, 214]),
    new _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"]([255, 218, 200]),
    new _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"]([232, 179, 117]),
    new _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"]([190, 136, 87]),
    //   new htmlColor([115, 91, 59]),
    new _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"]([139, 73, 65])
    //   new htmlColor([132, 55, 34]),
    //new htmlColor([61, 12, 2]),
    //   new htmlColor([38, 7, 1])
];
var PointerMode;
(function (PointerMode) {
    PointerMode[PointerMode["View"] = 0] = "View";
    PointerMode[PointerMode["Light"] = 1] = "Light";
})(PointerMode || (PointerMode = {}));
var PathTracerApp = /** @class */ (function () {
    function PathTracerApp(query) {
        this.gl = null;
        this.pointerMode = PointerMode.View;
        this.pointerModeSpecial = false;
        this.angleX = 0.5;
        this.angleY = 0.75;
        this.zoomZ = 3.5;
        this.lastTimes = [];
        this.MAX_SAMPLES = 500;
        this.query = query;
    }
    PathTracerApp.prototype.create = function (div) {
        var _this = this;
        div.id = 'PathTracerApp';
        var container = document.createElement('div');
        container.className = 'Container';
        div.appendChild(container);
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'canvasx';
        container.appendChild(this.canvas);
        var context = this.canvas.getContext('webgl2');
        if (!context) {
            context = this.canvas.getContext('webgl');
        }
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        var size = 512;
        if (_Globals__WEBPACK_IMPORTED_MODULE_7__["isMobile"]) {
            size = document.body.clientWidth;
        }
        this.gl.canvas.width = size;
        this.gl.canvas.height = size;
        div.style.width = size + 'px';
        container.style.height = size + 'px';
        this.renderer = new _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["PathTracerRenderer"](this.gl);
        var handler = new _PointerEventHandler__WEBPACK_IMPORTED_MODULE_10__["PointerEventHandler"](this.canvas);
        handler.onDrag = function (pos, delta) { return _this.onMove(pos, delta); };
        handler.onClick = function (pos) { return _this.click(pos.x, pos.y); };
        handler.onDown = function (pos) { return _this.onDown(pos.x, pos.y); };
        this.loadModel(this.query).then(function (tObj) {
            _this.renderer.setObj(tObj);
            requestAnimationFrame(function () { return _this.tick(); });
        });
        var drawTime = document.createElement('div');
        drawTime.id = 'drawTime';
        container.appendChild(drawTime);
        var description = document.createElement('div');
        description.id = 'description';
        container.appendChild(description);
        var button = document.createElement('div');
        button.id = 'modeButton';
        button.innerHTML = 'View';
        this.pointerMode = PointerMode.View;
        button.onclick = function () {
            switch (_this.pointerMode) {
                case PointerMode.View:
                    button.innerHTML = 'Light';
                    _this.pointerMode = PointerMode.Light;
                    break;
                case PointerMode.Light:
                    button.innerHTML = 'View';
                    _this.pointerMode = PointerMode.View;
                    break;
            }
        };
        container.appendChild(button);
        var progressBar = document.createElement('div');
        progressBar.id = 'progressBar';
        container.appendChild(progressBar);
        this.intensitySlider = new _Slider__WEBPACK_IMPORTED_MODULE_4__["Slider"](div, {
            id: 'LightIntensity',
            label: 'Light Intensity',
            min: 0,
            max: 1,
            value: this.renderer.uniforms.uLightIntensity,
            colors: [_htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"].black, _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"].white],
            oninput: function () {
                _this.renderer.uniforms.uLightIntensity = _this.intensitySlider.value;
                _this.restart();
            }
        });
        // build a range of colors
        var min = 2000;
        var max = 10000;
        var colors = [];
        for (var i = 0; i < 10; i++) {
            var temp = min + (i / 9) * (max - min);
            colors.push(_glColorWithTemperature__WEBPACK_IMPORTED_MODULE_6__["glColorWithTemperature"].create(temp).toHtmlColor());
        }
        this.lightColorSlider = new _Slider__WEBPACK_IMPORTED_MODULE_4__["Slider"](div, {
            id: 'LightColor',
            label: 'Light Color',
            min: 2000,
            max: 10000,
            value: _glColorWithTemperature__WEBPACK_IMPORTED_MODULE_6__["glColorWithTemperature"].daylight.temperature,
            colors: colors,
            oninput: function () {
                _this.setLightColor();
            },
            getText: function (slider) { return slider.value.toFixed() + "K"; }
        });
        // apply the initial colors
        this.setLightColor();
        this.ballColorSlider = new _Slider__WEBPACK_IMPORTED_MODULE_4__["Slider"](div, {
            id: 'BallColor',
            label: 'Ball Color',
            min: 0,
            max: 100,
            value: 50,
            colors: skinTones,
            oninput: function () {
                _this.renderer.uniforms.uObjColor = _this.ballColorSlider.glColor;
                _this.restart();
            }
        });
        // make sure gl matches the initial UI setting
        this.renderer.uniforms.uObjColor = this.ballColorSlider.glColor;
        this.ambientIntensitySlider = new _Slider__WEBPACK_IMPORTED_MODULE_4__["Slider"](div, {
            id: 'AmbientIntensity',
            label: 'Ambient Light',
            min: 0,
            max: 1,
            value: this.renderer.uniforms.uAmbientLightIntensity,
            colors: [_htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"].black, _htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"].white],
            oninput: function () {
                _this.renderer.uniforms.uAmbientLightIntensity = _this.ambientIntensitySlider.value;
                _this.restart();
            }
        });
    };
    PathTracerApp.prototype.delete = function () {
        cancelAnimationFrame(this.animationFrame);
        this.renderer.delete();
    };
    PathTracerApp.prototype.buildMenu = function (menubar) {
    };
    PathTracerApp.prototype.loadModel = function (query) {
        if (query && query.toLowerCase() === 'sphere') {
            this.renderer.uniforms.uBallRadius = 0;
            var radius = 0.5;
            var center = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, radius, 0]);
            var tObj = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_9__["TriangleObjBuilder"]();
            tObj.addSphere(8, radius, center);
            return Promise.resolve(tObj);
        }
        else if (query && query.toLowerCase() === 'cube') {
            this.renderer.uniforms.uBallRadius = 0;
            var size = 0.8;
            var center = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, size / 2.0, 0]);
            var tObj = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_9__["TriangleObjBuilder"]();
            tObj.addCube(size, center);
            return Promise.resolve(tObj);
        }
        else if (query && query.toLowerCase().endsWith('.obj')) {
            this.renderer.uniforms.uBallRadius = 0;
            return fetch(query)
                .then(function (res) { return res.text(); })
                .then(function (res) {
                var tObj = new _TriangleObjFile__WEBPACK_IMPORTED_MODULE_8__["TriangleObjFile"](query, res);
                return tObj;
            });
        }
        else {
            return Promise.resolve(null);
        }
    };
    PathTracerApp.prototype.setLightColor = function () {
        // update the colors for the intensity slider
        this.intensitySlider.colors = [_htmlColor__WEBPACK_IMPORTED_MODULE_5__["htmlColor"].black, this.lightColorSlider.htmlColor];
        // use the value in rendering
        this.renderer.uniforms.uLightColor = this.lightColorSlider.glColor;
        this.restart();
    };
    PathTracerApp.prototype.onDown = function (x, y) {
        this.pointerModeSpecial = (x < 0.1 * this.canvas.width) ? true : false;
        this.pos = _SphericalCoord__WEBPACK_IMPORTED_MODULE_3__["SphericalCoord"].fromXYZ(this.renderer.uniforms.uLightPos.values);
    };
    PathTracerApp.prototype.onMove = function (pos, delta) {
        if (this.pointerMode === PointerMode.View) {
            if (this.pointerModeSpecial) {
                this.zoomZ -= (delta.y) * 0.01;
                this.zoomZ = Object(_Globals__WEBPACK_IMPORTED_MODULE_7__["clamp"])(this.zoomZ, 1, 8);
            }
            else {
                // update the angles based on how far we moved since last time
                this.angleY -= (delta.x) * 0.01;
                this.angleX += (delta.y) * 0.01;
                // don't go upside down
                this.angleX = Math.max(this.angleX, -Math.PI / 2 + 0.01);
                this.angleX = Math.min(this.angleX, Math.PI / 2 - 0.01);
            }
        }
        else if (this.pointerMode === PointerMode.Light) {
            if (this.pointerModeSpecial) {
                this.pos.radius -= (delta.y) * 0.005;
                this.pos.radius = Object(_Globals__WEBPACK_IMPORTED_MODULE_7__["clamp"])(this.pos.radius, this.renderer.uniforms.uBallRadius + 0.5, 5);
                this.renderer.uniforms.uLightPos.values = this.pos.toXYZ();
            }
            else {
                this.pos.rotationAngle += (-delta.x);
                this.pos.elevationAngle += (-delta.y);
                this.pos.elevationAngle = Object(_Globals__WEBPACK_IMPORTED_MODULE_7__["clamp"])(this.pos.elevationAngle, 0, 180);
                this.renderer.uniforms.uLightPos.values = this.pos.toXYZ();
            }
        }
        // clear the sample buffer
        this.restart();
    };
    /**
     * Processes a click/touch event at the designated coordinates. If a hit
     * occurs, the clicked on view is swapped for the primary view and true
     * is returned. If no hit occurs, false is returned.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @returns true if a hit on one of the views occurs.
     */
    PathTracerApp.prototype.click = function (x, y) {
        // TODO handle this within the PathTracer class so that we don't have to hard code view stuff
        var size = 0.2 * this.canvas.width;
        if (y < size) {
            if (x > this.canvas.width - 1 * size) {
                this.swap(2);
                this.setDescription();
                return true;
            }
            else if (x > this.canvas.width - 2 * size) {
                this.swap(1);
                this.setDescription();
                return true;
            }
            else if (x > this.canvas.width - 3 * size) {
                this.swap(0);
                this.setDescription();
                return true;
            }
        }
        return false;
    };
    PathTracerApp.prototype.setDescription = function () {
        var description = document.getElementById('description');
        switch (this.renderer.renderMode) {
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Artist:
                description.innerText = "";
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Chroma:
                description.innerText = "Chroma View: red=highest chroma";
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Value:
                description.innerText = "Value View";
                break;
            case _PathTracerRenderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Bands:
                description.innerText = "5 Color + Highlight View";
                break;
        }
    };
    PathTracerApp.prototype.updateTexture = function () {
        var modelview = _Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makeLookAt(this.renderer.uniforms.uEye, new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, 1, 0]), // center point
        new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([0, 1, 0]) // up vector
        );
        var projection = _Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"].makePerspective(55, 1, 0.1, 100);
        var modelviewProjection = projection.multM(modelview);
        this.renderer.updateTexture(modelviewProjection);
    };
    ;
    PathTracerApp.prototype.displayTexture = function () {
        this.renderer.displayTexture();
    };
    ;
    PathTracerApp.prototype.restart = function () {
        if (this.renderer) {
            this.renderer.restart();
        }
    };
    PathTracerApp.prototype.swap = function (pos) {
        this.renderer.swap(pos);
    };
    PathTracerApp.prototype.tick = function () {
        var _this = this;
        this.updateTimerLabel();
        this.updateProgress();
        if (this.renderer.uniforms.uSample < this.MAX_SAMPLES) {
            this.renderer.uniforms.uEye.values[0] = this.zoomZ * Math.sin(this.angleY) * Math.cos(this.angleX);
            this.renderer.uniforms.uEye.values[1] = this.zoomZ * Math.sin(this.angleX);
            this.renderer.uniforms.uEye.values[2] = this.zoomZ * Math.cos(this.angleY) * Math.cos(this.angleX);
            this.updateTexture();
            this.displayTexture();
        }
        this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
    };
    PathTracerApp.prototype.updateTimerLabel = function () {
        var t = window.performance.now();
        var drawTimeLabel = document.getElementById('drawTime');
        if (this.lastTimes.length > 0) {
            var elapsedMs = (t - this.lastTimes[0]) / this.lastTimes.length;
            drawTimeLabel.innerText = elapsedMs.toFixed(0) + 'ms';
        }
        this.lastTimes.push(t);
        if (this.lastTimes.length > 30) {
            this.lastTimes.shift();
        }
        drawTimeLabel.style.visibility = this.renderer.uniforms.uSample < this.MAX_SAMPLES ? 'visible' : 'hidden';
    };
    PathTracerApp.prototype.updateProgress = function () {
        var progress = this.renderer.uniforms.uSample / this.MAX_SAMPLES;
        var bar = document.getElementById('progressBar');
        if (progress >= 0 && progress < 1) {
            bar.style.visibility = 'visible';
            var w = this.canvas.width;
            bar.style.right = w * (1 - progress) + 'px';
        }
        else {
            bar.style.visibility = 'hidden';
        }
    };
    return PathTracerApp;
}());



/***/ }),

/***/ "./src/PathTracerObj.ts":
/*!******************************!*\
  !*** ./src/PathTracerObj.ts ***!
  \******************************/
/*! exports provided: PathTracerObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerObj", function() { return PathTracerObj; });
/* harmony import */ var _Volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Volume */ "./src/Volume.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/IndexedVec3.ts");




/**
 * Wrapper for TriangleObj used by the PathTracer app. Adds the ability to
 * move vertices (as opposed to using a tranformation matrix) and to break
 * things down into volumes.
 */
var PathTracerObj = /** @class */ (function () {
    function PathTracerObj(tObj) {
        this.volumes = [];
        this.tObj = tObj;
        this.autoCenter();
        this.breakIntoVolumes();
    }
    /**
     * Scales the object, centers it, and puts it on the floor at y=0
     */
    PathTracerObj.prototype.autoCenter = function () {
        var center = this.tObj.box.center;
        var trans = new _Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([-center.x, -center.y + this.tObj.height / 2, -center.z]);
        var scale = 2 / this.tObj.diagonal;
        for (var i = 0; i < this.tObj.numVertices; i++) {
            var v = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_3__["IndexedVec3"](this.tObj.vertices, i);
            v.x = (v.x + trans.x) * scale;
            v.y = (v.y + trans.y) * scale;
            v.z = (v.z + trans.z) * scale;
        }
        this.tObj.box.min.x = (this.tObj.box.min.x + trans.x) * scale;
        this.tObj.box.min.y = (this.tObj.box.min.y + trans.y) * scale;
        this.tObj.box.min.z = (this.tObj.box.min.z + trans.z) * scale;
        this.tObj.box.max.x = (this.tObj.box.max.x + trans.x) * scale;
        this.tObj.box.max.y = (this.tObj.box.max.y + trans.y) * scale;
        this.tObj.box.max.z = (this.tObj.box.max.z + trans.z) * scale;
        for (var i = 0; i < this.volumes.length; i++) {
            var v = this.volumes[i];
            v.boxMin.x = (v.boxMin.x + trans.x) * scale;
            v.boxMin.y = (v.boxMin.y + trans.y) * scale;
            v.boxMin.z = (v.boxMin.z + trans.z) * scale;
            v.boxMax.x = (v.boxMax.x + trans.x) * scale;
            v.boxMax.y = (v.boxMax.y + trans.y) * scale;
            v.boxMax.z = (v.boxMax.z + trans.z) * scale;
        }
    };
    /**
     * Breaks the object into evenly spaced volumes. The number of volumes is automatically
     * determined based on the number of triangles.
     */
    PathTracerObj.prototype.breakIntoVolumes = function () {
        var numSteps;
        if (this.tObj.numTriangles < 40) {
            numSteps = 1;
        }
        else if (this.tObj.numTriangles < 1500) {
            numSteps = 2;
        }
        else {
            numSteps = 3;
        }
        this.volumes = [];
        for (var i = 0; i < Math.pow(numSteps, 3); i++) {
            this.volumes.push(new _Volume__WEBPACK_IMPORTED_MODULE_0__["Volume"]());
        }
        for (var i = 0; i < this.tObj.numTriangles; i++) {
            var t = this.tObj.getTriangle(i);
            var x = Math.floor(numSteps * (t.minX - this.tObj.box.min.x) / (this.tObj.box.width));
            var y = Math.floor(numSteps * (t.minY - this.tObj.box.min.y) / (this.tObj.box.height));
            var z = Math.floor(numSteps * (t.minZ - this.tObj.box.min.z) / (this.tObj.box.depth));
            x = Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(x, 0, numSteps - 1);
            y = Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(y, 0, numSteps - 1);
            z = Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["clamp"])(z, 0, numSteps - 1);
            var index = x + y * numSteps + z * numSteps * numSteps;
            this.volumes[index].push(t);
        }
    };
    return PathTracerObj;
}());



/***/ }),

/***/ "./src/PathTracerRenderer.ts":
/*!***********************************!*\
  !*** ./src/PathTracerRenderer.ts ***!
  \***********************************/
/*! exports provided: RenderMode, PathTracerRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderMode", function() { return RenderMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathTracerRenderer", function() { return PathTracerRenderer; });
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _shaders_PathTracerToScreenVertex_glsl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/PathTracerToScreenVertex.glsl */ "./src/shaders/PathTracerToScreenVertex.glsl");
/* harmony import */ var _shaders_PathTracerToScreenFragment_glsl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shaders/PathTracerToScreenFragment.glsl */ "./src/shaders/PathTracerToScreenFragment.glsl");
/* harmony import */ var _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shaders/PathTracerToTextureVertex.glsl */ "./src/shaders/PathTracerToTextureVertex.glsl");
/* harmony import */ var _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shaders/PathTracerToTextureFragment.glsl */ "./src/shaders/PathTracerToTextureFragment.glsl");
/* harmony import */ var _ColorRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ColorRange */ "./src/ColorRange.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Profiler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Profiler */ "./src/Profiler.ts");
/* harmony import */ var _glUniform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./glUniform */ "./src/glUniform.ts");
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");
/* harmony import */ var _ColorAnalyzer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ColorAnalyzer */ "./src/ColorAnalyzer.ts");
/* harmony import */ var _glUniformBlock__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./glUniformBlock */ "./src/glUniformBlock.ts");
/* harmony import */ var _glTexture__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./glTexture */ "./src/glTexture.ts");
/* harmony import */ var _glFrameBuffer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./glFrameBuffer */ "./src/glFrameBuffer.ts");
/* harmony import */ var _PathTracerObj__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PathTracerObj */ "./src/PathTracerObj.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _SphericalCoord__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SphericalCoord */ "./src/SphericalCoord.ts");
/* harmony import */ var _glAttributeBuffer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./glAttributeBuffer */ "./src/glAttributeBuffer.ts");



















/**
 * Rendering mode for displaying the texture
 */
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["Artist"] = 0] = "Artist";
    RenderMode[RenderMode["Value"] = 1] = "Value";
    RenderMode[RenderMode["Chroma"] = 2] = "Chroma";
    RenderMode[RenderMode["Bands"] = 3] = "Bands";
})(RenderMode || (RenderMode = {}));
var Uniforms = /** @class */ (function () {
    function Uniforms() {
        this.uScale = 1.0;
        this.uXOffset = 0.0;
        this.uYOffset = 0.0;
        this.uMode = 0;
        this.uMaxChroma = 1.0;
        this.uLightAlpha = 1001;
        this.uShadowAlpha = 1000;
        this.uLightIntensity = 0.7;
        this.uLightColor = new _glColor__WEBPACK_IMPORTED_MODULE_16__["glColor3"]([1.0, 1.0, 1.0]);
        this.uLightPos = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"](new _SphericalCoord__WEBPACK_IMPORTED_MODULE_17__["SphericalCoord"](2, 60, 110).toXYZ());
        this.uAmbientLightIntensity = 0.3;
        this.uObjColor = new _glColor__WEBPACK_IMPORTED_MODULE_16__["glColor3"]([0.5, 0.5, 0.8]);
        this.uBallRadius = 0.5;
        this.uEye = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        this.uTextureSize = 256;
        this.uRandom = Math.random();
        this.uRay00 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        this.uRay01 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        this.uRay10 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        this.uRay11 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        this.uSample = 0.0;
    }
    return Uniforms;
}());
/**
 * Class that does the work of building the Path Traced texture
 */
var PathTracerRenderer = /** @class */ (function () {
    function PathTracerRenderer(glCtx) {
        this.gl = null;
        this.uniforms = new Uniforms();
        this.mainView = RenderMode.Artist;
        this.smallViews = [
            RenderMode.Chroma,
            RenderMode.Value,
            RenderMode.Bands,
        ];
        this.vertices = [
            -1, -1,
            -1, +1,
            +1, -1,
            +1, +1
        ];
        this.gl = glCtx;
        var gl = this.gl;
        // larger texture is higher resolution, but takes longer to compute
        if (_Globals__WEBPACK_IMPORTED_MODULE_7__["isMobile"]) {
            this.uniforms.uTextureSize = 256;
        }
        else {
            // this.uniforms.uTextureSize = 512;
            this.uniforms.uTextureSize = 256;
        }
        this.analyzer = new _ColorAnalyzer__WEBPACK_IMPORTED_MODULE_11__["ColorAnalyzer"](this.uniforms.uTextureSize);
        // create framebuffer
        this.frameBuffer = new _glFrameBuffer__WEBPACK_IMPORTED_MODULE_14__["glFrameBuffer"](gl, this.uniforms.uTextureSize, this.uniforms.uTextureSize);
        // create two textures. One we display and one we draw to
        this.textures = [];
        for (var i = 0; i < 2; i++) {
            this.textures.push(this.frameBuffer.createTexture(_glTexture__WEBPACK_IMPORTED_MODULE_13__["glTextureStyle"].Float));
        }
        // create toScreen shader
        this.toScreenProgram = new _glProgram__WEBPACK_IMPORTED_MODULE_10__["glProgram"](gl, _shaders_PathTracerToScreenVertex_glsl__WEBPACK_IMPORTED_MODULE_2__["default"], _shaders_PathTracerToScreenFragment_glsl__WEBPACK_IMPORTED_MODULE_3__["default"]);
        this.toScreenVertexAttribute = new _glAttributeBuffer__WEBPACK_IMPORTED_MODULE_18__["glAttributeBuffer"](gl, this.toScreenProgram, 'vertex');
        this.toScreenVertexAttribute.upload(this.vertices);
    }
    PathTracerRenderer.prototype.setObj = function (tObj) {
        this.compileShader(tObj);
    };
    PathTracerRenderer.prototype.delete = function () {
        this.frameBuffer.delete();
        this.textures[0].delete();
        this.textures[1].delete();
        if (this.vBlock) {
            this.vBlock.delete();
        }
        if (this.tBlock) {
            this.tBlock.delete();
        }
    };
    PathTracerRenderer.prototype.compileShader = function (tObj) {
        var gl = this.gl;
        if (this.toTextureProgram) {
            this.toTextureProgram.delete();
            this.toTextureProgram = null;
        }
        var p = new _Profiler__WEBPACK_IMPORTED_MODULE_8__["Profiler"]();
        // create the toTexture shader
        if (tObj && tObj.numTriangles > 0) {
            var pObj = new _PathTracerObj__WEBPACK_IMPORTED_MODULE_15__["PathTracerObj"](tObj);
            this.toTextureProgram = new _glProgram__WEBPACK_IMPORTED_MODULE_10__["glProgram"](gl, _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_4__["default"]
                .replace('<VERSION>', '#version 300 es')
                .replace('NOTHING', 'USE_TRIANGLES'), _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_5__["default"]
                .replace('<VERSION>', '#version 300 es')
                .replace('NOTHING', 'USE_TRIANGLES')
                .replace('<NUM_VERTICES>', tObj.numVertices.toString())
                .replace('<NUM_VOLUMES>', pObj.volumes.length.toString())
                .replace('<NUM_TRIANGLES>', tObj.numTriangles.toString()));
            // upload triangles to the GPU
            this.uploadUniforms(pObj);
        }
        else {
            this.toTextureProgram = new _glProgram__WEBPACK_IMPORTED_MODULE_10__["glProgram"](gl, _shaders_PathTracerToTextureVertex_glsl__WEBPACK_IMPORTED_MODULE_4__["default"]
                .replace('<VERSION>', ''), _shaders_PathTracerToTextureFragment_glsl__WEBPACK_IMPORTED_MODULE_5__["default"]
                .replace('<VERSION>', ''));
        }
        this.toTextureVertexAttribute = new _glAttributeBuffer__WEBPACK_IMPORTED_MODULE_18__["glAttributeBuffer"](gl, this.toTextureProgram, 'vertex');
        this.toTextureVertexAttribute.upload(this.vertices);
        p.log('compile');
    };
    /**
     * Uploads all the triangle data to WebGL
     *
     * @param program The program to upload to
     */
    PathTracerRenderer.prototype.uploadUniforms = function (pObj) {
        var gl = this.gl;
        var tObj = pObj.tObj;
        // upload the big chunks as Uniform Blocks
        var blockBinding = 2;
        this.vBlock = new _glUniformBlock__WEBPACK_IMPORTED_MODULE_12__["glUniformBlock"](gl, this.toTextureProgram, 'MyVerticesBlock', blockBinding);
        // put the data into a Float32Array for uploading
        var vData = new Float32Array(pObj.tObj.numVertices * 4);
        for (var i = 0; i < tObj.numVertices; i++) {
            vData[4 * i + 0] = tObj.vertices[3 * i + 0];
            vData[4 * i + 1] = tObj.vertices[3 * i + 1];
            vData[4 * i + 2] = tObj.vertices[3 * i + 2];
            vData[4 * i + 3] = 0;
        }
        this.vBlock.upload(vData);
        blockBinding = 3;
        this.tBlock = new _glUniformBlock__WEBPACK_IMPORTED_MODULE_12__["glUniformBlock"](gl, this.toTextureProgram, 'MyTrianglesBlock', blockBinding);
        // put the data into a Float32Array for uploading
        var tData = new Int32Array(tObj.numTriangles * 4);
        var index = 0;
        for (var v = 0; v < pObj.volumes.length; v++) {
            var vol = pObj.volumes[v];
            for (var i = 0; i < vol.triangles.length; i++) {
                var t = vol.triangles[i];
                tData[index++] = t.i1;
                tData[index++] = t.i2;
                tData[index++] = t.i3;
                tData[index++] = 0;
            }
        }
        this.tBlock.upload(tData);
        // Upload the volume info as a standard uniform
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_9__["glUniform"](gl, this.toTextureProgram);
        var startIndex = 0;
        for (var i = 0; i < pObj.volumes.length; i++) {
            var vol = pObj.volumes[i];
            uni.set('object.volumes[' + i + '].startIndex', startIndex, true);
            uni.set('object.volumes[' + i + '].numTriangles', vol.triangles.length, true);
            uni.set('object.volumes[' + i + '].boxMin', vol.boxMin);
            uni.set('object.volumes[' + i + '].boxMax', vol.boxMax);
            startIndex += vol.triangles.length;
        }
        uni.set('object.boxMin', tObj.box.min);
        uni.set('object.boxMax', tObj.box.max);
    };
    Object.defineProperty(PathTracerRenderer.prototype, "renderMode", {
        get: function () {
            return this.mainView;
        },
        enumerable: false,
        configurable: true
    });
    PathTracerRenderer.prototype.restart = function () {
        this.uniforms.uSample = 0;
    };
    PathTracerRenderer.prototype.getEyeRay = function (matrix, x, y) {
        var vec = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec4"]([x, y, 0, 1]);
        return matrix.multV(vec).divideByW().subtract(this.uniforms.uEye);
    };
    PathTracerRenderer.prototype.updateTexture = function (modelviewProjection) {
        var gl = this.gl;
        // implement aliasing by random sampling within a pixel
        var x = (Math.random() * 2 - 1) / this.uniforms.uTextureSize;
        var y = (Math.random() * 2 - 1) / this.uniforms.uTextureSize;
        var z = 0;
        var v = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x, y, z]);
        var jitter = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].fromTranslation(v);
        var matrix = jitter.multM(modelviewProjection).inverse();
        this.uniforms.uRay00 = this.getEyeRay(matrix, -1, -1);
        this.uniforms.uRay01 = this.getEyeRay(matrix, -1, +1);
        this.uniforms.uRay10 = this.getEyeRay(matrix, +1, -1);
        this.uniforms.uRay11 = this.getEyeRay(matrix, +1, +1);
        // set uniforms
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_9__["glUniform"](gl, this.toTextureProgram);
        uni.setAll(this.uniforms);
        // render to texture
        gl.viewport(0, 0, this.uniforms.uTextureSize, this.uniforms.uTextureSize);
        this.textures[0].bind();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
        this.frameBuffer.bind();
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.textures[1].get(), 0);
        this.toTextureVertexAttribute.bind(2);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        var data = this.analyzer.run(gl, this.uniforms.uLightAlpha, this.uniforms.uShadowAlpha);
        this.uniforms.uMaxChroma = data.maxChroma;
        var cr = new _ColorRange__WEBPACK_IMPORTED_MODULE_6__["ColorRange"]([data.darkestLightColor.toHtmlColor(), data.avgLightColor.toHtmlColor(), data.lightestLightColor.toHtmlColor()]);
        this.uniforms.uHighlightColor = data.highlightColor;
        this.uniforms.uLightLightColor = cr.get(0.85).toGlColor();
        this.uniforms.uMidLightColor = cr.get(0.5).toGlColor();
        this.uniforms.uDarkLightColor = cr.get(0.15).toGlColor();
        cr = new _ColorRange__WEBPACK_IMPORTED_MODULE_6__["ColorRange"]([data.darkestShadowColor.toHtmlColor(), data.avgShadowColor.toHtmlColor(), data.lightestShadowColor.toHtmlColor()]);
        //this.uniforms.uShadowColor = data.terminatorColor;
        this.uniforms.uShadowColor = data.avgShadowColor;
        this.uniforms.uReflectedLightColor = cr.get(1).toGlColor();
        this.uniforms.uDarkAccentColor = cr.get(0.0).toGlColor();
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        // ping pong textures
        this.textures.reverse();
        this.uniforms.uSample++;
        this.uniforms.uRandom = Math.random();
    };
    ;
    PathTracerRenderer.prototype.displayTexture = function () {
        var gl = this.gl;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        this.toScreenProgram.use();
        this.textures[0].bind();
        this.toScreenVertexAttribute.bind(2);
        // display the main screen
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_9__["glUniform"](gl, this.toScreenProgram);
        this.uniforms.uScale = 1.0;
        this.uniforms.uXOffset = 0.0;
        this.uniforms.uYOffset = 0.0;
        this.uniforms.uMode = this.mainView;
        uni.setAll(this.uniforms);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        // display the smaller views
        this.uniforms.uScale = 0.2;
        for (var i = 0; i < this.smallViews.length; i++) {
            this.uniforms.uXOffset = 1.0 - (this.smallViews.length - i - 0.5) * (2 * this.uniforms.uScale);
            this.uniforms.uYOffset = 1.0 - this.uniforms.uScale;
            this.uniforms.uMode = this.smallViews[i];
            uni.setAll(this.uniforms);
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        }
    };
    PathTracerRenderer.prototype.swap = function (pos) {
        this.smallViews = [
            RenderMode.Chroma,
            RenderMode.Value,
            RenderMode.Bands,
        ];
        if (this.mainView == this.smallViews[pos]) {
            this.mainView = RenderMode.Artist;
        }
        else {
            this.mainView = this.smallViews[pos];
            this.smallViews[pos] = RenderMode.Artist;
        }
        this.displayTexture();
    };
    return PathTracerRenderer;
}());



/***/ }),

/***/ "./src/PerspectiveCtrl.ts":
/*!********************************!*\
  !*** ./src/PerspectiveCtrl.ts ***!
  \********************************/
/*! exports provided: PerspectiveCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCtrl", function() { return PerspectiveCtrl; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PointerEventHandler */ "./src/PointerEventHandler.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.ts");
/* harmony import */ var _glSpace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glSpace */ "./src/glSpace.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Camera */ "./src/Camera.ts");
/* harmony import */ var _OverlayCanvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./OverlayCanvas */ "./src/OverlayCanvas.ts");







var PerspectiveCtrl = /** @class */ (function () {
    function PerspectiveCtrl(parent, provider) {
        var _this = this;
        this.provider = provider;
        var canvas = document.createElement('canvas');
        canvas.id = 'PerspectiveCanvas';
        parent.appendChild(canvas);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl', { alpha: false });
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_3__["Renderer"](context);
        this.renderer.showMiniView = false;
        this.renderer.showBall = false;
        this.renderer.options.camera = new _Camera__WEBPACK_IMPORTED_MODULE_5__["Camera"]({
            sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_5__["FixedSizeProvider"](2, 2)
        });
        this.renderer.options.camera.useOrthographic = true;
        this.renderer.showFloor = false;
        this.overlay = new _OverlayCanvas__WEBPACK_IMPORTED_MODULE_6__["OverlayCanvas"](parent, 'PerspectiveOverlayCanvas');
        this.handler = new _PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__["PointerEventHandler"](canvas);
        this.handler.onDown = function (pos) { return _this.onDown(pos); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
    }
    PerspectiveCtrl.prototype.delete = function () {
        this.renderer.delete();
    };
    PerspectiveCtrl.prototype.setEyePos = function (pos) {
        // convert to model space
        this.provider.eye = this.fromScreen(pos);
        if (this.onChange) {
            this.onChange();
        }
    };
    PerspectiveCtrl.prototype.onDown = function (pos) {
        this.setEyePos(pos);
    };
    PerspectiveCtrl.prototype.onDrag = function (pos, delta) {
        this.setEyePos(pos);
    };
    PerspectiveCtrl.prototype.setSize = function (width, height) {
        var gl = this.gl;
        gl.canvas.width = width;
        gl.canvas.height = height;
    };
    PerspectiveCtrl.prototype.render = function (modelMat) {
        // set the model matrix of the object to that of the primary
        // obj with an additional 90 deg rotation
        this.renderer.obj.model = modelMat.clone().rotY(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(90));
        // shift the view so that the object is on the far right. Far enough that there is
        // a square space on the end that contains the origin (center of object we're viewing)
        var viewSpace = this.renderer.options.camera.getViewSpace(this.gl);
        this.renderer.options.camera.lookAt = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-viewSpace.width / 2 + viewSpace.height / 2, 0, 0]);
        this.renderer.render();
        this.drawEye();
    };
    PerspectiveCtrl.prototype.fromScreen = function (pt) {
        var canvas = this.gl.canvas;
        var ar = canvas.width / canvas.height;
        // the space we're viewing is a 2x2 box on the right
        var width = 2 * ar; // space.width * (2.0 / space.height);
        var height = 2.0;
        var space = new _glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-width / 2, -height / 2, -100]), new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([width / 2, height / 2, 100]));
        var boxSize = space.height;
        var z = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["clamp"])((1 - pt.x / canvas.width) * space.width - boxSize / 2, boxSize / 2, 100);
        var y = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["clamp"])(space.bottom + (1 - pt.y / canvas.height) * space.height, -1, 1);
        return new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([this.provider.eye.x, y, z]);
    };
    PerspectiveCtrl.prototype.toScreen = function (pt) {
        var canvas = this.gl.canvas;
        var ar = canvas.width / canvas.height;
        // the space we're viewing is a 2x2 box on the right
        var width = 2 * ar; // space.width * (2.0 / space.height);
        var height = 2.0;
        var space = new _glSpace__WEBPACK_IMPORTED_MODULE_4__["glSpace"](new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-width / 2, -height / 2, -100]), new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([width / 2, height / 2, 100]));
        var boxSize = space.height;
        var x = (1 - (pt.z + boxSize / 2) / space.width) * canvas.width;
        var y = (1 - (pt.y - space.bottom) / space.height) * canvas.height;
        return new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]([x, y]);
    };
    PerspectiveCtrl.prototype.drawLine = function (ctx, pt1, pt2) {
        var p1 = this.toScreen(pt1);
        var p2 = this.toScreen(pt2);
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
    };
    PerspectiveCtrl.prototype.drawEye = function () {
        var gl = this.gl;
        var ctx = this.overlay.context;
        ctx.canvas.width = gl.canvas.width;
        ctx.canvas.height = gl.canvas.height;
        ctx.lineWidth = 2;
        if (_Globals__WEBPACK_IMPORTED_MODULE_0__["isMobile"]) {
            ctx.lineWidth = 2 * ctx.lineWidth;
        }
        ctx.clearRect(0, 0, this.gl.canvas.width, this.gl.canvas.height);
        var space = this.renderer.options.camera.getViewSpace(this.gl);
        // draw the front 'view' line
        ctx.strokeStyle = 'rgba(255,255,255,0.2)';
        this.drawLine(ctx, new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, space.top, space.height / 2]), new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, space.bottom, space.height / 2]));
        // draw line from the eye to the look at center
        this.drawLine(ctx, this.provider.eye, this.provider.lookAt);
        var p1 = this.toScreen(this.provider.eye);
        var p2 = this.toScreen(this.provider.lookAt);
        var angle = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toDeg"])(Math.atan2(p2.y - p1.y, p2.x - p1.x));
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        p2.x = p1.x + ctx.canvas.width * Math.cos(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(angle + this.provider.fov / 2));
        p2.y = p1.y + ctx.canvas.width * Math.sin(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(angle + this.provider.fov / 2));
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(p1.x, p1.y);
        p2.x = p1.x + ctx.canvas.width * Math.cos(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(angle - this.provider.fov / 2));
        p2.y = p1.y + ctx.canvas.width * Math.sin(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(angle - this.provider.fov / 2));
        ctx.lineTo(p2.x, p2.y);
        ctx.stroke();
        var center = this.toScreen(this.provider.eye);
        ctx.strokeStyle = 'white';
        ctx.fillStyle = 'rgba(255,255,255,0.6)';
        // draw the actual eye
        var openAngle = 70;
        var radius = 0.12 * ctx.canvas.height;
        var startAngle = angle + openAngle / 2;
        var endAngle = startAngle + (360 - openAngle);
        ctx.beginPath();
        ctx.moveTo(center.x, center.y);
        ctx.arc(center.x, center.y, radius, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(startAngle), Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(endAngle));
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        ctx.strokeStyle = 'transparent';
        ctx.fillStyle = 'rgba(255,255,255,0.3)';
        ctx.beginPath();
        ctx.moveTo(center.x, center.y);
        ctx.arc(center.x, center.y, radius, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(startAngle), Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(endAngle), true);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        // draw the look at point (center of object)
        center = this.toScreen(this.provider.lookAt);
        radius = 2;
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(center.x, center.y, radius, 0, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(360));
        ctx.fill();
    };
    PerspectiveCtrl.prototype.setModel = function (tObj) {
        this.renderer.setModel(tObj);
    };
    return PerspectiveCtrl;
}());



/***/ }),

/***/ "./src/PerspectivePanel.ts":
/*!*********************************!*\
  !*** ./src/PerspectivePanel.ts ***!
  \*********************************/
/*! exports provided: PerspectivePanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectivePanel", function() { return PerspectivePanel; });
/* harmony import */ var _Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Panel */ "./src/Panel.ts");
/* harmony import */ var _PerspectiveCtrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PerspectiveCtrl */ "./src/PerspectiveCtrl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PerspectivePanel = /** @class */ (function (_super) {
    __extends(PerspectivePanel, _super);
    function PerspectivePanel(parent, id, camera) {
        var _this = _super.call(this, parent, id) || this;
        _this.resizeListener = function () { return _this.onResize(); };
        _this.perspectiveCtrl = new _PerspectiveCtrl__WEBPACK_IMPORTED_MODULE_1__["PerspectiveCtrl"](_this.div, camera);
        _this.perspectiveCtrl.onChange = function () {
            if (_this.onChange) {
                _this.onChange();
            }
        };
        window.addEventListener('resize', _this.resizeListener);
        return _this;
    }
    PerspectivePanel.prototype.delete = function () {
        window.removeEventListener('resize', this.resizeListener);
        this.perspectiveCtrl.delete();
    };
    PerspectivePanel.prototype.render = function (model) {
        this.perspectiveCtrl.render(model);
    };
    PerspectivePanel.prototype.setModel = function (tObj) {
        this.perspectiveCtrl.setModel(tObj);
    };
    PerspectivePanel.prototype.show = function (value) {
        if (value === true) {
            this.onResize();
        }
    };
    PerspectivePanel.prototype.onResize = function () {
        this.perspectiveCtrl.setSize(this.div.clientWidth, this.div.clientHeight);
    };
    return PerspectivePanel;
}(_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/Plane.ts":
/*!**********************!*\
  !*** ./src/Plane.ts ***!
  \**********************/
/*! exports provided: Plane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plane", function() { return Plane; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");

/**
 * Represents a plane defined by a*x + b*y + c*z = d
 */
var Plane = /** @class */ (function () {
    /**
     * @param pt A point on the plane perpendicular to the origin
     * @param origin If the perpendicular point is not the origin, specify it here
     */
    function Plane(pt, origin) {
        if (!origin) {
            origin = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].origin;
        }
        this.origin = origin;
        this.a = origin.x - pt.x;
        this.b = origin.y - pt.y;
        this.c = origin.z - pt.z;
        this.d = this.a * this.a + this.b * this.b + this.c * this.c;
        this.distanceTerm = Math.sqrt(this.d);
    }
    /**
     * Computes the distance to a point.
     *
     * @param pt The point.
     * @returns the Distance.
     */
    Plane.prototype.distToPt = function (pt) {
        var x = pt.x - this.origin.x;
        var y = pt.y - this.origin.y;
        var z = pt.z - this.origin.z;
        return Math.abs(this.a * x + this.b * y + this.c * z + this.d) / this.distanceTerm;
    };
    return Plane;
}());



/***/ }),

/***/ "./src/PointerEventHandler.ts":
/*!************************************!*\
  !*** ./src/PointerEventHandler.ts ***!
  \************************************/
/*! exports provided: PointerEventHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointerEventHandler", function() { return PointerEventHandler; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");

var DBL_CLICK_TIME = 300; // ms
/**
 * Utility class for managing touch/mouse events over a html element
 */
var PointerEventHandler = /** @class */ (function () {
    function PointerEventHandler(element) {
        var _this = this;
        this.mouseDown = false;
        this.ctrlKey = false;
        this.primaryTouchId = -1;
        this.secondaryTouchId = -1;
        this.element = element;
        // element.ontouch isn't supported on desktop devices so use addEventListener instead
        element.addEventListener('touchstart', function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            // if this is the first touch
            if (event.touches.length === 1) {
                // record the primary touch id
                _this.primaryTouchId = event.touches[0].identifier;
                // send out onDown() and potentially onDblClick() events
                var pos = _this.getPos(event.touches[0]);
                var time = Date.now();
                if (time - _this.lastTouchTime < DBL_CLICK_TIME) {
                    _this.ourDblClick(pos);
                }
                else {
                    _this.ourOnDown(pos);
                }
                _this.lastTouchTime = time;
            }
            // if this is the second touch
            else if (event.touches.length === 2 && _this.primaryTouchId >= 0) {
                // record the secondary touch id. It will always be the second element when
                // there are only two elements
                _this.secondaryTouchId = event.touches[1].identifier;
                // set values for gestures
                var distance = _this.computeTouchDistance(event);
                _this.initialTouchDistance = distance;
                _this.lastTouchDistance = distance;
                _this.lastTouchAngle = _this.computeTouchAngle(event);
                _this.lastTouchCenter = _this.computeTouchCenter(event);
            }
        });
        element.addEventListener('touchmove', function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            // if the initial two touches are active
            if (_this.primaryTouchId >= 0 && _this.secondaryTouchId >= 0) {
                // send out gesture events
                var distance = _this.computeTouchDistance(event);
                var scale = distance / _this.initialTouchDistance;
                var change = distance / _this.lastTouchDistance;
                _this.ourOnScale(scale, change);
                _this.lastTouchDistance = distance;
                var angle = _this.computeTouchAngle(event);
                _this.ourOnRotate(angle, angle - _this.lastTouchAngle);
                _this.lastTouchAngle = angle;
                var center = _this.computeTouchCenter(event);
                // reverse Y values so the bottom is zero instead of the top
                var delta = [center.x - _this.lastTouchCenter.x, _this.lastTouchCenter.y - center.y];
                _this.ourOnTranslate(new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"](delta));
                _this.lastTouchCenter = center;
            }
            // if only the initial touch is active
            else if (_this.primaryTouchId >= 0) {
                // send out the drag event
                if (_this.mouseDown) {
                    var touch = _this.getTouch(event, _this.primaryTouchId);
                    var pos = _this.getPos(touch);
                    _this.ourOnDrag(pos);
                }
            }
        });
        element.addEventListener('touchend', function (event) {
            _this.ctrlKey = event.ctrlKey;
            // prevent the browser from using the event
            event.preventDefault();
            if (_this.secondaryTouchId >= 0) {
                if (_this.getTouch(event, _this.secondaryTouchId) === null) {
                    _this.secondaryTouchId = -1;
                    // if we lifted the second finger, but not the first, go back
                    // to the drag gesture, but adjust the rememberd position to
                    // be the current one so that things don't jump
                    var touch = _this.getTouch(event, _this.primaryTouchId);
                    if (touch) {
                        _this.lastPos = _this.getPos(touch);
                    }
                }
            }
            if (_this.primaryTouchId >= 0) {
                if (_this.getTouch(event, _this.primaryTouchId) === null) {
                    _this.primaryTouchId = -1;
                    _this.ourOnUp();
                }
            }
            if (_this.secondaryTouchId === -1 || _this.primaryTouchId === -1) {
                _this.initialTouchDistance = -1;
                _this.lastTouchDistance = -1;
                _this.lastTouchAngle = -1;
                _this.lastTouchCenter = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([-1, -1]);
            }
        });
        element.onmousedown = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([event.layerX, event.layerY]);
            _this.ourOnDown(pos);
            // disable selection because dragging is used for rotating the camera and moving objects
            return false;
        };
        element.onmousemove = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([event.layerX, event.layerY]);
            if (_this.mouseDown) {
                _this.ourOnDrag(pos);
            }
        };
        element.onmouseup = function (event) {
            _this.ctrlKey = event.ctrlKey;
            _this.ourOnUp();
        };
        element.onmouseleave = function (event) {
            _this.mouseDown = false;
        };
        element.ondblclick = function (event) {
            _this.ctrlKey = event.ctrlKey;
            var pos = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([event.layerX, event.layerY]);
            _this.ourDblClick(pos);
        };
    }
    PointerEventHandler.prototype.getTouch = function (event, id) {
        for (var i = 0; i < event.touches.length; i++) {
            var touch = event.touches[i];
            if (touch.identifier === id) {
                return touch;
            }
        }
        // no match was found
        return null;
    };
    PointerEventHandler.prototype.getPos = function (touch) {
        var rect = this.element.getBoundingClientRect();
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([touch.clientX - rect.x, touch.clientY - rect.y]);
    };
    PointerEventHandler.prototype.getTouches = function (event) {
        if (this.primaryTouchId < 0 || this.secondaryTouchId < 0) {
            throw Error('Two touches expected');
        }
        return {
            primaryTouch: this.getTouch(event, this.primaryTouchId),
            secondaryTouch: this.getTouch(event, this.secondaryTouchId),
        };
    };
    PointerEventHandler.prototype.computeTouchDistance = function (event) {
        var touches = this.getTouches(event);
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    };
    PointerEventHandler.prototype.computeTouchAngle = function (event) {
        var touches = this.getTouches(event);
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return Math.atan2(y2 - y1, x2 - x1);
    };
    PointerEventHandler.prototype.computeTouchCenter = function (event) {
        var touches = this.getTouches(event);
        var x1 = touches.primaryTouch.screenX;
        var y1 = touches.primaryTouch.screenY;
        var x2 = touches.secondaryTouch.screenX;
        var y2 = touches.secondaryTouch.screenY;
        return new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([(x1 + x2) / 2, (y1 + y2) / 2]);
    };
    PointerEventHandler.prototype.ourOnDown = function (pos) {
        // check for a click handler
        if (this.onClick && this.onClick(pos.clone())) {
            return;
        }
        // if not handled by a click hander, send the onDown event
        else {
            this.mouseDown = true;
            this.lastPos = pos.clone();
            if (this.onDown) {
                this.onDown(pos.clone());
            }
        }
    };
    PointerEventHandler.prototype.ourOnUp = function () {
        this.mouseDown = false;
        if (this.onUp) {
            this.onUp();
        }
    };
    PointerEventHandler.prototype.ourOnDrag = function (pos) {
        if (this.onDrag) {
            var delta = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec2"]([pos.x - this.lastPos.x, pos.y - this.lastPos.y]);
            this.onDrag(pos.clone(), delta);
        }
        this.lastPos = pos.clone();
    };
    PointerEventHandler.prototype.ourDblClick = function (pos) {
        if (this.onDblClick) {
            this.onDblClick(pos);
        }
    };
    PointerEventHandler.prototype.ourOnScale = function (scale, change) {
        if (this.onScale) {
            this.onScale(scale, change);
        }
    };
    PointerEventHandler.prototype.ourOnRotate = function (angle, delta) {
        if (this.onRotate) {
            this.onRotate(angle, delta);
        }
    };
    PointerEventHandler.prototype.ourOnTranslate = function (delta) {
        if (this.onTranslate) {
            this.onTranslate(delta);
        }
    };
    return PointerEventHandler;
}());



/***/ }),

/***/ "./src/Profiler.ts":
/*!*************************!*\
  !*** ./src/Profiler.ts ***!
  \*************************/
/*! exports provided: Profiler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Profiler", function() { return Profiler; });
/* harmony import */ var _Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Stopwatch */ "./src/Stopwatch.ts");

/**
 * Utility class for logging timing messages for profile code
 */
var Profiler = /** @class */ (function () {
    function Profiler() {
        this.sw = new _Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"]();
    }
    Object.defineProperty(Profiler.prototype, "elapsedMs", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return this.sw.elapsedMs;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Prints a message to console of the elapsed time
     *
     * @param msg The message to print with the time
     */
    Profiler.prototype.log = function (msg) {
        console.log(msg + ' ' + this.elapsedMs.toFixed(1) + ' ms');
        this.sw.restart();
    };
    return Profiler;
}());



/***/ }),

/***/ "./src/Radiobutton.ts":
/*!****************************!*\
  !*** ./src/Radiobutton.ts ***!
  \****************************/
/*! exports provided: Radiobutton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Radiobutton", function() { return Radiobutton; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");

var Radiobutton = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Radiobutton(parent, setup) {
        var _this = this;
        var _a, _b;
        var id = (_a = setup.id) !== null && _a !== void 0 ? _a : 'Radiobutton';
        if (typeof setup.checked === 'function') {
            this.getState = setup.checked;
        }
        var div = document.createElement('div');
        div.id = id;
        div.className = 'RadiobuttonDiv';
        parent.appendChild(div);
        var label = document.createElement('label');
        label.id = id + 'Label';
        label.className = 'RadiobuttonLabel';
        label.innerText = (_b = setup.label) !== null && _b !== void 0 ? _b : '';
        div.appendChild(label);
        this.box = document.createElement('input');
        this.box.className = 'Radiobutton';
        this.box.type = 'radio';
        this.box.name = setup.group;
        this.box.id = id + 'Radiobutton';
        this.box.checked = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["getBooleanValue"])(setup.checked);
        this.box.onchange = function () {
            if (_this.box.checked) {
                if (setup.oncheck) {
                    setup.oncheck(_this);
                }
            }
            else {
                if (setup.onuncheck) {
                    setup.onuncheck(_this);
                }
            }
        };
        label.appendChild(this.box);
        var mark = document.createElement('span');
        mark.className = 'RadioCheckmark';
        mark.id = id + 'RadioCheckmark';
        label.appendChild(mark);
    }
    Object.defineProperty(Radiobutton.prototype, "checked", {
        get: function () {
            return this.box.checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Radiobutton.prototype, "enabled", {
        get: function () {
            return !this.box.disabled;
        },
        set: function (value) {
            this.box.disabled = !value;
        },
        enumerable: false,
        configurable: true
    });
    Radiobutton.prototype.check = function (value) {
        if (value === void 0) { value = true; }
        this.box.checked = value;
    };
    Radiobutton.prototype.refresh = function () {
        if (this.getState) {
            this.box.checked = this.getState();
        }
    };
    return Radiobutton;
}());



/***/ }),

/***/ "./src/Renderer.ts":
/*!*************************!*\
  !*** ./src/Renderer.ts ***!
  \*************************/
/*! exports provided: INITIAL_EYE, Contour, RenderMode, Reset, LightType, Renderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INITIAL_EYE", function() { return INITIAL_EYE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contour", function() { return Contour; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderMode", function() { return RenderMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reset", function() { return Reset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightType", function() { return LightType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return Renderer; });
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/ViewerVertex.glsl */ "./src/shaders/ViewerVertex.glsl");
/* harmony import */ var _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shaders/ViewerFragment.glsl */ "./src/shaders/ViewerFragment.glsl");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _glUniform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glUniform */ "./src/glUniform.ts");
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TriangleObj */ "./src/TriangleObj.ts");
/* harmony import */ var _glObject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./glObject */ "./src/glObject.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _TextureRenderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TextureRenderer */ "./src/TextureRenderer.ts");
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TriangleObjBuilder */ "./src/TriangleObjBuilder.ts");
/* harmony import */ var _glTexture__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./glTexture */ "./src/glTexture.ts");
/* harmony import */ var _glFrameBuffer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./glFrameBuffer */ "./src/glFrameBuffer.ts");
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ValueRange */ "./src/ValueRange.ts");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Camera */ "./src/Camera.ts");
/* harmony import */ var _Plane__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Plane */ "./src/Plane.ts");


















var BALL_RADIUS = 0.5;
var INITIAL_LIGHT_POS = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-1.0, 1.0, 1.5]);
var INITIAL_VIEW = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity;
var INITIAL_SHININESS = 15;
var INITIAL_LIGHT_INTENSITY = 1.0;
var INITIAL_FALLOFF = 0.5;
var INITIAL_EYE = [0, 0, 6]; // 3 times the max object dimension of 2. For a model, about 15 ft away
var Contour = /** @class */ (function () {
    function Contour(color, angle) {
        if (color instanceof _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]) {
            this.color = color;
        }
        else {
            this.color = new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([color, color, color]);
        }
        this.angle = angle;
    }
    return Contour;
}());

// Rendering modes. Must match values in ViewerFragment.glsl
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["Normal"] = 0] = "Normal";
    RenderMode[RenderMode["ContourPlanes"] = 1] = "ContourPlanes";
    RenderMode[RenderMode["ContourValues"] = 2] = "ContourValues";
    RenderMode[RenderMode["LightAndShadow"] = 3] = "LightAndShadow";
    RenderMode[RenderMode["HighlightTerminator"] = 4] = "HighlightTerminator";
    RenderMode[RenderMode["HighlightShadow"] = 5] = "HighlightShadow";
    RenderMode[RenderMode["EmphasizeHighlights"] = 6] = "EmphasizeHighlights";
})(RenderMode || (RenderMode = {}));
var Reset;
(function (Reset) {
    Reset[Reset["All"] = 0] = "All";
    Reset[Reset["View"] = 1] = "View";
    Reset[Reset["Lights"] = 2] = "Lights";
    Reset[Reset["Rendering"] = 3] = "Rendering";
})(Reset || (Reset = {}));
var LightType;
(function (LightType) {
    LightType[LightType["Point"] = 0] = "Point";
    LightType[LightType["Directional"] = 1] = "Directional";
})(LightType || (LightType = {}));
/**
 * Class that renders triangles and a light source
 */
var Renderer = /** @class */ (function () {
    function Renderer(glCtx) {
        this.gl = null;
        this.yellow = new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([1.0, 0.9, 0.7]);
        this.options = {
            view: _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity,
            valueRange: _ValueRange__WEBPACK_IMPORTED_MODULE_15__["ValueRange"].Standard,
            lightPos: INITIAL_LIGHT_POS.clone(),
            lightType: LightType.Point,
            falloff: INITIAL_FALLOFF,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: true,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_16__["Camera"](),
            whiteColor: _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"].modelWhite,
            blackColor: _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"].modelBlack,
            useShadows: true,
            renderMode: RenderMode.Normal,
        };
        this.arrowOptions = {
            view: _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity,
            valueRange: new _ValueRange__WEBPACK_IMPORTED_MODULE_15__["ValueRange"](1.0, 0.4, 0.1),
            lightPos: new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-1, 0.5, 0.5]),
            lightType: LightType.Directional,
            falloff: 0.0,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: false,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_16__["Camera"]({
                sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_16__["FixedSizeProvider"](2, 2),
                useOrthographic: true,
            }),
            whiteColor: this.yellow,
            blackColor: _htmlColor__WEBPACK_IMPORTED_MODULE_10__["htmlColor"].black.toGlColor(),
            useShadows: false,
            renderMode: RenderMode.Normal,
        };
        this.ballOptions = {
            view: _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity,
            valueRange: _ValueRange__WEBPACK_IMPORTED_MODULE_15__["ValueRange"].Standard,
            lightPos: new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-1, 0.5, 0.5]),
            lightType: LightType.Directional,
            falloff: 0.0,
            lightIntensity: INITIAL_LIGHT_INTENSITY,
            contours: [],
            useCulling: true,
            showHighlights: false,
            shininess: INITIAL_SHININESS,
            camera: new _Camera__WEBPACK_IMPORTED_MODULE_16__["Camera"]({
                sizeProvider: new _Camera__WEBPACK_IMPORTED_MODULE_16__["FixedSizeProvider"](2, 2),
                useOrthographic: true,
            }),
            whiteColor: _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"].modelWhite,
            blackColor: _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"].modelBlack,
            useShadows: false,
            renderMode: RenderMode.Normal,
        };
        // size of the smaller view
        this.miniSize = 0.2;
        this.showShadowMap = false;
        this.showMiniView = true;
        this.showBall = true;
        this.showFloor = true;
        this.showGrid = false;
        this.miniViewShowContours = false;
        this.lockFloor = false;
        this.gl = glCtx;
        var gl = this.gl;
        // enable z-buffer
        gl.enable(gl.DEPTH_TEST);
        // enable alpha values
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        this.program = new _glProgram__WEBPACK_IMPORTED_MODULE_14__["glProgram"](gl, _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_2__["default"], _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_3__["default"]);
        var tBall = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_11__["TriangleObjBuilder"]('Ball');
        tBall.addSphere(50, BALL_RADIUS, new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]));
        tBall.optimize(_TriangleObj__WEBPACK_IMPORTED_MODULE_6__["NormalType"].Smooth);
        this.ball = new _glObject__WEBPACK_IMPORTED_MODULE_7__["glObject"](gl, tBall, this.program);
        var tArrow = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_11__["TriangleObjBuilder"]('Light Arrow');
        tArrow.addArrow();
        this.arrow = new _glObject__WEBPACK_IMPORTED_MODULE_7__["glObject"](gl, tArrow, this.program);
        this.arrowOptions.camera.useOrthographic = true;
        var style = getComputedStyle(gl.canvas);
        var color = _htmlColor__WEBPACK_IMPORTED_MODULE_10__["htmlColor"].fromCss(style.backgroundColor).toGlColor();
        gl.clearColor(color.r, color.g, color.b, 1);
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        // tests
        /*
        let light = new Vec3([0, 10, 0]);
        let pt = new Vec3([2, 0, 0]);
        let mat = new Mat4();
        mat.translate(new Vec3([0, -100, 0]));
        mat.scale(0.5);
        mat.rotZ(toRad(-90));
        mat.rotY(toRad(45));
        let xpt = mat.multVec3(pt);
        let xLight = mat.inverse().multVec3(light);
        let xOrigin = mat.inverse().multVec3(new Vec3([0, 0, 0]));
        let plane = new Plane(light);
        let plane2 = new Plane(xLight, xOrigin);
        console.log('\n\n----------------------');
        console.log('pt: ' + pt.toString(2) + '      xlight: ' + xLight.toString(2) + '   ' + (plane2.distToPt(pt) * mat.scaleFactors.x));
        console.log('xpt: ' + xpt.toString(2) + '    light: ' + light.toString(2) + '   ' + plane.distToPt(xpt));
        console.log('xOrigin: ' + xOrigin.toString(2));
        */
    }
    Object.defineProperty(Renderer.prototype, "ballColor", {
        set: function (color) {
            this.ballOptions.whiteColor = color;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.delete = function () {
        this.obj.delete();
        this.floor.delete();
        this.ball.delete();
        this.arrow.delete();
        if (this.shadowFrameBuffer) {
            this.shadowFrameBuffer.delete();
            this.shadowColorTexture.delete();
            this.shadowDepthTexture.delete();
        }
        this.obj = null;
        this.floor = null;
        this.ball = null;
        this.arrow = null;
        this.shadowFrameBuffer = null;
        this.shadowColorTexture = null;
        this.shadowDepthTexture = null;
    };
    Renderer.prototype.renderModeCanToggleHighlights = function () {
        if (this.options.renderMode === RenderMode.EmphasizeHighlights || this.options.renderMode === RenderMode.LightAndShadow) {
            return false;
        }
        else {
            return true;
        }
    };
    Renderer.prototype.rotX = function (angle) {
        this.obj.rotX(angle);
        if (this.lockFloor == false) {
            this.floor.rotX(angle);
        }
    };
    Renderer.prototype.rotY = function (angle) {
        this.obj.rotY(angle);
        if (this.lockFloor == false) {
            this.floor.rotY(angle);
        }
    };
    Renderer.prototype.rotZ = function (angle) {
        this.obj.rotZ(angle);
        if (this.lockFloor == false) {
            this.floor.rotZ(angle);
        }
    };
    Renderer.prototype.preRotX = function (angle) {
        this.obj.preRotX(angle);
        if (this.lockFloor == false) {
            this.floor.preRotX(angle);
        }
    };
    Renderer.prototype.preRotY = function (angle) {
        this.obj.preRotY(angle);
        if (this.lockFloor == false) {
            this.floor.preRotY(angle);
        }
    };
    Renderer.prototype.preRotZ = function (angle) {
        this.obj.preRotZ(angle);
        if (this.lockFloor == false) {
            this.floor.preRotZ(angle);
        }
    };
    Renderer.prototype.scale = function (scale) {
        this.obj.scale(scale);
        if (this.lockFloor == false) {
            this.floor.scale(scale);
        }
    };
    Renderer.prototype.translate = function (offset) {
        this.obj.translate(offset);
        if (this.lockFloor == false) {
            this.floor.translate(offset);
        }
    };
    Renderer.prototype.rotateLight = function (xRad, yRad) {
        var matX = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].fromRotX(yRad);
        var matY = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].fromRotY(xRad);
        var vec = _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec4"].fromVec3(this.options.lightPos, 1);
        vec = matX.multV(vec);
        vec = matY.multV(vec);
        this.options.lightPos = vec.xyz;
    };
    Object.defineProperty(Renderer.prototype, "tObj", {
        get: function () {
            return this.obj.tObj;
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.setModel = function (tObj) {
        if (this.obj) {
            this.obj.delete();
        }
        this.obj = new _glObject__WEBPACK_IMPORTED_MODULE_7__["glObject"](this.gl, tObj, this.program);
        this.options.camera.sizeProvider = new _Camera__WEBPACK_IMPORTED_MODULE_16__["ObjSizeProvider"](this.obj);
        // move the object so that the center is at [0,0,0] and it is scaled
        // so that it's diagonal is 2 units across
        var objScale = 2.0 / tObj.diagonal;
        this.obj.autoSize(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]), 2);
        if (this.floor) {
            this.floor.delete;
        }
        var tFloor = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_11__["TriangleObjBuilder"]('Floor');
        // make the floor size slightly larger than the object, centered at the bottom
        var radius = 4;
        var pos = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, -objScale * tObj.height / 2, 0]);
        tFloor.addDisk(50, radius, pos);
        this.floor = new _glObject__WEBPACK_IMPORTED_MODULE_7__["glObject"](this.gl, tFloor, this.program);
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_5__["glUniform"](this.gl, this.program);
        uni.set('uFloorCenter', tFloor.center);
        uni.set('uFloorRadius', radius);
        // reset the view and the light
        this.reset(Reset.All);
    };
    Renderer.prototype.reset = function (what) {
        switch (what) {
            case Reset.All:
                this.reset(Reset.Lights);
                this.reset(Reset.Rendering);
                this.reset(Reset.View);
                break;
            case Reset.Lights:
                this.options.lightPos = INITIAL_LIGHT_POS.clone();
                this.options.falloff = INITIAL_FALLOFF;
                this.options.lightIntensity = INITIAL_LIGHT_INTENSITY;
                this.options.valueRange.ambientIntensity = _ValueRange__WEBPACK_IMPORTED_MODULE_15__["ValueRange"].Standard.ambientIntensity;
                break;
            case Reset.View:
                this.options.view = INITIAL_VIEW.clone();
                this.obj.clearTransforms();
                this.floor.clearTransforms();
                this.options.camera.eye = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"](INITIAL_EYE);
                this.options.camera.lookAt = _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"].origin;
                this.options.camera.zoomFactor = 1;
                break;
            case Reset.Rendering:
                this.options.renderMode = RenderMode.Normal;
                this.options.showHighlights = true;
                this.options.shininess = INITIAL_SHININESS;
                this.options.valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_15__["ValueRange"].Standard;
                break;
        }
    };
    Renderer.prototype.render = function () {
        this.program.use();
        this.renderToShadowMap();
        this.renderToScreen();
    };
    Renderer.prototype.setValueRangeUniforms = function (valueRange) {
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_5__["glUniform"](this.gl, this.program);
        uni.set('uDiffuseIntensity', valueRange.diffuseIntensity);
        uni.set('uAmbientIntensity', valueRange.shadow);
        uni.set('uSpecularIntensity', valueRange.specularIntensity);
    };
    Renderer.prototype.setOptions = function (options) {
        var gl = this.gl;
        options.useCulling ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_5__["glUniform"](this.gl, this.program);
        uni.set('view', options.view);
        uni.set('lightView', this.lightView);
        uni.set('projection', options.camera.getProjection(this.gl));
        uni.set('uEye', options.camera.eye);
        uni.set('uOrthographic', options.camera.useOrthographic);
        uni.set('uUseShadows', options.useShadows);
        uni.seti('uRenderMode', options.renderMode);
        uni.set('uShowHighlights', options.showHighlights || options.renderMode === RenderMode.EmphasizeHighlights);
        uni.set('uShininess', options.shininess);
        var valueRange;
        if (options.renderMode === RenderMode.EmphasizeHighlights) {
            valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_15__["ValueRange"].EmphasizeHighlights;
        }
        else {
            valueRange = options.valueRange;
        }
        this.setValueRangeUniforms(valueRange);
        uni.set('uWhiteColor', options.whiteColor);
        uni.set('uBlackColor', options.blackColor);
        uni.seti('uNumContours', options.contours.length);
        for (var i = 0; i < options.contours.length; i++) {
            uni.set('uContourColors[' + i + ']', options.contours[i].color);
            uni.set('uContourAngles[' + i + ']', options.contours[i].angle);
        }
        uni.set('uPointLight', options.lightType === LightType.Point);
        uni.set('uFalloff', options.falloff);
        uni.set('uLightIntensity', options.lightIntensity);
        if (options.falloff === 0) {
            uni.set('uLightPos', options.lightPos);
        }
        else {
            // compute the minimum distance to the light. We'll use this value to auto-adjust
            // the light
            var dist = void 0;
            // We can get the distance in two ways. 1: transform all the points by the model
            // matrix and compute distances. This is expensive since we have to transform each
            // point so we instead, 2: do the inverse transform to the light and compute the
            // distance to the untransformed points.
            var boundingPts = this.obj.tObj.getBoundingPts();
            // get the inverse transform of the light position
            var obj = this.obj;
            var mat = obj.model.multM(obj.normalize);
            var inverse = mat.inverse();
            var xLightPos = inverse.multVec3(options.lightPos);
            if (options.lightType === LightType.Point) {
                dist = boundingPts.distToPoint(xLightPos);
            }
            else {
                // figure out the light plane for the inverse light
                var xOrigin = inverse.multVec3(_Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"].origin);
                var xPlane = new _Plane__WEBPACK_IMPORTED_MODULE_17__["Plane"](xLightPos, xOrigin);
                // distance to the raw object points
                dist = boundingPts.distToPlane(xPlane);
            }
            // to get the actual distance, we now need to reapply the scale factor to
            // get the true distance. The scale factor is the same in all directions
            // so just use the x value
            var s = obj.model.multM(obj.normalize).scaleFactors.x;
            dist = {
                min: dist.min * s,
                max: dist.max * s,
            };
            // we need to compute the distance to the light and the light intensity such that
            // the closest point gets lit with value 1 and the furthest point matches the
            // target falloff.
            //
            // - d is the distance the light needs to be from the closest point. Light falls off
            // with the square of distance.
            // - falloffDistance is the size of the object
            var falloffDistance = dist.max - dist.min;
            var d = (falloffDistance * Math.sqrt(1.0 - options.falloff)) / (1.0 - Math.sqrt(1.0 - options.falloff));
            // intensity = d^2 so that intensity at d (1/d^2) = 1.0
            var lightIntensityAtSource = d * d;
            uni.set('uLightIntensityAtSource', lightIntensityAtSource);
            // actual light position is measured from the object, not the origin. Shift 
            // it back
            var objToOrigin = options.lightPos.magnitude() - dist.min;
            options.lightPos = options.lightPos.normalize().mult(d + objToOrigin);
            uni.set('uLightPos', options.lightPos);
        }
        return uni;
    };
    Renderer.prototype.renderToShadowMap = function () {
        var gl = this.gl;
        var maxTextureSize = Math.min(gl.getParameter(gl.MAX_TEXTURE_SIZE));
        var desiredSize = this.options.camera.zoomFactor * Math.min(gl.canvas.width, gl.canvas.height);
        var size = 256;
        while (size < desiredSize && size * 2 <= maxTextureSize) {
            size *= 2;
        }
        if (!this.shadowFrameBuffer || size !== this.shadowFrameBuffer.size) {
            if (this.shadowFrameBuffer) {
                this.shadowFrameBuffer.delete();
                this.shadowColorTexture.delete();
                this.shadowDepthTexture.delete();
            }
            this.shadowFrameBuffer = new _glFrameBuffer__WEBPACK_IMPORTED_MODULE_13__["glFrameBuffer"](gl, size, size);
            this.shadowColorTexture = this.shadowFrameBuffer.createTexture(_glTexture__WEBPACK_IMPORTED_MODULE_12__["glTextureStyle"].Color);
            this.shadowDepthTexture = this.shadowFrameBuffer.createTexture(_glTexture__WEBPACK_IMPORTED_MODULE_12__["glTextureStyle"].Depth);
            this.shadowFrameBuffer.attachTexture(gl.COLOR_ATTACHMENT0, this.shadowColorTexture);
            this.shadowFrameBuffer.attachTexture(gl.DEPTH_ATTACHMENT, this.shadowDepthTexture);
            this.shadowFrameBuffer.check();
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        gl.viewport(0, 0, this.shadowFrameBuffer.width, this.shadowFrameBuffer.height);
        this.shadowFrameBuffer.bind();
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        var center = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        var up = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 1, 0]);
        var eye = this.options.lightPos;
        var mat = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makeLookAt(eye, center, up);
        mat.set(0, 3, 0);
        mat.set(1, 3, 0);
        mat.set(2, 3, 0);
        if (this.options.lightType === LightType.Directional) {
            // to avoid clipping, expand the z range to allow full rotation of
            // anything in a 3-3-3 cube.
            var maxSize = Math.sqrt(27);
            mat = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makeOrtho(-1, 1, -1, 1, maxSize, -maxSize).multM(mat);
            this.lightView = mat;
        }
        else {
            // TODO make point light sources work for shadow maps
            /*
            let fov = 2 * toDeg(Math.atan2(3 / 2, eye.z));
            console.log('fov=' + fov);
            mat = Mat4.makePerspective(fov, 1, 0.1, 20).multM(mat);
            this.lightView = mat;
            */
            var maxSize = Math.sqrt(27);
            mat = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makeOrtho(-1, 1, -1, 1, maxSize, -maxSize).multM(mat);
            this.lightView = mat;
        }
        var uni = this.setOptions(this.options);
        // change the view matrix so that our view is from the light
        uni.set('view', this.lightView);
        uni.set('projection', _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity);
        // don't try to use the shadow texture while we're creating it
        uni.set('uUseShadows', false);
        uni.seti('uRenderMode', RenderMode.Normal);
        gl.disable(gl.CULL_FACE);
        this.obj.draw();
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    };
    Renderer.prototype.renderToScreen = function () {
        var gl = this.gl;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // display the depth buffer for testing purposes
        if (this.showShadowMap) {
            gl.disable(gl.CULL_FACE);
            var tr = new _TextureRenderer__WEBPACK_IMPORTED_MODULE_9__["TextureRenderer"](gl);
            tr.render(this.shadowDepthTexture, this.shadowFrameBuffer.width, this.shadowFrameBuffer.height);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        else {
            this.shadowDepthTexture.bind();
            var style = getComputedStyle(gl.canvas);
            var color = _htmlColor__WEBPACK_IMPORTED_MODULE_10__["htmlColor"].fromCss(style.backgroundColor).toGlColor();
            gl.clearColor(color.r, color.g, color.b, 1);
            gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
            this.drawFloor();
            // draw the main object
            this.setOptions(this.options);
            this.obj.draw();
            gl.clear(gl.DEPTH_BUFFER_BIT);
            this.drawMiniView();
            this.drawBall();
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
    };
    Renderer.prototype.drawFloor = function () {
        if (this.showFloor) {
            var gl = this.gl;
            var uni = this.setOptions(this.options);
            // set the special mode for the floor
            uni.set('uRenderingFloor', true);
            uni.set('uShowGrid', this.showGrid);
            // cull polygons so we don't see the floor from below
            gl.enable(gl.CULL_FACE);
            gl.cullFace(gl.BACK);
            uni.seti('uRenderMode', RenderMode.Normal);
            //this.setValueRangeUniforms(ValueRange.Standard);
            this.floor.draw();
            uni.set('uRenderingFloor', false);
        }
    };
    Renderer.prototype.drawMiniView = function () {
        if (this.showMiniView) {
            var gl = this.gl;
            gl.enable(gl.CULL_FACE);
            var uni = this.setOptions(this.options);
            var clipSpace = this.options.camera.getClipSpace(gl);
            var projection = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].makeOrtho(clipSpace.left, clipSpace.right, clipSpace.bottom, clipSpace.top, clipSpace.near, clipSpace.far);
            uni.set('projection', projection);
            uni.set('uOthrographic', true);
            // draw the object in the upper right at a reduced size
            var view = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity;
            view.scale(this.miniSize);
            view.translate(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([clipSpace.max.x - this.miniSize, clipSpace.max.y - this.miniSize, 0]));
            uni.set('view', view);
            uni.seti('uRenderMode', this.miniViewShowContours ? RenderMode.ContourPlanes : RenderMode.Normal);
            this.obj.draw();
        }
    };
    Renderer.prototype.drawBall = function () {
        if (this.showBall === false) {
            return;
        }
        var gl = this.gl;
        // create a view matrix that renders in the upper left
        var clipSpace = this.options.camera.getClipSpace(gl);
        var view = _Mat__WEBPACK_IMPORTED_MODULE_0__["Mat4"].identity;
        view.scale(this.miniSize);
        view.translate(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([clipSpace.min.x + this.miniSize, clipSpace.max.y - this.miniSize, 0]));
        this.ballOptions.view = view.clone();
        this.ballOptions.valueRange = this.options.valueRange.clone();
        this.ballOptions.lightPos = this.options.lightPos.clone();
        this.ballOptions.lightType = this.options.lightType;
        this.ballOptions.falloff = this.options.falloff;
        // TODO compute distance and intensity for light for the ball
        this.ballOptions.lightIntensity = this.options.lightIntensity;
        this.ballOptions.showHighlights = this.options.showHighlights;
        this.ballOptions.shininess = this.options.shininess;
        this.ballOptions.renderMode = this.options.renderMode;
        this.ballOptions.contours = this.options.contours;
        var uni = this.setOptions(this.ballOptions);
        if (this.ballOptions.falloff > 0) {
            // TODO this code is similar to the code in setOptions. Combine it.
            var falloffDistance = 1.0; // ball diameter
            var d = (falloffDistance * Math.sqrt(1.0 - this.ballOptions.falloff)) / (1.0 - Math.sqrt(1.0 - this.ballOptions.falloff));
            // intensity = d^2 so that intensity at d (1/d^2) = 1.0
            var lightIntensityAtSource = d * d;
            uni.set('uLightIntensityAtSource', lightIntensityAtSource);
            // actual light position is measured from the object, not the origin. Shift 
            // it back
            var objToOrigin = 0.5;
            this.ballOptions.lightPos = this.ballOptions.lightPos.normalize().mult(d + objToOrigin);
            uni.set('uLightPos', this.ballOptions.lightPos);
        }
        this.ball.draw();
        // back out angles as if looking down the z-axis
        var x = -this.options.lightPos.x;
        var y = -this.options.lightPos.y;
        var z = -this.options.lightPos.z;
        // start by looking down from the Z direction
        var radius = Math.sqrt(x * x + y * y + z * z);
        var elevationAngle = Math.acos(z / radius);
        var rotationAngle = Math.atan2(y, x);
        // first reset things so that we're looking down the z-axis
        this.arrow.clearTransforms();
        this.arrow.translate(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0.0, 0.55, 0.0]));
        this.arrow.rotX(Object(_Globals__WEBPACK_IMPORTED_MODULE_4__["toRad"])(90));
        // rotate to match the light source
        this.arrow.rotY(-elevationAngle);
        this.arrow.rotZ(-rotationAngle);
        this.arrowOptions.view = view.clone();
        this.setOptions(this.arrowOptions);
        this.arrow.draw();
    };
    return Renderer;
}());



/***/ }),

/***/ "./src/Slider.ts":
/*!***********************!*\
  !*** ./src/Slider.ts ***!
  \***********************/
/*! exports provided: Slider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return Slider; });
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _ColorRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ColorRange */ "./src/ColorRange.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _htmlColorWithAlpha__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./htmlColorWithAlpha */ "./src/htmlColorWithAlpha.ts");




var RangeMapper = /** @class */ (function () {
    function RangeMapper(realMin, realMax) {
        this.sliderMin = 0;
        this.sliderMax = 1000;
        this.realMin = realMin;
        this.realMax = realMax;
    }
    Object.defineProperty(RangeMapper.prototype, "realRange", {
        get: function () {
            return this.realMax - this.realMin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeMapper.prototype, "sliderRange", {
        get: function () {
            return this.sliderMax - this.sliderMin;
        },
        enumerable: false,
        configurable: true
    });
    RangeMapper.prototype.sliderToReal = function (sliderValue) {
        return this.realMin + ((sliderValue - this.sliderMin) / this.sliderRange) * this.realRange;
    };
    RangeMapper.prototype.realToSlider = function (realValue) {
        return this.sliderMin + ((realValue - this.realMin) / this.realRange) * this.sliderRange;
    };
    return RangeMapper;
}());
/**
 * Class representing a slider composed of a label, input range, color span and value span
 */
var Slider = /** @class */ (function () {
    /**
     * @param parent The parent html object.
     * @param setup The setup data object
     */
    function Slider(parent, setup) {
        var _this = this;
        var _a, _b;
        var id = (_a = setup.id) !== null && _a !== void 0 ? _a : 'Slider';
        this._getText = setup.getText;
        var div = document.createElement('div');
        div.id = id;
        div.className = 'SliderDiv';
        parent.appendChild(div);
        this._label = document.createElement('label');
        this._label.id = id + 'Label';
        this._label.className = 'SliderLabel';
        this._label.innerText = (_b = setup.label) !== null && _b !== void 0 ? _b : '';
        div.appendChild(this._label);
        this._rangeMapper = new RangeMapper(setup.min, setup.max);
        this._range = document.createElement('input');
        this._range.type = 'range';
        this._range.id = id + 'Range';
        this._range.className = 'SliderRange';
        this._range.min = this._rangeMapper.sliderMin.toString();
        this._range.max = this._rangeMapper.sliderMax.toString();
        this._range.value = this._rangeMapper.realToSlider(setup.value).toString();
        this._range.addEventListener('input', function () {
            _this.updateSpanColor();
            _this.updateSpanText();
        });
        this._label.htmlFor = this._range.id;
        div.appendChild(this._range);
        if (setup.colors) {
            this._colorSpan = document.createElement('span');
            this._colorSpan.id = id + 'ColorSpan';
            this._colorSpan.className = 'SliderColorSpan';
            div.appendChild(this._colorSpan);
            // set the initial color.
            this.colors = setup.colors;
        }
        this._valueSpan = document.createElement('span');
        this._valueSpan.id = id + 'ValueSpan';
        this._valueSpan.className = 'SliderValueSpan';
        //      this._valueSpan.innerText = setup.value.toString();
        div.appendChild(this._valueSpan);
        // set the initial span text
        this.updateSpanText();
        if (setup.oninput) {
            this._range.oninput = function () { return setup.oninput(_this); };
        }
    }
    Object.defineProperty(Slider.prototype, "enabled", {
        get: function () {
            return !this._range.disabled;
        },
        set: function (value) {
            this._range.disabled = !value;
            if (value) {
                this._label.classList.remove('disabled');
                this._valueSpan.classList.remove('disabled');
                this._range.classList.remove('disabled');
            }
            else {
                this._label.classList.add('disabled');
                this._valueSpan.classList.add('disabled');
                this._range.classList.add('disabled');
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the span color to the currently selected color.
     */
    Slider.prototype.updateSpanColor = function () {
        if (this._colors) {
            var val = (this.value - this.min) / (this.max - this.min);
            var color = _htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"].fromColor(this._colors.get(val));
            this._colorSpan.style.backgroundColor = color.toHex();
        }
    };
    /**
  * Sets the span color to the currently selected color.
  */
    Slider.prototype.updateSpanText = function () {
        if (this._getText) {
            this._valueSpan.innerText = this._getText(this);
        }
    };
    Object.defineProperty(Slider.prototype, "range", {
        /**
         * Gets the html range object
         *
         * @returns The html range object.
         */
        get: function () {
            return this._range;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "value", {
        /**
         * Gets the current slider value
         *
         * @returns the current slider value
         */
        get: function () {
            return this._rangeMapper.sliderToReal(this._range.valueAsNumber);
        },
        /**
         * Sets the value of the slider (and associated content)
         *
         * @param val the desired slider value
         */
        set: function (val) {
            this._range.valueAsNumber = this._rangeMapper.realToSlider(val);
            this.updateSpanColor();
            this.updateSpanText();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "valueAsPercent", {
        /**
         * Gets the value of the slider as a percent [0-1] of the range
         *
         * @returns the value of the slider as a percent
         */
        get: function () {
            return this.value / (this.max - this.min);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "min", {
        /**
         * Gets the min slider value.
         *
         * @returns The min slider value.
         */
        get: function () {
            return this._rangeMapper.realMin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "max", {
        /**
         * Gets the max slider value.
         *
         * @returns The max slider value.
         */
        get: function () {
            return this._rangeMapper.realMax;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "colors", {
        /**
         * Sets the color for the slider
         */
        set: function (colors) {
            // store the colors
            this._colors = new _ColorRange__WEBPACK_IMPORTED_MODULE_1__["ColorRange"](colors);
            // build the gradient style for the range object
            var gradientStr = '90deg';
            for (var i = 0; i < colors.length; i++) {
                gradientStr += ', ' + colors[i].toCss();
            }
            this._range.style.background = 'linear-gradient(' + gradientStr + ')';
            // update the span color too
            this.updateSpanColor();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "htmlColor", {
        /**
         * Gets the current color as an htmlColor object.
         *
         * @returns The current color.
         */
        get: function () {
            if (this._colors) {
                var val = (this.value - this.min) / (this.max - this.min);
                return this._colors.get(val);
            }
            else {
                return _htmlColorWithAlpha__WEBPACK_IMPORTED_MODULE_3__["htmlColorWithAlpha"].transparent;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "glColor", {
        /**
         * Gets the current color as a glColor object.
         *
         * @returns The current color.
         */
        get: function () {
            if (this._colors) {
                var val = (this.value - this.min) / (this.max - this.min);
                return this._colors.get(val).toGlColor();
            }
            else {
                return new _glColor__WEBPACK_IMPORTED_MODULE_2__["glColor3"]([0, 0, 0]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Slider.prototype.refresh = function () {
        // TODO implement
    };
    return Slider;
}());



/***/ }),

/***/ "./src/SphericalCoord.ts":
/*!*******************************!*\
  !*** ./src/SphericalCoord.ts ***!
  \*******************************/
/*! exports provided: SphericalCoord */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalCoord", function() { return SphericalCoord; });
/**
 * Spherical coordinates based on the WebGL viewing system: x=left-right, y=up-down, z=near-far
 */
var SphericalCoord = /** @class */ (function () {
    /**
     * @param radius
     * @param elevationAngle
     * @param rotationAngle
     */
    function SphericalCoord(radius, elevationAngle, rotationAngle) {
        /**
         * The distance from the origin to the point
         */
        this.radius = 0;
        /**
         * The elevation from the floor to the point. 0 and 180 are on the
         * floor. 90 points up.
         */
        this.elevationAngle = 0;
        /**
         * The angle, when looking down from the top, to the point. 0 points right.
         */
        this.rotationAngle = 0;
        this.radius = radius;
        this.elevationAngle = elevationAngle;
        this.rotationAngle = rotationAngle;
    }
    /**
     * Creates a spherical coordinate from a cartesian point
     *
     * @param pos The cartesian point.
     * @returns The spherical coordinate.
     */
    SphericalCoord.fromXYZ = function (pos) {
        var x = pos[0];
        var y = pos[1];
        var z = pos[2];
        var radius = Math.sqrt(x * x + y * y + z * z);
        var rotationAngle = (180 / Math.PI) * Math.atan2(z, x);
        var elevationAngle = (180 / Math.PI) * Math.asin(y / radius);
        return new SphericalCoord(radius, elevationAngle, rotationAngle);
    };
    /**
     * Converts this spherical coordinate to a cartesian coordinate.
     *
     * @returns The cartesian coordinate.
     */
    SphericalCoord.prototype.toXYZ = function () {
        var floorRadius = this.radius * Math.cos((Math.PI / 180) * this.elevationAngle);
        var x = floorRadius * Math.cos((Math.PI / 180) * this.rotationAngle);
        var y = this.radius * Math.sin((Math.PI / 180) * this.elevationAngle);
        var z = floorRadius * Math.sin((Math.PI / 180) * this.rotationAngle);
        return [x, y, z];
    };
    return SphericalCoord;
}());



/***/ }),

/***/ "./src/Squint.ts":
/*!***********************!*\
  !*** ./src/Squint.ts ***!
  \***********************/
/*! exports provided: Squint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Squint", function() { return Squint; });
var Squint = /** @class */ (function () {
    function Squint() {
        var _this = this;
        //static readonly url = 'http://' + location.hostname + ':8080/V1'
        this.abortController = new AbortController();
        window.addEventListener('beforeunload', function () {
            _this.abortController.abort();
        });
    }
    Squint.prototype.get = function (id) {
        return fetch(Squint.url + '/sessions/' + id, {
            signal: this.abortController.signal
        })
            .then(function (response) {
            if (response.status !== 200) {
                return Promise.reject(response.status + ': ' + response.statusText);
            }
            return response.blob();
        });
    };
    Squint.prototype.createSession = function (name) {
        var json = {
            name: name,
        };
        return fetch(Squint.url + '/sessions', {
            method: 'post',
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(json),
            signal: this.abortController.signal,
        })
            .then(function (response) {
            if (response.status != 200) {
                return Promise.reject(response.status + ': ' + response.statusText);
            }
            else {
                return response.json()
                    .then(function (obj) {
                    if (obj.sessionId === undefined) {
                        throw 'Session ID not returned from server';
                    }
                    return obj.sessionId;
                });
            }
        });
    };
    Squint.prototype.put = function (id, fd) {
        return fetch(Squint.url + '/sessions/' + id, {
            method: 'post',
            body: fd,
            signal: this.abortController.signal,
        })
            .then(function (response) {
            if (response.status != 200) {
                return Promise.reject(response.status + ': ' + response.statusText);
            }
        });
    };
    Squint.prototype.listSessions = function (responseId) {
        var url = Squint.url + '/sessions';
        if (responseId) {
            url += '/?responseId=' + responseId;
        }
        return fetch(url, {
            method: 'get',
            signal: this.abortController.signal,
        })
            .then(function (response) {
            if (response.status != 200) {
                return Promise.reject(response.status + ': ' + response.statusText);
            }
            else {
                return response.json();
            }
        });
    };
    //private host = 'https://woyaktest.ue.r.appspot.com/';
    //private host = 'http://192.168.86.23:8080/';
    //private host = 'http://localhost:8080/';
    //private host = 'http://' + location.hostname + ':8080/V1';
    //private host = 'http://' + location.hostname + ':3000/';
    Squint.url = 'https://squintserver-11278.nodechef.com/V1';
    return Squint;
}());



/***/ }),

/***/ "./src/SquintApp.ts":
/*!**************************!*\
  !*** ./src/SquintApp.ts ***!
  \**************************/
/*! exports provided: debug, SquintApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debug", function() { return debug; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquintApp", function() { return SquintApp; });
/* harmony import */ var _PointerEventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PointerEventHandler */ "./src/PointerEventHandler.ts");
/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Video */ "./src/Video.ts");
/* harmony import */ var _Downloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Downloader */ "./src/Downloader.ts");
/* harmony import */ var _Uploader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Uploader */ "./src/Uploader.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Squint */ "./src/Squint.ts");
/* harmony import */ var _ListBox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ListBox */ "./src/ListBox.ts");







// TODO: 
// - disable camera radio buttons - update styles
// - check into camera being in use
function debug(msg) {
    console.log(msg);
    alert('debug: ' + msg);
}
var SquintApp = /** @class */ (function () {
    function SquintApp() {
        this.desired = {
            label: '',
            width: 0,
            height: 0,
            frameRate: 0,
            facingMode: '',
            deviceId: '',
        };
        this.cameraCtrls = [];
        this.xOffset = 0;
        this.yOffset = 0;
        this.imgSize = 0;
        this.squint = new _Squint__WEBPACK_IMPORTED_MODULE_5__["Squint"]();
        document.title += ' 9';
        alert(document.title);
        this.downloader = new _Downloader__WEBPACK_IMPORTED_MODULE_2__["Downloader"](this.squint);
        this.uploader = new _Uploader__WEBPACK_IMPORTED_MODULE_3__["Uploader"](this.squint);
    }
    SquintApp.prototype.create = function (div) {
        var _this = this;
        div.id = 'SquintApp';
        this.startDialog = this.createStartDialog(div);
        this.div = document.createElement('div');
        this.div.className = 'FlexContainer';
        div.appendChild(this.div);
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'Canvas';
        this.div.appendChild(this.canvas);
        this.downloader.onDownload = function (blob, downloadTime) { return _this.onDownload(blob, downloadTime); };
        this.uploader.onDataNeeded = function () { return _this.takePicture(); };
        this.handler = new _PointerEventHandler__WEBPACK_IMPORTED_MODULE_0__["PointerEventHandler"](this.canvas);
        this.handler.onScale = function (scale, change) { return _this.onScale(scale, change); };
        this.handler.onTranslate = function (delta) { return _this.onTranslate(delta); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        window.addEventListener('resize', function () { return _this.onResize(); });
        this.updateSizes();
        this.showStartDialog();
    };
    SquintApp.prototype.delete = function () {
    };
    SquintApp.prototype.showStartDialog = function (show) {
        if (show === void 0) { show = true; }
        if (show) {
            this.startDialog.style.display = 'block';
        }
        else {
            this.startDialog.style.display = 'none';
        }
    };
    SquintApp.prototype.createStartDialog = function (div) {
        var _this = this;
        var backgroundDiv = document.createElement('div');
        backgroundDiv.className = 'DialogBackground';
        div.appendChild(backgroundDiv);
        var dialogDiv = document.createElement('div');
        dialogDiv.id = 'DialogDiv';
        backgroundDiv.appendChild(dialogDiv);
        var viewDiv = document.createElement('div');
        viewDiv.id = 'ViewPanelDiv';
        dialogDiv.appendChild(viewDiv);
        var viewHeader = document.createElement('div');
        viewHeader.id = 'ViewHeader';
        viewHeader.className = 'Header';
        viewHeader.innerText = 'View a camera...';
        viewDiv.appendChild(viewHeader);
        this.viewListBox = new _ListBox__WEBPACK_IMPORTED_MODULE_6__["ListBox"](viewDiv, {
            id: 'ViewListBox'
        });
        this.squint.listSessions()
            .then(function (value) {
            _this.updateList(value);
        });
        var buttonDiv = document.createElement('div');
        buttonDiv.className = 'ButtonDiv';
        viewDiv.appendChild(buttonDiv);
        var viewButton = document.createElement('button');
        viewButton.id = 'ViewButton';
        viewButton.innerText = 'Go';
        buttonDiv.appendChild(viewButton);
        viewButton.onclick = function () {
            _this.showStartDialog(false);
            _this.downloader.start(_this.viewListBox.selected);
        };
        var orParentDiv = document.createElement('div');
        orParentDiv.id = 'OrParentDiv';
        dialogDiv.appendChild(orParentDiv);
        var orDiv = document.createElement('div');
        orDiv.id = 'OrDiv';
        orDiv.innerText = 'OR';
        orParentDiv.appendChild(orDiv);
        var hostPanelDiv = document.createElement('div');
        hostPanelDiv.id = 'HostPanelDiv';
        dialogDiv.appendChild(hostPanelDiv);
        var hostHeader = document.createElement('div');
        hostHeader.id = 'HostHeader';
        hostHeader.className = 'Header';
        hostHeader.innerText = 'Host a camera...';
        hostPanelDiv.appendChild(hostHeader);
        var cameraNameDiv = document.createElement('div');
        cameraNameDiv.id = 'CameraNameDiv';
        cameraNameDiv.classList.add('Stretch');
        hostPanelDiv.appendChild(cameraNameDiv);
        var nameLabel = document.createElement('label');
        nameLabel.innerText = 'Camera Name:';
        nameLabel.htmlFor = 'NameInputText';
        cameraNameDiv.appendChild(nameLabel);
        var nameInputText = document.createElement('input');
        nameInputText.type = 'text';
        nameInputText.id = 'NameInputText';
        nameInputText.placeholder = 'Your Name';
        cameraNameDiv.appendChild(nameInputText);
        nameInputText.oninput = function () {
            okButton.disabled = (nameInputText.value.trim().length === 0);
        };
        buttonDiv = document.createElement('div');
        buttonDiv.classList.add('ButtonDiv', 'NoStretch');
        hostPanelDiv.appendChild(buttonDiv);
        var okButton = document.createElement('button');
        okButton.id = 'HostOkButton';
        okButton.innerText = 'Go';
        okButton.disabled = true;
        buttonDiv.appendChild(okButton);
        okButton.onclick = function () {
            _this.squint.createSession(nameInputText.value)
                .then(function (id) {
                _this.sessionId = id;
                _this.enableVideo(true);
                _this.showStartDialog(false);
            })
                .catch(function (err) {
                alert('could not create session: ' + err);
            });
        };
        return backgroundDiv;
    };
    SquintApp.prototype.updateList = function (value) {
        var _this = this;
        this.viewListBox.clear();
        for (var i = 0; i < value.sessions.length; i++) {
            this.viewListBox.addItem(value.sessions[i].name, value.sessions[i].id);
        }
        this.squint.listSessions(value.responseId)
            .then(function (value) {
            _this.updateList(value);
        });
    };
    SquintApp.prototype.enableCameraCtrls = function (flag) {
        for (var i = 0; i < this.cameraCtrls.length; i++) {
            this.cameraCtrls[i].enabled = flag;
        }
    };
    SquintApp.prototype.buildMenu = function (menubar) {
        var _this = this;
        var viewMenu = menubar.addSubMenu('View');
        this.brightness = viewMenu.addSlider({
            label: 'Brightness',
            min: 0,
            max: 200,
            value: 100,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        this.contrast = viewMenu.addSlider({
            label: 'Contrast',
            min: 0,
            max: 200,
            value: 100,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        this.saturate = viewMenu.addSlider({
            label: 'Chroma',
            min: 0,
            max: 200,
            value: 100,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0) + '%'; },
        });
        this.blur = viewMenu.addSlider({
            label: 'Blur',
            min: 0,
            max: 10,
            value: 0,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return slider.value.toFixed(0); },
        });
        this.zoom = viewMenu.addSlider({
            label: 'Zoom',
            min: 0.1,
            max: 5,
            value: 1,
            oninput: function () { return _this.drawImg(); },
            getText: function (slider) { return (100 * slider.value).toFixed(0) + '%'; },
        });
        var cameraMenu = menubar.addSubMenu('Camera');
        var firstItem = true;
        _Video__WEBPACK_IMPORTED_MODULE_1__["Video"].getResolutions(function (resolution) {
            /*
            alert('found camera:\n' +
               'width: ' + resolution.width + '\n' +
               'height: ' + resolution.height + '\n' +
               'deviceId: ' + resolution.deviceId + '\n' +
               'frameRate: ' + resolution.frameRate + '\n' +
               'facingMode: ' + resolution.facingMode);
               */
            var radioButton = cameraMenu.addRadiobutton({
                label: resolution.label,
                oncheck: function () {
                    _this.desired = resolution;
                    _this.enableVideo(true);
                },
                checked: firstItem,
                group: 'CamerasGroup',
            });
            if (firstItem) {
                _this.desired = resolution;
                firstItem = false;
            }
            _this.cameraCtrls.push(radioButton);
        });
        this.quality = cameraMenu.addSlider({
            label: 'Quality',
            min: 0.1,
            max: 1,
            value: 0.5,
            getText: function (slider) { return (100 * slider.value).toFixed() + '%'; },
        });
        this.cameraCtrls.push(this.quality);
        this.resolution = cameraMenu.addSlider({
            label: 'Resolution',
            min: 10,
            max: 100,
            value: 25,
            getText: function (slider) { return slider.value.toFixed() + '%'; },
        });
        this.cameraCtrls.push(this.resolution);
        cameraMenu.addItem('maximize camera', function () {
            var stream = _this.video.srcObject;
            var track = stream.getVideoTracks()[0];
            track.applyConstraints({
                width: 10 * 1000,
                height: 10 * 1000,
            })
                .catch(function (err) { return alert('Failed applying constraints: ' + err); });
        });
        this.enableCameraCtrls(false);
        var sessionMenu = menubar.addSubMenu('Session');
        sessionMenu.addItem('Stop', function () {
            _this.downloader.stop();
            _this.uploader.stop();
            _this.enableVideo(false);
            _this.showStartDialog();
            var ctx = _this.canvas.getContext('2d');
            ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
        });
    };
    SquintApp.prototype.onDownload = function (blob, downloadTime) {
        var _this = this;
        // TODO text download is an error
        if (blob.type === 'text/plain') {
            blob.text()
                .then(function (txt) {
                debug(txt);
            })
                .catch(function (reason) {
                debug('cannot retrieve text from blob: ' + reason);
            });
        }
        else {
            var img_1 = document.createElement('img');
            img_1.onload = function () {
                _this.img = img_1;
                _this.downloadTime = downloadTime;
                _this.imgSize = blob.size;
                _this.drawImg();
            };
            img_1.onerror = function (reason) {
                alert('cannot load image: ' + reason);
            };
            img_1.src = URL.createObjectURL(blob);
        }
    };
    // version that reuses the Video element
    SquintApp.prototype.enableVideo = function (enable) {
        var _this = this;
        this.uploader.stop();
        this.stopTracks();
        if (this.video) {
            this.video.pause();
            this.video.srcObject = null;
            this.video.load();
        }
        this.enableCameraCtrls(enable);
        if (enable) {
            if (!this.video) {
                this.video = document.createElement('video');
                this.video.autoplay = true;
                this.video.style.display = 'none';
                this.video.style.position = 'absolute';
                this.div.appendChild(this.video);
                this.video.onplay = function () {
                    //alert('playing video');
                    _this.uploader.start(_this.sessionId);
                    _this.downloader.start(_this.sessionId);
                };
            }
            var constraints = {
                video: {
                    //width: this.desired.width,
                    //height: this.desired.height,
                    //deviceId: this.desired.deviceId,
                    deviceId: { exact: this.desired.deviceId },
                },
            };
            try {
                //alert('getUserMedia: ' + JSON.stringify(constraints, null, ' '));
                navigator.mediaDevices.getUserMedia(constraints)
                    .then(function (stream) {
                    //alert('requesting video: ' + stream.getVideoTracks()[0].label);
                    _this.video.srcObject = stream;
                })
                    .catch(function (reason) {
                    alert('video error: ' + reason);
                });
            }
            catch (err) {
                alert('video error2: ' + err);
            }
        }
        else {
            this.uploader.stop();
            this.downloader.stop();
        }
    };
    SquintApp.prototype.stopTracks = function () {
        if (this.video && this.video.srcObject) {
            // Using the camera is not robust. Applying constraints to change things
            // like which camera is in use only works sometimes. The most robust I can
            // make it is to close the video element and create a new one.
            var stream = this.video.srcObject;
            stream.getTracks().forEach(function (track) {
                track.stop();
            });
        }
    };
    /*
    private killVideo() {
       if (this.video) {
          // Using the camera is not robust. Applying constraints to change things
          // like which camera is in use only works sometimes. The most robust I can
          // make it is to close the video element and create a new one.
          this.stopTracks();
 
          this.video.pause();
          this.video.srcObject = null;
          this.video.parentElement.removeChild(this.video);
          this.video.load();
          this.video = null;
       }
    }
    */
    SquintApp.prototype.takePicture = function () {
        var _this = this;
        var canvas = document.createElement('canvas');
        canvas.width = this.video.videoWidth * (this.resolution.value / 100);
        canvas.height = this.video.videoHeight * (this.resolution.value / 100);
        var context = canvas.getContext('2d');
        context.drawImage(this.video, 0, 0, canvas.width, canvas.height);
        // upload
        return new Promise(function (resolve, reject) {
            canvas.toBlob(function (blob) { return resolve(blob); }, 'image/jpeg', _this.quality.value);
        });
    };
    SquintApp.prototype.onResize = function () {
        this.updateSizes();
    };
    SquintApp.prototype.updateSizes = function () {
        var menubarHeight = document.getElementById('Menubar').clientHeight;
        var viewWidth = document.documentElement.clientWidth;
        var viewHeight = document.documentElement.clientHeight;
        this.canvas.width = viewWidth;
        this.canvas.height = viewHeight - menubarHeight;
        this.drawImg();
    };
    SquintApp.prototype.drawImg = function () {
        if (!this.img) {
            return;
        }
        var canvasWidth = this.canvas.width;
        var canvasHeight = this.canvas.height;
        var canvasAR = canvasWidth / canvasHeight;
        var imgWidth = this.img.width;
        var imgHeight = this.img.height;
        var imgAR = imgWidth / imgHeight;
        var width;
        var height;
        /*
        if (canvasAR > imgAR) {
           height = this.zoom.value * canvasHeight;
           width = height * imgAR;
        }
        else {
           width = this.zoom.value * canvasWidth;
           height = width / imgAR;
        }
        */
        if (canvasAR > imgAR) {
            height = this.zoom.value * imgHeight;
            width = height * imgAR;
        }
        else {
            width = this.zoom.value * imgWidth;
            height = width / imgAR;
        }
        var x = (canvasWidth - width) / 2.0 + this.xOffset;
        var y = (canvasHeight - height) / 2.0 - this.yOffset;
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        ctx.filter =
            'brightness(' + this.brightness.value + '%) ' +
                'contrast(' + this.contrast.value + '%) ' +
                'saturate(' + this.saturate.value + '%) ' +
                'blur(' + this.blur.value + 'px) ';
        ctx.drawImage(this.img, x, y, width, height);
        var msg;
        ctx.fillText(_Squint__WEBPACK_IMPORTED_MODULE_5__["Squint"].url, 0, 10);
        msg = imgWidth + 'x' + imgHeight;
        ctx.fillText(msg, 0, canvasHeight - 35);
        msg = 'upload: ' + Object(_Globals__WEBPACK_IMPORTED_MODULE_4__["getTimeStr"])(this.uploader.uploadTime) + ' - ' + this.uploader.fps.rate.toFixed(1);
        ctx.fillText(msg, 0, canvasHeight - 25);
        msg = 'download: ' + Object(_Globals__WEBPACK_IMPORTED_MODULE_4__["getTimeStr"])(this.downloadTime) + ' - ' + this.downloader.fps.rate.toFixed(1);
        ctx.fillText(msg, 0, canvasHeight - 15);
        msg = Object(_Globals__WEBPACK_IMPORTED_MODULE_4__["getSizeStr"])(this.imgSize);
        ctx.fillText(msg, 0, canvasHeight - 5);
    };
    SquintApp.prototype.onScale = function (scale, change) {
        // TODO: center scaling about your two fingers
        var factor = change;
        if (this.zoom.value > 2) {
            1 + (change - 1) / (this.zoom.value / 2);
        }
        this.zoom.value *= factor;
        this.xOffset *= factor;
        this.yOffset *= factor;
        this.drawImg();
    };
    SquintApp.prototype.onTranslate = function (delta) {
        //let factor = 1;
        //if (isMobile) {
        //   factor = 2;
        //}
        this.xOffset += delta.x;
        this.yOffset += delta.y;
        this.drawImg();
    };
    SquintApp.prototype.onDrag = function (pos, delta) {
        // TODO delta is opposite of translate in Y direction
        this.xOffset += delta.x;
        this.yOffset -= delta.y;
        this.drawImg();
    };
    return SquintApp;
}());



/***/ }),

/***/ "./src/Stopwatch.ts":
/*!**************************!*\
  !*** ./src/Stopwatch.ts ***!
  \**************************/
/*! exports provided: Stopwatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stopwatch", function() { return Stopwatch; });
/**
 * Utility class for tracking time
 */
var Stopwatch = /** @class */ (function () {
    function Stopwatch() {
        this.startTime = performance.now();
    }
    Object.defineProperty(Stopwatch.prototype, "elapsedMs", {
        /**
         * The elapsed time in milliseconds
         */
        get: function () {
            return (performance.now() - this.startTime);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resets elapsed time to 0
     */
    Stopwatch.prototype.restart = function () {
        this.startTime = performance.now();
    };
    return Stopwatch;
}());



/***/ }),

/***/ "./src/TextureRenderer.ts":
/*!********************************!*\
  !*** ./src/TextureRenderer.ts ***!
  \********************************/
/*! exports provided: TextureRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureRenderer", function() { return TextureRenderer; });
/* harmony import */ var _shaders_TextureRendererVertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shaders/TextureRendererVertex.glsl */ "./src/shaders/TextureRendererVertex.glsl");
/* harmony import */ var _shaders_TextureRendererFragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/TextureRendererFragment.glsl */ "./src/shaders/TextureRendererFragment.glsl");
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");
/* harmony import */ var _glBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glBuffer */ "./src/glBuffer.ts");




/**
 * Class that does the work of building the Path Traced texture
 */
var TextureRenderer = /** @class */ (function () {
    function TextureRenderer(glCtx) {
        this.gl = null;
        this.vertices = [
            -1, -1,
            -1, +1,
            +1, -1,
            +1, +1
        ];
        this.gl = glCtx;
        var gl = this.gl;
        // create shader
        this.program = new _glProgram__WEBPACK_IMPORTED_MODULE_2__["glProgram"](gl, _shaders_TextureRendererVertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"], _shaders_TextureRendererFragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"]);
        // create vertex buffer - the block we'll draw our rendered texture on
        this.vertexBuffer = new _glBuffer__WEBPACK_IMPORTED_MODULE_3__["glBuffer"](gl, this.program, 'vertex');
        this.vertexBuffer.upload(this.vertices);
    }
    TextureRenderer.prototype.render = function (texture, width, height) {
        var gl = this.gl;
        gl.viewport((gl.canvas.width - width) / 2, (gl.canvas.height - height) / 2, width, height);
        this.program.use();
        texture.bind();
        this.vertexBuffer.bind(2);
        // display the main screen
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };
    return TextureRenderer;
}());



/***/ }),

/***/ "./src/TriangleObj.ts":
/*!****************************!*\
  !*** ./src/TriangleObj.ts ***!
  \****************************/
/*! exports provided: NormalType, TriangleObjData, TriangleObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalType", function() { return NormalType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjData", function() { return TriangleObjData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObj", function() { return TriangleObj; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _IndexedTriangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IndexedTriangle */ "./src/IndexedTriangle.ts");
/* harmony import */ var _Profiler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Profiler */ "./src/Profiler.ts");
/* harmony import */ var _BlobFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobFile */ "./src/BlobFile.ts");
/* harmony import */ var _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./IndexedVec3 */ "./src/IndexedVec3.ts");
/* harmony import */ var _BoundingBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BoundingBox */ "./src/BoundingBox.ts");
/* harmony import */ var _BoundingPts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BoundingPts */ "./src/BoundingPts.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};








var NormalType;
(function (NormalType) {
    NormalType[NormalType["Smooth"] = 0] = "Smooth";
    NormalType[NormalType["Flat"] = 1] = "Flat";
})(NormalType || (NormalType = {}));
var TriangleObjData = /** @class */ (function () {
    function TriangleObjData() {
    }
    return TriangleObjData;
}());

/**
 * Base class for representing an object from a bunch of triangles.
 */
var TriangleObj = /** @class */ (function () {
    function TriangleObj(name) {
        this.vertices = [];
        this.normals = [];
        this.indices = [];
        this.box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_5__["BoundingBox"]();
        this.name = name;
    }
    Object.defineProperty(TriangleObj.prototype, "numVertices", {
        get: function () {
            return this.vertices.length / 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "numTriangles", {
        get: function () {
            return this.indices.length / 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "width", {
        get: function () {
            return this.box.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "height", {
        get: function () {
            return this.box.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "depth", {
        get: function () {
            return this.box.depth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "diagonal", {
        get: function () {
            return this.box.diagonal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TriangleObj.prototype, "center", {
        get: function () {
            return this.box.center;
        },
        enumerable: false,
        configurable: true
    });
    TriangleObj.prototype.getTriangle = function (index) {
        var i1 = this.indices[3 * index + 0];
        var i2 = this.indices[3 * index + 1];
        var i3 = this.indices[3 * index + 2];
        return new _IndexedTriangle__WEBPACK_IMPORTED_MODULE_1__["IndexedTriangle"](this.vertices, this.normals, i1, i2, i3);
    };
    TriangleObj.prototype.pushQuad = function (v1, v2, v3, v4) {
        this.pushTriangle(v1, v2, v3);
        this.pushTriangle(v2, v4, v3);
    };
    TriangleObj.prototype.pushTriangle = function (v1, v2, v3) {
        var _a, _b, _c;
        // add indices
        var i1 = this.numVertices;
        var i2 = i1 + 1;
        var i3 = i1 + 2;
        this.indices.push(i1, i2, i3);
        // add vertices
        this.vertices.push(v1.x, v1.y, v1.z, v2.x, v2.y, v2.z, v3.x, v3.y, v3.z);
        this.box.update(v1);
        this.box.update(v2);
        this.box.update(v3);
        // add normals
        var tri = new _IndexedTriangle__WEBPACK_IMPORTED_MODULE_1__["IndexedTriangle"](this.vertices, this.normals, i1, i2, i3);
        var normal = tri.computeNormal();
        (_a = this.normals).push.apply(_a, normal.values);
        (_b = this.normals).push.apply(_b, normal.values);
        (_c = this.normals).push.apply(_c, normal.values);
    };
    TriangleObj.prototype.computeNormals = function (type) {
        var _a;
        if (type === NormalType.Smooth) {
            var multiNormVertices = [];
            for (var i = 0; i < this.numVertices; i++) {
                multiNormVertices.push(new MultiNormVertex());
            }
            // store the normals with each vertex - we'll later average these
            for (var i = 0; i < this.numTriangles; i++) {
                var tri = this.getTriangle(i);
                var n = tri.computeNormal();
                multiNormVertices[tri.i1].push(n);
                multiNormVertices[tri.i2].push(n);
                multiNormVertices[tri.i3].push(n);
            }
            // populate the normals array
            this.normals = [];
            for (var i = 0; i < multiNormVertices.length; i++) {
                (_a = this.normals).push.apply(_a, multiNormVertices[i].normal.values);
            }
        }
        else {
            // to go this way we need to have a unique vector and normal for each triangle
            // corner. Blow away the old stuff and rebuild
            var oldIndices = this.indices;
            var oldVertices = this.vertices;
            // reset everything
            this.vertices = [];
            this.normals = [];
            this.indices = [];
            // rebuild
            for (var i = 0; i < oldIndices.length / 3; i++) {
                var v1 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 0]);
                var v2 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 1]);
                var v3 = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](oldVertices, oldIndices[3 * i + 2]);
                this.pushTriangle(v1, v2, v3);
            }
        }
    };
    TriangleObj.prototype.x = function (i) {
        return this.vertices[3 * i + 0];
    };
    TriangleObj.prototype.y = function (i) {
        return this.vertices[3 * i + 1];
    };
    TriangleObj.prototype.z = function (i) {
        return this.vertices[3 * i + 2];
    };
    TriangleObj.prototype.findBounds = function () {
        console.log('finding bounds');
        var box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_5__["BoundingBox"]();
        for (var i = 0; i < this.numTriangles; i++) {
            var tri = this.getTriangle(i);
            box.update(tri.v1);
            box.update(tri.v2);
            box.update(tri.v3);
        }
        this.box = box;
    };
    /**
     * Breaks the object into evenly spaced volumes. The number of volumes is automatically
     * determined based on the number of triangles.
     */
    TriangleObj.prototype.getBoundingPts = function () {
        if (this.boundingPts) {
            return this.boundingPts;
        }
        var numSteps = 15;
        var boxes = [];
        for (var i = 0; i < Math.pow(numSteps, 3); i++) {
            boxes.push(new _BoundingBox__WEBPACK_IMPORTED_MODULE_5__["BoundingBox"]());
        }
        var v = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]();
        for (var i = 0; i < this.numVertices; i++) {
            v.x = this.vertices[3 * i + 0];
            v.y = this.vertices[3 * i + 1];
            v.z = this.vertices[3 * i + 2];
            var x = Math.floor(numSteps * (v.x - this.box.min.x) / (this.box.width));
            var y = Math.floor(numSteps * (v.y - this.box.min.y) / (this.box.height));
            var z = Math.floor(numSteps * (v.z - this.box.min.z) / (this.box.depth));
            x = Object(_Globals__WEBPACK_IMPORTED_MODULE_7__["clamp"])(x, 0, numSteps - 1);
            y = Object(_Globals__WEBPACK_IMPORTED_MODULE_7__["clamp"])(y, 0, numSteps - 1);
            z = Object(_Globals__WEBPACK_IMPORTED_MODULE_7__["clamp"])(z, 0, numSteps - 1);
            var index = x + y * numSteps + z * numSteps * numSteps;
            boxes[index].update(v);
        }
        var boxMap = new Map();
        var boxCount = 0;
        for (var x = 0; x < numSteps; x++) {
            for (var y = 0; y < numSteps; y++) {
                var first = void 0;
                var last = void 0;
                for (var z = 0; z < numSteps; z++) {
                    var index = x + y * numSteps + z * numSteps * numSteps;
                    var box = boxes[index];
                    if (box.min.x === Number.MAX_VALUE) {
                        continue;
                    }
                    boxCount++;
                    if (!first) {
                        first = { index: index, box: box };
                    }
                    last = { index: index, box: box };
                }
                if (first && boxMap.has(first.index) === false) {
                    boxMap.set(first.index, first.box);
                }
                if (last && boxMap.has(last.index) === false) {
                    boxMap.set(last.index, last.box);
                }
            }
        }
        var pts = [];
        boxes.forEach(function (box) {
            if (box.min.x !== Number.MAX_VALUE) {
                pts.push.apply(pts, box.corners);
            }
        });
        this.boundingPts = new _BoundingPts__WEBPACK_IMPORTED_MODULE_6__["BoundingPts"](pts);
        return this.boundingPts;
    };
    /**
     * Creates a string in the for .OBJ file format
     *
     * @returns the string
     */
    TriangleObj.prototype.toObjString = function (digits) {
        if (digits === void 0) { digits = 8; }
        var str = '';
        str += '# Vertices: ' + this.vertices.length + '\n';
        str += '# Triangles: ' + this.numTriangles + '\n';
        str += '\n';
        for (var i = 0; i < this.numVertices; i++) {
            var v = this.vertices;
            str += 'v ' + v[3 * i + 0].toPrecision(digits) + ' ' + v[3 * i + 1].toPrecision(digits) + ' ' + v[3 * i + 2].toPrecision(digits) + '\n';
        }
        for (var i = 0; i < this.numVertices; i++) {
            var n = this.normals;
            str += 'vn ' + n[3 * i + 0].toPrecision(digits) + ' ' + n[3 * i + 1].toPrecision(digits) + ' ' + n[3 * i + 2].toPrecision(digits) + '\n';
        }
        for (var i = 0; i < this.numTriangles; i++) {
            var t = this.getTriangle(i);
            str += 'f ' +
                (t.i1 + 1) + '//' + (t.i1 + 1) + ' ' +
                (t.i2 + 1) + '//' + (t.i2 + 1) + ' ' +
                (t.i3 + 1) + '//' + (t.i3 + 1) + '\n';
        }
        return str;
    };
    TriangleObj.prototype.optimize = function (normalType) {
        if (normalType === NormalType.Smooth) {
            var vertexToIndexMap = new Map();
            var indexToIndexMap = new Map();
            // first generate a unique set of vertices
            var uniqueVertices = [];
            for (var i = 0; i < this.numVertices; i++) {
                var oldVertex = new _IndexedVec3__WEBPACK_IMPORTED_MODULE_4__["IndexedVec3"](this.vertices, i);
                var key = this.vertices[3 * i + 0].toFixed(4) + ' ' + this.vertices[3 * i + 1].toFixed(4) + ' ' + this.vertices[3 * i + 2].toFixed(4);
                var oldIndex = i + 1;
                var newIndex = void 0;
                if (vertexToIndexMap.has(key)) {
                    // just map the old index to the existing entry
                    newIndex = vertexToIndexMap.get(key);
                }
                else {
                    // create a new entry
                    newIndex = uniqueVertices.length + 1;
                    vertexToIndexMap.set(key, newIndex);
                    uniqueVertices.push(oldVertex);
                }
                // store the translation
                indexToIndexMap.set(oldIndex, newIndex);
            }
            // reset all the vertices
            this.vertices = [];
            for (var i = 0; i < uniqueVertices.length; i++) {
                this.vertices.push(uniqueVertices[i].x);
                this.vertices.push(uniqueVertices[i].y);
                this.vertices.push(uniqueVertices[i].z);
            }
            // remap all indices
            for (var i = 0; i < this.indices.length; i++) {
                var oldIndex = this.indices[i];
                this.indices[i] = indexToIndexMap.get(oldIndex + 1) - 1;
            }
        }
        else {
            // nothing to do for flat normals. New vertices and normals are created in 
            // computeNormals() below if needed
        }
        this.computeNormals(normalType);
    };
    TriangleObj.prototype.trim = function (box) {
        var p = new _Profiler__WEBPACK_IMPORTED_MODULE_2__["Profiler"]();
        var indices = [];
        for (var i = 0; i < this.numTriangles; i++) {
            var tri = this.getTriangle(i);
            if (box.inside(tri.v1) && box.inside(tri.v2) && box.inside(tri.v3)) {
                indices.push(tri.i1);
                indices.push(tri.i2);
                indices.push(tri.i3);
            }
        }
        console.log('trimmed ' + (this.indices.length - indices.length) + ' triangles');
        this.indices = indices;
        this.findBounds();
        p.log('Trim Complete');
    };
    TriangleObj.prototype.mirror = function (x, add) {
        var p = new _Profiler__WEBPACK_IMPORTED_MODULE_2__["Profiler"]();
        if (add) {
            // duplicate vertices
            var numVertices = this.numVertices;
            for (var i = 0; i < numVertices; i++) {
                this.vertices[3 * i + 0] -= x;
                ;
                this.vertices.push(-this.vertices[3 * i + 0]);
                this.vertices.push(this.vertices[3 * i + 1]);
                this.vertices.push(this.vertices[3 * i + 2]);
                this.normals.push(-this.normals[3 * i + 0]);
                this.normals.push(this.normals[3 * i + 1]);
                this.normals.push(this.normals[3 * i + 2]);
            }
            var numIndices = this.indices.length;
            var startIndex = numVertices;
            for (var i = 0; i < numIndices; i++) {
                this.indices.push(startIndex + this.indices[i]);
            }
        }
        else {
            // reflect vertices
            var numVertices = this.numVertices;
            for (var i = 0; i < numVertices; i++) {
                this.vertices[3 * i + 0] = x + (x - this.vertices[3 * i + 0]);
                this.normals[3 * i + 0] = -this.normals[3 * i + 0];
            }
        }
        this.findBounds();
        p.log('Mirror Complete');
    };
    TriangleObj.prototype.reverse = function () {
        var p = new _Profiler__WEBPACK_IMPORTED_MODULE_2__["Profiler"]();
        // reflect vertices
        var x = this.center.x;
        for (var i = 0; i < this.numVertices; i++) {
            this.vertices[3 * i + 0] = x + (x - this.vertices[3 * i + 0]);
            this.normals[3 * i + 0] = -this.normals[3 * i + 0];
        }
        // reorder triangles to preserve front-back facing
        for (var i = 0; i < this.numTriangles; i++) {
            var i1 = this.indices[3 * i + 0];
            var i2 = this.indices[3 * i + 1];
            this.indices[3 * i + 0] = i2;
            this.indices[3 * i + 1] = i1;
        }
        p.log('Reverse Complete');
    };
    TriangleObj.prototype.combine = function (tObj) {
        // save the value for the first index of the combined objects
        var startIndex = this.numVertices;
        // add the other vertices and normals to ours
        for (var i = 0; i < tObj.vertices.length; i++) {
            this.vertices.push(tObj.vertices[i]);
            this.normals.push(tObj.normals[i]);
        }
        // add the other indices, but offset them properly
        for (var i = 0; i < tObj.indices.length; i++) {
            this.indices.push(startIndex + tObj.indices[i]);
        }
        // merge the bounding boxes
        this.box.merge(tObj.box);
    };
    TriangleObj.prototype.toData = function () {
        var data = new TriangleObjData;
        data.name = this.name;
        data.vertices = new Float32Array(this.vertices);
        data.normals = new Float32Array(this.normals);
        data.indices = new Int32Array(this.indices);
        data.boxMin = this.box.min.clone();
        data.boxMax = this.box.max.clone();
        return data;
    };
    TriangleObj.fromData = function (data) {
        var tObj = new TriangleObj();
        tObj.name = data.name;
        tObj.vertices = Array.from(data.vertices);
        tObj.normals = Array.from(data.normals);
        tObj.indices = Array.from(data.indices);
        tObj.box = new _BoundingBox__WEBPACK_IMPORTED_MODULE_5__["BoundingBox"](new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](data.boxMin.values), new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"](data.boxMax.values));
        return tObj;
    };
    TriangleObj.prototype.toBlob = function () {
        // create a description
        var info = {
            FileType: 'Binary OBJ',
            Version: '1.0',
            Name: this.name,
            Source: this.source,
        };
        // get the raw data
        var data = this.toData();
        // break it into parts
        var parts = [];
        parts.push(data.vertices);
        parts.push(data.normals);
        parts.push(data.indices);
        parts.push(new Float32Array(data.boxMin.values));
        parts.push(new Float32Array(data.boxMax.values));
        // create the Blob
        return _BlobFile__WEBPACK_IMPORTED_MODULE_3__["BlobFile"].createBlob(info, parts);
    };
    TriangleObj.fromBlob = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TriangleObj.blobToData(blob)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, TriangleObj.fromData(data)];
                }
            });
        });
    };
    TriangleObj.blobToData = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var data, bFile, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            return __generator(this, function (_s) {
                switch (_s.label) {
                    case 0:
                        data = new TriangleObjData();
                        return [4 /*yield*/, _BlobFile__WEBPACK_IMPORTED_MODULE_3__["BlobFile"].extract(blob)];
                    case 1:
                        bFile = _s.sent();
                        data.name = bFile.info.Name;
                        data.source = bFile.info.Source;
                        _a = data;
                        _b = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[0].arrayBuffer()];
                    case 2:
                        _a.vertices = new (_b.apply(Float32Array, [void 0, _s.sent()]))();
                        _c = data;
                        _d = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[1].arrayBuffer()];
                    case 3:
                        _c.normals = new (_d.apply(Float32Array, [void 0, _s.sent()]))();
                        _e = data;
                        _f = Int32Array.bind;
                        return [4 /*yield*/, bFile.parts[2].arrayBuffer()];
                    case 4:
                        _e.indices = new (_f.apply(Int32Array, [void 0, _s.sent()]))();
                        _g = data;
                        _h = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].bind;
                        _k = (_j = Array).from;
                        _l = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[3].arrayBuffer()];
                    case 5:
                        _g.boxMin = new (_h.apply(_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"], [void 0, _k.apply(_j, [new (_l.apply(Float32Array, [void 0, _s.sent()]))()])]))();
                        _m = data;
                        _o = _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"].bind;
                        _q = (_p = Array).from;
                        _r = Float32Array.bind;
                        return [4 /*yield*/, bFile.parts[4].arrayBuffer()];
                    case 6:
                        _m.boxMax = new (_o.apply(_Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"], [void 0, _q.apply(_p, [new (_r.apply(Float32Array, [void 0, _s.sent()]))()])]))();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return TriangleObj;
}());

/**
 * Class used to compute normals for vertices that join multiple faces
 */
var MultiNormVertex = /** @class */ (function () {
    function MultiNormVertex() {
        this.normals = [];
    }
    /**
     * Stores a normal for this vertex
     *
     * @param normal Stores a normal for the vertex
     */
    MultiNormVertex.prototype.push = function (normal) {
        this.normals.push(normal);
    };
    Object.defineProperty(MultiNormVertex.prototype, "normal", {
        /**
         * Computes the normal by averaging all the individual normals associated with the vertex
         */
        get: function () {
            var n = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]();
            for (var i = 0; i < this.normals.length; i++) {
                n.x += this.normals[i].x;
                n.y += this.normals[i].y;
                n.z += this.normals[i].z;
            }
            n.x /= this.normals.length;
            n.y /= this.normals.length;
            n.z /= this.normals.length;
            return n;
        },
        enumerable: false,
        configurable: true
    });
    return MultiNormVertex;
}());


/***/ }),

/***/ "./src/TriangleObjBuilder.ts":
/*!***********************************!*\
  !*** ./src/TriangleObjBuilder.ts ***!
  \***********************************/
/*! exports provided: TriangleObjBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjBuilder", function() { return TriangleObjBuilder; });
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TriangleObj */ "./src/TriangleObj.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TriangleObjBuilder = /** @class */ (function (_super) {
    __extends(TriangleObjBuilder, _super);
    function TriangleObjBuilder(name) {
        return _super.call(this, name) || this;
    }
    // TODO pass in args for construction
    TriangleObjBuilder.prototype.addArrow = function () {
        var NUM_STEPS = 30;
        var TOTAL_LENGTH = 0.4;
        var ARROW_RADIUS = 0.15;
        var ARROW_LENGTH = 1.5 * ARROW_RADIUS;
        var SHAFT_RADIUS = 0.5 * ARROW_RADIUS;
        var TIP = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 0]);
        var TIP_BASE = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, ARROW_LENGTH, 0]);
        // build the arrow head
        for (var i = 0; i < NUM_STEPS; i++) {
            var x1 = ARROW_RADIUS * Math.sin(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var y1 = ARROW_LENGTH;
            var z1 = ARROW_RADIUS * Math.cos(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var x2 = ARROW_RADIUS * Math.sin((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var y2 = ARROW_LENGTH;
            var z2 = ARROW_RADIUS * Math.cos((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, y1, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, y2, z2]);
            this.pushTriangle(TIP, p2, p1);
            this.pushTriangle(TIP_BASE, p1, p2);
        }
        // build the arrow shaft
        var END = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, TOTAL_LENGTH, 0]);
        for (var i = 0; i < NUM_STEPS; i++) {
            var x1 = SHAFT_RADIUS * Math.sin(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var z1 = SHAFT_RADIUS * Math.cos(i / (NUM_STEPS - 1) * 2 * Math.PI);
            var x2 = SHAFT_RADIUS * Math.sin((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var z2 = SHAFT_RADIUS * Math.cos((i + 1) / (NUM_STEPS - 1) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, ARROW_LENGTH, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, ARROW_LENGTH, z2]);
            var p3 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, TOTAL_LENGTH, z1]);
            var p4 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, TOTAL_LENGTH, z2]);
            this.pushTriangle(p1, p2, p4);
            this.pushTriangle(p1, p4, p3);
            this.pushTriangle(END, p3, p4);
        }
    };
    TriangleObjBuilder.prototype.addSphere = function (numSteps, radius, center) {
        // create an array of vertices
        var vertices = [];
        for (var i = 0; i < numSteps; i++) {
            if (i === 0) {
                vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x, center.y + radius, center.z]));
            }
            else if (i === numSteps - 1) {
                vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x, center.y - radius, center.z]));
            }
            else {
                var y = radius * Math.cos(i / (numSteps - 1) * Math.PI);
                var r = radius * Math.sin(i / (numSteps - 1) * Math.PI);
                var offset = i % 2 ? 0 : ((2 * Math.PI) / numSteps) * 0.5;
                for (var j = 0; j < numSteps; j++) {
                    vertices.push(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([
                        center.x + r * Math.sin((j / numSteps) * 2 * Math.PI - offset),
                        center.y + y,
                        center.z + r * Math.cos((j / numSteps) * 2 * Math.PI - offset),
                    ]));
                }
            }
        }
        // connect the vertices
        var first = 0;
        var last = vertices.length - 1;
        for (var i = 0; i < numSteps - 1; i++) {
            for (var j = 0; j < numSteps; j++) {
                if (i === 0) {
                    var i1 = first;
                    var i2 = j + 1;
                    var i3 = j === (numSteps - 1) ? 1 : i2 + 1;
                    this.pushTriangle(vertices[i1], vertices[i2], vertices[i3]);
                }
                else if (i === numSteps - 2) {
                    var startIndex = last - numSteps;
                    var i1 = last;
                    var i2 = startIndex + j;
                    var i3 = j === (numSteps - 1) ? startIndex : i2 + 1;
                    this.pushTriangle(vertices[i1], vertices[i3], vertices[i2]);
                }
                else {
                    var startA = 1 + (i - 1) * numSteps;
                    var startB = 1 + i * numSteps;
                    var i1 = startA + j;
                    var i2 = (j === (numSteps - 1)) ? startA : i1 + 1;
                    var i3 = startB + j;
                    var i4 = (j === (numSteps - 1)) ? startB : i3 + 1;
                    if (i % 2) {
                        this.pushTriangle(vertices[i1], vertices[i4], vertices[i2]);
                        this.pushTriangle(vertices[i1], vertices[i3], vertices[i4]);
                    }
                    else {
                        this.pushTriangle(vertices[i1], vertices[i3], vertices[i2]);
                        this.pushTriangle(vertices[i2], vertices[i3], vertices[i4]);
                    }
                }
            }
        }
    };
    TriangleObjBuilder.prototype.addCube = function (size, center) {
        var v1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y - size / 2, center.z - size / 2]);
        var v2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y - size / 2, center.z + size / 2]);
        var v3 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y + size / 2, center.z - size / 2]);
        var v4 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - size / 2, center.y + size / 2, center.z + size / 2]);
        var v5 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y - size / 2, center.z - size / 2]);
        var v6 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y - size / 2, center.z + size / 2]);
        var v7 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y + size / 2, center.z - size / 2]);
        var v8 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x + size / 2, center.y + size / 2, center.z + size / 2]);
        this.pushQuad(v1, v2, v3, v4);
        this.pushQuad(v5, v7, v6, v8);
        this.pushQuad(v1, v5, v2, v6);
        this.pushQuad(v3, v4, v7, v8);
        this.pushQuad(v1, v3, v5, v7);
        this.pushQuad(v2, v6, v4, v8);
    };
    TriangleObjBuilder.prototype.addDisk = function (numSteps, radius, center) {
        for (var i = 0; i <= numSteps; i++) {
            var x1 = center.x + radius * Math.sin((i / numSteps) * 2 * Math.PI);
            var y1 = center.y;
            var z1 = center.z + radius * Math.cos((i / numSteps) * 2 * Math.PI);
            var x2 = center.x + radius * Math.sin(((i + 1) / numSteps) * 2 * Math.PI);
            var y2 = center.y;
            var z2 = center.z + radius * Math.cos(((i + 1) / numSteps) * 2 * Math.PI);
            var p1 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x1, y1, z1]);
            var p2 = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([x2, y2, z2]);
            this.pushTriangle(center, p1, p2);
        }
    };
    return TriangleObjBuilder;
}(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["TriangleObj"]));



/***/ }),

/***/ "./src/TriangleObjFile.ts":
/*!********************************!*\
  !*** ./src/TriangleObjFile.ts ***!
  \********************************/
/*! exports provided: TriangleObjFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleObjFile", function() { return TriangleObjFile; });
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TriangleObj */ "./src/TriangleObj.ts");
/* harmony import */ var _Profiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Profiler */ "./src/Profiler.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Class that loads a .obj file and creates triangles for it
 */
var TriangleObjFile = /** @class */ (function (_super) {
    __extends(TriangleObjFile, _super);
    function TriangleObjFile(name, src, updateStatus) {
        var _this = _super.call(this, name) || this;
        // record the status function. If one is not supplied, create one that does nothing
        if (!updateStatus) {
            updateStatus = function (status) { };
        }
        _this.parse(src, updateStatus);
        return _this;
    }
    TriangleObjFile.prototype.parseFace = function (line) {
        var ret = {
            iV: [],
            iN: [],
        };
        var tokens = line.match(/\S+/g);
        var numVals = tokens.length - 1;
        for (var i = 0; i < numVals; i++) {
            var vals = tokens[i + 1].split('/');
            ret.iV.push(parseInt(vals[0]) - 1);
            if (vals.length === 3) {
                ret.iN.push(parseInt(vals[2]) - 1);
            }
        }
        return ret;
    };
    TriangleObjFile.prototype.parse = function (src, updateStatus) {
        updateStatus('Processing');
        var t = Date.now();
        var p2 = new _Profiler__WEBPACK_IMPORTED_MODULE_1__["Profiler"]();
        var p = new _Profiler__WEBPACK_IMPORTED_MODULE_1__["Profiler"]();
        var lines = src.split('\n');
        p.log('split');
        var vertices = [];
        var normals = [];
        var vIndices = [];
        var nIndices = [];
        var match = true;
        var containsNormals = true;
        for (var i = 0; i < lines.length; i++) {
            // report progress every 50 ms
            if (Date.now() - t > 50) {
                updateStatus('Processing: ' + (100 * i / lines.length).toFixed() + '%');
                t = Date.now();
            }
            var line = lines[i];
            if (line.startsWith('v ')) {
                var tokens = line.match(/\S+/g);
                vertices.push(parseFloat(tokens[1]));
                vertices.push(parseFloat(tokens[2]));
                vertices.push(parseFloat(tokens[3]));
            }
            else if (line.startsWith('vn ')) {
                var tokens = line.match(/\S+/g);
                normals.push(parseFloat(tokens[1]));
                normals.push(parseFloat(tokens[2]));
                normals.push(parseFloat(tokens[3]));
            }
            else if (line.startsWith('f ')) {
                var ret = this.parseFace(line);
                if (containsNormals) {
                    if (ret.iV.length !== ret.iN.length) {
                        containsNormals = false;
                        console.warn('Normals not specified in file. Flat normals will be computed.');
                    }
                    else if (match) {
                        for (var i_1 = 0; i_1 < ret.iV.length; i_1++) {
                            if (ret.iV[i_1] != ret.iN[i_1]) {
                                console.warn('Vertices and normals don\'t match. Content will be re-indexed');
                                match = false;
                                break;
                            }
                        }
                    }
                }
                if (ret.iV.length === 4) {
                    vIndices.push(ret.iV[0], ret.iV[1], ret.iV[2]);
                    vIndices.push(ret.iV[0], ret.iV[2], ret.iV[3]);
                    if (containsNormals) {
                        nIndices.push(ret.iN[0], ret.iN[1], ret.iN[2]);
                        nIndices.push(ret.iN[0], ret.iN[2], ret.iN[3]);
                    }
                }
                else {
                    vIndices.push(ret.iV[0], ret.iV[1], ret.iV[2]);
                    if (containsNormals) {
                        nIndices.push(ret.iN[0], ret.iN[1], ret.iN[2]);
                    }
                }
            }
        }
        p.log('parse');
        if (match) {
            this.vertices = vertices;
            this.indices = vIndices;
            if (containsNormals) {
                this.normals = normals;
            }
        }
        else {
            this.vertices = [];
            this.normals = [];
            this.indices = [];
            for (var i = 0; i < vIndices.length; i++) {
                this.vertices.push(vertices[3 * vIndices[i] + 0]);
                this.vertices.push(vertices[3 * vIndices[i] + 1]);
                this.vertices.push(vertices[3 * vIndices[i] + 2]);
                this.normals.push(normals[3 * nIndices[i] + 0]);
                this.normals.push(normals[3 * nIndices[i] + 1]);
                this.normals.push(normals[3 * nIndices[i] + 2]);
                this.indices.push(i);
            }
            p.log('reindex');
        }
        if (containsNormals === false) {
            this.computeNormals(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["NormalType"].Flat);
            p.log('compute normals');
        }
        this.findBounds();
        p.log('findBounds');
        p2.log('Total');
        updateStatus('Processing: 100%');
        console.log('Vertices: ' + this.vertices.length);
        console.log('Normals: ' + this.normals.length);
        console.log('Triangles: ' + this.numTriangles);
    };
    return TriangleObjFile;
}(_TriangleObj__WEBPACK_IMPORTED_MODULE_0__["TriangleObj"]));



/***/ }),

/***/ "./src/Uploader.ts":
/*!*************************!*\
  !*** ./src/Uploader.ts ***!
  \*************************/
/*! exports provided: Uploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return Uploader; });
/* harmony import */ var _Stopwatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Stopwatch */ "./src/Stopwatch.ts");
/* harmony import */ var _FPS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FPS */ "./src/FPS.ts");
/* harmony import */ var _Squint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Squint */ "./src/Squint.ts");
/* harmony import */ var _SquintApp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SquintApp */ "./src/SquintApp.ts");




var Uploader = /** @class */ (function () {
    function Uploader(squint) {
        this.fps = new _FPS__WEBPACK_IMPORTED_MODULE_1__["FPS"]();
        this.running = false;
        this.squint = squint;
    }
    Uploader.prototype.start = function (id) {
        var _this = this;
        if (!this.running) {
            //debug('starting uploader');
            this.id = id;
            this.handle = requestAnimationFrame(function () { return _this.upload(); });
            this.running = true;
        }
    };
    Uploader.prototype.stop = function () {
        if (this.running) {
            //debug('stopping uploader');
            cancelAnimationFrame(this.handle);
            this.running = false;
        }
    };
    Uploader.prototype.upload = function () {
        var _this = this;
        if (!this.onDataNeeded) {
            return;
        }
        this.fps.tick();
        this.onDataNeeded()
            .then(function (blob) {
            if (blob === null) {
                Object(_SquintApp__WEBPACK_IMPORTED_MODULE_3__["debug"])('Cannot generate image from video: blob is null');
                if (_this.running) {
                    _this.handle = requestAnimationFrame(function () { return _this.upload(); });
                }
                return;
            }
            //console.log('upload size: ' + blob.size / (1024 * 1024));
            var url = URL.createObjectURL(blob);
            var fd = new FormData();
            fd.append('image', blob);
            var sw = new _Stopwatch__WEBPACK_IMPORTED_MODULE_0__["Stopwatch"]();
            _this.squint.put(_this.id, fd)
                .then(function () {
                //console.log('upload time: ' + sw.elapsedMs);
                _this.uploadTime = sw.elapsedMs;
            })
                .catch(function (reason) {
                // TODO fix error message to match the full url
                if (reason.name != 'AbortError') {
                    alert('Upload failure for [' + _Squint__WEBPACK_IMPORTED_MODULE_2__["Squint"].url + '] ' + reason);
                }
            })
                .finally(function () {
                URL.revokeObjectURL(url);
                if (_this.running) {
                    _this.handle = requestAnimationFrame(function () { return _this.upload(); });
                }
            });
        }).catch(function (err) {
            Object(_SquintApp__WEBPACK_IMPORTED_MODULE_3__["debug"])('Cannot generate image from video: ' + err);
        });
    };
    return Uploader;
}());



/***/ }),

/***/ "./src/ValuePlanes.ts":
/*!****************************!*\
  !*** ./src/ValuePlanes.ts ***!
  \****************************/
/*! exports provided: DEFAULT_THRESHOLD1, DEFAULT_THRESHOLD2, ValuePlanes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_THRESHOLD1", function() { return DEFAULT_THRESHOLD1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_THRESHOLD2", function() { return DEFAULT_THRESHOLD2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanes", function() { return ValuePlanes; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");

var DEFAULT_THRESHOLD1 = 40;
var DEFAULT_THRESHOLD2 = 70;
/**
 * Keeps track of 3 values in the light based on threshold angles
 * for the planes (stored in degrees) and the light range (highlight
 * to shadow colors).
 */
var ValuePlanes = /** @class */ (function () {
    function ValuePlanes(valueRange) {
        this._threshold1 = DEFAULT_THRESHOLD1;
        this._threshold2 = DEFAULT_THRESHOLD2;
        this.valueRange = valueRange;
        this.computeColors();
    }
    Object.defineProperty(ValuePlanes.prototype, "threshold1", {
        get: function () {
            return this._threshold1;
        },
        set: function (angleInDeg) {
            this._threshold1 = angleInDeg;
            this._threshold2 = Math.max(this._threshold2, angleInDeg);
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "threshold2", {
        get: function () {
            return this._threshold2;
        },
        set: function (angleInDeg) {
            this._threshold2 = angleInDeg;
            this._threshold1 = Math.min(this._threshold1, angleInDeg);
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "highlight", {
        get: function () {
            return this.valueRange.maxIntensity;
        },
        set: function (val) {
            this.valueRange.maxIntensity = val;
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "shadow", {
        get: function () {
            return this.valueRange.ambientIntensity;
        },
        set: function (val) {
            this.valueRange.ambientIntensity = val;
            this.computeColors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "lightLight", {
        get: function () {
            return this._lightLight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "midLight", {
        get: function () {
            return this._midLight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValuePlanes.prototype, "darkLight", {
        get: function () {
            return this._darkLight;
        },
        enumerable: false,
        configurable: true
    });
    ValuePlanes.prototype.colorAt = function (deg) {
        deg = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["clamp"])(deg, 0, 90);
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["mix"])(this.shadow, this.highlight - this.valueRange.specularIntensity, Math.cos(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(deg)));
    };
    ValuePlanes.prototype.computeColors = function () {
        this._lightLight = this.colorAt(0.5 * this.threshold1);
        this._midLight = this.colorAt(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["mix"])(this.threshold1, this.threshold2, 0.5));
        this._darkLight = this.colorAt((this.threshold2 + 90) / 2);
    };
    return ValuePlanes;
}());



/***/ }),

/***/ "./src/ValuePlanesCtrl.ts":
/*!********************************!*\
  !*** ./src/ValuePlanesCtrl.ts ***!
  \********************************/
/*! exports provided: ValuePlanesCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanesCtrl", function() { return ValuePlanesCtrl; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PointerEventHandler */ "./src/PointerEventHandler.ts");
/* harmony import */ var _glObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glObject */ "./src/glObject.ts");
/* harmony import */ var _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TriangleObjBuilder */ "./src/TriangleObjBuilder.ts");
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TriangleObj */ "./src/TriangleObj.ts");
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");
/* harmony import */ var _glUniform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./glUniform */ "./src/glUniform.ts");
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./shaders/ViewerVertex.glsl */ "./src/shaders/ViewerVertex.glsl");
/* harmony import */ var _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./shaders/ViewerFragment.glsl */ "./src/shaders/ViewerFragment.glsl");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ValueRange */ "./src/ValueRange.ts");















var BALL_RADIUS = 0.875;
var BALL_CENTER = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-0.6, -0.6, 0]);
var CTRL_SIZE = 150;
var NOMINAL_DISPLAY_SIZE = 150;
var NOMINAL_KNOB_LENGTH = 25;
var NOMINAL_KNOB_RADIUS = 10;
var ValuePlanesCtrl = /** @class */ (function () {
    function ValuePlanesCtrl(parent, provider, onThreshold1Change, onThreshold2Change) {
        var _this = this;
        this.mouseOffset = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]();
        this.hit = 0;
        if (_Globals__WEBPACK_IMPORTED_MODULE_0__["isMobile"]) {
            CTRL_SIZE = 300;
        }
        this.provider = provider;
        this.onThreshold1Change = onThreshold1Change;
        this.onThreshold2Change = onThreshold2Change;
        var canvas = document.createElement('canvas');
        canvas.id = 'ValuePlanesCanvas';
        canvas.width = CTRL_SIZE;
        canvas.height = CTRL_SIZE;
        parent.appendChild(canvas);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl');
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.overlay = document.createElement('canvas');
        this.overlay.id = 'ValuePlanesOverlayCanvas';
        this.overlay.width = CTRL_SIZE;
        this.overlay.height = CTRL_SIZE;
        parent.appendChild(this.overlay);
        this.handler = new _PointerEventHandler__WEBPACK_IMPORTED_MODULE_2__["PointerEventHandler"](this.overlay);
        this.handler.onDown = function (pos) { return _this.onDown(pos); };
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        var gl = this.gl;
        gl.enable(gl.DEPTH_TEST);
        this.program = new _glProgram__WEBPACK_IMPORTED_MODULE_6__["glProgram"](gl, _shaders_ViewerVertex_glsl__WEBPACK_IMPORTED_MODULE_11__["default"], _shaders_ViewerFragment_glsl__WEBPACK_IMPORTED_MODULE_12__["default"]);
        var tBall = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_4__["TriangleObjBuilder"]('Ball');
        tBall.addSphere(50, BALL_RADIUS, BALL_CENTER);
        tBall.optimize(_TriangleObj__WEBPACK_IMPORTED_MODULE_5__["NormalType"].Smooth);
        this.ball = new _glObject__WEBPACK_IMPORTED_MODULE_3__["glObject"](gl, tBall, this.program);
        var tArrow = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_4__["TriangleObjBuilder"]('Light Arrow');
        tArrow.addArrow();
        this.arrow = new _glObject__WEBPACK_IMPORTED_MODULE_3__["glObject"](gl, tArrow, this.program);
        this.draw();
    }
    ValuePlanesCtrl.prototype.onDown = function (pos) {
        this.hitTest(pos);
    };
    ValuePlanesCtrl.prototype.hitTest = function (pos) {
        var d1 = this.p1.distance(pos);
        var d2 = this.p2.distance(pos);
        var HIT_RADIUS = NOMINAL_KNOB_RADIUS * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        if (d1 < HIT_RADIUS && d1 <= d2) {
            this.hit = 1;
            this.mouseOffset = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]([this.p1.x - pos.x, this.p1.y - pos.y]);
        }
        else if (d2 < HIT_RADIUS && d2 <= d1) {
            this.hit = 2;
            this.mouseOffset = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]([this.p2.x - pos.x, this.p2.y - pos.y]);
        }
        else {
            this.hit = 0;
        }
    };
    ValuePlanesCtrl.prototype.onDrag = function (pos, delta) {
        if (this.hit > 0) {
            var hitPt = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]([pos.x + this.mouseOffset.x, pos.y + this.mouseOffset.y]);
            hitPt.x = Math.max(hitPt.x, this.ballCenter.x);
            hitPt.y = Math.min(hitPt.y, this.ballCenter.y);
            var radius = this.ballCenter.distance(hitPt);
            var angle = Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["clamp"])(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toDeg"])(Math.asin((hitPt.x - this.ballCenter.x) / radius)), 0, 90);
            if (this.hit == 1) {
                this.provider.threshold1 = angle;
                this.onThreshold1Change(angle);
            }
            else {
                this.provider.threshold2 = angle;
                this.onThreshold2Change(angle);
            }
            this.draw();
        }
    };
    ValuePlanesCtrl.prototype.toGLColor = function (val) {
        return new _glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"]([val, val, val]);
    };
    ValuePlanesCtrl.prototype.setStdUniforms = function () {
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_7__["glUniform"](this.gl, this.program);
        uni.set('view', _Mat__WEBPACK_IMPORTED_MODULE_8__["Mat4"].identity);
        uni.set('projection', _Mat__WEBPACK_IMPORTED_MODULE_8__["Mat4"].ortho);
        uni.set('uEye', new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 0, 1]));
        uni.set('uOrthographic', true);
        uni.set('uDiffuseIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_14__["ValueRange"].Standard.diffuseIntensity);
        uni.set('uAmbientIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_14__["ValueRange"].Standard.shadow);
        uni.set('uSpecularIntensity', _ValueRange__WEBPACK_IMPORTED_MODULE_14__["ValueRange"].Standard.specularIntensity);
        uni.set('uLightIntensity', 1.0);
        uni.set('uFalloff', 0);
        uni.set('uWhiteColor', _glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"].modelWhite);
        uni.set('uBlackColor', _glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"].modelBlack);
        var contourColors = [
            this.toGLColor(this.provider.lightLight),
            this.toGLColor(this.provider.midLight),
            this.toGLColor(this.provider.darkLight),
        ];
        uni.seti('uNumContours', contourColors.length);
        for (var i = 0; i < contourColors.length; i++) {
            uni.set('uContourColors[' + i + ']', contourColors[i]);
        }
        uni.set('uContourAngles[0]', this.provider.threshold1);
        uni.set('uContourAngles[1]', this.provider.threshold2);
        uni.set('uContourAngles[2]', 90);
        return uni;
    };
    ValuePlanesCtrl.prototype.draw = function () {
        this.drawBall();
        this.drawOverlay();
    };
    ValuePlanesCtrl.prototype.drawBall = function () {
        var gl = this.gl;
        gl.clear(gl.COLOR_BUFFER_BIT);
        var uni = this.setStdUniforms();
        // always render with bands
        uni.seti('uRenderMode', _Renderer__WEBPACK_IMPORTED_MODULE_13__["RenderMode"].ContourPlanes);
        // shoot the light straight down
        uni.set('uLightPos', new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([0, 1, 0]));
        // don't cast shadows
        uni.set('uUseShadows', false);
        // render the ball
        this.ball.draw();
        // draw the arrow
        uni.set('uLightPos', new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([-1, -0.5, 0.5]));
        uni.seti('uRenderMode', _Renderer__WEBPACK_IMPORTED_MODULE_13__["RenderMode"].Normal);
        // first reset things so that we're looking down the z-axis
        this.arrow.clearTransforms();
        this.arrow.scale(1.25);
        this.arrow.translate(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([BALL_CENTER.x, BALL_CENTER.y + BALL_RADIUS + 0.1, 0.0]));
        uni.set('uWhiteColor', new _glColor__WEBPACK_IMPORTED_MODULE_9__["glColor3"]([1.0, 1.0, 0.5]));
        uni.set('uBlackColor', _htmlColor__WEBPACK_IMPORTED_MODULE_10__["htmlColor"].black.toGlColor());
        uni.set('uAmbientIntensity', 0.4);
        uni.set('uDiffuseIntensity', 0.6);
        this.arrow.draw();
    };
    ValuePlanesCtrl.prototype.drawOverlay = function () {
        var ctx = this.overlay.getContext('2d');
        this.ballCenter = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]([
            CTRL_SIZE * (1 + BALL_CENTER.x) / 2,
            CTRL_SIZE * (1 - BALL_CENTER.y) / 2
        ]);
        ctx.clearRect(0, 0, CTRL_SIZE, CTRL_SIZE);
        ctx.fillStyle = 'limegreen';
        ctx.strokeStyle = 'black';
        var KNOB_LENGTH = NOMINAL_KNOB_LENGTH * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        var KNOB_RADIUS = NOMINAL_KNOB_RADIUS * (CTRL_SIZE / NOMINAL_DISPLAY_SIZE);
        var r = CTRL_SIZE * BALL_RADIUS / 2;
        var s1 = this.getPt(this.ballCenter, this.provider.threshold1, r);
        this.p1 = this.getPt(this.ballCenter, this.provider.threshold1, r + KNOB_LENGTH);
        var s2 = this.getPt(this.ballCenter, this.provider.threshold2, r);
        this.p2 = this.getPt(this.ballCenter, this.provider.threshold2, r + KNOB_LENGTH);
        ctx.lineWidth = (1 / 150) * CTRL_SIZE;
        ctx.beginPath();
        ctx.moveTo(s1.x, s1.y);
        ctx.lineTo(this.p1.x, this.p1.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.p1.x, this.p1.y, KNOB_RADIUS, 0, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(360));
        ctx.fill();
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(s2.x, s2.y);
        ctx.lineTo(this.p2.x, this.p2.y);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(this.p2.x, this.p2.y, KNOB_RADIUS, 0, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(360));
        ctx.fill();
        ctx.stroke();
    };
    ValuePlanesCtrl.prototype.getPt = function (center, threshold, radius) {
        var oy = radius * Math.sin(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(90 - threshold));
        var ox = radius * Math.cos(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(90 - threshold));
        return new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec2"]([center.x + ox, center.y - oy]);
    };
    return ValuePlanesCtrl;
}());



/***/ }),

/***/ "./src/ValuePlanesPanel.ts":
/*!*********************************!*\
  !*** ./src/ValuePlanesPanel.ts ***!
  \*********************************/
/*! exports provided: ValuePlanesPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePlanesPanel", function() { return ValuePlanesPanel; });
/* harmony import */ var _Panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Panel */ "./src/Panel.ts");
/* harmony import */ var _ValuePlanes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ValuePlanes */ "./src/ValuePlanes.ts");
/* harmony import */ var _Slider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Slider */ "./src/Slider.ts");
/* harmony import */ var _ValuePlanesCtrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ValuePlanesCtrl */ "./src/ValuePlanesCtrl.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ValueRange */ "./src/ValueRange.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ValuePlanesPanel = /** @class */ (function (_super) {
    __extends(ValuePlanesPanel, _super);
    function ValuePlanesPanel(parent, id, valueRange) {
        var _this = _super.call(this, parent, id) || this;
        _this.valuePlanes = new _ValuePlanes__WEBPACK_IMPORTED_MODULE_1__["ValuePlanes"](valueRange);
        var div = document.createElement('div');
        div.className = 'SlidersDiv';
        _this.div.appendChild(div);
        _this.createCtrlsElements(div);
        _this.valuePlanesCtrl = new _ValuePlanesCtrl__WEBPACK_IMPORTED_MODULE_3__["ValuePlanesCtrl"](_this.div, _this.valuePlanes, function (value) {
            _this.updateSliders();
            if (_this.onChange) {
                _this.onChange(_this);
            }
        }, function (value) {
            _this.updateSliders();
            if (_this.onChange) {
                _this.onChange(_this);
            }
        });
        return _this;
    }
    ValuePlanesPanel.prototype.createCtrlsElements = function (parent) {
        var _this = this;
        this.highlightSlider = new _Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'Highlight',
            label: 'Highlight',
            min: 0,
            max: 1,
            value: this.valuePlanes.highlight,
            colors: [_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack.toHtmlColor(), _glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite.toHtmlColor()],
            oninput: function () {
                _this.valuePlanes.highlight = _this.highlightSlider.value;
                _this.updateSliders();
                _this.valuePlanesCtrl.draw();
                if (_this.onChange) {
                    _this.onChange(_this);
                }
            },
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.lightLightSlider = new _Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'LightLight',
            label: 'Light Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.lightLight,
            colors: [_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack.toHtmlColor(), _glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite.toHtmlColor()],
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.lightLightSlider.range.disabled = true;
        this.midLightSlider = new _Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'MidLight',
            label: 'Mid Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.midLight,
            colors: [_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack.toHtmlColor(), _glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite.toHtmlColor()],
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.midLightSlider.range.disabled = true;
        this.darkLightSlider = new _Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'DarkLight',
            label: 'Dark Light',
            min: 0,
            max: 1,
            value: this.valuePlanes.darkLight,
            colors: [_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack.toHtmlColor(), _glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite.toHtmlColor()],
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
        this.darkLightSlider.range.disabled = true;
        this.shadowSlider = new _Slider__WEBPACK_IMPORTED_MODULE_2__["Slider"](parent, {
            id: 'Shadow',
            label: 'Shadow',
            min: 0,
            max: 1,
            value: this.valuePlanes.shadow,
            colors: [_glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelBlack.toHtmlColor(), _glColor__WEBPACK_IMPORTED_MODULE_4__["glColor3"].modelWhite.toHtmlColor()],
            oninput: function () {
                _this.valuePlanes.shadow = _this.shadowSlider.value;
                _this.updateSliders();
                _this.valuePlanesCtrl.draw();
                if (_this.onChange) {
                    _this.onChange(_this);
                }
            },
            getText: function (slider) { return (100 * slider.value).toFixed(0) + "%"; }
        });
    };
    ValuePlanesPanel.prototype.updateSliders = function () {
        this.highlightSlider.value = this.valuePlanes.highlight;
        this.lightLightSlider.value = this.valuePlanes.lightLight;
        this.midLightSlider.value = this.valuePlanes.midLight;
        this.darkLightSlider.value = this.valuePlanes.darkLight;
        this.shadowSlider.value = this.valuePlanes.shadow;
    };
    ValuePlanesPanel.prototype.toRenderer = function (renderer) {
        renderer.options.contours = [
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.lightLight, this.valuePlanes.threshold1),
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.midLight, this.valuePlanes.threshold2),
            new _Renderer__WEBPACK_IMPORTED_MODULE_6__["Contour"](this.valuePlanes.darkLight, 90)
        ];
        renderer.options.valueRange = new _ValueRange__WEBPACK_IMPORTED_MODULE_5__["ValueRange"](this.valuePlanes.highlight, this.valuePlanes.shadow, this.valuePlanes.highlight - this.valuePlanes.lightLight);
    };
    return ValuePlanesPanel;
}(_Panel__WEBPACK_IMPORTED_MODULE_0__["Panel"]));



/***/ }),

/***/ "./src/ValueRange.ts":
/*!***************************!*\
  !*** ./src/ValueRange.ts ***!
  \***************************/
/*! exports provided: ValueRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueRange", function() { return ValueRange; });
/**
 * Keeps track of a value range - highlight to shadow color. A minimum
 * differential is kept between the two when one is changed
 */
var ValueRange = /** @class */ (function () {
    function ValueRange(maxIntensity, ambientIntensity, specularIntensity) {
        this._maxIntensity = maxIntensity;
        this._ambientIntensity = ambientIntensity;
        this._specularIntensity = specularIntensity;
    }
    Object.defineProperty(ValueRange, "Standard", {
        get: function () {
            return new ValueRange(1.0, 0.2, 0.1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange, "EmphasizeHighlights", {
        get: function () {
            return new ValueRange(1.0, 0.2, 0.75);
        },
        enumerable: false,
        configurable: true
    });
    ValueRange.prototype.clone = function () {
        return new ValueRange(this.maxIntensity, this.ambientIntensity, this.specularIntensity);
    };
    Object.defineProperty(ValueRange.prototype, "specularIntensity", {
        get: function () {
            return this._specularIntensity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "maxIntensity", {
        get: function () {
            return this._maxIntensity;
        },
        set: function (val) {
            this._maxIntensity = Math.min(Math.max(val, this._specularIntensity), 1.0);
            this._ambientIntensity = Math.min(this._ambientIntensity, this._maxIntensity - this._specularIntensity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "ambientIntensity", {
        get: function () {
            return this._ambientIntensity;
        },
        set: function (val) {
            this.shadow = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "shadow", {
        get: function () {
            return this._ambientIntensity;
        },
        set: function (val) {
            this._ambientIntensity = Math.max(Math.min(val, 1 - this._specularIntensity), 0);
            this._maxIntensity = Math.max(this._maxIntensity, this._ambientIntensity + this._specularIntensity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueRange.prototype, "diffuseIntensity", {
        get: function () {
            return this.maxIntensity - this._ambientIntensity - this._specularIntensity;
        },
        enumerable: false,
        configurable: true
    });
    return ValueRange;
}());



/***/ }),

/***/ "./src/Vec.ts":
/*!********************!*\
  !*** ./src/Vec.ts ***!
  \********************/
/*! exports provided: Vec2, Vec3, Vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec2", function() { return Vec2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec3", function() { return Vec3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec4", function() { return Vec4; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * Vector class for use with WebGL applications.
 */
var Vec = /** @class */ (function () {
    /**
     * @param valuesOrSize If a array, the values for the vector. If a number, the size of the vector.
     */
    function Vec(valuesOrSize) {
        if (valuesOrSize instanceof Array) {
            this.values = __spreadArrays(valuesOrSize);
        }
        else {
            this.values = new Array(valuesOrSize);
            for (var i = 0; i < valuesOrSize; i++) {
                this.values[i] = 0;
            }
        }
    }
    /**
     * Computes the magnitude of the vector.
     *
     * @return The vector magnitude.
     */
    Vec.prototype.magnitude = function () {
        var sum = 0;
        for (var i = 0; i < this.values.length; i++) {
            sum += this.values[i] * this.values[i];
        }
        return Math.sqrt(sum);
    };
    return Vec;
}());
/**
 * An x-y vector.
 */
var Vec2 = /** @class */ (function (_super) {
    __extends(Vec2, _super);
    /**
     * @param vals If supplied, the initial values for the vector
     */
    function Vec2(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 2) || this;
        }
        return _this;
    }
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec2.prototype.clone = function () {
        return new Vec2(this.values);
    };
    Object.defineProperty(Vec2.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec2.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Computes the distance to another point
     *
     * @param other The other point
     * @returns The distance between this point and the other point
     */
    Vec2.prototype.distance = function (other) {
        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));
    };
    return Vec2;
}(Vec));

/**
 * An x-y-z vector.
 */
var Vec3 = /** @class */ (function (_super) {
    __extends(Vec3, _super);
    /**
     * @param vals If supplied, the initial values for the vector
     */
    function Vec3(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 3) || this;
        }
        return _this;
    }
    Object.defineProperty(Vec3, "origin", {
        get: function () {
            return new Vec3([0, 0, 0]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "z", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[2];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[2] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec3.prototype, "xy", {
        /**
         * Gets the x-y components as a 2d vec
         *
         * @return the Vec3
         */
        get: function () {
            return new Vec2([this.x, this.y]);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec3.prototype.clone = function () {
        return new Vec3(this.values);
    };
    /**
     * Creates a string representation of the vector
     *
     * @param digits The number of decimal places to display. This value is passed to toFixed().
     * @param divider The string to separate each number.
     * @returns A string representation.
     */
    Vec3.prototype.toString = function (digits, divider) {
        if (digits === void 0) { digits = 2; }
        if (divider === void 0) { divider = ','; }
        return this.x.toFixed(digits) + divider + this.y.toFixed(digits) + divider + this.z.toFixed(digits);
    };
    /**
     * Returns a normalized version of this vector.
     *
     * @returns The resulting normalized vector.
     */
    Vec3.prototype.normalize = function () {
        var mag = this.magnitude();
        if (mag === 0) {
            return new Vec3();
        }
        else {
            return this.mult(1 / mag);
        }
    };
    /**
     * Multiplies members by a value and returns the new vector
     *
     * @param value The multiplication value.
     */
    Vec3.prototype.mult = function (value) {
        return new Vec3([
            this.x * value,
            this.y * value,
            this.z * value,
        ]);
    };
    /**
     * Returns the vector pointing in the opposite direction.
     *
     * @returns The negated vector.
     */
    Vec3.prototype.negate = function () {
        return new Vec3([-this.x, -this.y, -this.z]);
    };
    /**
     * Subtracts values from this vector.
     *
     * @param vec The vector to subtract.
     * @returns The computed vector.
     */
    Vec3.prototype.subtract = function (vec) {
        return new Vec3([
            this.values[0] - vec.values[0],
            this.values[1] - vec.values[1],
            this.values[2] - vec.values[2]
        ]);
    };
    /**
     * Adds values from this vector.
     *
     * @param vec The vector to add.
     * @returns The computed vector.
     */
    Vec3.prototype.add = function (vec) {
        return new Vec3([
            this.values[0] + vec.values[0],
            this.values[1] + vec.values[1],
            this.values[2] + vec.values[2]
        ]);
    };
    /**
     * Computes the cross product of this vector and another vector.
     *
     * @param other The other vector.
     */
    Vec3.prototype.cross = function (other) {
        var A = this.values;
        var B = other.values;
        return new Vec3([
            A[1] * B[2] - A[2] * B[1],
            A[2] * B[0] - A[0] * B[2],
            A[0] * B[1] - A[1] * B[0]
        ]);
    };
    /**
     * Computes the distance from this point to a specified point.
     *
     * @param pt The point.
     * @returns The distance to the point.
     */
    Vec3.prototype.distToPoint = function (pt) {
        return this.subtract(pt).magnitude();
    };
    /**
     * Builds a Vec4 from this Vec3
     *
     * @param w The w component of the new vector.
     * @returns The new vector.
     */
    Vec3.prototype.toVec4 = function (w) {
        return new Vec4([this.x, this.y, this.z, w]);
    };
    return Vec3;
}(Vec));

/**
 * An x-y-z-w vector.
 */
var Vec4 = /** @class */ (function (_super) {
    __extends(Vec4, _super);
    /**
     * @param vals If supplied, the initial values for the vector.
     */
    function Vec4(vals) {
        var _this = this;
        if (vals) {
            _this = _super.call(this, vals) || this;
        }
        else {
            _this = _super.call(this, 4) || this;
        }
        return _this;
    }
    Object.defineProperty(Vec4.prototype, "x", {
        /**
         * Gets the X component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[0];
        },
        /**
         * Sets the X component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "y", {
        /**
         * Gets the Y component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[1];
        },
        /**
         * Sets the Y component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[1] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "z", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[2];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[2] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "w", {
        /**
         * Gets the Z component of the vector
         *
         * @returns The value
         */
        get: function () {
            return this.values[3];
        },
        /**
         * Sets the Z component of the vector
         *
         * @param val The value
         */
        set: function (val) {
            this.values[3] = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Vec4.prototype, "xyz", {
        /**
         * Gets the x-y-z components as a 3d vec
         *
         * @return the Vec3
         */
        get: function () {
            return new Vec3([this.x, this.y, this.z]);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a copy of the vector.
     *
     * @returns A copy of the vector.
     */
    Vec4.prototype.clone = function () {
        return new Vec4(this.values);
    };
    /**
     * Returns an x-y-z vector where each element is computed by dividing this vectors
     * elements by the w value.
     *
     * @returns An x-y-z vector.
     */
    Vec4.prototype.divideByW = function () {
        var w = this.values[3];
        return new Vec3([
            this.values[0] / w,
            this.values[1] / w,
            this.values[2] / w
        ]);
    };
    /**
     * Normalizes this vector, and stores and returns the result.
     *
     * @returns The resulting normalized vector.
     */
    Vec4.prototype.normalize = function () {
        var mag = this.magnitude();
        var ret = this.clone();
        if (mag !== 0) {
            for (var i = 0; i < this.values.length; i++) {
                ret.values[i] /= mag;
            }
        }
        return ret;
    };
    /**
     * Creates a Vec4 from a Vec3 object
     *
     * @param vec The Vec3 object
     * @param w The w value for the Vec4
     */
    Vec4.fromVec3 = function (vec, w) {
        return new Vec4([vec.x, vec.y, vec.z, 1]);
    };
    return Vec4;
}(Vec));



/***/ }),

/***/ "./src/Video.ts":
/*!**********************!*\
  !*** ./src/Video.ts ***!
  \**********************/
/*! exports provided: Video */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Video", function() { return Video; });
var Video = /** @class */ (function () {
    function Video() {
    }
    Video.getResolutions = function (onFound) {
        navigator.mediaDevices.enumerateDevices()
            .then(function (devices) {
            /*
            let str = '';
            let count = 0;
            for (let i = 0; i < devices.length; i++) {
               let device = devices[i];
               if (device.kind === 'videoinput') {
                  count++;
                  str += device.deviceId + ': ' + device.label + '\n';
               }
            }
            str = count + ' cameras found.\n' + str;
            alert(str);
            */
            var cameraCount = 1;
            for (var i = 0; i < devices.length; i++) {
                var device = devices[i];
                if (device.kind === 'videoinput') {
                    var actual = {
                        label: 'camera ' + cameraCount++,
                        // if we don't ask for an initial size, Chrome will initialize
                        // the camera with a lower one and then this resolution sticks
                        // until the camera turns off. Ask for the highest possible.
                        //width: 10 * 1024,
                        //height: 10 * 1024,
                        deviceId: device.deviceId,
                    };
                    onFound(actual);
                    /*
  
                    const constraints = {
                       video:
                       {
                          // if we don't ask for an initial size, Chrome will initialize
                          // the camera with a lower one and then this resolution sticks
                          // until the camera turns off. Ask for the highest possible.
                          width: 10 * 1024,
                          height: 10 * 1024,
                          //frameRate: 30,
                          deviceId: device.deviceId,
                       }
                    };
  
                    navigator.mediaDevices.getUserMedia(constraints)
                       .then((stream) => {
                          let mediaTrack = stream.getVideoTracks()[0];
                          let constraints = mediaTrack.getConstraints();
                          let settings = mediaTrack.getSettings();
  
                          if (mediaTrack.getCapabilities) {
                             let capabilities = mediaTrack.getCapabilities(); // not supported by firefox
  
                             let cam = (settings.facingMode === 'user' ? 'Front' : 'Back');
                             let maxWidth = capabilities.width.max;
                             let maxHeight = capabilities.height.max;
                             let actual = {
                                label: cam + ' (' + maxWidth + 'x' + maxHeight + ')',
                                width: maxWidth,
                                height: maxHeight,
                                facingMode: capabilities.facingMode[0],
                                frameRate: 30,
                                deviceId: capabilities.deviceId,
                             }
  
                             onFound(actual)
                          }
                          else {
                             let cam = (settings.facingMode === 'user' ? 'Front' : 'Back');
                             let maxWidth = settings.width;
                             let maxHeight = settings.height;
                             let actual = {
                                label: cam + ' (' + maxWidth + 'x' + maxHeight + ')',
                                width: maxWidth,
                                height: maxHeight,
                                facingMode: settings.facingMode,
                                frameRate: 30,
                                deviceId: settings.deviceId,
                             }
  
                             onFound(actual)
                          }
  
                          // TODO if onFound throws, this is skipped
                          stream.getTracks().forEach((track: MediaStreamTrack) => {
                             track.stop();
                          });
                       })
                       .catch((err) => {
                          debug('getUserMedia.catch\n' + device.label + ':' + device.deviceId + '\n' + err);
                       });
                       */
                }
            }
        });
    };
    return Video;
}());



/***/ }),

/***/ "./src/ViewerApp.ts":
/*!**************************!*\
  !*** ./src/ViewerApp.ts ***!
  \**************************/
/*! exports provided: ViewerApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewerApp", function() { return ViewerApp; });
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _TriangleObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TriangleObj */ "./src/TriangleObj.ts");
/* harmony import */ var _PointerEventHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PointerEventHandler */ "./src/PointerEventHandler.ts");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _ModelsMenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ModelsMenu */ "./src/ModelsMenu.ts");
/* harmony import */ var _ModelLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ModelLoader */ "./src/ModelLoader.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _FPS__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./FPS */ "./src/FPS.ts");
/* harmony import */ var _OverlayCanvas__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./OverlayCanvas */ "./src/OverlayCanvas.ts");
/* harmony import */ var _ValuePlanesPanel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ValuePlanesPanel */ "./src/ValuePlanesPanel.ts");
/* harmony import */ var _ValueRange__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ValueRange */ "./src/ValueRange.ts");
/* harmony import */ var _PerspectivePanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./PerspectivePanel */ "./src/PerspectivePanel.ts");
/* harmony import */ var _hsvColor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hsvColor */ "./src/hsvColor.ts");
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./TriangleObjBuilder */ "./src/TriangleObjBuilder.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

















var PointerMode;
(function (PointerMode) {
    PointerMode[PointerMode["View"] = 0] = "View";
    PointerMode[PointerMode["Light"] = 1] = "Light";
})(PointerMode || (PointerMode = {}));
var COLOR_CONTOURS = [
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([1.00, 0.20, 0.20]), 10),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([1.00, 0.55, 0.25]), 20),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([1.00, 0.81, 0.25]), 30),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([1.00, 1.00, 0.00]), 40),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([0.30, 1.00, 0.10]), 50),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([0.25, 0.90, 0.90]), 60),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([0.50, 0.50, 1.00]), 70),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([0.20, 0.20, 1.00]), 80),
    new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Contour"](new _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"]([0.30, 0.11, 0.40]), 90),
];
var ViewerApp = /** @class */ (function () {
    function ViewerApp(query) {
        this.gl = null;
        this.pointerMode = PointerMode.View;
        this.rotateLightWithObject = false;
        this.dirty = true;
        this.animate = false;
        this.fps = new _FPS__WEBPACK_IMPORTED_MODULE_9__["FPS"]();
        this.loader = new _ModelLoader__WEBPACK_IMPORTED_MODULE_7__["ModelLoader"]();
        this.query = query;
    }
    ViewerApp.prototype.create = function (div) {
        div.id = 'ViewerApp';
        var viewContainer = document.createElement('div');
        viewContainer.id = 'ViewContainer';
        viewContainer.className = 'Container';
        div.appendChild(viewContainer);
        this.createViewElements(viewContainer);
        this.createPerspectivePanel(div);
        this.createValuePlanesPanel(div);
        this.updateSize();
        this.loadModel(this.query);
    };
    ViewerApp.prototype.delete = function () {
        cancelAnimationFrame(this.animationFrame);
        this.perspectivePanel.delete();
        this.valuePlanesPanel.delete();
    };
    ViewerApp.prototype.createViewElements = function (parent) {
        var _this = this;
        var canvas = document.createElement('canvas');
        canvas.id = 'MainCanvas';
        parent.appendChild(canvas);
        var style = getComputedStyle(canvas);
        this.baseBackgroundColor = _hsvColor__WEBPACK_IMPORTED_MODULE_14__["hsvColor"].fromHtmlColor(_htmlColor__WEBPACK_IMPORTED_MODULE_15__["htmlColor"].fromCss(style.backgroundColor));
        this.overlay = new _OverlayCanvas__WEBPACK_IMPORTED_MODULE_10__["OverlayCanvas"](parent);
        // don't try to make the canvas transparent to the underlying html. This
        // seems to limit the alpha values we can use in our scene.
        var context = canvas.getContext('webgl', { alpha: false });
        if (!context) {
            // TODO display a message about not being able to create a WebGL context
            console.log("Unable to get WebGL context");
        }
        this.gl = context;
        this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_1__["Renderer"](this.gl);
        this.renderer.showMiniView = false;
        this.handler = new _PointerEventHandler__WEBPACK_IMPORTED_MODULE_4__["PointerEventHandler"](canvas);
        this.handler.onDrag = function (pos, delta) { return _this.onDrag(pos, delta); };
        this.handler.onDown = function () {
            _this.animate = false;
            _this.overlay.clear();
        };
        this.handler.onClick = function (pos) { return _this.onClick(pos); };
        this.handler.onDblClick = function () {
            _this.animate = true;
            _this.fps = new _FPS__WEBPACK_IMPORTED_MODULE_9__["FPS"]();
            return false;
        };
        this.handler.onScale = function (scale, change) { return _this.onScale(scale, change); };
        this.handler.onRotate = function (angle, delta) { return _this.onRotate(angle, delta); };
        this.handler.onTranslate = function (delta) { return _this.onTranslate(delta); };
        document.onkeydown = function (event) {
            var angle = 90;
            if (event.ctrlKey) {
                angle = 1;
            }
            switch (event.keyCode) {
                case 37: // left
                    _this.rotateObjects(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(angle), 0);
                    _this.dirty = true;
                    break;
                case 38: // up
                    _this.rotateObjects(0, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(angle));
                    _this.dirty = true;
                    break;
                case 39: // right
                    _this.rotateObjects(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(-angle), 0);
                    _this.dirty = true;
                    break;
                case 40: // down
                    _this.rotateObjects(0, Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(-angle));
                    _this.dirty = true;
                    break;
            }
        };
        document.onkeypress = function (event) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (event.key) {
                    case 'a':
                        this.renderer.obj.applyXForm();
                        this.dirty = true;
                        break;
                    case 'd':
                        this.renderer.showShadowMap = !this.renderer.showShadowMap;
                        this.dirty = true;
                        break;
                    case 'g':
                        this.renderer.showGrid = !this.renderer.showGrid;
                        this.dirty = true;
                        break;
                    case 'h':
                        this.renderer.options.showHighlights = !this.renderer.options.showHighlights;
                        this.dirty = true;
                        break;
                    case 'i':
                        alert(this.renderer.tObj.name + '\n' +
                            'Num Triangles: ' + this.renderer.tObj.numTriangles.toLocaleString() + '\n' +
                            'Num Vertices: ' + this.renderer.tObj.numVertices.toLocaleString() + '\n');
                        break;
                    case 'l':
                        if (this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Point) {
                            this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Directional;
                        }
                        else {
                            this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Point;
                        }
                        this.dirty = true;
                        break;
                    case 'o':
                        this.optimize(_TriangleObj__WEBPACK_IMPORTED_MODULE_3__["NormalType"].Smooth);
                        break;
                    case 'p':
                        this.optimize(_TriangleObj__WEBPACK_IMPORTED_MODULE_3__["NormalType"].Flat);
                        break;
                    case 'r':
                        this.renderer.tObj.reverse();
                        this.renderer.obj.uploadTriangles();
                        this.dirty = true;
                        break;
                    case 's':
                        this.save();
                        break;
                    case 't':
                        this.dirty = true;
                        break;
                    case 'v':
                        this.renderer.options.camera.useOrthographic = !this.renderer.options.camera.useOrthographic;
                        this.dirty = true;
                        break;
                }
                return [2 /*return*/];
            });
        }); };
        window.addEventListener('resize', function () {
            _this.updateSize();
            _this.dirty = true;
        });
    };
    ViewerApp.prototype.createPerspectivePanel = function (div) {
        var _this = this;
        this.perspectivePanel = new _PerspectivePanel__WEBPACK_IMPORTED_MODULE_13__["PerspectivePanel"](div, 'PerspectivePanel', this.renderer.options.camera);
        this.perspectivePanel.onShow = function (panel) {
            _this.valuePlanesPanel.visible = false;
            _this.updateSize();
            _this.dirty = true;
        };
        this.perspectivePanel.onHide = function () {
            _this.updateSize();
            _this.pointerMode = PointerMode.View;
            _this.dirty = true;
        };
        this.perspectivePanel.onChange = function () {
            _this.dirty = true;
        };
    };
    ViewerApp.prototype.createValuePlanesPanel = function (div) {
        var _this = this;
        this.valuePlanesPanel = new _ValuePlanesPanel__WEBPACK_IMPORTED_MODULE_11__["ValuePlanesPanel"](div, 'ValuePlanesPanel', this.renderer.options.valueRange);
        this.valuePlanesPanel.onShow = function (panel) {
            _this.perspectivePanel.visible = false;
            _this.updateSize();
            _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourPlanes;
            _this.valuePlanesPanel.toRenderer(_this.renderer);
            _this.dirty = true;
        };
        this.valuePlanesPanel.onHide = function () {
            _this.updateSize();
            _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
            _this.renderer.options.valueRange = _ValueRange__WEBPACK_IMPORTED_MODULE_12__["ValueRange"].Standard;
            _this.dirty = true;
        };
        this.valuePlanesPanel.onChange = function () {
            _this.valuePlanesPanel.toRenderer(_this.renderer);
            _this.dirty = true;
        };
    };
    ViewerApp.prototype.buildMenu = function (menubar) {
        var _this = this;
        Object(_ModelsMenu__WEBPACK_IMPORTED_MODULE_6__["createModelsMenu"])(menubar, function (file) { return _this.loadModel(file); });
        var subMenu;
        subMenu = menubar.addSubMenu('Tools', 'Tools');
        var contoursSubMenu = subMenu.addSubMenu('Color Contours');
        contoursSubMenu.addRadiobutton({
            label: 'None',
            group: 'ContourGroup',
            checked: function () {
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourPlanes ||
                    _this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourValues) {
                    return false;
                }
                else {
                    return true;
                }
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        contoursSubMenu.addRadiobutton({
            label: 'Planes',
            group: 'ContourGroup',
            checked: function () {
                return (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourPlanes && _this.valuePlanesPanel.visible === false);
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.contours = COLOR_CONTOURS;
                _this.renderer.options.renderMode = button.checked ? _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourPlanes : _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        contoursSubMenu.addRadiobutton({
            label: 'Values',
            group: 'ContourGroup',
            checked: function () {
                return (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourValues && _this.valuePlanesPanel.visible === false);
            },
            oncheck: function (button) {
                _this.valuePlanesPanel.visible = false;
                _this.renderer.options.contours = COLOR_CONTOURS;
                _this.renderer.options.renderMode = button.checked ? _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].ContourValues : _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        var highlightSubMenu = subMenu.addSubMenu('Highlights');
        highlightSubMenu.addRadiobutton({
            label: 'Show',
            group: 'HighlightsGroup',
            checked: function () { return _this.renderer.options.showHighlights && _this.renderer.renderModeCanToggleHighlights(); },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = true;
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].EmphasizeHighlights) {
                    _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
                }
                _this.dirty = true;
            }
        });
        highlightSubMenu.addRadiobutton({
            label: 'Hide',
            group: 'HighlightsGroup',
            checked: function () { return !_this.renderer.options.showHighlights && _this.renderer.renderModeCanToggleHighlights(); },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = false;
                if (_this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].EmphasizeHighlights) {
                    _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
                }
                _this.dirty = true;
            }
        });
        highlightSubMenu.addRadiobutton({
            label: 'Emphasize',
            group: 'HighlightsGroup',
            checked: function () { return _this.renderer.options.renderMode === _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].EmphasizeHighlights; },
            oncheck: function (button) {
                _this.renderer.options.showHighlights = true;
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].EmphasizeHighlights;
                _this.dirty = true;
            }
        });
        highlightSubMenu.addSlider({
            label: 'Shininess',
            min: 1,
            max: 50,
            value: this.renderer.options.shininess,
            oninput: function (slider) {
                _this.renderer.options.shininess = slider.value;
                _this.dirty = true;
            },
        });
        var shadowsSubMenu = subMenu.addSubMenu('Shadows');
        shadowsSubMenu.addRadiobutton({
            label: 'Normal',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].Normal;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Highlight Terminator',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].HighlightTerminator; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].HighlightTerminator;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Highlight Shadow',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].HighlightShadow; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].HighlightShadow;
                _this.dirty = true;
            }
        });
        shadowsSubMenu.addRadiobutton({
            label: 'Light and Shadow Only',
            group: 'ShadowGroup',
            checked: function () { return _this.renderer.options.renderMode == _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].LightAndShadow; },
            oncheck: function (button) {
                _this.renderer.options.renderMode = _Renderer__WEBPACK_IMPORTED_MODULE_1__["RenderMode"].LightAndShadow;
                _this.dirty = true;
            }
        });
        subMenu.addItem('Perspective...', function () {
            _this.perspectivePanel.visible = true;
        });
        subMenu.addItem('Value Planes...', function () {
            _this.valuePlanesPanel.visible = true;
        });
        var lightSubMenu = subMenu.addSubMenu('Light');
        lightSubMenu.addRadiobutton({
            label: 'Directional Light',
            group: 'LightTypeGroup',
            checked: function () { return _this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Directional; },
            oncheck: function (button) {
                _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Directional;
                _this.dirty = true;
            }
        });
        lightSubMenu.addRadiobutton({
            label: 'Point Light',
            group: 'LightTypeGroup',
            checked: function () { return _this.renderer.options.lightType === _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Point; },
            oncheck: function (button) {
                _this.renderer.options.lightType = _Renderer__WEBPACK_IMPORTED_MODULE_1__["LightType"].Point;
                _this.dirty = true;
            }
        });
        lightSubMenu.addSlider({
            label: 'Falloff',
            min: 0,
            max: 0.9,
            value: this.renderer.options.falloff,
            oninput: function (slider) {
                _this.renderer.options.falloff = slider.value;
                _this.dirty = true;
            },
        });
        lightSubMenu.addSlider({
            label: 'Intensity',
            min: 0.5,
            max: 1.5,
            value: this.renderer.options.lightIntensity,
            oninput: function (slider) {
                _this.renderer.options.lightIntensity = slider.value;
                _this.dirty = true;
            },
        });
        lightSubMenu.addSlider({
            label: 'Ambient Intensity',
            min: 0.0,
            max: 0.4,
            value: this.renderer.options.valueRange.ambientIntensity,
            oninput: function (slider) {
                _this.renderer.options.valueRange.ambientIntensity = slider.value;
                var range = 0.6;
                var baseVal = _this.baseBackgroundColor.v;
                var newVal = (baseVal - range / 2) + range * slider.valueAsPercent;
                var newColor = new _hsvColor__WEBPACK_IMPORTED_MODULE_14__["hsvColor"]([_this.baseBackgroundColor.h, _this.baseBackgroundColor.s, newVal]);
                _this.gl.canvas.style.backgroundColor = newColor.toHtmlColor().toCss();
                _this.dirty = true;
            },
        });
        subMenu = menubar.addSubMenu('Options', 'Options');
        var resetSubMenu = subMenu.addSubMenu('Reset');
        resetSubMenu.addItem('All', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_1__["Reset"].All);
            _this.dirty = true;
        });
        resetSubMenu.addItem('Lights', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_1__["Reset"].Lights);
            _this.dirty = true;
        });
        resetSubMenu.addItem('View', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_1__["Reset"].View);
            _this.dirty = true;
        });
        resetSubMenu.addItem('Rendering', function () {
            _this.renderer.reset(_Renderer__WEBPACK_IMPORTED_MODULE_1__["Reset"].Rendering);
            _this.dirty = true;
        });
        var floorSubMenu = subMenu.addSubMenu('Floor');
        floorSubMenu.addCheckbox({
            label: 'Show Floor',
            checked: function () { return _this.renderer.showFloor; },
            oncheck: function (checkbox) {
                _this.renderer.showFloor = checkbox.checked;
                _this.dirty = true;
            }
        });
        floorSubMenu.addCheckbox({
            label: 'Show Grid',
            checked: function () { return _this.renderer.showGrid; },
            oncheck: function (checkbox) {
                _this.renderer.showGrid = checkbox.checked;
                _this.dirty = true;
            }
        });
        subMenu.addItem('Reverse Object', function () {
            _this.renderer.tObj.reverse();
            _this.renderer.obj.uploadTriangles();
            _this.dirty = true;
        });
        var rotateSubMenu = subMenu.addSubMenu('Rotation');
        rotateSubMenu.addCheckbox({
            label: 'Keep the light pointing at the same spot on the model',
            checked: function () { return _this.rotateLightWithObject; },
            oncheck: function (checkbox) {
                _this.rotateLightWithObject = checkbox.checked;
            }
        });
        rotateSubMenu.addCheckbox({
            label: 'Rotate model independent of the floor',
            checked: function () { return _this.renderer.lockFloor; },
            oncheck: function (checkbox) {
                _this.renderer.lockFloor = checkbox.checked;
            }
        });
    };
    ViewerApp.prototype.optimize = function (normalType) {
        var obj = this.renderer.obj;
        var oldNumVertices = obj.tObj.numVertices;
        obj.optimize(normalType);
        var newNumVertices = obj.tObj.numVertices;
        //let msg = 'Optimized .OBJ content copied to clipboard\n\n';
        var msg = 'Optimized .OBJ content\n\n';
        msg += 'Num Triangles: ' + obj.tObj.numTriangles + '\n';
        msg += 'Num Vertices: ' + oldNumVertices + ' to ' + newNumVertices + ', ' + (100 * newNumVertices / oldNumVertices).toFixed() + ' %\n';
        alert(msg);
        //let str = obj.tObj.toObjString(6);
        //navigator.clipboard.writeText(str).then(() => { alert(msg) });
        this.dirty = true;
    };
    ViewerApp.prototype.updateSize = function () {
        var gl = this.gl;
        var width = window.innerWidth;
        var height = window.innerHeight;
        var menubarHeight = document.getElementById('Menubar').clientHeight;
        var panelHeight = 0;
        if (this.perspectivePanel.visible) {
            panelHeight = this.perspectivePanel.div.clientHeight;
        }
        else if (this.valuePlanesPanel.visible) {
            panelHeight = this.valuePlanesPanel.div.clientHeight;
        }
        gl.canvas.width = width;
        gl.canvas.height = height - menubarHeight - panelHeight;
        this.overlay.width = gl.canvas.width;
        this.overlay.height = gl.canvas.height;
    };
    ViewerApp.prototype.loadModel = function (query) {
        var _this = this;
        // if nothing was specified, load an interesting model
        if (!query) {
            var num = Math.round(0.5 + 16 * Math.random());
            query = 'Pose_0' + num + '.blob';
        }
        var lc = query.toLowerCase();
        if (lc.endsWith('.obj') || lc.endsWith('.blob')) {
            var statusFunc = function (status) {
                _this.overlay.clear();
                _this.overlay.fillText(status);
            };
            this.loader.loadModelFile(query, statusFunc)
                .then(function (tObj) {
                _this.perspectivePanel.visible = false;
                _this.valuePlanesPanel.visible = false;
                _this.renderer.setModel(tObj);
                _this.perspectivePanel.setModel(tObj);
                _this.loader.orient(_this.renderer.obj);
                if (query.startsWith('Head') || query.startsWith('Teapot') || query.startsWith('Male_02')) {
                    _this.renderer.options.useCulling = false;
                }
                _this.animate = false;
                _this.dirty = true;
                _this.pointerMode = PointerMode.View;
                if (!_this.animationFrame) {
                    _this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
                }
                /*
                let box = BoundingBox.infinite;
                box.max.x = 62.1;
                this.trim(tObj, box);
 
                this.loader.loadModelFile('SubTool3.blob', statusFunc).then((tObj2) => {
                   tObj.combine(tObj2);
                   return tObj;
                }).then(() => {
                   this.renderer.setModel(tObj);
 
                   this.dirty = true;
                   requestAnimationFrame(() => this.tick());
                });
                */
            });
        }
        else if (lc === 'sphere') {
            var tObj = new _TriangleObjBuilder__WEBPACK_IMPORTED_MODULE_16__["TriangleObjBuilder"]();
            tObj.addSphere(100, 1, new _Vec__WEBPACK_IMPORTED_MODULE_2__["Vec3"]([0, 0, 0]));
            tObj.optimize(_TriangleObj__WEBPACK_IMPORTED_MODULE_3__["NormalType"].Smooth);
            this.renderer.setModel(tObj);
            this.perspectivePanel.setModel(tObj);
            this.animate = false;
            this.dirty = true;
            this.pointerMode = PointerMode.View;
            if (!this.animationFrame) {
                this.animationFrame = requestAnimationFrame(function () { return _this.tick(); });
            }
        }
        else {
            // TODO multi line error messages not supported
            this.overlay.clear();
            this.overlay.fillText('Unknown Model:' + query);
        }
    };
    ViewerApp.prototype.toggleMode = function () {
        switch (this.pointerMode) {
            case PointerMode.View:
                this.pointerMode = PointerMode.Light;
                this.renderer.ballColor = this.renderer.yellow;
                break;
            case PointerMode.Light:
                this.pointerMode = PointerMode.View;
                this.renderer.ballColor = _glColor__WEBPACK_IMPORTED_MODULE_8__["glColor3"].modelWhite;
                break;
        }
        this.dirty = true;
    };
    ViewerApp.prototype.rotateLight = function (xRad, yRad) {
        this.renderer.rotateLight(xRad, yRad);
        this.dirty = true;
    };
    ViewerApp.prototype.rotateObjects = function (xRad, yRad) {
        // get the light vector with model transformation undone
        var vec = _Vec__WEBPACK_IMPORTED_MODULE_2__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
        vec = this.renderer.obj.model.inverse().multV(vec);
        if (this.renderer.lockFloor) {
            // rotate in all directions if we're just rotating the object in space
            this.renderer.rotX(yRad);
            this.renderer.rotY(xRad);
            if (this.rotateLightWithObject) {
                // apply the changes to the light
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.options.lightPos = vec.xyz;
            }
        }
        else {
            // if the floor moves with the object, then up-down movement tilts the
            // whole scene while left-right movement only spins the model
            this.renderer.rotX(yRad);
            if (this.rotateLightWithObject) {
                this.renderer.preRotY(xRad);
                vec = this.renderer.obj.model.multV(vec);
            }
            else {
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.preRotY(xRad);
            }
            // apply the changes to the light
            this.renderer.options.lightPos = vec.xyz;
        }
    };
    ViewerApp.prototype.onDrag = function (pos, delta) {
        this.dirty = true;
        if (this.pointerMode === PointerMode.View) {
            this.rotateObjects(-delta.x * 0.01, -delta.y * 0.01);
        }
        else if (this.pointerMode === PointerMode.Light) {
            this.rotateLight(-delta.x * 0.01, -delta.y * 0.01);
        }
    };
    /**
     * Processes a click/touch event at the designated coordinates.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @returns true if a hit on one of the views occurs.
     */
    ViewerApp.prototype.onClick = function (pos) {
        var canvasWidth = this.gl.canvas.width;
        var canvasHeight = this.gl.canvas.height;
        var clipSpace = this.renderer.options.camera.getClipSpace(this.gl);
        var miniWidth = this.renderer.miniSize * (2 / clipSpace.width) * canvasWidth;
        var miniHeight = this.renderer.miniSize * (2 / clipSpace.height) * canvasHeight;
        if (pos.x < miniWidth && pos.y < miniHeight) {
            this.toggleMode();
            return true;
        }
        // not handled
        return false;
    };
    ViewerApp.prototype.onScale = function (scale, change) {
        this.renderer.options.camera.zoom(change);
        this.dirty = true;
    };
    ViewerApp.prototype.onRotate = function (angle, delta) {
        // get the light vector with model transformation undone
        var vec = _Vec__WEBPACK_IMPORTED_MODULE_2__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
        vec = this.renderer.obj.model.inverse().multV(vec);
        this.renderer.rotZ(delta);
        // apply the updated transform 
        if (this.rotateLightWithObject) {
            vec = this.renderer.obj.model.multV(vec);
            this.renderer.options.lightPos = vec.xyz;
        }
        this.dirty = true;
    };
    ViewerApp.prototype.onTranslate = function (delta) {
        // TODO how can this scaling be detected from javascript?
        var factor = 1;
        if (_Globals__WEBPACK_IMPORTED_MODULE_0__["isMobile"]) {
            factor = 2;
        }
        var clipSpace = this.renderer.options.camera.getClipSpace(this.gl);
        this.renderer.options.camera.translate(new _Vec__WEBPACK_IMPORTED_MODULE_2__["Vec2"]([
            factor * clipSpace.width * delta.x / this.gl.canvas.width,
            factor * clipSpace.height * delta.y / this.gl.canvas.height
        ]));
        this.dirty = true;
    };
    ViewerApp.prototype.tick = function () {
        var _this = this;
        this.fps.tick();
        if (this.dirty) {
            this.renderer.render();
            if (this.perspectivePanel.visible) {
                // synchronize the rotation matrices
                this.perspectivePanel.render(this.renderer.obj.model.clone());
            }
            this.dirty = false;
        }
        if (this.animate) {
            if (this.loader.loading === false) {
                this.overlay.clear();
                this.overlay.fillText(this.fps.rate.toFixed() + ' fps ' + this.fps.ms.toFixed(1) + ' ms', _OverlayCanvas__WEBPACK_IMPORTED_MODULE_10__["TextLocation"].BottomLeft);
            }
            // get the light vector with model transformation undone
            var vec = _Vec__WEBPACK_IMPORTED_MODULE_2__["Vec4"].fromVec3(this.renderer.options.lightPos, 1);
            vec = this.renderer.obj.model.inverse().multV(vec);
            // animate
            this.renderer.preRotY(Object(_Globals__WEBPACK_IMPORTED_MODULE_0__["toRad"])(-1));
            // apply the updated transform 
            if (this.rotateLightWithObject) {
                vec = this.renderer.obj.model.multV(vec);
                this.renderer.options.lightPos = vec.xyz;
            }
            this.dirty = true;
        }
        requestAnimationFrame(function () { return _this.tick(); });
    };
    ViewerApp.prototype.save = function () {
        var tObj = this.renderer.tObj;
        var name = tObj.name.split('.')[0] + '.blob';
        tObj.name = name;
        Object(file_saver__WEBPACK_IMPORTED_MODULE_5__["saveAs"])(tObj.toBlob(), name);
    };
    return ViewerApp;
}());



/***/ }),

/***/ "./src/Volume.ts":
/*!***********************!*\
  !*** ./src/Volume.ts ***!
  \***********************/
/*! exports provided: Volume */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Volume", function() { return Volume; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");

var MAX = 1000; // INFINITY in our rendering world
/**
 * Class that manages a set of triangles within a given space
 */
var Volume = /** @class */ (function () {
    function Volume() {
        /**
         * The triangles enclosed within the bounding box
         */
        this.triangles = [];
        /**
         * Bounding box minimum
         */
        this.boxMin = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([MAX, MAX, MAX]);
        /**
         * Bounding box maximum
         */
        this.boxMax = new _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]([-MAX, -MAX, -MAX]);
    }
    /**
     * Stores a triangle and updates the bounding box
     *
     * @param triangle The triangle to store
     */
    Volume.prototype.push = function (triangle) {
        this.triangles.push(triangle);
        this.boxMin.x = Math.min(this.boxMin.x, triangle.minX);
        this.boxMin.y = Math.min(this.boxMin.y, triangle.minY);
        this.boxMin.z = Math.min(this.boxMin.z, triangle.minZ);
        this.boxMax.x = Math.max(this.boxMax.x, triangle.maxX);
        this.boxMax.y = Math.max(this.boxMax.y, triangle.maxY);
        this.boxMax.z = Math.max(this.boxMax.z, triangle.maxZ);
    };
    return Volume;
}());



/***/ }),

/***/ "./src/glAttributeBuffer.ts":
/*!**********************************!*\
  !*** ./src/glAttributeBuffer.ts ***!
  \**********************************/
/*! exports provided: glAttributeBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glAttributeBuffer", function() { return glAttributeBuffer; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");

/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glAttributeBuffer = /** @class */ (function () {
    function glAttributeBuffer(glCtx, program, attributeName) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.buffer = gl.createBuffer();
        this.attributeLocation = gl.getAttribLocation(program, attributeName);
    }
    glAttributeBuffer.prototype.delete = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
        this.attributeLocation = undefined;
    };
    glAttributeBuffer.prototype.upload = function (values) {
        var gl = this.gl;
        this.bind();
        if (values instanceof Float32Array) {
            gl.bufferData(gl.ARRAY_BUFFER, values, gl.STATIC_DRAW);
        }
        else {
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(values), gl.STATIC_DRAW);
        }
    };
    glAttributeBuffer.prototype.bind = function (size) {
        if (size === void 0) { size = 3; }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.enableVertexAttribArray(this.attributeLocation);
        gl.vertexAttribPointer(this.attributeLocation, size, // size
        gl.FLOAT, // type
        false, // normalized
        0, // stride
        0 // offset
        );
    };
    return glAttributeBuffer;
}());



/***/ }),

/***/ "./src/glBuffer.ts":
/*!*************************!*\
  !*** ./src/glBuffer.ts ***!
  \*************************/
/*! exports provided: glBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glBuffer", function() { return glBuffer; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");

/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glBuffer = /** @class */ (function () {
    function glBuffer(glCtx, program, attributeName) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.buffer = gl.createBuffer();
        this.attributeLocation = gl.getAttribLocation(program, attributeName);
    }
    glBuffer.prototype.delete = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
        this.attributeLocation = undefined;
    };
    glBuffer.prototype.upload = function (vertices) {
        var gl = this.gl;
        this.bind();
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    };
    glBuffer.prototype.bind = function (size) {
        if (size === void 0) { size = 3; }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
        gl.enableVertexAttribArray(this.attributeLocation);
        gl.vertexAttribPointer(this.attributeLocation, size, // size - 2,3 or 4 values per vertex
        gl.FLOAT, // type
        false, // normalized
        0, // stride
        0 // offset
        );
    };
    return glBuffer;
}());



/***/ }),

/***/ "./src/glColor.ts":
/*!************************!*\
  !*** ./src/glColor.ts ***!
  \************************/
/*! exports provided: glColor3, glColor4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColor3", function() { return glColor3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColor4", function() { return glColor4; });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ "./src/Color.ts");
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Color class that requires RGB values to be between 0 and 1
 */
var glColor3 = /** @class */ (function (_super) {
    __extends(glColor3, _super);
    /**
     * @param color An RGB color array
     */
    function glColor3(color) {
        var _this = this;
        if (color.length != 3) {
            throw new Error("Invalid color array length (expected 3 elements)");
        }
        if (color[0] < 0 || color[0] > 1) {
            throw new Error("Invalid color 'r' value (expected [0-1])");
        }
        if (color[1] < 0 || color[1] > 1) {
            throw new Error("Invalid color 'g' value (expected [0-1])");
        }
        if (color[2] < 0 || color[2] > 1) {
            throw new Error("Invalid color 'b' value (expected [0-1])");
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    /**
     * Creates an glColor object using values in a Color object.
     *
     * @param color A generic Color object.
     */
    glColor3.fromColor = function (color) {
        var r = Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])(color.r, 0, 1);
        var g = Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])(color.g, 0, 1);
        var b = Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["clamp"])(color.b, 0, 1);
        return new glColor3([r, g, b]);
    };
    /**
     * Returns the lighter of two colors
     *
     * @param c1 The first color.
     * @param c2 The second color.
     * @returns The lightest color.
     */
    glColor3.lightest = function (c1, c2) {
        // TODO: use luminosity instead?
        if (c1.r + c1.g + c1.b > c2.r + c2.g + c2.b) {
            return c1;
        }
        else {
            return c2;
        }
    };
    /**
     * Returns the darker of two colors
     *
     * @param c1 The first color.
     * @param c2 The second color.
     * @returns The darkest color.
     */
    glColor3.darkest = function (c1, c2) {
        // TODO: use luminosity instead?
        if (c1.r + c1.g + c1.b < c2.r + c2.g + c2.b) {
            return c1;
        }
        else {
            return c2;
        }
    };
    /**
     * Converts this object to an html color object (0-255 based).
     *
     * @returns An htmlColor object.
     */
    glColor3.prototype.toHtmlColor = function () {
        var r = Math.round(255 * this.r);
        var g = Math.round(255 * this.g);
        var b = Math.round(255 * this.b);
        return new _htmlColor__WEBPACK_IMPORTED_MODULE_1__["htmlColor"]([r, g, b]);
    };
    glColor3.modelWhite = new glColor3([255 / 255, 250 / 255, 242 / 255]);
    glColor3.modelBlack = new glColor3([0, 0, 0]);
    return glColor3;
}(_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));

/**
 * Color class that requires RGBA values to be between 0 and 1
 */
var glColor4 = /** @class */ (function (_super) {
    __extends(glColor4, _super);
    /**
     * @param color An RGB color array
     */
    function glColor4(color) {
        var _this = this;
        if (color.length != 4) {
            throw new Error("Invalid color array length (expected 4 elements)");
        }
        if (color[0] < 0 || color[0] > 1) {
            throw new Error("Invalid color 'r' value (expected [0-1])");
        }
        if (color[1] < 0 || color[1] > 1) {
            throw new Error("Invalid color 'g' value (expected [0-1])");
        }
        if (color[2] < 0 || color[2] > 1) {
            throw new Error("Invalid color 'b' value (expected [0-1])");
        }
        if (color[3] < 0 || color[3] > 1) {
            throw new Error("Invalid color 'a' value (expected [0-1])");
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    return glColor4;
}(_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));



/***/ }),

/***/ "./src/glColorWithTemperature.ts":
/*!***************************************!*\
  !*** ./src/glColorWithTemperature.ts ***!
  \***************************************/
/*! exports provided: glColorWithTemperature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glColorWithTemperature", function() { return glColorWithTemperature; });
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Class that adds temperature to a Color object
 */
var glColorWithTemperature = /** @class */ (function (_super) {
    __extends(glColorWithTemperature, _super);
    /**
     * @param color An RGB color array
     * @param temperature Temperature in Kelvin
     */
    function glColorWithTemperature(color, temperature) {
        var _this = _super.call(this, color) || this;
        _this._temperature = temperature;
        return _this;
    }
    Object.defineProperty(glColorWithTemperature.prototype, "temperature", {
        /**
         * Gets the temperature in Kelvin
         */
        get: function () {
            return this._temperature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "daylight", {
        get: function () {
            return this.create(6000);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "minTemperature", {
        /**
         * Gets the minimum supported temperature.
         *
         * @returns temperature value in Kelvin.
         */
        get: function () {
            return this.colors[0].temperature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glColorWithTemperature, "maxTemperature", {
        /**
         * Gets the maximum supported temperature.
         *
         * @returns temperature value in Kelvin.
         */
        get: function () {
            return this.colors[this.colors.length - 1].temperature;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets a Color matching the specified temperature.
     *
     * @returns temperature value in Kelvin.
     */
    glColorWithTemperature.create = function (temperature) {
        if (temperature <= this.minTemperature) {
            return this.colors[0];
        }
        else if (temperature >= this.maxTemperature) {
            return this.colors[this.colors.length - 1];
        }
        else {
            for (var i = 0; i < this.colors.length - 1; i++) {
                var color1 = this.colors[i];
                var color2 = this.colors[i + 1];
                if (temperature >= color1.temperature && temperature <= color2.temperature) {
                    var ratio = (temperature - color1.temperature) / (color2.temperature - color1.temperature);
                    var r = color1.r + ratio * (color2.r - color1.r);
                    var g = color1.g + ratio * (color2.g - color1.g);
                    var b = color1.b + ratio * (color2.b - color1.b);
                    return new glColorWithTemperature([r, g, b], temperature);
                }
            }
            // shouldn't get here, but if we do, return the last color
            return this.colors[this.colors.length - 1];
        }
    };
    /**
     * Known color values. For other requests the class will return interpolated values
     */
    glColorWithTemperature.colors = [
        new glColorWithTemperature([255 / 255, 147 / 255, 41 / 255], 1900),
        new glColorWithTemperature([255 / 255, 197 / 255, 143 / 255], 2600),
        new glColorWithTemperature([255 / 255, 214 / 255, 170 / 255], 2850),
        new glColorWithTemperature([255 / 255, 241 / 255, 224 / 255], 3200),
        new glColorWithTemperature([255 / 255, 250 / 255, 244 / 255], 5200),
        new glColorWithTemperature([255 / 255, 255 / 255, 251 / 255], 5400),
        new glColorWithTemperature([255 / 255, 255 / 255, 255 / 255], 6000),
        new glColorWithTemperature([201 / 255, 226 / 255, 255 / 255], 7000),
        new glColorWithTemperature([64 / 255, 156 / 255, 255 / 255], 20000),
    ];
    return glColorWithTemperature;
}(_glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]));



/***/ }),

/***/ "./src/glFrameBuffer.ts":
/*!******************************!*\
  !*** ./src/glFrameBuffer.ts ***!
  \******************************/
/*! exports provided: glFrameBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glFrameBuffer", function() { return glFrameBuffer; });
/* harmony import */ var _glTexture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glTexture */ "./src/glTexture.ts");

/**
 * Lightweight WebGL wrapper for a framebuffer
 */
var glFrameBuffer = /** @class */ (function () {
    /**
     * Create a frame buffer
     *
     * @param glCtx The WebGL context
     * @param width The width (in pixels) of the rendering (must be power of 2)
     * @param height The height (in pixels) of the rendering (must be power of 2)
     */
    function glFrameBuffer(glCtx, width, height) {
        this.gl = null;
        this.gl = glCtx;
        this.width = width;
        this.height = height;
        var gl = this.gl;
        this.frameBuffer = gl.createFramebuffer();
    }
    Object.defineProperty(glFrameBuffer.prototype, "size", {
        /**
         * Gets the larger of the width or height
         */
        get: function () {
            return Math.max(this.width, this.height);
        },
        enumerable: false,
        configurable: true
    });
    glFrameBuffer.prototype.delete = function () {
        var gl = this.gl;
        if (this.frameBuffer) {
            gl.deleteFramebuffer(this.frameBuffer);
            this.frameBuffer = null;
        }
    };
    glFrameBuffer.prototype.get = function () {
        return this.frameBuffer;
    };
    glFrameBuffer.prototype.bind = function () {
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
    };
    glFrameBuffer.prototype.createTexture = function (style) {
        return new _glTexture__WEBPACK_IMPORTED_MODULE_0__["glTexture"](this.gl, this.width, this.height, style);
    };
    glFrameBuffer.prototype.attachTexture = function (attachment, texture) {
        if (texture instanceof _glTexture__WEBPACK_IMPORTED_MODULE_0__["glTexture"]) {
            texture = texture.get();
        }
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);
    };
    glFrameBuffer.prototype.check = function () {
        var gl = this.gl;
        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status !== gl.FRAMEBUFFER_COMPLETE) {
            var msg = "The created frame buffer is invalid: " + status.toString();
            alert(msg);
            console.log(msg);
        }
    };
    return glFrameBuffer;
}());



/***/ }),

/***/ "./src/glIndexBuffer.ts":
/*!******************************!*\
  !*** ./src/glIndexBuffer.ts ***!
  \******************************/
/*! exports provided: glIndexBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glIndexBuffer", function() { return glIndexBuffer; });
/**
 * Wrapper for a WebGl Buffer and Attribute
 */
var glIndexBuffer = /** @class */ (function () {
    function glIndexBuffer(glCtx) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        this.buffer = gl.createBuffer();
    }
    glIndexBuffer.prototype.delete = function () {
        this.gl.deleteBuffer(this.buffer);
        this.buffer = undefined;
    };
    glIndexBuffer.prototype.upload = function (values) {
        var gl = this.gl;
        this.bind();
        if (values instanceof Int32Array) {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, values, gl.STATIC_DRAW);
        }
        else {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int32Array(values), gl.STATIC_DRAW);
        }
    };
    glIndexBuffer.prototype.bind = function () {
        var gl = this.gl;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
    };
    return glIndexBuffer;
}());



/***/ }),

/***/ "./src/glObject.ts":
/*!*************************!*\
  !*** ./src/glObject.ts ***!
  \*************************/
/*! exports provided: glObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glObject", function() { return glObject; });
/* harmony import */ var _glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glAttributeBuffer */ "./src/glAttributeBuffer.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _glUniform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glUniform */ "./src/glUniform.ts");
/* harmony import */ var _glIndexBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glIndexBuffer */ "./src/glIndexBuffer.ts");
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");





var glObject = /** @class */ (function () {
    function glObject(glCtx, tObj, program) {
        this.gl = null;
        // this matrix normals the object so that all object are centered
        // about the origin with diagonal length of 2 units
        this.normalize = _Mat__WEBPACK_IMPORTED_MODULE_4__["Mat4"].identity;
        // this is the standard "model" matrix
        this.model = _Mat__WEBPACK_IMPORTED_MODULE_4__["Mat4"].identity;
        this.gl = glCtx;
        var gl = this.gl;
        var ext = gl.getExtension('OES_element_index_uint');
        this.tObj = tObj;
        this.program = program;
        this.createBuffers();
        this.uploadTriangles();
    }
    Object.defineProperty(glObject.prototype, "name", {
        get: function () {
            return this.tObj.name;
        },
        enumerable: false,
        configurable: true
    });
    /*
    public getBoundingPts(): BoundingPts {
       //return this.tObj.getBoundingPts();
       let pts = this.tObj.getBoundingPts();
       let p = new Profiler();
       //let bp = pts.multM(this.normalize.multM(this.model));
       //let bp = pts.multM(this.model.multM(this.normalize));
       let bp = pts.multM(this.normalize).multM(this.model);
       //p.log('mult');
       return bp;
    }
    */
    glObject.prototype.getBoundingBox = function () {
        return this.tObj.box.multM(this.normalize);
    };
    glObject.prototype.autoSize = function (center, size) {
        var objCenter = this.tObj.center;
        this.normalize = _Mat__WEBPACK_IMPORTED_MODULE_4__["Mat4"].identity;
        this.normalize.translate(new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec3"]([center.x - objCenter.x, center.y - objCenter.y, center.z - objCenter.z]));
        this.normalize.scale(size / this.tObj.diagonal);
    };
    glObject.prototype.createBuffers = function () {
        var gl = this.gl;
        // create buffers (and associated attributes)
        this.vertexBuffer = new _glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__["glAttributeBuffer"](gl, this.program, 'aVertex');
        this.normalBuffer = new _glAttributeBuffer__WEBPACK_IMPORTED_MODULE_0__["glAttributeBuffer"](gl, this.program, 'aNormal');
        this.indexBuffer = new _glIndexBuffer__WEBPACK_IMPORTED_MODULE_3__["glIndexBuffer"](gl);
    };
    glObject.prototype.delete = function () {
        this.vertexBuffer.delete();
        this.normalBuffer.delete();
        this.indexBuffer.delete();
    };
    glObject.prototype.rebuildBuffers = function () {
        this.delete();
        this.createBuffers();
        this.uploadTriangles();
    };
    glObject.prototype.rotX = function (angle) {
        this.model.rotX(angle);
    };
    glObject.prototype.rotY = function (angle) {
        this.model.rotY(angle);
    };
    glObject.prototype.rotZ = function (angle) {
        this.model.rotZ(angle);
    };
    glObject.prototype.preRotX = function (angle) {
        this.model.preRotX(angle);
    };
    glObject.prototype.preRotY = function (angle) {
        this.model.preRotY(angle);
    };
    glObject.prototype.preRotZ = function (angle) {
        this.model.preRotZ(angle);
    };
    glObject.prototype.scale = function (scale) {
        this.model.scale(scale);
    };
    glObject.prototype.translate = function (offset) {
        this.model.translate(offset);
    };
    glObject.prototype.clearTransforms = function () {
        this.model = _Mat__WEBPACK_IMPORTED_MODULE_4__["Mat4"].identity;
    };
    glObject.prototype.uploadTriangles = function () {
        this.vertexBuffer.upload(this.tObj.vertices);
        this.normalBuffer.upload(this.tObj.normals);
        this.indexBuffer.upload(this.tObj.indices);
    };
    glObject.prototype.draw = function () {
        var gl = this.gl;
        var uni = new _glUniform__WEBPACK_IMPORTED_MODULE_2__["glUniform"](gl, this.program);
        uni.set('model', this.model.multM(this.normalize));
        this.vertexBuffer.bind();
        this.indexBuffer.bind();
        this.normalBuffer.bind();
        gl.drawElements(gl.TRIANGLES, 3 * this.tObj.numTriangles, gl.UNSIGNED_INT, 0);
    };
    glObject.prototype.optimize = function (normalType) {
        this.tObj.optimize(normalType);
        this.rebuildBuffers();
    };
    glObject.prototype.applyToVecs = function (normals) {
        var vecs = normals ? this.tObj.normals : this.tObj.vertices;
        // if we're updating normals, ignore translation by setting w=0
        var vec = new _Vec__WEBPACK_IMPORTED_MODULE_1__["Vec4"]([0, 0, 0, normals ? 0 : 1]);
        var xForm = this.model.multM(this.normalize);
        for (var i = 0; i < vecs.length / 3; i++) {
            vec.x = vecs[3 * i + 0];
            vec.y = vecs[3 * i + 1];
            vec.z = vecs[3 * i + 2];
            vec = xForm.multV(vec);
            if (normals) {
                vec = vec.normalize();
            }
            vecs[3 * i + 0] = vec.x;
            vecs[3 * i + 1] = vec.y;
            vecs[3 * i + 2] = vec.z;
        }
    };
    glObject.prototype.applyXForm = function () {
        this.applyToVecs(false);
        this.applyToVecs(true);
        this.normalize = _Mat__WEBPACK_IMPORTED_MODULE_4__["Mat4"].identity;
        this.model = _Mat__WEBPACK_IMPORTED_MODULE_4__["Mat4"].identity;
        this.tObj.findBounds();
        this.rebuildBuffers();
    };
    return glObject;
}());



/***/ }),

/***/ "./src/glProgram.ts":
/*!**************************!*\
  !*** ./src/glProgram.ts ***!
  \**************************/
/*! exports provided: glProgram */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glProgram", function() { return glProgram; });
/**
 * Utility wrapper for compiling WebGL shader programs
 */
var glProgram = /** @class */ (function () {
    /**
     * Compiles and links vertex and fragment shaders into a program
     *
     * @param gl The WebGL context
     * @param vertexSource Vertex shader source
     * @param fragmentSource Fragment shader source
     * @returns the program id
     * @throws if the compilation fails
     */
    function glProgram(gl, vertexSource, fragmentSource) {
        this.gl = gl;
        this.compile(vertexSource, fragmentSource);
    }
    /**
     * Gets the underlying WebGLProgram
     *
     * @return the WebGLProgram
     */
    glProgram.prototype.get = function () {
        return this.program;
    };
    /**
     * Calls useProgram() for this program
     */
    glProgram.prototype.use = function () {
        var gl = this.gl;
        gl.useProgram(this.program);
    };
    /**
     * Compiles a shader program
     *
     * @param gl The WebGL context
     * @param source The source code
     * @param type The shader type
     * @throws if the compilation fails
     */
    glProgram.prototype.compileShader = function (source, type) {
        var gl = this.gl;
        var shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.log(source);
            var err = gl.getShaderInfoLog(shader);
            console.error(err);
            throw 'compile error: ' + err;
        }
        return shader;
    };
    glProgram.prototype.delete = function () {
        var gl = this.gl;
        gl.deleteProgram(this.program);
        this.program = null;
    };
    /**
     * Compiles and links vertex and fragment shaders into a program
     *
     * @param vertexSource Vertex shader source
     * @param fragmentSource Fragment shader source
     * @returns the program id
     * @throws if the compilation fails
     */
    glProgram.prototype.compile = function (vertexSource, fragmentSource) {
        var gl = this.gl;
        this.program = gl.createProgram();
        gl.attachShader(this.program, this.compileShader(vertexSource, gl.VERTEX_SHADER));
        gl.attachShader(this.program, this.compileShader(fragmentSource, gl.FRAGMENT_SHADER));
        gl.linkProgram(this.program);
        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
            var err = gl.getProgramInfoLog(this.program);
            console.error(err);
            throw 'link error: ' + err;
        }
    };
    return glProgram;
}());



/***/ }),

/***/ "./src/glSpace.ts":
/*!************************!*\
  !*** ./src/glSpace.ts ***!
  \************************/
/*! exports provided: glSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glSpace", function() { return glSpace; });
/**
 * Utility for holding a clip space. Can be used to hold the viewing space
 * or clip space.
 */
var glSpace = /** @class */ (function () {
    function glSpace(min, max) {
        this.min = min;
        this.max = max;
    }
    Object.defineProperty(glSpace.prototype, "left", {
        get: function () {
            return this.min.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "right", {
        get: function () {
            return this.max.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "top", {
        get: function () {
            return this.max.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "bottom", {
        get: function () {
            return this.min.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "near", {
        get: function () {
            return this.min.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "far", {
        get: function () {
            return this.max.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "width", {
        get: function () {
            return Math.abs(this.max.x - this.min.x);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "height", {
        get: function () {
            return Math.abs(this.max.y - this.min.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glSpace.prototype, "depth", {
        get: function () {
            return Math.abs(this.max.z - this.min.z);
        },
        enumerable: false,
        configurable: true
    });
    return glSpace;
}());



/***/ }),

/***/ "./src/glTexture.ts":
/*!**************************!*\
  !*** ./src/glTexture.ts ***!
  \**************************/
/*! exports provided: glTextureStyle, glTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glTextureStyle", function() { return glTextureStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glTexture", function() { return glTexture; });
var glTextureStyle;
(function (glTextureStyle) {
    glTextureStyle[glTextureStyle["Color"] = 0] = "Color";
    glTextureStyle[glTextureStyle["Depth"] = 1] = "Depth";
    glTextureStyle[glTextureStyle["Float"] = 2] = "Float";
})(glTextureStyle || (glTextureStyle = {}));
/**
 * Lightweight WebGL wrapper for a texture
 */
var glTexture = /** @class */ (function () {
    /**
     * Create a frame buffer for rendering into texture objects.
     *
     * @param glCtx The WebGL context
     * @param width The width (in pixels) of the rendering (must be power of 2)
     * @param height The height (in pixels) of the rendering (must be power of 2)
     */
    function glTexture(glCtx, width, height, style) {
        this.gl = null;
        this.gl = glCtx;
        this.width = width;
        this.height = height;
        switch (style) {
            case glTextureStyle.Color:
                this.createColor(width, height);
                break;
            case glTextureStyle.Depth:
                this.createDepth(width, height);
                break;
            case glTextureStyle.Float:
                this.createFloat(width, height);
                break;
        }
    }
    glTexture.prototype.delete = function () {
        var gl = this.gl;
        if (this.texture) {
            gl.deleteTexture(this.texture);
            this.texture = null;
        }
    };
    glTexture.prototype.createColor = function (width, height) {
        var gl = this.gl;
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        gl.RGBA, // internal format
        width, // width
        height, // height
        0, // border
        gl.RGBA, // format
        gl.UNSIGNED_BYTE, // type
        null // pixels
        );
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    glTexture.prototype.createDepth = function (width, height) {
        var gl = this.gl;
        var depth_texture_extension = gl.getExtension('WEBGL_depth_texture');
        if (!depth_texture_extension) {
            alert('This WebGL program requires the use of the WEBGL_depth_texture extension.');
            return;
        }
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        gl.DEPTH_COMPONENT, // internal format
        width, // width
        height, // height
        0, // border
        gl.DEPTH_COMPONENT, // format
        gl.UNSIGNED_INT, // type
        null // pixels
        );
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    glTexture.prototype.createFloat = function (width, height) {
        var gl = this.gl;
        var internalFormat;
        var format;
        var type;
        // create textures
        if (gl instanceof WebGLRenderingContext) {
            var ext = gl.getExtension('OES_texture_half_float');
            if (ext) {
                // Thanks Apple. Always got to do things a little differently
                internalFormat = gl.RGBA;
                format = gl.RGBA;
                type = ext.HALF_FLOAT_OES;
            }
            else {
                // No floating point textures? really fall back to unsigned bytes
                internalFormat = gl.RGBA;
                format = gl.RGBA;
                type = gl.UNSIGNED_BYTE;
            }
        }
        // Typescript doesn't let you do an 'else if' here and when WebGL2 is
        // not supported, we get an exception, so thus the try-catch
        // see: https://stackoverflow.com/questions/45381122/typescript-type-narrowed-to-never-with-instanceof-in-an-if-else-statement
        try {
            if (gl instanceof WebGL2RenderingContext) {
                gl.getExtension('EXT_color_buffer_float');
                internalFormat = gl.RGBA32F;
                format = gl.RGBA;
                type = gl.FLOAT;
            }
        }
        catch (error) {
        }
        // create two textures. One we display and one we draw to
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // level
        internalFormat, // internal format
        width, // width
        height, // height
        0, // border
        format, // format
        type, // type
        null // pixels
        );
        gl.bindTexture(gl.TEXTURE_2D, null);
    };
    glTexture.prototype.get = function () {
        return this.texture;
    };
    glTexture.prototype.bind = function () {
        var gl = this.gl;
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
    };
    return glTexture;
}());



/***/ }),

/***/ "./src/glUniform.ts":
/*!**************************!*\
  !*** ./src/glUniform.ts ***!
  \**************************/
/*! exports provided: glUniform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glUniform", function() { return glUniform; });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/Vec.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _Mat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mat */ "./src/Mat.ts");
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");




/**
 * Utility class for setting uniform values in a shader
 */
var glUniform = /** @class */ (function () {
    /**
     * Creates an object for setting values and calls gl.useProgram
     *
     * @param glCtx The WebGL context
     * @param program The program associated with the uniform values
     */
    function glUniform(glCtx, program) {
        this.gl = null;
        this.gl = glCtx;
        var gl = this.gl;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_3__["glProgram"]) {
            program = program.get();
        }
        this.program = program;
        gl.useProgram(program);
    }
    /**
     * Sets a uniform value
     *
     * @param name The variable name
     * @param value The value
     * @param int If true and the value is a number, it is treated as an integer
     */
    glUniform.prototype.set = function (name, value, int) {
        if (int === void 0) { int = false; }
        var gl = this.gl;
        var loc = gl.getUniformLocation(this.program, name);
        if (loc) {
            if (value instanceof _Vec__WEBPACK_IMPORTED_MODULE_0__["Vec3"]) {
                gl.uniform3fv(loc, new Float32Array(value.values));
            }
            else if (value instanceof _glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]) {
                gl.uniform3fv(loc, new Float32Array([value.r, value.g, value.b]));
            }
            else if (value instanceof _glColor__WEBPACK_IMPORTED_MODULE_1__["glColor4"]) {
                gl.uniform4fv(loc, new Float32Array([value.r, value.g, value.b, value.a]));
            }
            else if (value instanceof _Mat__WEBPACK_IMPORTED_MODULE_2__["Mat4"]) {
                gl.uniformMatrix4fv(loc, false, new Float32Array(value.transpose().values));
            }
            else if (value instanceof Boolean || typeof (value) === 'boolean') {
                gl.uniform1i(loc, value ? 1.0 : 0.0);
            }
            else if (name === "uMode") {
                gl.uniform1i(loc, value);
            }
            else {
                if (int) {
                    gl.uniform1i(loc, value);
                }
                else {
                    gl.uniform1f(loc, value);
                }
            }
        }
    };
    /**
     * Sets an integer uniform value (same as set(name, value, true))
     *
     * @param name The variable name
     * @param value The value
     */
    glUniform.prototype.seti = function (name, value) {
        this.set(name, value, true);
    };
    /**
     * Sets all values for variables stored as members of an object
     *
     * @param uniforms The object with member values
     */
    glUniform.prototype.setAll = function (uniforms) {
        for (var name in uniforms) {
            var value = uniforms[name];
            this.set(name, value);
        }
    };
    return glUniform;
}());



/***/ }),

/***/ "./src/glUniformBlock.ts":
/*!*******************************!*\
  !*** ./src/glUniformBlock.ts ***!
  \*******************************/
/*! exports provided: glUniformBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glUniformBlock", function() { return glUniformBlock; });
/* harmony import */ var _glProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glProgram */ "./src/glProgram.ts");

var glUniformBlock = /** @class */ (function () {
    function glUniformBlock(glCtx, program, blockName, blockBinding) {
        this.gl2 = null;
        this.gl2 = glCtx;
        var gl2 = this.gl2;
        if (program instanceof _glProgram__WEBPACK_IMPORTED_MODULE_0__["glProgram"]) {
            program = program.get();
        }
        this.blockLocation = gl2.getUniformBlockIndex(program, blockName);
        gl2.uniformBlockBinding(program, this.blockLocation, blockBinding);
        this.blockBuffer = gl2.createBuffer();
        gl2.bindBufferBase(gl2.UNIFORM_BUFFER, blockBinding, this.blockBuffer);
    }
    glUniformBlock.prototype.delete = function () {
        var gl2 = this.gl2;
        gl2.deleteBuffer(this.blockBuffer);
    };
    glUniformBlock.prototype.upload = function (data) {
        var gl2 = this.gl2;
        gl2.bindBuffer(gl2.UNIFORM_BUFFER, this.blockBuffer);
        gl2.bufferData(gl2.UNIFORM_BUFFER, data, gl2.STATIC_DRAW);
        gl2.bindBuffer(gl2.UNIFORM_BUFFER, null);
    };
    return glUniformBlock;
}());



/***/ }),

/***/ "./src/hsvColor.ts":
/*!*************************!*\
  !*** ./src/hsvColor.ts ***!
  \*************************/
/*! exports provided: hsvColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsvColor", function() { return hsvColor; });
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");

/**
 * Class for representing color values. Values are on a 0-1 scale.
 */
var hsvColor = /** @class */ (function () {
    /**
     * @param color HSV values to store in this object
     */
    function hsvColor(color) {
        this.h = color[0];
        this.s = color[1];
        this.v = color[2];
    }
    /**
     * Creates an hsvColor object from an htmlColor object.
     *
     * @param color The htmlColor object.
     * @returns The hsvColor object.
     */
    hsvColor.fromHtmlColor = function (color) {
        var r = color.r;
        var g = color.g;
        var b = color.b;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var d = max - min;
        var h;
        var s = (max === 0 ? 0 : d / max);
        var v = max / 255;
        switch (max) {
            case min:
                h = 0;
                break;
            case r:
                h = (g - b) + d * (g < b ? 6 : 0);
                h /= 6 * d;
                break;
            case g:
                h = (b - r) + d * 2;
                h /= 6 * d;
                break;
            case b:
                h = (r - g) + d * 4;
                h /= 6 * d;
                break;
        }
        return new hsvColor([h, s, v]);
    };
    /**
     * Creates an hsvColor object from a glColor object.
     *
     * @param color The glColor object.
     * @returns The hsvColor object.
     */
    hsvColor.fromGlColor = function (color) {
        return hsvColor.fromHtmlColor(color.toHtmlColor());
    };
    /**
     * Creates a glColor object from this object.
     *
     * @returns The glColor object.
     */
    hsvColor.prototype.toGlColor = function () {
        var r, g, b, i, f, p, q, t;
        i = Math.floor(this.h * 6);
        f = this.h * 6 - i;
        p = this.v * (1 - this.s);
        q = this.v * (1 - f * this.s);
        t = this.v * (1 - (1 - f) * this.s);
        switch (i % 6) {
            case 0:
                r = this.v, g = t, b = p;
                break;
            case 1:
                r = q, g = this.v, b = p;
                break;
            case 2:
                r = p, g = this.v, b = t;
                break;
            case 3:
                r = p, g = q, b = this.v;
                break;
            case 4:
                r = t, g = p, b = this.v;
                break;
            case 5:
                r = this.v, g = p, b = q;
                break;
        }
        return new _glColor__WEBPACK_IMPORTED_MODULE_0__["glColor3"]([r, g, b]);
    };
    /**
     * Creates an htmlColor object from this object.
     *
     * @returns The glColor object.
     */
    hsvColor.prototype.toHtmlColor = function () {
        return this.toGlColor().toHtmlColor();
    };
    return hsvColor;
}());



/***/ }),

/***/ "./src/htmlColor.ts":
/*!**************************!*\
  !*** ./src/htmlColor.ts ***!
  \**************************/
/*! exports provided: htmlColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlColor", function() { return htmlColor; });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ "./src/Color.ts");
/* harmony import */ var _glColor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glColor */ "./src/glColor.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Color class that requires RGB values to be between 0 and 255
 */
var htmlColor = /** @class */ (function (_super) {
    __extends(htmlColor, _super);
    /**
     * @param color An RGB color array
     */
    function htmlColor(color) {
        var _this = this;
        if (color.length != 3) {
            throw new Error("Invalid color array length (expected 3 elements)");
        }
        if (color[0] < 0 || color[0] > 255) {
            throw new Error("Invalid color 'r' value (expected [0-255])");
        }
        if (color[1] < 0 || color[1] > 255) {
            throw new Error("Invalid color 'g' value (expected [0-255])");
        }
        if (color[2] < 0 || color[2] > 255) {
            throw new Error("Invalid color 'b' value (expected [0-255])");
        }
        _this = _super.call(this, color) || this;
        return _this;
    }
    /**
     * Converts a value to a hex string
     *
     * @param c The numeric value
     * @returns The hex string
     */
    htmlColor.prototype.componentToHex = function (c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    };
    /**
     * Converts this object to a hex string (e.g. #0f0f0f).
     *
     * @returns A hex string.
     */
    htmlColor.prototype.toHex = function () {
        var rHex = this.componentToHex(this.r);
        var gHex = this.componentToHex(this.g);
        var bHex = this.componentToHex(this.b);
        return "#" + rHex + gHex + bHex;
    };
    /**
     * Converts this object to a css string (e.g. 'rgb(128,228,32)').
     *
     * @returns A css string.
     */
    htmlColor.prototype.toCss = function () {
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_2__["toCss"])(this.r, this.g, this.b);
    };
    /**
     * Converts a css style string (e.g. 'rgb(24,36,83)') to a color
     *
     * @param css The css string.
     * @returns The color.
     */
    htmlColor.fromCss = function (css) {
        var regex = /\d+/g;
        var vals = css.match(regex).slice(0, 3);
        return new htmlColor([parseInt(vals[0]), parseInt(vals[1]), parseInt(vals[2])]);
    };
    /**
     * Creates an htmlColor object from a hex string
     *
     * @param hex The hex string
     * @returns The htmlColor object
     */
    htmlColor.fromHex = function (hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (result) {
            var r = parseInt(result[1], 16);
            var g = parseInt(result[2], 16);
            var b = parseInt(result[3], 16);
            return new htmlColor([r, g, b]);
        }
        else {
            return null;
        }
    };
    /**
     * Creates an htmlColor object using values in a Color object.
     *
     * @param color A generic Color object.
     */
    htmlColor.fromColor = function (color) {
        var r = htmlColor.clamp(color.r);
        var g = htmlColor.clamp(color.g);
        var b = htmlColor.clamp(color.b);
        return new htmlColor([r, g, b]);
    };
    /**
     * Rounds a number to a whole number and clamps it between 0 and 255.
     *
     * @param val The value.
     * @returns The rounded & clamped value
     */
    htmlColor.clamp = function (val) {
        val = Math.round(val);
        if (val < 0) {
            return 0;
        }
        else if (val > 255) {
            return 255;
        }
        else {
            return val;
        }
    };
    /**
     * Converts this color to an equivalent gray-scale color
     *
     * @returns The gray-scale color.
     */
    htmlColor.prototype.toGray = function () {
        var rgb = Math.round((this.r + this.g + this.b) / 3);
        return new htmlColor([rgb, rgb, rgb]);
    };
    /**
     * Converts this object to a WebGL color object (0-1 based)
     *
     * @returns A glColor object.
     */
    htmlColor.prototype.toGlColor = function () {
        return new _glColor__WEBPACK_IMPORTED_MODULE_1__["glColor3"]([this.r / 255, this.g / 255, this.b / 255]);
    };
    htmlColor.white = new htmlColor([255, 255, 255]);
    htmlColor.black = new htmlColor([0, 0, 0]);
    htmlColor.red = new htmlColor([255, 0, 0]);
    htmlColor.green = new htmlColor([0, 255, 0]);
    htmlColor.blue = new htmlColor([0, 0, 255]);
    htmlColor.orange = new htmlColor([255, 165, 0]);
    return htmlColor;
}(_Color__WEBPACK_IMPORTED_MODULE_0__["Color"]));



/***/ }),

/***/ "./src/htmlColorWithAlpha.ts":
/*!***********************************!*\
  !*** ./src/htmlColorWithAlpha.ts ***!
  \***********************************/
/*! exports provided: htmlColorWithAlpha */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlColorWithAlpha", function() { return htmlColorWithAlpha; });
/* harmony import */ var _htmlColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmlColor */ "./src/htmlColor.ts");
/* harmony import */ var _Globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Globals */ "./src/Globals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * An html color with a transparency value
 */
var htmlColorWithAlpha = /** @class */ (function (_super) {
    __extends(htmlColorWithAlpha, _super);
    /**
     * @param color An RGBA color array
     */
    function htmlColorWithAlpha(color) {
        var _this = _super.call(this, [color[0], color[1], color[2]]) || this;
        /** The transparency (alpha) value */
        _this.a = 255;
        if (color.length != 4) {
            throw new Error("Invalid color array length (expected 4 elements)");
        }
        if (color[4] < 0 || color[4] > 255) {
            throw new Error("Invalid color 'a' value (expected [0-255])");
        }
        _this.a = color[3];
        return _this;
    }
    /**
     * Converts this object to a css string (e.g. 'rgb(128,228,32,255)').
     *
     * @returns A css string.
     */
    htmlColorWithAlpha.prototype.toCss = function () {
        return Object(_Globals__WEBPACK_IMPORTED_MODULE_1__["toCss"])(this.r, this.g, this.b, this.a);
    };
    htmlColorWithAlpha.transparent = new htmlColorWithAlpha([0, 0, 0, 0]);
    return htmlColorWithAlpha;
}(_htmlColor__WEBPACK_IMPORTED_MODULE_0__["htmlColor"]));



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/styles.css */ "./src/styles/styles.css");
/* harmony import */ var _styles_styles_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_styles_styles_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Launcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Launcher */ "./src/Launcher.ts");


window.onload = function () {
    document.title = 'Artist\'s Tools';
    var app = new _Launcher__WEBPACK_IMPORTED_MODULE_1__["Launcher"]();
};


/***/ }),

/***/ "./src/shaders/PathTracerToScreenFragment.glsl":
/*!*****************************************************!*\
  !*** ./src/shaders/PathTracerToScreenFragment.glsl ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\r\nvarying vec2 texCoord;\r\nuniform sampler2D uTexture;\r\nuniform int uMode;\r\nuniform float uMaxChroma;\r\n\r\nuniform vec3 uHighlightColor;\r\nuniform vec3 uLightLightColor;\r\nuniform vec3 uMidLightColor;\r\nuniform vec3 uDarkLightColor;\r\n\r\nuniform vec3 uShadowColor;\r\nuniform vec3 uReflectedLightColor;\r\nuniform vec3 uDarkAccentColor;\r\n\r\nuniform float uShadowAlpha;\r\nuniform float uLightAlpha;\r\n\r\n#define MODE_SCIENCE 0\r\n#define MODE_VALUE 1\r\n#define MODE_CHROMA 2\r\n#define MODE_BANDS 3\r\n\r\nvec4 white = vec4(1.0, 1.0, 1.0, 1.0);\r\nvec4 red = vec4(1.0, 0.0, 0.0, 1.0);\r\nvec4 orange = vec4(1.0, 0.65, 0.0, 1.0);\r\nvec4 yellow = vec4(1.0, 1.0, 0.0, 1.0);\r\nvec4 green = vec4(0.0, 1.0, 0.0, 1.0);\r\nvec4 cyan = vec4(0.0, 1.0, 1.0, 1.0);\r\nvec4 blue = vec4(0.0, 0.0, 1.0, 1.0);\r\nvec4 black = vec4(0.0, 0.0, 0.0, 1.0);\r\n#define NUM_COLORS 6\r\nvec4 colors[NUM_COLORS];\r\n\r\nvec4 value2Color(float value)\r\n{\r\n   float span = 1.0 / float(NUM_COLORS - 1);\r\n   value *= float(NUM_COLORS - 1);\r\n   if (value < 0.0)\r\n   {\r\n      return colors[0];\r\n   }\r\n   else if (value < 1.0)\r\n   {\r\n      return colors[0] + value * (colors[1] - colors[0]);\r\n   }\r\n   else if (value < 2.0)\r\n   {\r\n      return colors[1] + (value - 1.0) * (colors[2] - colors[1]);\r\n   }\r\n   else if (value < 3.0)\r\n   {\r\n      return colors[2] + (value - 2.0) * (colors[3] - colors[2]);\r\n   }\r\n   else if (value < 4.0)\r\n   {\r\n      return colors[3] + (value - 3.0) * (colors[4] - colors[3]);\r\n   }\r\n   else if (value < 5.0)\r\n   {\r\n      return colors[4] + (value - 4.0) * (colors[5] - colors[4]);\r\n   }\r\n   /*\r\n   else if (value < 6.0)\r\n   {\r\n      return colors[5] + (value - 5.0) * (colors[6] - colors[5]);\r\n   }\r\n   */\r\n   else\r\n   {\r\n      return colors[NUM_COLORS - 1];\r\n   }\r\n}\r\n\r\nfloat toGray(vec4 c)\r\n{\r\n   // lots of ways to convert RGB to gray scale.\r\n\r\n   // simple averaging method\r\n   // return (c.r + c.g + c.b) / 3.0;\r\n\r\n   // relative perceptual values\r\n   // return 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\r\n\r\n   // luminosity measure\r\n   float gamma = 2.2;\r\n   float y = 0.2126 * pow(c.r, gamma) + 0.7152 * pow(c.g, gamma) + .0722 * pow(c.b, gamma);\r\n   float l = 116.0 * pow(y, 1.0 / 3.0) - 16.0;\r\n   return l / 100.0;\r\n}\r\n\r\nvec4 renderAsValue()\r\n{\r\n   vec4 color = texture2D(uTexture, texCoord);\r\n   float rgb = toGray(color);\r\n   return vec4(rgb, rgb, rgb, 1.0);\r\n}\r\n\r\nvec4 renderAsChroma()\r\n{\r\n   vec4 color = texture2D(uTexture, texCoord);\r\n\r\n   // render the scale as a bar on the left\r\n   if (texCoord.x < 0.03)\r\n   {\r\n      return value2Color((texCoord.y - 0.1) / 0.9);\r\n   }\r\n   else\r\n   {\r\n      if (color.a >= uShadowAlpha)\r\n      {\r\n         float avg = (color.r + color.g + color.b) / 3.0;\r\n         float rgb = (abs(avg - color.r) + abs(avg - color.g) + abs(avg - color.b)) / (4.0 / 3.0);\r\n         return value2Color(rgb / uMaxChroma);\r\n      }\r\n      else\r\n      {\r\n         return vec4(0.0, 0.0, 0.0, 1.0);\r\n      }\r\n   }\r\n}\r\n\r\nfloat d2(vec3 c1, vec3 c2)\r\n{\r\n   // sum the squares of the differences\r\n   return pow(c1.r - c2.r, 2.0) + pow(c1.g - c2.g, 2.0) + pow(c1.b - c2.b, 2.0);\r\n}\r\n\r\nvec3 closest(vec3 color, vec3 light, vec3 mid, vec3 dark)\r\n{\r\n   float dlight = d2(color, light);\r\n   float dmid = d2(color, mid);\r\n   float ddark = d2(color, dark);\r\n\r\n   float dmin = min(dlight, min(dmid, ddark));\r\n   if (dmin == dlight)\r\n   {\r\n      return light;\r\n   }\r\n   else if (dmin == dmid)\r\n   {\r\n      return mid;\r\n   }\r\n   else\r\n   {\r\n      return dark;\r\n   }\r\n}\r\n\r\nvec4 renderAsBands()\r\n{\r\n   float size = 0.07;\r\n   float margin = (1.0 - 6.0 * size) / 2.0;\r\n   if (texCoord.x < size && texCoord.y > margin && texCoord.y < (1.0 - margin))\r\n   {\r\n      if (texCoord.y < (margin + 1.0 * size))\r\n      {\r\n         return vec4(uDarkAccentColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 2.0 * size))\r\n      {\r\n         return vec4(uShadowColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 3.0 * size))\r\n      {\r\n         return vec4(uDarkLightColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 4.0 * size))\r\n      {\r\n         return vec4(uMidLightColor, 1.0);\r\n      }\r\n      else if (texCoord.y < (margin + 5.0 * size))\r\n      {\r\n         return vec4(uLightLightColor, 1.0);\r\n      }\r\n      else // if (texCoord.y < (margin + 7.0 * size))\r\n      {\r\n         return vec4(uHighlightColor, 1.0);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      vec4 color = texture2D(uTexture, texCoord);\r\n\r\n      // define the terminator as the point where things are 50% in shadow\r\n      float terminator = ((uShadowAlpha + uLightAlpha) / 2.0);\r\n      if (color.a > 1.0 && color.a <= terminator)\r\n      {\r\n         vec3 c = closest(color.rgb, uShadowColor, uReflectedLightColor, uDarkAccentColor);\r\n         return vec4(c, 1.0);\r\n      }\r\n      else if (color.a > terminator)\r\n      {\r\n         // only render the highlight where it's contribution is significant, i.e. greater\r\n         // than some threshold\r\n         const float SPECULAR_THRESHOLD = 0.1;\r\n         if (color.a > (uLightAlpha + SPECULAR_THRESHOLD))\r\n         {\r\n            return vec4(uHighlightColor, 1.0);\r\n         }\r\n         else\r\n         {\r\n            vec3 c = closest(color.rgb, uLightLightColor, uMidLightColor, uDarkLightColor);\r\n            return vec4(c, 1.0);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         return color;\r\n      }\r\n   }\r\n}\r\n\r\nvec4 renderAsScience()\r\n{\r\n   // just return the texture\r\n   return texture2D(uTexture, texCoord);\r\n}\r\n\r\nvoid main()\r\n{\r\n   colors[0] = black;\r\n   colors[1] = blue;\r\n   colors[2] = green;\r\n   colors[3] = yellow;\r\n   colors[4] = orange;\r\n   colors[5] = red;\r\n\r\n   if (uMode == MODE_VALUE)\r\n   {\r\n      gl_FragColor = renderAsValue();\r\n   }\r\n   else if (uMode == MODE_CHROMA)\r\n   {\r\n      gl_FragColor = renderAsChroma();\r\n   }\r\n   else if (uMode == MODE_BANDS)\r\n   {\r\n      gl_FragColor = renderAsBands();\r\n   }\r\n   else\r\n   {\r\n      gl_FragColor = renderAsScience();\r\n   }\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/PathTracerToScreenVertex.glsl":
/*!***************************************************!*\
  !*** ./src/shaders/PathTracerToScreenVertex.glsl ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("attribute vec3 vertex;\r\nvarying vec2 texCoord;\r\nuniform float uScale;\r\nuniform float uXOffset;\r\nuniform float uYOffset;\r\n\r\nvoid main()\r\n{\r\n   texCoord = vertex.xy * 0.5 + 0.5;\r\n\r\n   gl_Position = vec4(uScale * vertex.x + uXOffset, uScale * vertex.y + uYOffset, 0.0, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/PathTracerToTextureFragment.glsl":
/*!******************************************************!*\
  !*** ./src/shaders/PathTracerToTextureFragment.glsl ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<VERSION>\r\n\r\n#define NOTHING\r\n\r\n#ifdef USE_TRIANGLES\r\n#define ES300\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n#ifdef ES300\r\nin vec3 initialRay;\r\n#else\r\nvarying vec3 initialRay;\r\n#endif\r\n\r\nuniform vec3 uEye;\r\nuniform float uTextureSize;\r\nuniform float uRandom;\r\nuniform sampler2D uTexture;\r\nuniform vec3 uLightPos;\r\nuniform float uLightIntensity;\r\nuniform vec3 uLightColor;\r\nuniform float uAmbientLightIntensity;\r\nuniform vec3 uObjColor;\r\nuniform float uBallRadius;\r\nuniform float uSample;\r\nuniform float uLightAlpha;\r\nuniform float uShadowAlpha;\r\n\r\n#ifdef ES300\r\nout vec4 fragColor;\r\n#else\r\n#define fragColor gl_FragColor\r\n#define texture texture2D\r\n#endif\r\n\r\nconst int MAX_BOUNCES = 10;\r\nconst float EPSILON = 0.000001;\r\nconst float OFFSET = 0.0001;\r\nconst float INFINITY = 10000.0;\r\nconst float LIGHT_SIZE = 0.1;\r\n#define BALL_CENTER vec3(0, uBallRadius, 0)\r\nconst vec3 DOME_CENTER = vec3(0, 0, 0);\r\nconst float DOME_RADIUS = 8.0;\r\nconst float VAL = 0.8;\r\nconst vec3 DOME_COLOR = vec3(VAL, VAL, VAL);\r\nconst vec3 FLOOR_COLOR = vec3(VAL, VAL, VAL);\r\nconst vec3 AMBIENT_COLOR = vec3(1.0, 1.0, 1.0);\r\nconst int NUM_LIGHTS = 6;\r\nconst float HEIGHT = 5.0;\r\nconst float RADIUS = 4.0;\r\nconst float PI = 3.14159265;\r\n\r\nstruct Light\r\n{\r\n   float intensity;\r\n   float size;\r\n   vec3 pos;\r\n   vec3 color;\r\n};\r\n\r\n Light Lights[NUM_LIGHTS];\r\n\r\n#ifdef USE_TRIANGLES\r\nstruct Triangle\r\n{\r\n   vec3 p0;\r\n   vec3 p1;\r\n   vec3 p2;\r\n};\r\n\r\nstruct Volume\r\n{\r\n   int startIndex;\r\n   int numTriangles;\r\n   vec3 boxMin;\r\n   vec3 boxMax;\r\n};\r\n\r\n// The following line is replaced with code generated in JavaScript\r\nconst int NUM_VERTICES = <NUM_VERTICES>;\r\nconst int NUM_VOLUMES = <NUM_VOLUMES>;\r\nconst int NUM_TRIANGLES = <NUM_TRIANGLES>;\r\n\r\nlayout(std140) uniform MyVerticesBlock { vec3 vertices[NUM_VERTICES]; };\r\n\r\nstruct ITriangle\r\n{\r\n   int i0;\r\n   int i1;\r\n   int i2;\r\n};\r\n\r\nlayout(std140) uniform MyTrianglesBlock { ITriangle triangles[NUM_TRIANGLES]; };\r\nTriangle getTriangle(int index)\r\n{\r\n   ITriangle tri = triangles[index];\r\n   vec3 p0 = vertices[tri.i0];\r\n   vec3 p1 = vertices[tri.i1];\r\n   vec3 p2 = vertices[tri.i2];\r\n   return Triangle(p0, p1, p2);\r\n}\r\n\r\n// The central object being rendered\r\nstruct Object\r\n{\r\n   Volume volumes[NUM_VOLUMES];\r\n   vec3 boxMin;\r\n   vec3 boxMax;\r\n};\r\n\r\nuniform Object object;\r\n\r\nbool intersectBox(const vec3 origin, const vec3 ray, const vec3 boxMin, const vec3 boxMax)\r\n{\r\n   vec3 rayInv = 1.0 / ray;\r\n   vec3 tbot = rayInv * (boxMin - origin);\r\n   vec3 ttop = rayInv * (boxMax - origin);\r\n   vec3 tmin = min(ttop, tbot);\r\n   vec3 tmax = max(ttop, tbot);\r\n   vec2 t = max(tmin.xx, tmin.yz);\r\n   float t0 = max(t.x, t.y);\r\n   t = min(tmax.xx, tmax.yz);\r\n   float t1 = min(t.x, t.y);\r\n   return t1 > max(t0, 0.0);\r\n}\r\n\r\nbool intersectVol(const vec3 origin, const vec3 ray, Volume vol)\r\n{\r\n   if (vol.numTriangles == 0)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   return intersectBox(origin, ray, vol.boxMin, vol.boxMax);\r\n}\r\n\r\nbool intersectObj(const vec3 origin, const vec3 ray, Object object)\r\n{\r\n   return intersectBox(origin, ray, object.boxMin, object.boxMax);\r\n}\r\n\r\n// Möller–Trumbore ray-triangle intersection algorithm\r\n// source: http://bit.ly/2MxnPMG\r\nfloat intersectTriangle(vec3 origin, vec3 ray, Triangle tri)\r\n{\r\n   vec3 edge1, edge2, h, s, q;\r\n   float a, f, u, v;\r\n   edge1 = tri.p1 - tri.p0;\r\n   edge2 = tri.p2 - tri.p0;\r\n\r\n   h = cross(ray, edge2);\r\n   a = dot(edge1, h);\r\n   if (abs(a) < EPSILON)\r\n      return INFINITY;\r\n\r\n   f = 1.0 / a;\r\n   s = origin - tri.p0;\r\n   u = f * dot(s, h);\r\n   if (u < 0.0 || u > 1.0)\r\n      return INFINITY;\r\n\r\n   q = cross(s, edge1);\r\n   v = f * dot(ray, q);\r\n   if (v < 0.0 || (u + v) > 1.0)\r\n      return INFINITY;\r\n\r\n   // At this stage we can compute t to find out where the intersection point is on the line.\r\n   float t = f * dot(edge2, q);\r\n   if (t <= EPSILON) // this means that there is a line intersection but not a ray intersection.\r\n      return INFINITY;\r\n\r\n   return t; // ray intersection\r\n}\r\n\r\nvec3 normalForTriangle(vec3 origin, vec3 hit, int tIndex)\r\n{\r\n   Triangle tri = getTriangle(tIndex);\r\n   vec3 normal = cross(tri.p1 - tri.p0, tri.p2 - tri.p0);\r\n   normal = normalize(normal);\r\n   if (dot(normal, origin - hit) > 0.0)\r\n   {\r\n      return normal;\r\n   }\r\n   else\r\n   {\r\n      return -normal;\r\n   }\r\n}\r\n#endif\r\n\r\nfloat intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius)\r\n{\r\n   vec3 toSphere = origin - sphereCenter;\r\n   float a = dot(ray, ray);\r\n   float b = 2.0 * dot(toSphere, ray);\r\n   float c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\r\n   float discriminant = b * b - 4.0 * a * c;\r\n   if (discriminant > 0.0)\r\n   {\r\n      float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\r\n      float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\r\n      if (t1 > 0.0)\r\n      {\r\n         return t1;\r\n      }\r\n      else if (t2 > 0.0)\r\n      {\r\n         return t2;\r\n      }\r\n   }\r\n   return INFINITY;\r\n}\r\n\r\nvec3 normalForSphere(vec3 hit, vec3 sphereCenter, float sphereRadius)\r\n{\r\n   return (hit - sphereCenter) / sphereRadius;\r\n}\r\n\r\nfloat random(vec3 scale, float seed)\r\n{\r\n   return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n}\r\n\r\nvec3 cosineWeightedDirection(float seed, vec3 normal)\r\n{\r\n   float u = random(vec3(12.9898, 78.233, 151.7182), seed);\r\n   float v = random(vec3(63.7264, 10.873, 623.6736), seed);\r\n   float r = sqrt(u);\r\n   float angle = 6.283185307179586 * v;\r\n   // compute basis from normal\r\n   vec3 sdir, tdir;\r\n   if (abs(normal.x) < .5)\r\n   {\r\n      sdir = cross(normal, vec3(1, 0, 0));\r\n   }\r\n   else\r\n   {\r\n      sdir = cross(normal, vec3(0, 1, 0));\r\n   }\r\n   tdir = cross(normal, sdir);\r\n   return r * cos(angle) * sdir + r * sin(angle) * tdir + sqrt(1. - u) * normal;\r\n}\r\n\r\nvec3 uniformlyRandomDirection(float seed)\r\n{\r\n   float u = random(vec3(12.9898, 78.233, 151.7182), seed);\r\n   float v = random(vec3(63.7264, 10.873, 623.6736), seed);\r\n   float z = 1.0 - 2.0 * u;\r\n   float r = sqrt(1.0 - z * z);\r\n   float angle = 6.283185307179586 * v;\r\n   return vec3(r * cos(angle), r * sin(angle), z);\r\n}\r\n\r\nvec3 uniformlyRandomVector(float seed)\r\n{\r\n   return uniformlyRandomDirection(seed) * sqrt(random(vec3(36.7539, 50.3658, 306.2759), seed));\r\n}\r\n\r\nbool inShadow(vec3 origin, vec3 ray, float tLight)\r\n{\r\n   float tBall = intersectSphere(origin, ray, BALL_CENTER, uBallRadius);\r\n   if (tBall < tLight)\r\n   {\r\n      return true;\r\n   }\r\n\r\n#ifdef USE_TRIANGLES\r\n   if (intersectObj(origin, ray, object))\r\n   {\r\n      for (int i = 0; i < NUM_VOLUMES; i++)\r\n      {\r\n         Volume vol = object.volumes[i];\r\n         if (intersectVol(origin, ray, vol))\r\n         {\r\n            for (int i = vol.startIndex; i < (vol.startIndex + vol.numTriangles); i++)\r\n            {\r\n               Triangle tri = getTriangle(i);\r\n               if (intersectTriangle(origin, ray, tri) < tLight)\r\n               {\r\n                  return true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n#endif\r\n\r\n   return false;\r\n}\r\n\r\n// All components are in the range [0…1], including hue.\r\nvec4 rgb2hsv(vec4 c)\r\n{\r\n   vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n   vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n   vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n   float d = q.x - min(q.w, q.y);\r\n   float e = 1.0e-10;\r\n   return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x, c.a);\r\n}\r\n\r\n// All components are in the range[0…1], including hue.\r\nvec4 hsv2rgb(vec4 c)\r\n{\r\n   vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n   vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n   return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y), c.a);\r\n}\r\n\r\nvec4 shiftTemperature(vec4 rgb, float deg, float tintStrength)\r\n{\r\n   vec4 hsv = rgb2hsv(rgb);\r\n   hsv.x += deg / 360.0;\r\n   vec4 fullTintRgb = hsv2rgb(hsv);\r\n\r\n   return mix(rgb, fullTintRgb, tintStrength);\r\n}\r\n\r\n// TODO move to a common file\r\nfloat toGray(vec4 c)\r\n{\r\n   // lots of ways to convert RGB to gray scale.\r\n\r\n   // simple averaging method\r\n   // return (c.r + c.g + c.b) / 3.0;\r\n\r\n   // relative perceptual values\r\n   // return 0.3 * c.r + 0.59 * c.g + 0.11 * c.b;\r\n\r\n   // luminosity measure\r\n   float gamma = 2.2;\r\n   float y = 0.2126 * pow(c.r, gamma) + 0.7152 * pow(c.g, gamma) + .0722 * pow(c.b, gamma);\r\n   float l = 116.0 * pow(y, 1.0 / 3.0) - 16.0;\r\n   return l / 100.0;\r\n}\r\n\r\nvec4 calculateColor(vec3 origin, vec3 ray)\r\n{\r\n   vec3 accumulatedColor = vec3(0.0);\r\n   vec3 colorMask = vec3(1.0);\r\n   vec3 eye = origin;\r\n   bool objHit = false;\r\n   bool objShadow = false;\r\n   float specularContribution = 0.0;\r\n\r\n   // main raytracing loop\r\n   for (int bounce = 0; bounce < MAX_BOUNCES; bounce++)\r\n   {\r\n      // compute the intersection with everything\r\n      float tBall = intersectSphere(origin, ray, BALL_CENTER, uBallRadius);\r\n      vec3 surfaceColor = vec3(0.5, 0.5, 0.5);\r\n\r\n      float tObj = INFINITY;\r\n      int tIndex;\r\n#ifdef USE_TRIANGLES\r\n      if (intersectObj(origin, ray, object))\r\n      {\r\n         for (int i = 0; i < NUM_VOLUMES; i++)\r\n         {\r\n            Volume vol = object.volumes[i];\r\n            if (intersectVol(origin, ray, vol))\r\n            {\r\n               for (int i = vol.startIndex; i < (vol.startIndex + vol.numTriangles); i++)\r\n               {\r\n                  Triangle tri = getTriangle(i);\r\n                  float tTri = min(tObj, intersectTriangle(origin, ray, tri));\r\n                  if (tTri < tObj)\r\n                  {\r\n                     tObj = tTri;\r\n                     tIndex = i;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n#endif\r\n\r\n      // if the first ray hits the light, return the light color. This\r\n      // simulates displaying the light\r\n      if (bounce == 0)\r\n      {\r\n         for (int i = 0; i < NUM_LIGHTS; i++)\r\n         {\r\n            float tLight = intersectSphere(origin, ray, Lights[i].pos, Lights[i].size);\r\n            if (tLight < tBall && tLight < tObj)\r\n            {\r\n               return vec4(Lights[i].intensity * Lights[i].color, 1.0);\r\n            }\r\n         }\r\n      }\r\n\r\n      // find the closest intersection\r\n      float tDome = intersectSphere(origin, ray, DOME_CENTER, DOME_RADIUS);\r\n      float tFloor = INFINITY;\r\n\r\n      // check for intersection with the ground\r\n      if (ray.y < 0.0)\r\n      {\r\n         // distance to floor = num unit vectors required to reach the floor\r\n         tFloor = -origin.y / ray.y;\r\n      }\r\n\r\n      // find the closest hit\r\n      float t = min(min(tDome, tFloor), min(tBall, tObj));\r\n\r\n      // info about hit\r\n      vec3 hit = origin + ray * t;\r\n      vec3 normal;\r\n\r\n      // calculate the normal\r\n      if (t == tFloor)\r\n      {\r\n         surfaceColor = FLOOR_COLOR;\r\n         normal = vec3(0.0, 1.0, 0.0);\r\n      }\r\n      else if (t == tBall)\r\n      {\r\n         surfaceColor = vec3(uObjColor);\r\n         normal = normalForSphere(hit, BALL_CENTER, uBallRadius);\r\n\r\n         if (bounce == 0)\r\n         {\r\n            objHit = true;\r\n         }\r\n      }\r\n#ifdef USE_TRIANGLES\r\n      else if (t == tObj)\r\n      {\r\n         surfaceColor = uObjColor;\r\n         normal = normalForTriangle(origin, hit, tIndex);\r\n\r\n         if (bounce == 0)\r\n         {\r\n            objHit = true;\r\n         }\r\n      }\r\n#endif\r\n      else if (t == tDome)\r\n      {\r\n         surfaceColor = DOME_COLOR;\r\n         normal = -normalForSphere(hit, DOME_CENTER, DOME_RADIUS);\r\n      }\r\n      else\r\n      {\r\n         break;\r\n      }\r\n\r\n      colorMask *= surfaceColor;\r\n\r\n      if (length(colorMask) < 0.01)\r\n      {\r\n         break;\r\n      }\r\n\r\n      for (int i = 0; i < NUM_LIGHTS; i++)\r\n      {\r\n         // compute diffuse lighting contribution\r\n         vec3 toLight = Lights[i].pos - hit;\r\n         vec3 toLightN = normalize(toLight);\r\n\r\n         // trace a shadow ray to the light\r\n         if (inShadow(hit + normal * OFFSET, toLightN, length(toLight)) == false)\r\n         {\r\n            // diffuse component\r\n            float diffuse = max(0.0, dot(toLightN, normal));\r\n\r\n            // specular component\r\n            vec3 toEye = eye - hit;\r\n            vec3 n2l = toLightN;\r\n            vec3 n2e = normalize(toEye);\r\n            vec3 bisector = (n2l + n2e) / length(n2l + n2e);\r\n            float specularCoefficient = 0.5;\r\n            float shininess = 100.0;\r\n            float specular = specularCoefficient * pow(max(0.0, dot(bisector, normal)), shininess);\r\n\r\n            // apply light fall off as distance squares. Use a min value for the\r\n            // light size otherwise falloff is too rapid\r\n            float radius = max(0.75, Lights[i].size);\r\n            float dist = max(1.0, (length(toLight) - radius) / radius);\r\n            float lightIntensity = Lights[i].intensity / (dist * dist);\r\n\r\n            accumulatedColor += colorMask * Lights[i].color * lightIntensity * diffuse;\r\n\r\n            // TODO define a color mask for specular reflection\r\n            //            accumulatedColor += mix(surfaceColor, Lights[i].color, 0.8) *\r\n            //            lightIntensity * specular;\r\n            accumulatedColor +=\r\n                (length(surfaceColor) * Lights[i].color) * lightIntensity * specular;\r\n\r\n            if (bounce == 0 && i == 0)\r\n            {\r\n               specularContribution += lightIntensity * specular;\r\n            }\r\n         }\r\n         else if (bounce == 0 && i == 0)\r\n         {\r\n            objShadow = true;\r\n         }\r\n      }\r\n\r\n      // calculate next origin\r\n      ray = cosineWeightedDirection(uRandom + float(bounce), normal);\r\n\r\n      origin = hit;\r\n   }\r\n\r\n   float alpha = 1.0;\r\n   if (objHit)\r\n   {\r\n      if (objShadow)\r\n      {\r\n         alpha = uShadowAlpha;\r\n      }\r\n      else\r\n      {\r\n         alpha = uLightAlpha;\r\n      }\r\n      alpha += clamp(specularContribution, 0.0, 1.0);\r\n   }\r\n\r\n   vec4 scienceColor = vec4(clamp(accumulatedColor, 0.0, 1.0), alpha);\r\n   return scienceColor;\r\n   /*\r\n   if (objHit)\r\n   {\r\n      return vec4(toArtist(scienceColor).rgb, alpha);\r\n   }\r\n   else\r\n   {\r\n      return scienceColor;\r\n   }\r\n   */\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec3 rand = uniformlyRandomVector(uRandom) * LIGHT_SIZE;\r\n\r\n   Lights[0].intensity = uLightIntensity;\r\n   Lights[0].size = LIGHT_SIZE;\r\n   Lights[0].pos = uLightPos + rand;\r\n   Lights[0].color = uLightColor;\r\n\r\n   for (int i = 1; i < NUM_LIGHTS; i++)\r\n   {\r\n      float x = RADIUS * sin(2.0 * PI * float(i) / (float(NUM_LIGHTS) - 1.0)) + rand.x;\r\n      float y = HEIGHT + rand.y;\r\n      float z = RADIUS * cos(2.0 * PI * float(i) / (float(NUM_LIGHTS) - 1.0)) + rand.z;\r\n\r\n      Lights[i].intensity = uAmbientLightIntensity;\r\n      Lights[i].size = 2.0 * LIGHT_SIZE;\r\n      Lights[i].pos = vec3(x, y, z);\r\n      Lights[i].color = AMBIENT_COLOR;\r\n   }\r\n\r\n   // merge the new color into the existing texture\r\n   vec4 textureColor = texture(uTexture, gl_FragCoord.xy / uTextureSize);\r\n   vec4 newColor = calculateColor(uEye, initialRay);\r\n   float weight = (uSample / (1.0 + uSample));\r\n   fragColor = mix(newColor, textureColor, weight);\r\n}");

/***/ }),

/***/ "./src/shaders/PathTracerToTextureVertex.glsl":
/*!****************************************************!*\
  !*** ./src/shaders/PathTracerToTextureVertex.glsl ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<VERSION>\r\n\r\n#define NOTHING\r\n#ifdef USE_TRIANGLES\r\n#define ES300\r\n#endif\r\n\r\nprecision highp float;\r\nuniform vec3 uEye, uRay00, uRay01, uRay10, uRay11;\r\n\r\n#ifdef ES300\r\nin vec3 vertex;\r\nout vec3 initialRay;\r\n#else\r\nattribute vec3 vertex;\r\nvarying vec3 initialRay;\r\n#endif \r\n\r\nvoid main()\r\n{\r\n   vec2 percent = vertex.xy * 0.5 + 0.5;\r\n   initialRay = mix(mix(uRay00, uRay01, percent.y), mix(uRay10, uRay11, percent.y), percent.x);\r\n   gl_Position = vec4(vertex, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/TextureRendererFragment.glsl":
/*!**************************************************!*\
  !*** ./src/shaders/TextureRendererFragment.glsl ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nprecision highp float;\r\nvarying vec2 texCoord;\r\nuniform sampler2D uTexture;\r\n\r\nvoid main() { gl_FragColor = texture2D(uTexture, texCoord); }\r\n");

/***/ }),

/***/ "./src/shaders/TextureRendererVertex.glsl":
/*!************************************************!*\
  !*** ./src/shaders/TextureRendererVertex.glsl ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nattribute vec2 vertex;\r\nvarying vec2 texCoord;\r\n\r\nvoid main()\r\n{\r\n   texCoord = vertex.xy * 0.5 + 0.5;\r\n\r\n   gl_Position = vec4(vertex.xy, 0.0, 1.0);\r\n}\r\n");

/***/ }),

/***/ "./src/shaders/ViewerFragment.glsl":
/*!*****************************************!*\
  !*** ./src/shaders/ViewerFragment.glsl ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("precision highp float;\r\n\r\n// interpolated values from the vertex shader\r\nvarying vec3 vNormal;\r\nvarying vec3 vVertex;\r\nvarying vec3 vShadowVertex;\r\nvarying vec3 vModelVertex;\r\n\r\nuniform mat4 model;\r\nuniform vec3 uEye;\r\nuniform bool uOrthographic;\r\n\r\n#define NORMAL 0\r\n#define CONTOUR_PLANES 1\r\n#define CONTOUR_VALUES 2\r\n#define LIGHT_AND_SHADOW 3\r\n#define HIGHLIGHT_TERMINATOR 4\r\n#define HIGHLIGHT_SHADOW 5\r\n#define EMPHASIZE_HIGHLIGHTS 6\r\n\r\nuniform int uRenderMode;\r\n\r\n// these are value between 0-1\r\nuniform float uDiffuseIntensity;\r\nuniform float uAmbientIntensity;\r\nuniform float uSpecularIntensity;\r\n\r\n// the colors we use to represent our lightest and darkest values\r\nuniform vec3 uWhiteColor;\r\nuniform vec3 uBlackColor;\r\n\r\nuniform vec3 uLightPos;\r\nuniform bool uPointLight;\r\nuniform float uFalloff;\r\nuniform float uLightIntensity;\r\nuniform float uLightIntensityAtSource;\r\n\r\nuniform bool uUseShadows;\r\nuniform sampler2D uShadowTexture;\r\n\r\nuniform vec3 uFloorCenter;\r\nuniform float uFloorRadius;\r\nuniform bool uRenderingFloor;\r\nuniform bool uShowGrid;\r\n#define MAX_CONTOURS 9\r\nuniform int uNumContours;\r\nuniform vec3 uContourColors[9];\r\nuniform float uContourAngles[9];\r\nuniform bool uShowHighlights;\r\nuniform float uShininess;\r\n\r\n// For contour shading, the minimum specular contribution required to\r\n// show something as a highlight\r\nconst float SPECULAR_THRESHOLD = 0.06;\r\n\r\nbool uShowTerminator = true;\r\n\r\nbool in_shadow()\r\n{\r\n   if (uUseShadows == false)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   // The vertex location rendered from the light source is almost in Normalized\r\n   // Device Coordinates (NDC), but the perspective division has not been\r\n   // performed yet. Perform the perspective divide. The (x,y,z) vertex location\r\n   // components are now each in the range [-1.0,+1.0].\r\n   // vec3 vertex_relative_to_light = v_Vertex_relative_to_light.xyz / v_Vertex_relative_to_light.w;\r\n   vec3 vertex = vShadowVertex;\r\n\r\n   // Convert the the values from Normalized Device Coordinates (range [-1.0,+1.0])\r\n   // to the range [0.0,1.0]. This mapping is done by scaling\r\n   // the values by 0.5, which gives values in the range [-0.5,+0.5] and then\r\n   // shifting the values by +0.5.\r\n   vertex = vertex * 0.5 + 0.5;\r\n\r\n   // Get the z value of this fragment in relationship to the light source.\r\n   // This value was stored in the shadow map (depth buffer of the frame buffer)\r\n   // which was passed to the shader as a texture map.\r\n   // vec4 textureValue = texture2D(uShadowSampler, vertex.xy);\r\n\r\n   // The texture map contains a single depth value for each pixel. However,\r\n   // the texture2D sampler always returns a color from a texture. For a\r\n   // gl.DEPTH_COMPONENT texture, the color contains the depth value in\r\n   // each of the color components. If the value was d, then the color returned\r\n   // is (d,d,d,1). This is a \"color\" (depth) value between [0.0,+1.0].\r\n   float shadowmap_distance = texture2D(uShadowTexture, vertex.xy).r;\r\n\r\n   // Test the distance between this fragment and the light source as\r\n   // calculated using the shadowmap transformation (vertex_relative_to_light.z) and\r\n   // the smallest distance between the closest fragment to the light source\r\n   // for this location, as stored in the shadowmap. When the closest\r\n   // distance to the light source was saved in the shadowmap, some\r\n   // precision was lost. Therefore we need a small tolerance factor to\r\n   // compensate for the lost precision.\r\n   float tol = 0.001;\r\n   if (vertex.z <= shadowmap_distance + tol)\r\n   {\r\n      // This surface receives full light because it is the closest surface\r\n      // to the light.\r\n      return false;\r\n   }\r\n   else\r\n   {\r\n      // This surface is in a shadow because there is a closer surface to\r\n      // the light source.\r\n      return true;\r\n   }\r\n}\r\n\r\nvec4 val2Color(float val) { return vec4(mix(uBlackColor, uWhiteColor, val), 1.0); }\r\n\r\nvec4 val2ContourColor(float val)\r\n{\r\n   val = clamp(val, 0.0, 1.0);\r\n   for (int i = 0; i < MAX_CONTOURS; i++)\r\n   {\r\n      float max = (float(i) + 1.0) / float(uNumContours);\r\n      if (val <= max)\r\n      {\r\n         return vec4(uContourColors[(MAX_CONTOURS - 1) - i], 1.0);\r\n      }\r\n   }\r\n}\r\n\r\nfloat getDiffuse(vec3 normal, vec3 toLight)\r\n{\r\n   float vDot = clamp(dot(normal, toLight), 0.0, 1.0);\r\n   float diffuse = uDiffuseIntensity * vDot;\r\n   return diffuse;\r\n}\r\n\r\nfloat getSpecular(vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = 0.0;\r\n\r\n   if (uShowHighlights)\r\n   {\r\n      vec3 reflection = normalize(2.0 * dot(normal, toLight) * normal - toLight);\r\n      float cosAngle = clamp(dot(reflection, toEye), 0.0, 1.0); // clamp to avoid values > 90 deg\r\n      specular = uSpecularIntensity * (uShininess / 15.0) * pow(cosAngle, uShininess);\r\n   }\r\n\r\n   return specular;\r\n}\r\n\r\nfloat getDistancePtToPlane(vec3 pt, vec3 plane)\r\n{\r\n   float a = plane.x;\r\n   float b = plane.y;\r\n   float c = plane.z;\r\n   float d = -(a * a + b * b + c * c);\r\n\r\n   return -(a * pt.x + b * pt.y + c * pt.z + d) / sqrt(a * a + b * b + c * c);\r\n}\r\n\r\nfloat getLightDistance(vec3 lightPos)\r\n{\r\n   if (uPointLight)\r\n   {\r\n      return length(lightPos - vVertex);\r\n   }\r\n   else\r\n   {\r\n      return getDistancePtToPlane(vVertex, lightPos);\r\n   }\r\n}\r\n\r\nfloat getValueFromLight(vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float diffuse = getDiffuse(normal, toLight);\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n\r\n   float falloff = 1.0;\r\n   if (uFalloff > 0.0)\r\n   {\r\n      float vDot = dot(normal, toLight);\r\n\r\n      float vDistance = getLightDistance(uLightPos);\r\n      falloff = uLightIntensityAtSource / (vDistance * vDistance);\r\n\r\n      // the light only shines one way\r\n      if (vDistance < 0.0)\r\n      {\r\n         diffuse = 0.0;\r\n         specular = 0.0;\r\n      }\r\n   }\r\n\r\n   return uAmbientIntensity + uLightIntensity * falloff * (diffuse + specular);\r\n}\r\n\r\nvec4 getContourPlaneColor(float vDot, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n   if (specular > SPECULAR_THRESHOLD)\r\n   {\r\n      return val2Color(uAmbientIntensity + uDiffuseIntensity + uSpecularIntensity);\r\n   }\r\n\r\n   float angle = (180.0 / 3.1415926) * acos(vDot);\r\n   if (angle > 90.0)\r\n   {\r\n      return val2Color(uAmbientIntensity);\r\n   }\r\n   else\r\n   {\r\n      for (int i = 0; i < MAX_CONTOURS; i++)\r\n      {\r\n         if (i < uNumContours)\r\n         {\r\n            if (angle < uContourAngles[i])\r\n            {\r\n               return vec4(uContourColors[i], 1.0);\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\nvec4 getContourValueColor(float vDot, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   float specular = getSpecular(normal, toLight, toEye);\r\n   if (specular > SPECULAR_THRESHOLD)\r\n   {\r\n      return vec4(1.0, 1.0, 1.0, 1.0);\r\n   }\r\n\r\n   float val = getValueFromLight(normal, toLight, toEye);\r\n   return val2ContourColor(val);\r\n}\r\n\r\nfloat round(float val) { return floor(val + 0.5); }\r\n\r\nfloat getFloorGridAdjustment(float dist)\r\n{\r\n   float thickness = 0.001;\r\n   float alias = 0.005;\r\n\r\n   if (dist < (thickness + alias))\r\n   {\r\n      if (dist < thickness)\r\n      {\r\n         return 0.5;\r\n      }\r\n      else\r\n      {\r\n         return 0.5 * (1.0 + (dist - thickness) / alias);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      return 1.0;\r\n   }\r\n}\r\n\r\nvec4 getFloorColor(bool inShadow, vec3 normal, vec3 toLight, vec3 toEye)\r\n{\r\n   vec4 fragColor;\r\n\r\n   // gradiate out the background from half transparent to full transparency\r\n   vec3 center = (model * vec4(uFloorCenter, 1.0)).xyz;\r\n   float dist = length(center - vVertex);\r\n   float a = 0.5 * (1.0 - dist / uFloorRadius);\r\n\r\n   float gridFactor = 1.0;\r\n   if (uShowGrid)\r\n   {\r\n      float circle = getFloorGridAdjustment(abs(dist - round(dist)));\r\n      float x = getFloorGridAdjustment(abs(vModelVertex.x - round(vModelVertex.x)));\r\n      float z = getFloorGridAdjustment(abs(vModelVertex.z - round(vModelVertex.z)));\r\n\r\n      gridFactor = min(circle, min(x, z));\r\n   }\r\n\r\n   float val = 0.0;\r\n   if (inShadow)\r\n   {\r\n      val = uAmbientIntensity;\r\n   }\r\n   else\r\n   {\r\n      val = getValueFromLight(normal, toLight, toEye);\r\n   }\r\n\r\n   fragColor = val2Color(gridFactor * val);\r\n   fragColor.a = a;\r\n\r\n   return fragColor;\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec3 toLight;\r\n   if (uPointLight)\r\n   {\r\n      toLight = normalize(uLightPos - vVertex);\r\n   }\r\n   else\r\n   {\r\n      toLight = normalize(uLightPos);\r\n   }\r\n\r\n   bool inShadow = in_shadow();\r\n\r\n   vec3 toEye;\r\n   if (uOrthographic)\r\n   {\r\n      toEye = vec3(0.0, 0.0, 1.0);\r\n   }\r\n   else\r\n   {\r\n      toEye = normalize(uEye - vVertex);\r\n   }\r\n\r\n   vec3 normal = normalize(vNormal); // vNormal is interpolated and nolonger normal\r\n\r\n   // swap normals for back facing triangles\r\n   if (dot(normal, toEye) < 0.0)\r\n   {\r\n      normal = -normal;\r\n   }\r\n\r\n   // compute diffuse contribution = cos of angle between the vectors (dot product)\r\n   float vDot = dot(normal, toLight);\r\n\r\n   vec4 fragColor;\r\n   if (uRenderingFloor)\r\n   {\r\n      fragColor = getFloorColor(inShadow, normal, toLight, toEye);\r\n   }\r\n   else\r\n   {\r\n      if (uRenderMode == CONTOUR_PLANES)\r\n      {\r\n         if (inShadow)\r\n         {\r\n            fragColor = val2Color(uAmbientIntensity);\r\n         }\r\n         else\r\n         {\r\n            fragColor = getContourPlaneColor(vDot, normal, toLight, toEye);\r\n         }\r\n      }\r\n      else if (uRenderMode == CONTOUR_VALUES)\r\n      {\r\n         if (inShadow)\r\n         {\r\n            fragColor = val2ContourColor(uAmbientIntensity);\r\n         }\r\n         else\r\n         {\r\n            fragColor = getContourValueColor(vDot, normal, toLight, toEye);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         vec4 highlightColor = vec4(0.0, 0.7, 0.7, 1.0);\r\n\r\n         if (inShadow)\r\n         {\r\n            if (uRenderMode == HIGHLIGHT_SHADOW)\r\n            {\r\n               fragColor = highlightColor;\r\n            }\r\n            else if (uRenderMode == LIGHT_AND_SHADOW)\r\n            {\r\n               fragColor = val2Color(uAmbientIntensity);\r\n            }\r\n            else\r\n            {\r\n               // when in shadow, apply slight shading as if the light\r\n               // were coming from the eye.\r\n               vec3 toShadowLight = vec3(0.0, 0.0, 1.0);\r\n               float val = getValueFromLight(normal, toShadowLight, toEye) / 20.0;\r\n               fragColor = val2Color(uAmbientIntensity + val);\r\n            }\r\n         }\r\n         else\r\n         {\r\n            if (uRenderMode == LIGHT_AND_SHADOW)\r\n            {\r\n               fragColor = val2Color(uAmbientIntensity + 0.75 * uDiffuseIntensity);\r\n               vec4 shadowColor = val2Color(uAmbientIntensity);\r\n\r\n               float vDot = dot(normal, toLight);\r\n               float angle = (180.0 / 3.1415926) * acos(vDot);\r\n               float range = 8.0; // degrees\r\n               float percentTerminator = clamp((angle - (90.0 - range)) / (range / 2.0), 0.0, 1.0);\r\n               fragColor = mix(fragColor, shadowColor, percentTerminator);\r\n            }\r\n            else if (uRenderMode == HIGHLIGHT_SHADOW || uRenderMode == HIGHLIGHT_TERMINATOR)\r\n            {\r\n               // fade highlighting from terminator through the shadow\r\n               float val = getValueFromLight(normal, toLight, toEye);\r\n               fragColor = val2Color(val);\r\n\r\n               float vDot = dot(normal, toLight);\r\n               float angle = (180.0 / 3.1415926) * acos(vDot);\r\n               float range = 8.0; // degrees\r\n               float percentTerminator;\r\n\r\n               if (uRenderMode == HIGHLIGHT_SHADOW)\r\n               {\r\n                  percentTerminator = clamp((angle - (90.0 - range)) / (range), 0.0, 1.0);\r\n               }\r\n               else\r\n               {\r\n                  if (angle > 90.0)\r\n                  {\r\n                     range = 2.0;\r\n                     percentTerminator = clamp(1.0 - (angle - 90.0) / range, 0.0, 1.0);\r\n                  }\r\n                  else\r\n                  {\r\n                     percentTerminator = clamp((angle - (90.0 - range)) / (range), 0.0, 1.0);\r\n                  }\r\n               }\r\n               fragColor = mix(fragColor, highlightColor, percentTerminator);\r\n            }\r\n            else\r\n            {\r\n               float val = getValueFromLight(normal, toLight, toEye);\r\n               fragColor = val2Color(val);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   gl_FragColor = fragColor;\r\n}");

/***/ }),

/***/ "./src/shaders/ViewerVertex.glsl":
/*!***************************************!*\
  !*** ./src/shaders/ViewerVertex.glsl ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("attribute vec3 aVertex;\r\nattribute vec3 aNormal;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 lightView;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec3 vVertex;\r\nvarying vec3 vShadowVertex;\r\nvarying vec3 vModelVertex;\r\n\r\nvoid main()\r\n{\r\n   gl_Position = projection * view * model * vec4(aVertex, 1.0);\r\n   vNormal = (model * vec4(aNormal, 0.0)).xyz;\r\n   vVertex = (model * vec4(aVertex, 1.0)).xyz;\r\n   vShadowVertex = (lightView * model * vec4(aVertex, 1.0)).xyz;\r\n   vModelVertex = aVertex;\r\n}");

/***/ }),

/***/ "./src/styles/styles.css":
/*!*******************************!*\
  !*** ./src/styles/styles.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/styles.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,